(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{top-level-eval-hook 4370}#
     (lambda (#{x 35759}# #{mod 35760}#)
       (primitive-eval #{x 35759}#)))
   (#{maybe-name-value! 4375}#
     (lambda (#{name 18991}# #{val 18992}#)
       (if (if (struct? #{val 18992}#)
             (eq? (struct-vtable #{val 18992}#)
                  (vector-ref %expanded-vtables 14))
             #f)
         (let ((#{meta 18999}# (struct-ref #{val 18992}# 1)))
           (if (not (assq 'name #{meta 18999}#))
             (let ((#{v 19004}#
                     (cons (cons 'name #{name 18991}#) #{meta 18999}#)))
               (struct-set! #{val 18992}# 1 #{v 19004}#)))))))
   (#{build-call 4377}#
     (lambda (#{source 18736}#
              #{fun-exp 18737}#
              #{arg-exps 18738}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{source 18736}#
         #{fun-exp 18737}#
         #{arg-exps 18738}#)))
   (#{build-conditional 4378}#
     (lambda (#{source 18744}#
              #{test-exp 18745}#
              #{then-exp 18746}#
              #{else-exp 18747}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{source 18744}#
         #{test-exp 18745}#
         #{then-exp 18746}#
         #{else-exp 18747}#)))
   (#{build-dynlet 4379}#
     (lambda (#{source 18754}#
              #{fluids 18755}#
              #{vals 18756}#
              #{body 18757}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 18)
         #{source 18754}#
         #{fluids 18755}#
         #{vals 18756}#
         #{body 18757}#)))
   (#{build-lexical-reference 4380}#
     (lambda (#{type 35761}#
              #{source 35762}#
              #{name 35763}#
              #{var 35764}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{source 35762}#
         #{name 35763}#
         #{var 35764}#)))
   (#{build-lexical-assignment 4381}#
     (lambda (#{source 18764}#
              #{name 18765}#
              #{var 18766}#
              #{exp 18767}#)
       (begin
         (if (if (struct? #{exp 18767}#)
               (eq? (struct-vtable #{exp 18767}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 18783}# (struct-ref #{exp 18767}# 1)))
             (if (not (assq 'name #{meta 18783}#))
               (let ((#{v 18790}#
                       (cons (cons 'name #{name 18765}#) #{meta 18783}#)))
                 (struct-set! #{exp 18767}# 1 #{v 18790}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 4)
           #{source 18764}#
           #{name 18765}#
           #{var 18766}#
           #{exp 18767}#))))
   (#{analyze-variable 4382}#
     (lambda (#{mod 35770}#
              #{var 35771}#
              #{modref-cont 35772}#
              #{bare-cont 35773}#)
       (if (not #{mod 35770}#)
         (#{bare-cont 35773}# #{var 35771}#)
         (let ((#{kind 35774}# (car #{mod 35770}#))
               (#{mod 35775}# (cdr #{mod 35770}#)))
           (if (eqv? #{kind 35774}# 'public)
             (#{modref-cont 35772}#
               #{mod 35775}#
               #{var 35771}#
               #t)
             (if (eqv? #{kind 35774}# 'private)
               (if (not (equal?
                          #{mod 35775}#
                          (module-name (current-module))))
                 (#{modref-cont 35772}#
                   #{mod 35775}#
                   #{var 35771}#
                   #f)
                 (#{bare-cont 35773}# #{var 35771}#))
               (if (eqv? #{kind 35774}# 'bare)
                 (#{bare-cont 35773}# #{var 35771}#)
                 (if (eqv? #{kind 35774}# 'hygiene)
                   (if (if (not (equal?
                                  #{mod 35775}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 35775}#)
                           #{var 35771}#)
                         #f)
                     (#{modref-cont 35772}#
                       #{mod 35775}#
                       #{var 35771}#
                       #f)
                     (#{bare-cont 35773}# #{var 35771}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 35771}#
                     #{mod 35775}#)))))))))
   (#{build-global-reference 4383}#
     (lambda (#{source 35790}# #{var 35791}# #{mod 35792}#)
       (#{analyze-variable 4382}#
         #{mod 35792}#
         #{var 35791}#
         (lambda (#{mod 35795}# #{var 35796}# #{public? 35797}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 5)
             #{source 35790}#
             #{mod 35795}#
             #{var 35796}#
             #{public? 35797}#))
         (lambda (#{var 35804}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 7)
             #{source 35790}#
             #{var 35804}#)))))
   (#{build-global-assignment 4384}#
     (lambda (#{source 18799}#
              #{var 18800}#
              #{exp 18801}#
              #{mod 18802}#)
       (begin
         (if (if (struct? #{exp 18801}#)
               (eq? (struct-vtable #{exp 18801}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 18818}# (struct-ref #{exp 18801}# 1)))
             (if (not (assq 'name #{meta 18818}#))
               (let ((#{v 18825}#
                       (cons (cons 'name #{var 18800}#) #{meta 18818}#)))
                 (struct-set! #{exp 18801}# 1 #{v 18825}#)))))
         (#{analyze-variable 4382}#
           #{mod 18802}#
           #{var 18800}#
           (lambda (#{mod 18830}# #{var 18831}# #{public? 18832}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{source 18799}#
               #{mod 18830}#
               #{var 18831}#
               #{public? 18832}#
               #{exp 18801}#))
           (lambda (#{var 18840}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{source 18799}#
               #{var 18840}#
               #{exp 18801}#))))))
   (#{build-global-definition 4385}#
     (lambda (#{source 35809}# #{var 35810}# #{exp 35811}#)
       (begin
         (if (if (struct? #{exp 35811}#)
               (eq? (struct-vtable #{exp 35811}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 35827}# (struct-ref #{exp 35811}# 1)))
             (if (not (assq 'name #{meta 35827}#))
               (let ((#{v 35834}#
                       (cons (cons 'name #{var 35810}#) #{meta 35827}#)))
                 (struct-set! #{exp 35811}# 1 #{v 35834}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 9)
           #{source 35809}#
           #{var 35810}#
           #{exp 35811}#))))
   (#{build-simple-lambda 4386}#
     (lambda (#{src 18846}#
              #{req 18847}#
              #{rest 18848}#
              #{vars 18849}#
              #{meta 18850}#
              #{exp 18851}#)
       (let ((#{body 18857}#
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 15)
                 #{src 18846}#
                 #{req 18847}#
                 #f
                 #{rest 18848}#
                 #f
                 '()
                 #{vars 18849}#
                 #{exp 18851}#
                 #f)))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 14)
           #{src 18846}#
           #{meta 18850}#
           #{body 18857}#))))
   (#{build-primcall 4389}#
     (lambda (#{src 18869}# #{name 18870}# #{args 18871}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 12)
         #{src 18869}#
         #{name 18870}#
         #{args 18871}#)))
   (#{build-sequence 4392}#
     (lambda (#{src 35842}# #{exps 35843}#)
       (if (null? (cdr #{exps 35843}#))
         (car #{exps 35843}#)
         (let ((#{head 35847}# (car #{exps 35843}#))
               (#{tail 35848}#
                 (#{build-sequence 4392}# #f (cdr #{exps 35843}#))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             #{src 35842}#
             #{head 35847}#
             #{tail 35848}#)))))
   (#{build-named-let 4394}#
     (lambda (#{src 18877}#
              #{ids 18878}#
              #{vars 18879}#
              #{val-exps 18880}#
              #{body-exp 18881}#)
       (let ((#{f 18882}# (car #{vars 18879}#))
             (#{f-name 18883}# (car #{ids 18878}#))
             (#{vars 18884}# (cdr #{vars 18879}#))
             (#{ids 18885}# (cdr #{ids 18878}#)))
         (let ((#{proc 18886}#
                 (let ((#{body 18906}#
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 15)
                           #{src 18877}#
                           #{ids 18885}#
                           #f
                           #f
                           #f
                           '()
                           #{vars 18884}#
                           #{body-exp 18881}#
                           #f)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 14)
                     #{src 18877}#
                     '()
                     #{body 18906}#))))
           (begin
             (if (if (struct? #{proc 18886}#)
                   (eq? (struct-vtable #{proc 18886}#)
                        (vector-ref %expanded-vtables 14))
                   #f)
               (let ((#{meta 18930}# (struct-ref #{proc 18886}# 1)))
                 (if (not (assq 'name #{meta 18930}#))
                   (let ((#{v 18937}#
                           (cons (cons 'name #{f-name 18883}#)
                                 #{meta 18930}#)))
                     (struct-set! #{proc 18886}# 1 #{v 18937}#)))))
             (for-each
               #{maybe-name-value! 4375}#
               #{ids 18885}#
               #{val-exps 18880}#)
             (let ((#{names 18961}# (list #{f-name 18883}#))
                   (#{gensyms 18962}# (list #{f 18882}#))
                   (#{vals 18963}# (list #{proc 18886}#))
                   (#{body 18964}#
                     (let ((#{fun-exp 18968}#
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 3)
                               #{src 18877}#
                               #{f-name 18883}#
                               #{f 18882}#)))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 11)
                         #{src 18877}#
                         #{fun-exp 18968}#
                         #{val-exps 18880}#))))
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 17)
                 #{src 18877}#
                 #f
                 #{names 18961}#
                 #{gensyms 18962}#
                 #{vals 18963}#
                 #{body 18964}#)))))))
   (#{build-letrec 4395}#
     (lambda (#{src 18984}#
              #{in-order? 18985}#
              #{ids 18986}#
              #{vars 18987}#
              #{val-exps 18988}#
              #{body-exp 18989}#)
       (if (null? #{vars 18987}#)
         #{body-exp 18989}#
         (begin
           (for-each
             #{maybe-name-value! 4375}#
             #{ids 18986}#
             #{val-exps 18988}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 17)
             #{src 18984}#
             #{in-order? 18985}#
             #{ids 18986}#
             #{vars 18987}#
             #{val-exps 18988}#
             #{body-exp 18989}#)))))
   (#{source-annotation 4404}#
     (lambda (#{x 19015}#)
       (if (if (vector? #{x 19015}#)
             (if (= (vector-length #{x 19015}#) 4)
               (eq? (vector-ref #{x 19015}# 0) 'syntax-object)
               #f)
             #f)
         (#{source-annotation 4404}#
           (vector-ref #{x 19015}# 1))
         (if (pair? #{x 19015}#)
           (let ((#{props 19030}# (source-properties #{x 19015}#)))
             (if (pair? #{props 19030}#) #{props 19030}# #f))
           #f))))
   (#{extend-env 4405}#
     (lambda (#{labels 19032}# #{bindings 19033}# #{r 19034}#)
       (if (null? #{labels 19032}#)
         #{r 19034}#
         (#{extend-env 4405}#
           (cdr #{labels 19032}#)
           (cdr #{bindings 19033}#)
           (cons (cons (car #{labels 19032}#)
                       (car #{bindings 19033}#))
                 #{r 19034}#)))))
   (#{extend-var-env 4406}#
     (lambda (#{labels 19035}# #{vars 19036}# #{r 19037}#)
       (if (null? #{labels 19035}#)
         #{r 19037}#
         (#{extend-var-env 4406}#
           (cdr #{labels 19035}#)
           (cdr #{vars 19036}#)
           (cons (cons (car #{labels 19035}#)
                       (cons 'lexical (car #{vars 19036}#)))
                 #{r 19037}#)))))
   (#{macros-only-env 4407}#
     (lambda (#{r 19038}#)
       (if (null? #{r 19038}#)
         '()
         (let ((#{a 19039}# (car #{r 19038}#)))
           (if (let ((#{t 19042}# (car (cdr #{a 19039}#))))
                 (if (eq? #{t 19042}# 'macro)
                   #t
                   (eq? #{t 19042}# 'syntax-parameter)))
             (cons #{a 19039}#
                   (#{macros-only-env 4407}# (cdr #{r 19038}#)))
             (#{macros-only-env 4407}# (cdr #{r 19038}#)))))))
   (#{global-extend 4408}#
     (lambda (#{type 19044}# #{sym 19045}# #{val 19046}#)
       (module-define!
         (current-module)
         #{sym 19045}#
         (make-syntax-transformer
           #{sym 19045}#
           #{type 19044}#
           #{val 19046}#))))
   (#{id? 4410}#
     (lambda (#{x 11968}#)
       (if (symbol? #{x 11968}#)
         #t
         (if (if (vector? #{x 11968}#)
               (if (= (vector-length #{x 11968}#) 4)
                 (eq? (vector-ref #{x 11968}# 0) 'syntax-object)
                 #f)
               #f)
           (symbol? (vector-ref #{x 11968}# 1))
           #f))))
   (#{gen-labels 4413}#
     (lambda (#{ls 19056}#)
       (if (null? #{ls 19056}#)
         '()
         (cons (symbol->string (gensym "i"))
               (#{gen-labels 4413}# (cdr #{ls 19056}#))))))
   (#{make-binding-wrap 4424}#
     (lambda (#{ids 19060}# #{labels 19061}# #{w 19062}#)
       (if (null? #{ids 19060}#)
         #{w 19062}#
         (cons (car #{w 19062}#)
               (cons (let ((#{labelvec 19063}#
                             (list->vector #{labels 19061}#)))
                       (let ((#{n 19064}# (vector-length #{labelvec 19063}#)))
                         (let ((#{symnamevec 19065}# (make-vector #{n 19064}#))
                               (#{marksvec 19066}# (make-vector #{n 19064}#)))
                           (begin
                             (letrec*
                               ((#{f 19067}#
                                  (lambda (#{ids 19266}# #{i 19267}#)
                                    (if (not (null? #{ids 19266}#))
                                      (call-with-values
                                        (lambda ()
                                          (let ((#{x 19270}#
                                                  (car #{ids 19266}#)))
                                            (if (if (vector? #{x 19270}#)
                                                  (if (= (vector-length
                                                           #{x 19270}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{x 19270}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (values
                                                (vector-ref #{x 19270}# 1)
                                                (let ((#{m1 19286}#
                                                        (car #{w 19062}#))
                                                      (#{m2 19287}#
                                                        (car (vector-ref
                                                               #{x 19270}#
                                                               2))))
                                                  (if (null? #{m2 19287}#)
                                                    #{m1 19286}#
                                                    (append
                                                      #{m1 19286}#
                                                      #{m2 19287}#))))
                                              (values
                                                #{x 19270}#
                                                (car #{w 19062}#)))))
                                        (lambda (#{symname 19307}#
                                                 #{marks 19308}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 19065}#
                                              #{i 19267}#
                                              #{symname 19307}#)
                                            (vector-set!
                                              #{marksvec 19066}#
                                              #{i 19267}#
                                              #{marks 19308}#)
                                            (#{f 19067}#
                                              (cdr #{ids 19266}#)
                                              (#{1+}# #{i 19267}#)))))))))
                               (#{f 19067}# #{ids 19060}# 0))
                             (vector
                               'ribcage
                               #{symnamevec 19065}#
                               #{marksvec 19066}#
                               #{labelvec 19063}#)))))
                     (cdr #{w 19062}#))))))
   (#{same-marks? 4428}#
     (lambda (#{x 35849}# #{y 35850}#)
       (if (eq? #{x 35849}# #{y 35850}#)
         (eq? #{x 35849}# #{y 35850}#)
         (if (not (null? #{x 35849}#))
           (if (not (null? #{y 35850}#))
             (if (eq? (car #{x 35849}#) (car #{y 35850}#))
               (#{same-marks? 4428}#
                 (cdr #{x 35849}#)
                 (cdr #{y 35850}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 4429}#
     (lambda (#{id 35858}# #{w 35859}# #{mod 35860}#)
       (letrec*
         ((#{search 35861}#
            (lambda (#{sym 35927}#
                     #{subst 35928}#
                     #{marks 35929}#
                     #{mod 35930}#)
              (if (null? #{subst 35928}#)
                (values #f #{marks 35929}#)
                (let ((#{fst 35931}# (car #{subst 35928}#)))
                  (if (eq? #{fst 35931}# 'shift)
                    (#{search 35861}#
                      #{sym 35927}#
                      (cdr #{subst 35928}#)
                      (cdr #{marks 35929}#)
                      #{mod 35930}#)
                    (let ((#{symnames 35933}# (vector-ref #{fst 35931}# 1)))
                      (if (vector? #{symnames 35933}#)
                        (#{search-vector-rib 35863}#
                          #{sym 35927}#
                          #{subst 35928}#
                          #{marks 35929}#
                          #{symnames 35933}#
                          #{fst 35931}#
                          #{mod 35930}#)
                        (#{search-list-rib 35862}#
                          #{sym 35927}#
                          #{subst 35928}#
                          #{marks 35929}#
                          #{symnames 35933}#
                          #{fst 35931}#
                          #{mod 35930}#))))))))
          (#{search-list-rib 35862}#
            (lambda (#{sym 36108}#
                     #{subst 36109}#
                     #{marks 36110}#
                     #{symnames 36111}#
                     #{ribcage 36112}#
                     #{mod 36113}#)
              (letrec*
                ((#{f 36114}#
                   (lambda (#{symnames 36117}# #{i 36118}#)
                     (if (null? #{symnames 36117}#)
                       (#{search 35861}#
                         #{sym 36108}#
                         (cdr #{subst 36109}#)
                         #{marks 36110}#
                         #{mod 36113}#)
                       (if (if (eq? (car #{symnames 36117}#) #{sym 36108}#)
                             (#{same-marks? 4428}#
                               #{marks 36110}#
                               (list-ref
                                 (vector-ref #{ribcage 36112}# 2)
                                 #{i 36118}#))
                             #f)
                         (let ((#{n 36264}#
                                 (list-ref
                                   (vector-ref #{ribcage 36112}# 3)
                                   #{i 36118}#)))
                           (if (pair? #{n 36264}#)
                             (if (equal? #{mod 36113}# (car #{n 36264}#))
                               (values (cdr #{n 36264}#) #{marks 36110}#)
                               (#{f 36114}#
                                 (cdr #{symnames 36117}#)
                                 (#{1+}# #{i 36118}#)))
                             (values #{n 36264}# #{marks 36110}#)))
                         (#{f 36114}#
                           (cdr #{symnames 36117}#)
                           (#{1+}# #{i 36118}#)))))))
                (#{f 36114}# #{symnames 36111}# 0))))
          (#{search-vector-rib 35863}#
            (lambda (#{sym 36269}#
                     #{subst 36270}#
                     #{marks 36271}#
                     #{symnames 36272}#
                     #{ribcage 36273}#
                     #{mod 36274}#)
              (let ((#{n 36275}# (vector-length #{symnames 36272}#)))
                (letrec*
                  ((#{f 36276}#
                     (lambda (#{i 36279}#)
                       (if (= #{i 36279}# #{n 36275}#)
                         (#{search 35861}#
                           #{sym 36269}#
                           (cdr #{subst 36270}#)
                           #{marks 36271}#
                           #{mod 36274}#)
                         (if (if (eq? (vector-ref
                                        #{symnames 36272}#
                                        #{i 36279}#)
                                      #{sym 36269}#)
                               (#{same-marks? 4428}#
                                 #{marks 36271}#
                                 (vector-ref
                                   (vector-ref #{ribcage 36273}# 2)
                                   #{i 36279}#))
                               #f)
                           (let ((#{n 36426}#
                                   (vector-ref
                                     (vector-ref #{ribcage 36273}# 3)
                                     #{i 36279}#)))
                             (if (pair? #{n 36426}#)
                               (if (equal? #{mod 36274}# (car #{n 36426}#))
                                 (values (cdr #{n 36426}#) #{marks 36271}#)
                                 (#{f 36276}# (#{1+}# #{i 36279}#)))
                               (values #{n 36426}# #{marks 36271}#)))
                           (#{f 36276}# (#{1+}# #{i 36279}#)))))))
                  (#{f 36276}# 0))))))
         (if (symbol? #{id 35858}#)
           (let ((#{t 35864}#
                   (#{search 35861}#
                     #{id 35858}#
                     (cdr #{w 35859}#)
                     (car #{w 35859}#)
                     #{mod 35860}#)))
             (if #{t 35864}# #{t 35864}# #{id 35858}#))
           (if (if (vector? #{id 35858}#)
                 (if (= (vector-length #{id 35858}#) 4)
                   (eq? (vector-ref #{id 35858}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{id 35879}# (vector-ref #{id 35858}# 1))
                   (#{w1 35880}# (vector-ref #{id 35858}# 2))
                   (#{mod 35881}# (vector-ref #{id 35858}# 3)))
               (let ((#{marks 35882}#
                       (let ((#{m1 35892}# (car #{w 35859}#))
                             (#{m2 35893}# (car #{w1 35880}#)))
                         (if (null? #{m2 35893}#)
                           #{m1 35892}#
                           (append #{m1 35892}# #{m2 35893}#)))))
                 (call-with-values
                   (lambda ()
                     (#{search 35861}#
                       #{id 35879}#
                       (cdr #{w 35859}#)
                       #{marks 35882}#
                       #{mod 35881}#))
                   (lambda (#{new-id 35913}# #{marks 35914}#)
                     (if #{new-id 35913}#
                       #{new-id 35913}#
                       (let ((#{t 35922}#
                               (#{search 35861}#
                                 #{id 35879}#
                                 (cdr #{w1 35880}#)
                                 #{marks 35914}#
                                 #{mod 35881}#)))
                         (if #{t 35922}# #{t 35922}# #{id 35879}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 35858}#))))))
   (#{resolve-identifier 4430}#
     (lambda (#{id 19315}#
              #{w 19316}#
              #{r 19317}#
              #{mod 19318}#
              #{resolve-syntax-parameters? 19319}#)
       (let ((#{n 19323}#
               (#{id-var-name 4429}#
                 #{id 19315}#
                 #{w 19316}#
                 #{mod 19318}#)))
         (if (if (vector? #{n 19323}#)
               (if (= (vector-length #{n 19323}#) 4)
                 (eq? (vector-ref #{n 19323}# 0) 'syntax-object)
                 #f)
               #f)
           (#{resolve-identifier 4430}#
             #{n 19323}#
             #{w 19316}#
             #{r 19317}#
             #{mod 19318}#
             #{resolve-syntax-parameters? 19319}#)
           (if (symbol? #{n 19323}#)
             (let ((#{mod 19338}#
                     (if (if (vector? #{id 19315}#)
                           (if (= (vector-length #{id 19315}#) 4)
                             (eq? (vector-ref #{id 19315}# 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{id 19315}# 3)
                       #{mod 19318}#)))
               (let ((#{b 19339}#
                       (let ((#{b 19342}#
                               (let ((#{t 19343}#
                                       (begin
                                         (if (if (not #{mod 19338}#)
                                               (current-module)
                                               #f)
                                           (warn "module system is booted, we should have a module"
                                                 #{n 19323}#))
                                         (let ((#{v 19392}#
                                                 (module-variable
                                                   (if #{mod 19338}#
                                                     (resolve-module
                                                       (cdr #{mod 19338}#))
                                                     (current-module))
                                                   #{n 19323}#)))
                                           (if #{v 19392}#
                                             (if (variable-bound? #{v 19392}#)
                                               (let ((#{val 19401}#
                                                       (variable-ref
                                                         #{v 19392}#)))
                                                 (if (macro? #{val 19401}#)
                                                   (if (macro-type
                                                         #{val 19401}#)
                                                     (cons (macro-type
                                                             #{val 19401}#)
                                                           (macro-binding
                                                             #{val 19401}#))
                                                     #f)
                                                   #f))
                                               #f)
                                             #f)))))
                                 (if #{t 19343}# #{t 19343}# '(global)))))
                         (if (if #{resolve-syntax-parameters? 19319}#
                               (eq? (car #{b 19342}#) 'syntax-parameter)
                               #f)
                           (let ((#{t 19410}#
                                   (assq-ref #{r 19317}# (cdr #{b 19342}#))))
                             (if #{t 19410}#
                               #{t 19410}#
                               (cons 'macro (car (cdr #{b 19342}#)))))
                           #{b 19342}#))))
                 (if (eq? (car #{b 19339}#) 'global)
                   (values 'global #{n 19323}# #{mod 19338}#)
                   (values
                     (car #{b 19339}#)
                     (cdr #{b 19339}#)
                     #{mod 19338}#))))
             (if (string? #{n 19323}#)
               (let ((#{mod 19416}#
                       (if (if (vector? #{id 19315}#)
                             (if (= (vector-length #{id 19315}#) 4)
                               (eq? (vector-ref #{id 19315}# 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{id 19315}# 3)
                         #{mod 19318}#)))
                 (let ((#{b 19417}#
                         (let ((#{b 19420}#
                                 (let ((#{t 19421}#
                                         (assq-ref #{r 19317}# #{n 19323}#)))
                                   (if #{t 19421}#
                                     #{t 19421}#
                                     '(displaced-lexical)))))
                           (if (if #{resolve-syntax-parameters? 19319}#
                                 (eq? (car #{b 19420}#) 'syntax-parameter)
                                 #f)
                             (let ((#{t 19422}#
                                     (assq-ref #{r 19317}# (cdr #{b 19420}#))))
                               (if #{t 19422}#
                                 #{t 19422}#
                                 (cons 'macro (car (cdr #{b 19420}#)))))
                             #{b 19420}#))))
                   (values
                     (car #{b 19417}#)
                     (cdr #{b 19417}#)
                     #{mod 19416}#)))
               (error "unexpected id-var-name"
                      #{id 19315}#
                      #{w 19316}#
                      #{n 19323}#)))))))
   (#{free-id=? 4431}#
     (lambda (#{i 19435}# #{j 19436}#)
       (let ((#{mi 19437}#
               (if (if (vector? #{i 19435}#)
                     (if (= (vector-length #{i 19435}#) 4)
                       (eq? (vector-ref #{i 19435}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{i 19435}# 3)
                 #f)))
         (let ((#{mj 19438}#
                 (if (if (vector? #{j 19436}#)
                       (if (= (vector-length #{j 19436}#) 4)
                         (eq? (vector-ref #{j 19436}# 0) 'syntax-object)
                         #f)
                       #f)
                   (vector-ref #{j 19436}# 3)
                   #f)))
           (let ((#{ni 19439}#
                   (#{id-var-name 4429}#
                     #{i 19435}#
                     '(())
                     #{mi 19437}#)))
             (let ((#{nj 19440}#
                     (#{id-var-name 4429}#
                       #{j 19436}#
                       '(())
                       #{mj 19438}#)))
               (if (if (vector? #{ni 19439}#)
                     (if (= (vector-length #{ni 19439}#) 4)
                       (eq? (vector-ref #{ni 19439}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{free-id=? 4431}# #{ni 19439}# #{j 19436}#)
                 (if (if (vector? #{nj 19440}#)
                       (if (= (vector-length #{nj 19440}#) 4)
                         (eq? (vector-ref #{nj 19440}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{free-id=? 4431}# #{i 19435}# #{nj 19440}#)
                   (if (symbol? #{ni 19439}#)
                     (if (eq? #{nj 19440}#
                              (if (if (vector? #{j 19436}#)
                                    (if (= (vector-length #{j 19436}#) 4)
                                      (eq? (vector-ref #{j 19436}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (vector-ref #{j 19436}# 1)
                                #{j 19436}#))
                       (if (let ((#{bi 19512}#
                                   (module-variable
                                     (if #{mi 19437}#
                                       (resolve-module (cdr #{mi 19437}#))
                                       (current-module))
                                     (if (if (vector? #{i 19435}#)
                                           (if (= (vector-length #{i 19435}#)
                                                  4)
                                             (eq? (vector-ref #{i 19435}# 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (vector-ref #{i 19435}# 1)
                                       #{i 19435}#))))
                             (if #{bi 19512}#
                               (eq? #{bi 19512}#
                                    (module-variable
                                      (if #{mj 19438}#
                                        (resolve-module (cdr #{mj 19438}#))
                                        (current-module))
                                      (if (if (vector? #{j 19436}#)
                                            (if (= (vector-length #{j 19436}#)
                                                   4)
                                              (eq? (vector-ref #{j 19436}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (vector-ref #{j 19436}# 1)
                                        #{j 19436}#)))
                               (if (not (module-variable
                                          (if #{mj 19438}#
                                            (resolve-module (cdr #{mj 19438}#))
                                            (current-module))
                                          (if (if (vector? #{j 19436}#)
                                                (if (= (vector-length
                                                         #{j 19436}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{j 19436}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{j 19436}# 1)
                                            #{j 19436}#)))
                                 (eq? #{ni 19439}# #{nj 19440}#)
                                 #f)))
                         (eq? (module-variable
                                (if #{mi 19437}#
                                  (resolve-module (cdr #{mi 19437}#))
                                  (current-module))
                                (if (if (vector? #{i 19435}#)
                                      (if (= (vector-length #{i 19435}#) 4)
                                        (eq? (vector-ref #{i 19435}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (vector-ref #{i 19435}# 1)
                                  #{i 19435}#))
                              (module-variable
                                (if #{mj 19438}#
                                  (resolve-module (cdr #{mj 19438}#))
                                  (current-module))
                                (if (if (vector? #{j 19436}#)
                                      (if (= (vector-length #{j 19436}#) 4)
                                        (eq? (vector-ref #{j 19436}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (vector-ref #{j 19436}# 1)
                                  #{j 19436}#)))
                         #f)
                       #f)
                     (equal? #{ni 19439}# #{nj 19440}#))))))))))
   (#{bound-id=? 4432}#
     (lambda (#{i 19705}# #{j 19706}#)
       (if (if (if (vector? #{i 19705}#)
                 (if (= (vector-length #{i 19705}#) 4)
                   (eq? (vector-ref #{i 19705}# 0) 'syntax-object)
                   #f)
                 #f)
             (if (vector? #{j 19706}#)
               (if (= (vector-length #{j 19706}#) 4)
                 (eq? (vector-ref #{j 19706}# 0) 'syntax-object)
                 #f)
               #f)
             #f)
         (if (eq? (vector-ref #{i 19705}# 1)
                  (vector-ref #{j 19706}# 1))
           (#{same-marks? 4428}#
             (car (vector-ref #{i 19705}# 2))
             (car (vector-ref #{j 19706}# 2)))
           #f)
         (eq? #{i 19705}# #{j 19706}#))))
   (#{valid-bound-ids? 4433}#
     (lambda (#{ids 19875}#)
       (if (letrec*
             ((#{all-ids? 19876}#
                (lambda (#{ids 20073}#)
                  (if (null? #{ids 20073}#)
                    (null? #{ids 20073}#)
                    (if (let ((#{x 20084}# (car #{ids 20073}#)))
                          (if (symbol? #{x 20084}#)
                            #t
                            (if (if (vector? #{x 20084}#)
                                  (if (= (vector-length #{x 20084}#) 4)
                                    (eq? (vector-ref #{x 20084}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{x 20084}# 1))
                              #f)))
                      (#{all-ids? 19876}# (cdr #{ids 20073}#))
                      #f)))))
             (#{all-ids? 19876}# #{ids 19875}#))
         (#{distinct-bound-ids? 4434}# #{ids 19875}#)
         #f)))
   (#{distinct-bound-ids? 4434}#
     (lambda (#{ids 20205}#)
       (letrec*
         ((#{distinct? 20206}#
            (lambda (#{ids 20311}#)
              (if (null? #{ids 20311}#)
                (null? #{ids 20311}#)
                (if (not (#{bound-id-member? 4435}#
                           (car #{ids 20311}#)
                           (cdr #{ids 20311}#)))
                  (#{distinct? 20206}# (cdr #{ids 20311}#))
                  #f)))))
         (#{distinct? 20206}# #{ids 20205}#))))
   (#{bound-id-member? 4435}#
     (lambda (#{x 20407}# #{list 20408}#)
       (if (not (null? #{list 20408}#))
         (let ((#{t 20409}#
                 (#{bound-id=? 4432}#
                   #{x 20407}#
                   (car #{list 20408}#))))
           (if #{t 20409}#
             #{t 20409}#
             (#{bound-id-member? 4435}#
               #{x 20407}#
               (cdr #{list 20408}#))))
         #f)))
   (#{source-wrap 4437}#
     (lambda (#{x 20587}#
              #{w 20588}#
              #{s 20589}#
              #{defmod 20590}#)
       (let ((#{x 20594}#
               (begin
                 (if (if (pair? #{x 20587}#) #{s 20589}# #f)
                   (set-source-properties! #{x 20587}# #{s 20589}#))
                 #{x 20587}#)))
         (if (if (null? (car #{w 20588}#))
               (null? (cdr #{w 20588}#))
               #f)
           #{x 20594}#
           (if (if (vector? #{x 20594}#)
                 (if (= (vector-length #{x 20594}#) 4)
                   (eq? (vector-ref #{x 20594}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{expression 20626}# (vector-ref #{x 20594}# 1))
                   (#{wrap 20627}#
                     (let ((#{w2 20635}# (vector-ref #{x 20594}# 2)))
                       (let ((#{m1 20636}# (car #{w 20588}#))
                             (#{s1 20637}# (cdr #{w 20588}#)))
                         (if (null? #{m1 20636}#)
                           (if (null? #{s1 20637}#)
                             #{w2 20635}#
                             (cons (car #{w2 20635}#)
                                   (let ((#{m2 20652}# (cdr #{w2 20635}#)))
                                     (if (null? #{m2 20652}#)
                                       #{s1 20637}#
                                       (append #{s1 20637}# #{m2 20652}#)))))
                           (cons (let ((#{m2 20660}# (car #{w2 20635}#)))
                                   (if (null? #{m2 20660}#)
                                     #{m1 20636}#
                                     (append #{m1 20636}# #{m2 20660}#)))
                                 (let ((#{m2 20668}# (cdr #{w2 20635}#)))
                                   (if (null? #{m2 20668}#)
                                     #{s1 20637}#
                                     (append #{s1 20637}# #{m2 20668}#))))))))
                   (#{module 20628}# (vector-ref #{x 20594}# 3)))
               (vector
                 'syntax-object
                 #{expression 20626}#
                 #{wrap 20627}#
                 #{module 20628}#))
             (if (null? #{x 20594}#)
               #{x 20594}#
               (vector
                 'syntax-object
                 #{x 20594}#
                 #{w 20588}#
                 #{defmod 20590}#)))))))
   (#{expand-sequence 4438}#
     (lambda (#{body 36431}#
              #{r 36432}#
              #{w 36433}#
              #{s 36434}#
              #{mod 36435}#)
       (#{build-sequence 4392}#
         #{s 36434}#
         (letrec*
           ((#{dobody 36527}#
              (lambda (#{body 36614}#
                       #{r 36615}#
                       #{w 36616}#
                       #{mod 36617}#)
                (if (null? #{body 36614}#)
                  '()
                  (let ((#{first 36618}#
                          (#{expand 4443}#
                            (car #{body 36614}#)
                            #{r 36615}#
                            #{w 36616}#
                            #{mod 36617}#)))
                    (cons #{first 36618}#
                          (#{dobody 36527}#
                            (cdr #{body 36614}#)
                            #{r 36615}#
                            #{w 36616}#
                            #{mod 36617}#)))))))
           (#{dobody 36527}#
             #{body 36431}#
             #{r 36432}#
             #{w 36433}#
             #{mod 36435}#)))))
   (#{expand-top-sequence 4439}#
     (lambda (#{body 20683}#
              #{r 20684}#
              #{w 20685}#
              #{s 20686}#
              #{m 20687}#
              #{esew 20688}#
              #{mod 20689}#)
       (let ((#{r 20690}#
               (cons '("placeholder" placeholder) #{r 20684}#)))
         (let ((#{ribcage 20691}# (vector 'ribcage '() '() '())))
           (let ((#{w 20692}#
                   (cons (car #{w 20685}#)
                         (cons #{ribcage 20691}# (cdr #{w 20685}#)))))
             (letrec*
               ((#{record-definition! 20693}#
                  (lambda (#{id 24185}# #{var 24186}#)
                    (let ((#{mod 24187}#
                            (cons 'hygiene (module-name (current-module)))))
                      (let ((#{label 24193}#
                              (cons (vector-ref #{id 24185}# 3)
                                    (if (if (vector? #{var 24186}#)
                                          (if (= (vector-length #{var 24186}#)
                                                 4)
                                            (eq? (vector-ref #{var 24186}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 24255}#
                                              (vector-ref #{var 24186}# 1))
                                            (#{wrap 24256}#
                                              (let ((#{w2 24266}#
                                                      (vector-ref
                                                        #{var 24186}#
                                                        2)))
                                                (cons (let ((#{m2 24273}#
                                                              (car #{w2 24266}#)))
                                                        (if (null? #{m2 24273}#)
                                                          '(top)
                                                          (append
                                                            '(top)
                                                            #{m2 24273}#)))
                                                      (let ((#{m2 24282}#
                                                              (cdr #{w2 24266}#)))
                                                        (if (null? #{m2 24282}#)
                                                          '()
                                                          (append
                                                            '()
                                                            #{m2 24282}#))))))
                                            (#{module 24257}#
                                              (vector-ref #{var 24186}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 24255}#
                                          #{wrap 24256}#
                                          #{module 24257}#))
                                      (if (null? #{var 24186}#)
                                        #{var 24186}#
                                        (vector
                                          'syntax-object
                                          #{var 24186}#
                                          '((top))
                                          #{mod 24187}#))))))
                        (begin
                          (let ((#{update 24196}#
                                  (cons (vector-ref #{id 24185}# 1)
                                        (vector-ref #{ribcage 20691}# 1))))
                            (vector-set!
                              #{ribcage 20691}#
                              1
                              #{update 24196}#))
                          (let ((#{update 24211}#
                                  (cons (car (vector-ref #{id 24185}# 2))
                                        (vector-ref #{ribcage 20691}# 2))))
                            (vector-set!
                              #{ribcage 20691}#
                              2
                              #{update 24211}#))
                          (let ((#{update 24226}#
                                  (cons #{label 24193}#
                                        (vector-ref #{ribcage 20691}# 3))))
                            (vector-set!
                              #{ribcage 20691}#
                              3
                              #{update 24226}#)))))))
                (#{parse 20696}#
                  (lambda (#{body 20901}#
                           #{r 20902}#
                           #{w 20903}#
                           #{s 20904}#
                           #{m 20905}#
                           #{esew 20906}#
                           #{mod 20907}#)
                    (letrec*
                      ((#{lp 20908}#
                         (lambda (#{body 20995}# #{exps 20996}#)
                           (if (null? #{body 20995}#)
                             #{exps 20996}#
                             (#{lp 20908}#
                               (cdr #{body 20995}#)
                               (append
                                 (#{parse1 20697}#
                                   (car #{body 20995}#)
                                   #{r 20902}#
                                   #{w 20903}#
                                   #{s 20904}#
                                   #{m 20905}#
                                   #{esew 20906}#
                                   #{mod 20907}#)
                                 #{exps 20996}#))))))
                      (#{lp 20908}# #{body 20901}# '()))))
                (#{parse1 20697}#
                  (lambda (#{x 21070}#
                           #{r 21071}#
                           #{w 21072}#
                           #{s 21073}#
                           #{m 21074}#
                           #{esew 21075}#
                           #{mod 21076}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 4442}#
                          #{x 21070}#
                          #{r 21071}#
                          #{w 21072}#
                          (#{source-annotation 4404}# #{x 21070}#)
                          #{ribcage 20691}#
                          #{mod 21076}#
                          #f))
                      (lambda (#{type 21280}#
                               #{value 21281}#
                               #{e 21282}#
                               #{w 21283}#
                               #{s 21284}#
                               #{mod 21285}#)
                        (if (eqv? #{type 21280}# 'define-form)
                          (let ((#{id 21289}#
                                  (if (if (null? (car #{w 21283}#))
                                        (null? (cdr #{w 21283}#))
                                        #f)
                                    #{value 21281}#
                                    (if (if (vector? #{value 21281}#)
                                          (if (= (vector-length
                                                   #{value 21281}#)
                                                 4)
                                            (eq? (vector-ref #{value 21281}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 21339}#
                                              (vector-ref #{value 21281}# 1))
                                            (#{wrap 21340}#
                                              (let ((#{w2 21350}#
                                                      (vector-ref
                                                        #{value 21281}#
                                                        2)))
                                                (let ((#{m1 21351}#
                                                        (car #{w 21283}#))
                                                      (#{s1 21352}#
                                                        (cdr #{w 21283}#)))
                                                  (if (null? #{m1 21351}#)
                                                    (if (null? #{s1 21352}#)
                                                      #{w2 21350}#
                                                      (cons (car #{w2 21350}#)
                                                            (let ((#{m2 21369}#
                                                                    (cdr #{w2 21350}#)))
                                                              (if (null? #{m2 21369}#)
                                                                #{s1 21352}#
                                                                (append
                                                                  #{s1 21352}#
                                                                  #{m2 21369}#)))))
                                                    (cons (let ((#{m2 21377}#
                                                                  (car #{w2 21350}#)))
                                                            (if (null? #{m2 21377}#)
                                                              #{m1 21351}#
                                                              (append
                                                                #{m1 21351}#
                                                                #{m2 21377}#)))
                                                          (let ((#{m2 21385}#
                                                                  (cdr #{w2 21350}#)))
                                                            (if (null? #{m2 21385}#)
                                                              #{s1 21352}#
                                                              (append
                                                                #{s1 21352}#
                                                                #{m2 21385}#))))))))
                                            (#{module 21341}#
                                              (vector-ref #{value 21281}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 21339}#
                                          #{wrap 21340}#
                                          #{module 21341}#))
                                      (if (null? #{value 21281}#)
                                        #{value 21281}#
                                        (vector
                                          'syntax-object
                                          #{value 21281}#
                                          #{w 21283}#
                                          #{mod 21285}#))))))
                            (begin
                              (symbol->string (gensym "i"))
                              (let ((#{var 21291}#
                                      (if (not (equal?
                                                 (car (vector-ref
                                                        #{id 21289}#
                                                        2))
                                                 '(top)))
                                        (symbol-append
                                          (vector-ref #{id 21289}# 1)
                                          '-
                                          (string->symbol
                                            (number->string
                                              (hash (syntax->datum #{x 21070}#)
                                                    most-positive-fixnum)
                                              16)))
                                        (vector-ref #{id 21289}# 1))))
                                (begin
                                  (#{record-definition! 20693}#
                                    #{id 21289}#
                                    #{var 21291}#)
                                  (list (if (eq? #{m 21074}# 'c&e)
                                          (let ((#{x 21516}#
                                                  (#{build-global-definition 4385}#
                                                    #{s 21284}#
                                                    #{var 21291}#
                                                    (#{expand 4443}#
                                                      #{e 21282}#
                                                      #{r 21071}#
                                                      #{w 21283}#
                                                      #{mod 21285}#))))
                                            (begin
                                              (#{top-level-eval-hook 4370}#
                                                #{x 21516}#
                                                #{mod 21285}#)
                                              (lambda () #{x 21516}#)))
                                          (lambda ()
                                            (#{build-global-definition 4385}#
                                              #{s 21284}#
                                              #{var 21291}#
                                              (#{expand 4443}#
                                                #{e 21282}#
                                                #{r 21071}#
                                                #{w 21283}#
                                                #{mod 21285}#)))))))))
                          (if (if (eqv? #{type 21280}# 'define-syntax-form)
                                #t
                                (eqv? #{type 21280}#
                                      'define-syntax-parameter-form))
                            (let ((#{id 22032}#
                                    (if (if (null? (car #{w 21283}#))
                                          (null? (cdr #{w 21283}#))
                                          #f)
                                      #{value 21281}#
                                      (if (if (vector? #{value 21281}#)
                                            (if (= (vector-length
                                                     #{value 21281}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{value 21281}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (let ((#{expression 22082}#
                                                (vector-ref #{value 21281}# 1))
                                              (#{wrap 22083}#
                                                (let ((#{w2 22093}#
                                                        (vector-ref
                                                          #{value 21281}#
                                                          2)))
                                                  (let ((#{m1 22094}#
                                                          (car #{w 21283}#))
                                                        (#{s1 22095}#
                                                          (cdr #{w 21283}#)))
                                                    (if (null? #{m1 22094}#)
                                                      (if (null? #{s1 22095}#)
                                                        #{w2 22093}#
                                                        (cons (car #{w2 22093}#)
                                                              (let ((#{m2 22112}#
                                                                      (cdr #{w2 22093}#)))
                                                                (if (null? #{m2 22112}#)
                                                                  #{s1 22095}#
                                                                  (append
                                                                    #{s1 22095}#
                                                                    #{m2 22112}#)))))
                                                      (cons (let ((#{m2 22120}#
                                                                    (car #{w2 22093}#)))
                                                              (if (null? #{m2 22120}#)
                                                                #{m1 22094}#
                                                                (append
                                                                  #{m1 22094}#
                                                                  #{m2 22120}#)))
                                                            (let ((#{m2 22128}#
                                                                    (cdr #{w2 22093}#)))
                                                              (if (null? #{m2 22128}#)
                                                                #{s1 22095}#
                                                                (append
                                                                  #{s1 22095}#
                                                                  #{m2 22128}#))))))))
                                              (#{module 22084}#
                                                (vector-ref
                                                  #{value 21281}#
                                                  3)))
                                          (vector
                                            'syntax-object
                                            #{expression 22082}#
                                            #{wrap 22083}#
                                            #{module 22084}#))
                                        (if (null? #{value 21281}#)
                                          #{value 21281}#
                                          (vector
                                            'syntax-object
                                            #{value 21281}#
                                            #{w 21283}#
                                            #{mod 21285}#))))))
                              (begin
                                (symbol->string (gensym "i"))
                                (let ((#{var 22034}#
                                        (if (not (equal?
                                                   (car (vector-ref
                                                          #{id 22032}#
                                                          2))
                                                   '(top)))
                                          (symbol-append
                                            (vector-ref #{id 22032}# 1)
                                            '-
                                            (string->symbol
                                              (number->string
                                                (hash (syntax->datum
                                                        #{x 21070}#)
                                                      most-positive-fixnum)
                                                16)))
                                          (vector-ref #{id 22032}# 1))))
                                  (begin
                                    (#{record-definition! 20693}#
                                      #{id 22032}#
                                      #{var 22034}#)
                                    (if (eqv? #{m 21074}# 'c)
                                      (if (memq 'compile #{esew 21075}#)
                                        (let ((#{e 22262}#
                                                (#{expand-install-global 4440}#
                                                  #{var 22034}#
                                                  #{type 21280}#
                                                  (#{expand 4443}#
                                                    #{e 21282}#
                                                    #{r 21071}#
                                                    #{w 21283}#
                                                    #{mod 21285}#))))
                                          (begin
                                            (#{top-level-eval-hook 4370}#
                                              #{e 22262}#
                                              #{mod 21285}#)
                                            (if (memq 'load #{esew 21075}#)
                                              (list (lambda () #{e 22262}#))
                                              '())))
                                        (if (memq 'load #{esew 21075}#)
                                          (list (lambda ()
                                                  (#{expand-install-global 4440}#
                                                    #{var 22034}#
                                                    #{type 21280}#
                                                    (#{expand 4443}#
                                                      #{e 21282}#
                                                      #{r 21071}#
                                                      #{w 21283}#
                                                      #{mod 21285}#))))
                                          '()))
                                      (if (eqv? #{m 21074}# 'c&e)
                                        (let ((#{e 22782}#
                                                (#{expand-install-global 4440}#
                                                  #{var 22034}#
                                                  #{type 21280}#
                                                  (#{expand 4443}#
                                                    #{e 21282}#
                                                    #{r 21071}#
                                                    #{w 21283}#
                                                    #{mod 21285}#))))
                                          (begin
                                            (#{top-level-eval-hook 4370}#
                                              #{e 22782}#
                                              #{mod 21285}#)
                                            (list (lambda () #{e 22782}#))))
                                        (begin
                                          (if (memq 'eval #{esew 21075}#)
                                            (#{top-level-eval-hook 4370}#
                                              (#{expand-install-global 4440}#
                                                #{var 22034}#
                                                #{type 21280}#
                                                (#{expand 4443}#
                                                  #{e 21282}#
                                                  #{r 21071}#
                                                  #{w 21283}#
                                                  #{mod 21285}#))
                                              #{mod 21285}#))
                                          '())))))))
                            (if (eqv? #{type 21280}# 'begin-form)
                              (let ((#{tmp 23411}#
                                      ($sc-dispatch
                                        #{e 21282}#
                                        '(_ . each-any))))
                                (if #{tmp 23411}#
                                  (@apply
                                    (lambda (#{e1 23415}#)
                                      (#{parse 20696}#
                                        #{e1 23415}#
                                        #{r 21071}#
                                        #{w 21283}#
                                        #{s 21284}#
                                        #{m 21074}#
                                        #{esew 21075}#
                                        #{mod 21285}#))
                                    #{tmp 23411}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 21282}#)))
                              (if (eqv? #{type 21280}# 'local-syntax-form)
                                (#{expand-local-syntax 4448}#
                                  #{value 21281}#
                                  #{e 21282}#
                                  #{r 21071}#
                                  #{w 21283}#
                                  #{s 21284}#
                                  #{mod 21285}#
                                  (lambda (#{forms 23461}#
                                           #{r 23462}#
                                           #{w 23463}#
                                           #{s 23464}#
                                           #{mod 23465}#)
                                    (#{parse 20696}#
                                      #{forms 23461}#
                                      #{r 23462}#
                                      #{w 23463}#
                                      #{s 23464}#
                                      #{m 21074}#
                                      #{esew 21075}#
                                      #{mod 23465}#)))
                                (if (eqv? #{type 21280}# 'eval-when-form)
                                  (let ((#{tmp 23504}#
                                          ($sc-dispatch
                                            #{e 21282}#
                                            '(_ each-any any . each-any))))
                                    (if #{tmp 23504}#
                                      (@apply
                                        (lambda (#{x 23508}#
                                                 #{e1 23509}#
                                                 #{e2 23510}#)
                                          (let ((#{when-list 23511}#
                                                  (#{parse-when-list 4441}#
                                                    #{e 21282}#
                                                    #{x 23508}#))
                                                (#{body 23512}#
                                                  (cons #{e1 23509}#
                                                        #{e2 23510}#)))
                                            (letrec*
                                              ((#{recurse 23513}#
                                                 (lambda (#{m 24102}#
                                                          #{esew 24103}#)
                                                   (#{parse 20696}#
                                                     #{body 23512}#
                                                     #{r 21071}#
                                                     #{w 21283}#
                                                     #{s 21284}#
                                                     #{m 24102}#
                                                     #{esew 24103}#
                                                     #{mod 21285}#))))
                                              (if (eq? #{m 21074}# 'e)
                                                (if (memq 'eval
                                                          #{when-list 23511}#)
                                                  (#{recurse 23513}#
                                                    (if (memq 'expand
                                                              #{when-list 23511}#)
                                                      'c&e
                                                      'e)
                                                    '(eval))
                                                  (begin
                                                    (if (memq 'expand
                                                              #{when-list 23511}#)
                                                      (let ((#{x 23621}#
                                                              (#{expand-top-sequence 4439}#
                                                                #{body 23512}#
                                                                #{r 21071}#
                                                                #{w 21283}#
                                                                #{s 21284}#
                                                                'e
                                                                '(eval)
                                                                #{mod 21285}#)))
                                                        (primitive-eval
                                                          #{x 23621}#)))
                                                    '()))
                                                (if (memq 'load
                                                          #{when-list 23511}#)
                                                  (if (let ((#{t 23649}#
                                                              (memq 'compile
                                                                    #{when-list 23511}#)))
                                                        (if #{t 23649}#
                                                          #{t 23649}#
                                                          (let ((#{t 23702}#
                                                                  (memq 'expand
                                                                        #{when-list 23511}#)))
                                                            (if #{t 23702}#
                                                              #{t 23702}#
                                                              (if (eq? #{m 21074}#
                                                                       'c&e)
                                                                (memq 'eval
                                                                      #{when-list 23511}#)
                                                                #f)))))
                                                    (#{recurse 23513}#
                                                      'c&e
                                                      '(compile load))
                                                    (if (if (eq? #{m 21074}#
                                                                 'c)
                                                          #t
                                                          (eq? #{m 21074}#
                                                               'c&e))
                                                      (#{recurse 23513}#
                                                        'c
                                                        '(load))
                                                      '()))
                                                  (if (let ((#{t 23913}#
                                                              (memq 'compile
                                                                    #{when-list 23511}#)))
                                                        (if #{t 23913}#
                                                          #{t 23913}#
                                                          (let ((#{t 23966}#
                                                                  (memq 'expand
                                                                        #{when-list 23511}#)))
                                                            (if #{t 23966}#
                                                              #{t 23966}#
                                                              (if (eq? #{m 21074}#
                                                                       'c&e)
                                                                (memq 'eval
                                                                      #{when-list 23511}#)
                                                                #f)))))
                                                    (begin
                                                      (let ((#{x 24100}#
                                                              (#{expand-top-sequence 4439}#
                                                                #{body 23512}#
                                                                #{r 21071}#
                                                                #{w 21283}#
                                                                #{s 21284}#
                                                                'e
                                                                '(eval)
                                                                #{mod 21285}#)))
                                                        (primitive-eval
                                                          #{x 24100}#))
                                                      '())
                                                    '()))))))
                                        #{tmp 23504}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 21282}#)))
                                  (list (if (eq? #{m 21074}# 'c&e)
                                          (let ((#{x 24176}#
                                                  (#{expand-expr 4444}#
                                                    #{type 21280}#
                                                    #{value 21281}#
                                                    #{e 21282}#
                                                    #{r 21071}#
                                                    #{w 21283}#
                                                    #{s 21284}#
                                                    #{mod 21285}#)))
                                            (begin
                                              (primitive-eval #{x 24176}#)
                                              (lambda () #{x 24176}#)))
                                          (lambda ()
                                            (#{expand-expr 4444}#
                                              #{type 21280}#
                                              #{value 21281}#
                                              #{e 21282}#
                                              #{r 21071}#
                                              #{w 21283}#
                                              #{s 21284}#
                                              #{mod 21285}#))))))))))))))
               (let ((#{exps 20698}#
                       (map (lambda (#{x 20829}#) (#{x 20829}#))
                            (reverse
                              (#{parse 20696}#
                                #{body 20683}#
                                #{r 20690}#
                                #{w 20692}#
                                #{s 20686}#
                                #{m 20687}#
                                #{esew 20688}#
                                #{mod 20689}#)))))
                 (if (null? #{exps 20698}#)
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 0)
                     #{s 20686}#)
                   (#{build-sequence 4392}#
                     #{s 20686}#
                     #{exps 20698}#)))))))))
   (#{expand-install-global 4440}#
     (lambda (#{name 24304}# #{type 24305}# #{e 24306}#)
       (let ((#{exp 24312}#
               (let ((#{args 24323}#
                       (if (eq? #{type 24305}#
                                'define-syntax-parameter-form)
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #{name 24304}#)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'syntax-parameter)
                               (let ((#{args 24346}# (list #{e 24306}#)))
                                 (make-struct/no-tail
                                   (vector-ref %expanded-vtables 12)
                                   #f
                                   'list
                                   #{args 24346}#)))
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #{name 24304}#)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'macro)
                               #{e 24306}#))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'make-syntax-transformer
                   #{args 24323}#))))
         (begin
           (if (if (struct? #{exp 24312}#)
                 (eq? (struct-vtable #{exp 24312}#)
                      (vector-ref %expanded-vtables 14))
                 #f)
             (let ((#{meta 24373}# (struct-ref #{exp 24312}# 1)))
               (if (not (assq 'name #{meta 24373}#))
                 (let ((#{v 24380}#
                         (cons (cons 'name #{name 24304}#) #{meta 24373}#)))
                   (struct-set! #{exp 24312}# 1 #{v 24380}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #f
             #{name 24304}#
             #{exp 24312}#)))))
   (#{parse-when-list 4441}#
     (lambda (#{e 24391}# #{when-list 24392}#)
       (let ((#{result 24393}#
               (#{strip 4456}# #{when-list 24392}# '(()))))
         (letrec*
           ((#{lp 24394}#
              (lambda (#{l 24460}#)
                (if (null? #{l 24460}#)
                  #{result 24393}#
                  (if (let ((#{t 24462}# (car #{l 24460}#)))
                        (if (eq? #{t 24462}# 'compile)
                          #t
                          (if (eq? #{t 24462}# 'load)
                            #t
                            (if (eq? #{t 24462}# 'eval)
                              #t
                              (eq? #{t 24462}# 'expand)))))
                    (#{lp 24394}# (cdr #{l 24460}#))
                    (syntax-violation
                      'eval-when
                      "invalid situation"
                      #{e 24391}#
                      (car #{l 24460}#)))))))
           (#{lp 24394}# #{result 24393}#)))))
   (#{syntax-type 4442}#
     (lambda (#{e 24464}#
              #{r 24465}#
              #{w 24466}#
              #{s 24467}#
              #{rib 24468}#
              #{mod 24469}#
              #{for-car? 24470}#)
       (if (symbol? #{e 24464}#)
         (call-with-values
           (lambda ()
             (#{resolve-identifier 4430}#
               #{e 24464}#
               #{w 24466}#
               #{r 24465}#
               #{mod 24469}#
               #t))
           (lambda (#{type 24473}# #{value 24474}# #{mod* 24475}#)
             (if (eqv? #{type 24473}# 'macro)
               (if #{for-car? 24470}#
                 (values
                   #{type 24473}#
                   #{value 24474}#
                   #{e 24464}#
                   #{w 24466}#
                   #{s 24467}#
                   #{mod 24469}#)
                 (#{syntax-type 4442}#
                   (#{expand-macro 4446}#
                     #{value 24474}#
                     #{e 24464}#
                     #{r 24465}#
                     #{w 24466}#
                     #{s 24467}#
                     #{rib 24468}#
                     #{mod 24469}#)
                   #{r 24465}#
                   '(())
                   #{s 24467}#
                   #{rib 24468}#
                   #{mod 24469}#
                   #f))
               (if (eqv? #{type 24473}# 'global)
                 (values
                   #{type 24473}#
                   #{value 24474}#
                   #{value 24474}#
                   #{w 24466}#
                   #{s 24467}#
                   #{mod* 24475}#)
                 (values
                   #{type 24473}#
                   #{value 24474}#
                   #{e 24464}#
                   #{w 24466}#
                   #{s 24467}#
                   #{mod 24469}#)))))
         (if (pair? #{e 24464}#)
           (let ((#{first 24484}# (car #{e 24464}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 4442}#
                   #{first 24484}#
                   #{r 24465}#
                   #{w 24466}#
                   #{s 24467}#
                   #{rib 24468}#
                   #{mod 24469}#
                   #t))
               (lambda (#{ftype 24486}#
                        #{fval 24487}#
                        #{fe 24488}#
                        #{fw 24489}#
                        #{fs 24490}#
                        #{fmod 24491}#)
                 (if (eqv? #{ftype 24486}# 'lexical)
                   (values
                     'lexical-call
                     #{fval 24487}#
                     #{e 24464}#
                     #{w 24466}#
                     #{s 24467}#
                     #{mod 24469}#)
                   (if (eqv? #{ftype 24486}# 'global)
                     (values
                       'global-call
                       (vector
                         'syntax-object
                         #{fval 24487}#
                         #{w 24466}#
                         #{fmod 24491}#)
                       #{e 24464}#
                       #{w 24466}#
                       #{s 24467}#
                       #{mod 24469}#)
                     (if (eqv? #{ftype 24486}# 'macro)
                       (#{syntax-type 4442}#
                         (#{expand-macro 4446}#
                           #{fval 24487}#
                           #{e 24464}#
                           #{r 24465}#
                           #{w 24466}#
                           #{s 24467}#
                           #{rib 24468}#
                           #{mod 24469}#)
                         #{r 24465}#
                         '(())
                         #{s 24467}#
                         #{rib 24468}#
                         #{mod 24469}#
                         #{for-car? 24470}#)
                       (if (eqv? #{ftype 24486}# 'module-ref)
                         (call-with-values
                           (lambda ()
                             (#{fval 24487}#
                               #{e 24464}#
                               #{r 24465}#
                               #{w 24466}#))
                           (lambda (#{e 24512}#
                                    #{r 24513}#
                                    #{w 24514}#
                                    #{s 24515}#
                                    #{mod 24516}#)
                             (#{syntax-type 4442}#
                               #{e 24512}#
                               #{r 24513}#
                               #{w 24514}#
                               #{s 24515}#
                               #{rib 24468}#
                               #{mod 24516}#
                               #{for-car? 24470}#)))
                         (if (eqv? #{ftype 24486}# 'core)
                           (values
                             'core-form
                             #{fval 24487}#
                             #{e 24464}#
                             #{w 24466}#
                             #{s 24467}#
                             #{mod 24469}#)
                           (if (eqv? #{ftype 24486}# 'local-syntax)
                             (values
                               'local-syntax-form
                               #{fval 24487}#
                               #{e 24464}#
                               #{w 24466}#
                               #{s 24467}#
                               #{mod 24469}#)
                             (if (eqv? #{ftype 24486}# 'begin)
                               (values
                                 'begin-form
                                 #f
                                 #{e 24464}#
                                 #{w 24466}#
                                 #{s 24467}#
                                 #{mod 24469}#)
                               (if (eqv? #{ftype 24486}# 'eval-when)
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 24464}#
                                   #{w 24466}#
                                   #{s 24467}#
                                   #{mod 24469}#)
                                 (if (eqv? #{ftype 24486}# 'define)
                                   (let ((#{tmp 24533}#
                                           ($sc-dispatch
                                             #{e 24464}#
                                             '(_ any any))))
                                     (if (if #{tmp 24533}#
                                           (@apply
                                             (lambda (#{name 24537}#
                                                      #{val 24538}#)
                                               (if (symbol? #{name 24537}#)
                                                 #t
                                                 (if (if (vector?
                                                           #{name 24537}#)
                                                       (if (= (vector-length
                                                                #{name 24537}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{name 24537}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (symbol?
                                                     (vector-ref
                                                       #{name 24537}#
                                                       1))
                                                   #f)))
                                             #{tmp 24533}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 24565}# #{val 24566}#)
                                           (values
                                             'define-form
                                             #{name 24565}#
                                             #{val 24566}#
                                             #{w 24466}#
                                             #{s 24467}#
                                             #{mod 24469}#))
                                         #{tmp 24533}#)
                                       (let ((#{tmp 24567}#
                                               ($sc-dispatch
                                                 #{e 24464}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 24567}#
                                               (@apply
                                                 (lambda (#{name 24571}#
                                                          #{args 24572}#
                                                          #{e1 24573}#
                                                          #{e2 24574}#)
                                                   (if (if (symbol?
                                                             #{name 24571}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 24571}#)
                                                               (if (= (vector-length
                                                                        #{name 24571}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 24571}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 24571}#
                                                               1))
                                                           #f))
                                                     (#{valid-bound-ids? 4433}#
                                                       (#{lambda-var-list 4458}#
                                                         #{args 24572}#))
                                                     #f))
                                                 #{tmp 24567}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 25055}#
                                                      #{args 25056}#
                                                      #{e1 25057}#
                                                      #{e2 25058}#)
                                               (values
                                                 'define-form
                                                 (if (if (null? (car #{w 24466}#))
                                                       (null? (cdr #{w 24466}#))
                                                       #f)
                                                   #{name 25055}#
                                                   (if (if (vector?
                                                             #{name 25055}#)
                                                         (if (= (vector-length
                                                                  #{name 25055}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 25055}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (let ((#{expression 25088}#
                                                             (vector-ref
                                                               #{name 25055}#
                                                               1))
                                                           (#{wrap 25089}#
                                                             (let ((#{w2 25099}#
                                                                     (vector-ref
                                                                       #{name 25055}#
                                                                       2)))
                                                               (let ((#{m1 25100}#
                                                                       (car #{w 24466}#))
                                                                     (#{s1 25101}#
                                                                       (cdr #{w 24466}#)))
                                                                 (if (null? #{m1 25100}#)
                                                                   (if (null? #{s1 25101}#)
                                                                     #{w2 25099}#
                                                                     (cons (car #{w2 25099}#)
                                                                           (let ((#{m2 25118}#
                                                                                   (cdr #{w2 25099}#)))
                                                                             (if (null? #{m2 25118}#)
                                                                               #{s1 25101}#
                                                                               (append
                                                                                 #{s1 25101}#
                                                                                 #{m2 25118}#)))))
                                                                   (cons (let ((#{m2 25126}#
                                                                                 (car #{w2 25099}#)))
                                                                           (if (null? #{m2 25126}#)
                                                                             #{m1 25100}#
                                                                             (append
                                                                               #{m1 25100}#
                                                                               #{m2 25126}#)))
                                                                         (let ((#{m2 25134}#
                                                                                 (cdr #{w2 25099}#)))
                                                                           (if (null? #{m2 25134}#)
                                                                             #{s1 25101}#
                                                                             (append
                                                                               #{s1 25101}#
                                                                               #{m2 25134}#))))))))
                                                           (#{module 25090}#
                                                             (vector-ref
                                                               #{name 25055}#
                                                               3)))
                                                       (vector
                                                         'syntax-object
                                                         #{expression 25088}#
                                                         #{wrap 25089}#
                                                         #{module 25090}#))
                                                     (if (null? #{name 25055}#)
                                                       #{name 25055}#
                                                       (vector
                                                         'syntax-object
                                                         #{name 25055}#
                                                         #{w 24466}#
                                                         #{mod 24469}#))))
                                                 (let ((#{e 25160}#
                                                         (cons '#(syntax-object
                                                                  lambda
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(name
                                                                       args
                                                                       e1
                                                                       e2)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1952"
                                                                       "i1953"
                                                                       "i1954"
                                                                       "i1955"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(ftype
                                                                       fval
                                                                       fe
                                                                       fw
                                                                       fs
                                                                       fmod)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1905"
                                                                       "i1906"
                                                                       "i1907"
                                                                       "i1908"
                                                                       "i1909"
                                                                       "i1910"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(first)
                                                                     #((top))
                                                                     #("i1897"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(e
                                                                       r
                                                                       w
                                                                       s
                                                                       rib
                                                                       mod
                                                                       for-car?)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1876"
                                                                       "i1877"
                                                                       "i1878"
                                                                       "i1879"
                                                                       "i1880"
                                                                       "i1881"
                                                                       "i1882"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       expand-lambda-case
                                                                       lambda*-formals
                                                                       expand-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       expand-void
                                                                       eval-local-transformer
                                                                       expand-local-syntax
                                                                       expand-body
                                                                       expand-macro
                                                                       expand-call
                                                                       expand-expr
                                                                       expand
                                                                       syntax-type
                                                                       parse-when-list
                                                                       expand-install-global
                                                                       expand-top-sequence
                                                                       expand-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       resolve-identifier
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-primcall
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-call
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-seq
                                                                       make-primcall
                                                                       make-call
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i471"
                                                                      "i469"
                                                                      "i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i401"
                                                                      "i400"
                                                                      "i398"
                                                                      "i395"
                                                                      "i394"
                                                                      "i393"
                                                                      "i391"
                                                                      "i390"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i374"
                                                                      "i371"
                                                                      "i369"
                                                                      "i368"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i360"
                                                                      "i359"
                                                                      "i358"
                                                                      "i357"
                                                                      "i355"
                                                                      "i354"
                                                                      "i351"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i340"
                                                                      "i339"
                                                                      "i337"
                                                                      "i335"
                                                                      "i334"
                                                                      "i331"
                                                                      "i330"
                                                                      "i328"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i309"
                                                                      "i307"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i262"
                                                                      "i259"
                                                                      "i257"
                                                                      "i256"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i244"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ()))
                                                                  (hygiene
                                                                    guile))
                                                               (let ((#{x 25164}#
                                                                       (cons #{args 25056}#
                                                                             (cons #{e1 25057}#
                                                                                   #{e2 25058}#))))
                                                                 (if (if (null? (car #{w 24466}#))
                                                                       (null? (cdr #{w 24466}#))
                                                                       #f)
                                                                   #{x 25164}#
                                                                   (if (if (vector?
                                                                             #{x 25164}#)
                                                                         (if (= (vector-length
                                                                                  #{x 25164}#)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  #{x 25164}#
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((#{expression 25182}#
                                                                             (vector-ref
                                                                               #{x 25164}#
                                                                               1))
                                                                           (#{wrap 25183}#
                                                                             (let ((#{w2 25191}#
                                                                                     (vector-ref
                                                                                       #{x 25164}#
                                                                                       2)))
                                                                               (let ((#{m1 25192}#
                                                                                       (car #{w 24466}#))
                                                                                     (#{s1 25193}#
                                                                                       (cdr #{w 24466}#)))
                                                                                 (if (null? #{m1 25192}#)
                                                                                   (if (null? #{s1 25193}#)
                                                                                     #{w2 25191}#
                                                                                     (cons (car #{w2 25191}#)
                                                                                           (let ((#{m2 25208}#
                                                                                                   (cdr #{w2 25191}#)))
                                                                                             (if (null? #{m2 25208}#)
                                                                                               #{s1 25193}#
                                                                                               (append
                                                                                                 #{s1 25193}#
                                                                                                 #{m2 25208}#)))))
                                                                                   (cons (let ((#{m2 25216}#
                                                                                                 (car #{w2 25191}#)))
                                                                                           (if (null? #{m2 25216}#)
                                                                                             #{m1 25192}#
                                                                                             (append
                                                                                               #{m1 25192}#
                                                                                               #{m2 25216}#)))
                                                                                         (let ((#{m2 25224}#
                                                                                                 (cdr #{w2 25191}#)))
                                                                                           (if (null? #{m2 25224}#)
                                                                                             #{s1 25193}#
                                                                                             (append
                                                                                               #{s1 25193}#
                                                                                               #{m2 25224}#))))))))
                                                                           (#{module 25184}#
                                                                             (vector-ref
                                                                               #{x 25164}#
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         #{expression 25182}#
                                                                         #{wrap 25183}#
                                                                         #{module 25184}#))
                                                                     (if (null? #{x 25164}#)
                                                                       #{x 25164}#
                                                                       (vector
                                                                         'syntax-object
                                                                         #{x 25164}#
                                                                         #{w 24466}#
                                                                         #{mod 24469}#))))))))
                                                   (begin
                                                     (if (if (pair? #{e 25160}#)
                                                           #{s 24467}#
                                                           #f)
                                                       (set-source-properties!
                                                         #{e 25160}#
                                                         #{s 24467}#))
                                                     #{e 25160}#))
                                                 '(())
                                                 #{s 24467}#
                                                 #{mod 24469}#))
                                             #{tmp 24567}#)
                                           (let ((#{tmp 25243}#
                                                   ($sc-dispatch
                                                     #{e 24464}#
                                                     '(_ any))))
                                             (if (if #{tmp 25243}#
                                                   (@apply
                                                     (lambda (#{name 25247}#)
                                                       (if (symbol?
                                                             #{name 25247}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 25247}#)
                                                               (if (= (vector-length
                                                                        #{name 25247}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 25247}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 25247}#
                                                               1))
                                                           #f)))
                                                     #{tmp 25243}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 25274}#)
                                                   (values
                                                     'define-form
                                                     (if (if (null? (car #{w 24466}#))
                                                           (null? (cdr #{w 24466}#))
                                                           #f)
                                                       #{name 25274}#
                                                       (if (if (vector?
                                                                 #{name 25274}#)
                                                             (if (= (vector-length
                                                                      #{name 25274}#)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      #{name 25274}#
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (let ((#{expression 25304}#
                                                                 (vector-ref
                                                                   #{name 25274}#
                                                                   1))
                                                               (#{wrap 25305}#
                                                                 (let ((#{w2 25315}#
                                                                         (vector-ref
                                                                           #{name 25274}#
                                                                           2)))
                                                                   (let ((#{m1 25316}#
                                                                           (car #{w 24466}#))
                                                                         (#{s1 25317}#
                                                                           (cdr #{w 24466}#)))
                                                                     (if (null? #{m1 25316}#)
                                                                       (if (null? #{s1 25317}#)
                                                                         #{w2 25315}#
                                                                         (cons (car #{w2 25315}#)
                                                                               (let ((#{m2 25334}#
                                                                                       (cdr #{w2 25315}#)))
                                                                                 (if (null? #{m2 25334}#)
                                                                                   #{s1 25317}#
                                                                                   (append
                                                                                     #{s1 25317}#
                                                                                     #{m2 25334}#)))))
                                                                       (cons (let ((#{m2 25342}#
                                                                                     (car #{w2 25315}#)))
                                                                               (if (null? #{m2 25342}#)
                                                                                 #{m1 25316}#
                                                                                 (append
                                                                                   #{m1 25316}#
                                                                                   #{m2 25342}#)))
                                                                             (let ((#{m2 25350}#
                                                                                     (cdr #{w2 25315}#)))
                                                                               (if (null? #{m2 25350}#)
                                                                                 #{s1 25317}#
                                                                                 (append
                                                                                   #{s1 25317}#
                                                                                   #{m2 25350}#))))))))
                                                               (#{module 25306}#
                                                                 (vector-ref
                                                                   #{name 25274}#
                                                                   3)))
                                                           (vector
                                                             'syntax-object
                                                             #{expression 25304}#
                                                             #{wrap 25305}#
                                                             #{module 25306}#))
                                                         (if (null? #{name 25274}#)
                                                           #{name 25274}#
                                                           (vector
                                                             'syntax-object
                                                             #{name 25274}#
                                                             #{w 24466}#
                                                             #{mod 24469}#))))
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1965"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1905"
                                                              "i1906"
                                                              "i1907"
                                                              "i1908"
                                                              "i1909"
                                                              "i1910"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1897"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1876"
                                                              "i1877"
                                                              "i1878"
                                                              "i1879"
                                                              "i1880"
                                                              "i1881"
                                                              "i1882"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-call
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              resolve-identifier
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i400"
                                                             "i398"
                                                             "i395"
                                                             "i394"
                                                             "i393"
                                                             "i391"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i371"
                                                             "i369"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i359"
                                                             "i358"
                                                             "i357"
                                                             "i355"
                                                             "i354"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44"))
                                                          #(ribcage () () ()))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1965"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1905"
                                                              "i1906"
                                                              "i1907"
                                                              "i1908"
                                                              "i1909"
                                                              "i1910"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1897"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1876"
                                                              "i1877"
                                                              "i1878"
                                                              "i1879"
                                                              "i1880"
                                                              "i1881"
                                                              "i1882"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-call
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              resolve-identifier
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i400"
                                                             "i398"
                                                             "i395"
                                                             "i394"
                                                             "i393"
                                                             "i391"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i371"
                                                             "i369"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i359"
                                                             "i358"
                                                             "i357"
                                                             "i355"
                                                             "i354"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44"))
                                                          #(ribcage () () ()))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1965"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1905"
                                                              "i1906"
                                                              "i1907"
                                                              "i1908"
                                                              "i1909"
                                                              "i1910"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1897"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1876"
                                                              "i1877"
                                                              "i1878"
                                                              "i1879"
                                                              "i1880"
                                                              "i1881"
                                                              "i1882"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-call
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              resolve-identifier
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i400"
                                                             "i398"
                                                             "i395"
                                                             "i394"
                                                             "i393"
                                                             "i391"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i371"
                                                             "i369"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i359"
                                                             "i358"
                                                             "i357"
                                                             "i355"
                                                             "i354"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44"))
                                                          #(ribcage () () ()))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 24467}#
                                                     #{mod 24469}#))
                                                 #{tmp 25243}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 24464}#)))))))
                                   (if (eqv? #{ftype 24486}# 'define-syntax)
                                     (let ((#{tmp 25389}#
                                             ($sc-dispatch
                                               #{e 24464}#
                                               '(_ any any))))
                                       (if (if #{tmp 25389}#
                                             (@apply
                                               (lambda (#{name 25393}#
                                                        #{val 25394}#)
                                                 (if (symbol? #{name 25393}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 25393}#)
                                                         (if (= (vector-length
                                                                  #{name 25393}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 25393}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 25393}#
                                                         1))
                                                     #f)))
                                               #{tmp 25389}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 25421}#
                                                    #{val 25422}#)
                                             (values
                                               'define-syntax-form
                                               #{name 25421}#
                                               #{val 25422}#
                                               #{w 24466}#
                                               #{s 24467}#
                                               #{mod 24469}#))
                                           #{tmp 25389}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{e 24464}#)))
                                     (if (eqv? #{ftype 24486}#
                                               'define-syntax-parameter)
                                       (let ((#{tmp 25433}#
                                               ($sc-dispatch
                                                 #{e 24464}#
                                                 '(_ any any))))
                                         (if (if #{tmp 25433}#
                                               (@apply
                                                 (lambda (#{name 25437}#
                                                          #{val 25438}#)
                                                   (if (symbol? #{name 25437}#)
                                                     #t
                                                     (if (if (vector?
                                                               #{name 25437}#)
                                                           (if (= (vector-length
                                                                    #{name 25437}#)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    #{name 25437}#
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           #{name 25437}#
                                                           1))
                                                       #f)))
                                                 #{tmp 25433}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 25465}#
                                                      #{val 25466}#)
                                               (values
                                                 'define-syntax-parameter-form
                                                 #{name 25465}#
                                                 #{val 25466}#
                                                 #{w 24466}#
                                                 #{s 24467}#
                                                 #{mod 24469}#))
                                             #{tmp 25433}#)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             #{e 24464}#)))
                                       (values
                                         'call
                                         #f
                                         #{e 24464}#
                                         #{w 24466}#
                                         #{s 24467}#
                                         #{mod 24469}#)))))))))))))))
           (if (if (vector? #{e 24464}#)
                 (if (= (vector-length #{e 24464}#) 4)
                   (eq? (vector-ref #{e 24464}# 0) 'syntax-object)
                   #f)
                 #f)
             (#{syntax-type 4442}#
               (vector-ref #{e 24464}# 1)
               #{r 24465}#
               (let ((#{w2 25491}# (vector-ref #{e 24464}# 2)))
                 (let ((#{m1 25492}# (car #{w 24466}#))
                       (#{s1 25493}# (cdr #{w 24466}#)))
                   (if (null? #{m1 25492}#)
                     (if (null? #{s1 25493}#)
                       #{w2 25491}#
                       (cons (car #{w2 25491}#)
                             (let ((#{m2 25504}# (cdr #{w2 25491}#)))
                               (if (null? #{m2 25504}#)
                                 #{s1 25493}#
                                 (append #{s1 25493}# #{m2 25504}#)))))
                     (cons (let ((#{m2 25512}# (car #{w2 25491}#)))
                             (if (null? #{m2 25512}#)
                               #{m1 25492}#
                               (append #{m1 25492}# #{m2 25512}#)))
                           (let ((#{m2 25520}# (cdr #{w2 25491}#)))
                             (if (null? #{m2 25520}#)
                               #{s1 25493}#
                               (append #{s1 25493}# #{m2 25520}#)))))))
               (let ((#{t 25525}#
                       (#{source-annotation 4404}# #{e 24464}#)))
                 (if #{t 25525}# #{t 25525}# #{s 24467}#))
               #{rib 24468}#
               (let ((#{t 25823}# (vector-ref #{e 24464}# 3)))
                 (if #{t 25823}# #{t 25823}# #{mod 24469}#))
               #{for-car? 24470}#)
             (if (self-evaluating? #{e 24464}#)
               (values
                 'constant
                 #f
                 #{e 24464}#
                 #{w 24466}#
                 #{s 24467}#
                 #{mod 24469}#)
               (values
                 'other
                 #f
                 #{e 24464}#
                 #{w 24466}#
                 #{s 24467}#
                 #{mod 24469}#)))))))
   (#{expand 4443}#
     (lambda (#{e 25832}#
              #{r 25833}#
              #{w 25834}#
              #{mod 25835}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 4442}#
             #{e 25832}#
             #{r 25833}#
             #{w 25834}#
             (#{source-annotation 4404}# #{e 25832}#)
             #f
             #{mod 25835}#
             #f))
         (lambda (#{type 26039}#
                  #{value 26040}#
                  #{e 26041}#
                  #{w 26042}#
                  #{s 26043}#
                  #{mod 26044}#)
           (#{expand-expr 4444}#
             #{type 26039}#
             #{value 26040}#
             #{e 26041}#
             #{r 25833}#
             #{w 26042}#
             #{s 26043}#
             #{mod 26044}#)))))
   (#{expand-expr 4444}#
     (lambda (#{type 26047}#
              #{value 26048}#
              #{e 26049}#
              #{r 26050}#
              #{w 26051}#
              #{s 26052}#
              #{mod 26053}#)
       (if (eqv? #{type 26047}# 'lexical)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{s 26052}#
           #{e 26049}#
           #{value 26048}#)
         (if (if (eqv? #{type 26047}# 'core)
               #t
               (eqv? #{type 26047}# 'core-form))
           (#{value 26048}#
             #{e 26049}#
             #{r 26050}#
             #{w 26051}#
             #{s 26052}#
             #{mod 26053}#)
           (if (eqv? #{type 26047}# 'module-ref)
             (call-with-values
               (lambda ()
                 (#{value 26048}#
                   #{e 26049}#
                   #{r 26050}#
                   #{w 26051}#))
               (lambda (#{e 26079}#
                        #{r 26080}#
                        #{w 26081}#
                        #{s 26082}#
                        #{mod 26083}#)
                 (#{expand 4443}#
                   #{e 26079}#
                   #{r 26080}#
                   #{w 26081}#
                   #{mod 26083}#)))
             (if (eqv? #{type 26047}# 'lexical-call)
               (#{expand-call 4445}#
                 (let ((#{id 26264}# (car #{e 26049}#)))
                   (#{build-lexical-reference 4380}#
                     'fun
                     (#{source-annotation 4404}# #{id 26264}#)
                     (if (if (vector? #{id 26264}#)
                           (if (= (vector-length #{id 26264}#) 4)
                             (eq? (vector-ref #{id 26264}# 0) 'syntax-object)
                             #f)
                           #f)
                       (syntax->datum #{id 26264}#)
                       #{id 26264}#)
                     #{value 26048}#))
                 #{e 26049}#
                 #{r 26050}#
                 #{w 26051}#
                 #{s 26052}#
                 #{mod 26053}#)
               (if (eqv? #{type 26047}# 'global-call)
                 (#{expand-call 4445}#
                   (#{build-global-reference 4383}#
                     (#{source-annotation 4404}# (car #{e 26049}#))
                     (if (if (vector? #{value 26048}#)
                           (if (= (vector-length #{value 26048}#) 4)
                             (eq? (vector-ref #{value 26048}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 26048}# 1)
                       #{value 26048}#)
                     (if (if (vector? #{value 26048}#)
                           (if (= (vector-length #{value 26048}#) 4)
                             (eq? (vector-ref #{value 26048}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 26048}# 3)
                       #{mod 26053}#))
                   #{e 26049}#
                   #{r 26050}#
                   #{w 26051}#
                   #{s 26052}#
                   #{mod 26053}#)
                 (if (eqv? #{type 26047}# 'constant)
                   (let ((#{exp 26986}#
                           (#{strip 4456}#
                             (let ((#{x 26999}#
                                     (begin
                                       (if (if (pair? #{e 26049}#)
                                             #{s 26052}#
                                             #f)
                                         (set-source-properties!
                                           #{e 26049}#
                                           #{s 26052}#))
                                       #{e 26049}#)))
                               (if (if (null? (car #{w 26051}#))
                                     (null? (cdr #{w 26051}#))
                                     #f)
                                 #{x 26999}#
                                 (if (if (vector? #{x 26999}#)
                                       (if (= (vector-length #{x 26999}#) 4)
                                         (eq? (vector-ref #{x 26999}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (let ((#{expression 27031}#
                                           (vector-ref #{x 26999}# 1))
                                         (#{wrap 27032}#
                                           (let ((#{w2 27040}#
                                                   (vector-ref #{x 26999}# 2)))
                                             (let ((#{m1 27041}#
                                                     (car #{w 26051}#))
                                                   (#{s1 27042}#
                                                     (cdr #{w 26051}#)))
                                               (if (null? #{m1 27041}#)
                                                 (if (null? #{s1 27042}#)
                                                   #{w2 27040}#
                                                   (cons (car #{w2 27040}#)
                                                         (let ((#{m2 27057}#
                                                                 (cdr #{w2 27040}#)))
                                                           (if (null? #{m2 27057}#)
                                                             #{s1 27042}#
                                                             (append
                                                               #{s1 27042}#
                                                               #{m2 27057}#)))))
                                                 (cons (let ((#{m2 27065}#
                                                               (car #{w2 27040}#)))
                                                         (if (null? #{m2 27065}#)
                                                           #{m1 27041}#
                                                           (append
                                                             #{m1 27041}#
                                                             #{m2 27065}#)))
                                                       (let ((#{m2 27073}#
                                                               (cdr #{w2 27040}#)))
                                                         (if (null? #{m2 27073}#)
                                                           #{s1 27042}#
                                                           (append
                                                             #{s1 27042}#
                                                             #{m2 27073}#))))))))
                                         (#{module 27033}#
                                           (vector-ref #{x 26999}# 3)))
                                     (vector
                                       'syntax-object
                                       #{expression 27031}#
                                       #{wrap 27032}#
                                       #{module 27033}#))
                                   (if (null? #{x 26999}#)
                                     #{x 26999}#
                                     (vector
                                       'syntax-object
                                       #{x 26999}#
                                       #{w 26051}#
                                       #{mod 26053}#)))))
                             '(()))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 1)
                       #{s 26052}#
                       #{exp 26986}#))
                   (if (eqv? #{type 26047}# 'global)
                     (#{analyze-variable 4382}#
                       #{mod 26053}#
                       #{value 26048}#
                       (lambda (#{mod 27098}# #{var 27099}# #{public? 27100}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #{s 26052}#
                           #{mod 27098}#
                           #{var 27099}#
                           #{public? 27100}#))
                       (lambda (#{var 27108}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #{s 26052}#
                           #{var 27108}#)))
                     (if (eqv? #{type 26047}# 'call)
                       (#{expand-call 4445}#
                         (#{expand 4443}#
                           (car #{e 26049}#)
                           #{r 26050}#
                           #{w 26051}#
                           #{mod 26053}#)
                         #{e 26049}#
                         #{r 26050}#
                         #{w 26051}#
                         #{s 26052}#
                         #{mod 26053}#)
                       (if (eqv? #{type 26047}# 'begin-form)
                         (let ((#{tmp 27286}#
                                 ($sc-dispatch
                                   #{e 26049}#
                                   '(_ any . each-any))))
                           (if #{tmp 27286}#
                             (@apply
                               (lambda (#{e1 27290}# #{e2 27291}#)
                                 (#{expand-sequence 4438}#
                                   (cons #{e1 27290}# #{e2 27291}#)
                                   #{r 26050}#
                                   #{w 26051}#
                                   #{s 26052}#
                                   #{mod 26053}#))
                               #{tmp 27286}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{e 26049}#)))
                         (if (eqv? #{type 26047}# 'local-syntax-form)
                           (#{expand-local-syntax 4448}#
                             #{value 26048}#
                             #{e 26049}#
                             #{r 26050}#
                             #{w 26051}#
                             #{s 26052}#
                             #{mod 26053}#
                             #{expand-sequence 4438}#)
                           (if (eqv? #{type 26047}# 'eval-when-form)
                             (let ((#{tmp 27471}#
                                     ($sc-dispatch
                                       #{e 26049}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 27471}#
                                 (@apply
                                   (lambda (#{x 27475}#
                                            #{e1 27476}#
                                            #{e2 27477}#)
                                     (let ((#{when-list 27478}#
                                             (#{parse-when-list 4441}#
                                               #{e 26049}#
                                               #{x 27475}#)))
                                       (if (memq 'eval #{when-list 27478}#)
                                         (#{expand-sequence 4438}#
                                           (cons #{e1 27476}# #{e2 27477}#)
                                           #{r 26050}#
                                           #{w 26051}#
                                           #{s 26052}#
                                           #{mod 26053}#)
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))))
                                   #{tmp 27471}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 26049}#)))
                             (if (if (eqv? #{type 26047}# 'define-form)
                                   #t
                                   (if (eqv? #{type 26047}#
                                             'define-syntax-form)
                                     #t
                                     (eqv? #{type 26047}#
                                           'define-syntax-parameter-form)))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 26049}#
                                 (if (if (null? (car #{w 26051}#))
                                       (null? (cdr #{w 26051}#))
                                       #f)
                                   #{value 26048}#
                                   (if (if (vector? #{value 26048}#)
                                         (if (= (vector-length #{value 26048}#)
                                                4)
                                           (eq? (vector-ref #{value 26048}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 27688}#
                                             (vector-ref #{value 26048}# 1))
                                           (#{wrap 27689}#
                                             (let ((#{w2 27699}#
                                                     (vector-ref
                                                       #{value 26048}#
                                                       2)))
                                               (let ((#{m1 27700}#
                                                       (car #{w 26051}#))
                                                     (#{s1 27701}#
                                                       (cdr #{w 26051}#)))
                                                 (if (null? #{m1 27700}#)
                                                   (if (null? #{s1 27701}#)
                                                     #{w2 27699}#
                                                     (cons (car #{w2 27699}#)
                                                           (let ((#{m2 27718}#
                                                                   (cdr #{w2 27699}#)))
                                                             (if (null? #{m2 27718}#)
                                                               #{s1 27701}#
                                                               (append
                                                                 #{s1 27701}#
                                                                 #{m2 27718}#)))))
                                                   (cons (let ((#{m2 27726}#
                                                                 (car #{w2 27699}#)))
                                                           (if (null? #{m2 27726}#)
                                                             #{m1 27700}#
                                                             (append
                                                               #{m1 27700}#
                                                               #{m2 27726}#)))
                                                         (let ((#{m2 27734}#
                                                                 (cdr #{w2 27699}#)))
                                                           (if (null? #{m2 27734}#)
                                                             #{s1 27701}#
                                                             (append
                                                               #{s1 27701}#
                                                               #{m2 27734}#))))))))
                                           (#{module 27690}#
                                             (vector-ref #{value 26048}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 27688}#
                                         #{wrap 27689}#
                                         #{module 27690}#))
                                     (if (null? #{value 26048}#)
                                       #{value 26048}#
                                       (vector
                                         'syntax-object
                                         #{value 26048}#
                                         #{w 26051}#
                                         #{mod 26053}#)))))
                               (if (eqv? #{type 26047}# 'syntax)
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (let ((#{x 27769}#
                                           (begin
                                             (if (if (pair? #{e 26049}#)
                                                   #{s 26052}#
                                                   #f)
                                               (set-source-properties!
                                                 #{e 26049}#
                                                 #{s 26052}#))
                                             #{e 26049}#)))
                                     (if (if (null? (car #{w 26051}#))
                                           (null? (cdr #{w 26051}#))
                                           #f)
                                       #{x 27769}#
                                       (if (if (vector? #{x 27769}#)
                                             (if (= (vector-length #{x 27769}#)
                                                    4)
                                               (eq? (vector-ref #{x 27769}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (let ((#{expression 27801}#
                                                 (vector-ref #{x 27769}# 1))
                                               (#{wrap 27802}#
                                                 (let ((#{w2 27810}#
                                                         (vector-ref
                                                           #{x 27769}#
                                                           2)))
                                                   (let ((#{m1 27811}#
                                                           (car #{w 26051}#))
                                                         (#{s1 27812}#
                                                           (cdr #{w 26051}#)))
                                                     (if (null? #{m1 27811}#)
                                                       (if (null? #{s1 27812}#)
                                                         #{w2 27810}#
                                                         (cons (car #{w2 27810}#)
                                                               (let ((#{m2 27827}#
                                                                       (cdr #{w2 27810}#)))
                                                                 (if (null? #{m2 27827}#)
                                                                   #{s1 27812}#
                                                                   (append
                                                                     #{s1 27812}#
                                                                     #{m2 27827}#)))))
                                                       (cons (let ((#{m2 27835}#
                                                                     (car #{w2 27810}#)))
                                                               (if (null? #{m2 27835}#)
                                                                 #{m1 27811}#
                                                                 (append
                                                                   #{m1 27811}#
                                                                   #{m2 27835}#)))
                                                             (let ((#{m2 27843}#
                                                                     (cdr #{w2 27810}#)))
                                                               (if (null? #{m2 27843}#)
                                                                 #{s1 27812}#
                                                                 (append
                                                                   #{s1 27812}#
                                                                   #{m2 27843}#))))))))
                                               (#{module 27803}#
                                                 (vector-ref #{x 27769}# 3)))
                                           (vector
                                             'syntax-object
                                             #{expression 27801}#
                                             #{wrap 27802}#
                                             #{module 27803}#))
                                         (if (null? #{x 27769}#)
                                           #{x 27769}#
                                           (vector
                                             'syntax-object
                                             #{x 27769}#
                                             #{w 26051}#
                                             #{mod 26053}#))))))
                                 (if (eqv? #{type 26047}# 'displaced-lexical)
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (let ((#{x 27870}#
                                             (begin
                                               (if (if (pair? #{e 26049}#)
                                                     #{s 26052}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 26049}#
                                                   #{s 26052}#))
                                               #{e 26049}#)))
                                       (if (if (null? (car #{w 26051}#))
                                             (null? (cdr #{w 26051}#))
                                             #f)
                                         #{x 27870}#
                                         (if (if (vector? #{x 27870}#)
                                               (if (= (vector-length
                                                        #{x 27870}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 27870}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((#{expression 27902}#
                                                   (vector-ref #{x 27870}# 1))
                                                 (#{wrap 27903}#
                                                   (let ((#{w2 27911}#
                                                           (vector-ref
                                                             #{x 27870}#
                                                             2)))
                                                     (let ((#{m1 27912}#
                                                             (car #{w 26051}#))
                                                           (#{s1 27913}#
                                                             (cdr #{w 26051}#)))
                                                       (if (null? #{m1 27912}#)
                                                         (if (null? #{s1 27913}#)
                                                           #{w2 27911}#
                                                           (cons (car #{w2 27911}#)
                                                                 (let ((#{m2 27928}#
                                                                         (cdr #{w2 27911}#)))
                                                                   (if (null? #{m2 27928}#)
                                                                     #{s1 27913}#
                                                                     (append
                                                                       #{s1 27913}#
                                                                       #{m2 27928}#)))))
                                                         (cons (let ((#{m2 27936}#
                                                                       (car #{w2 27911}#)))
                                                                 (if (null? #{m2 27936}#)
                                                                   #{m1 27912}#
                                                                   (append
                                                                     #{m1 27912}#
                                                                     #{m2 27936}#)))
                                                               (let ((#{m2 27944}#
                                                                       (cdr #{w2 27911}#)))
                                                                 (if (null? #{m2 27944}#)
                                                                   #{s1 27913}#
                                                                   (append
                                                                     #{s1 27913}#
                                                                     #{m2 27944}#))))))))
                                                 (#{module 27904}#
                                                   (vector-ref #{x 27870}# 3)))
                                             (vector
                                               'syntax-object
                                               #{expression 27902}#
                                               #{wrap 27903}#
                                               #{module 27904}#))
                                           (if (null? #{x 27870}#)
                                             #{x 27870}#
                                             (vector
                                               'syntax-object
                                               #{x 27870}#
                                               #{w 26051}#
                                               #{mod 26053}#))))))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (let ((#{x 27968}#
                                             (begin
                                               (if (if (pair? #{e 26049}#)
                                                     #{s 26052}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 26049}#
                                                   #{s 26052}#))
                                               #{e 26049}#)))
                                       (if (if (null? (car #{w 26051}#))
                                             (null? (cdr #{w 26051}#))
                                             #f)
                                         #{x 27968}#
                                         (if (if (vector? #{x 27968}#)
                                               (if (= (vector-length
                                                        #{x 27968}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 27968}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((#{expression 28000}#
                                                   (vector-ref #{x 27968}# 1))
                                                 (#{wrap 28001}#
                                                   (let ((#{w2 28009}#
                                                           (vector-ref
                                                             #{x 27968}#
                                                             2)))
                                                     (let ((#{m1 28010}#
                                                             (car #{w 26051}#))
                                                           (#{s1 28011}#
                                                             (cdr #{w 26051}#)))
                                                       (if (null? #{m1 28010}#)
                                                         (if (null? #{s1 28011}#)
                                                           #{w2 28009}#
                                                           (cons (car #{w2 28009}#)
                                                                 (let ((#{m2 28026}#
                                                                         (cdr #{w2 28009}#)))
                                                                   (if (null? #{m2 28026}#)
                                                                     #{s1 28011}#
                                                                     (append
                                                                       #{s1 28011}#
                                                                       #{m2 28026}#)))))
                                                         (cons (let ((#{m2 28034}#
                                                                       (car #{w2 28009}#)))
                                                                 (if (null? #{m2 28034}#)
                                                                   #{m1 28010}#
                                                                   (append
                                                                     #{m1 28010}#
                                                                     #{m2 28034}#)))
                                                               (let ((#{m2 28042}#
                                                                       (cdr #{w2 28009}#)))
                                                                 (if (null? #{m2 28042}#)
                                                                   #{s1 28011}#
                                                                   (append
                                                                     #{s1 28011}#
                                                                     #{m2 28042}#))))))))
                                                 (#{module 28002}#
                                                   (vector-ref #{x 27968}# 3)))
                                             (vector
                                               'syntax-object
                                               #{expression 28000}#
                                               #{wrap 28001}#
                                               #{module 28002}#))
                                           (if (null? #{x 27968}#)
                                             #{x 27968}#
                                             (vector
                                               'syntax-object
                                               #{x 27968}#
                                               #{w 26051}#
                                               #{mod 26053}#))))))))))))))))))))))
   (#{expand-call 4445}#
     (lambda (#{x 28057}#
              #{e 28058}#
              #{r 28059}#
              #{w 28060}#
              #{s 28061}#
              #{mod 28062}#)
       (let ((#{tmp 28064}#
               ($sc-dispatch #{e 28058}# '(any . each-any))))
         (if #{tmp 28064}#
           (@apply
             (lambda (#{e0 28068}# #{e1 28069}#)
               (#{build-call 4377}#
                 #{s 28061}#
                 #{x 28057}#
                 (map (lambda (#{e 28161}#)
                        (#{expand 4443}#
                          #{e 28161}#
                          #{r 28059}#
                          #{w 28060}#
                          #{mod 28062}#))
                      #{e1 28069}#)))
             #{tmp 28064}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 28058}#)))))
   (#{expand-macro 4446}#
     (lambda (#{p 28249}#
              #{e 28250}#
              #{r 28251}#
              #{w 28252}#
              #{s 28253}#
              #{rib 28254}#
              #{mod 28255}#)
       (letrec*
         ((#{rebuild-macro-output 28256}#
            (lambda (#{x 28363}# #{m 28364}#)
              (if (pair? #{x 28363}#)
                (let ((#{e 28368}#
                        (cons (#{rebuild-macro-output 28256}#
                                (car #{x 28363}#)
                                #{m 28364}#)
                              (#{rebuild-macro-output 28256}#
                                (cdr #{x 28363}#)
                                #{m 28364}#))))
                  (begin
                    (if (if (pair? #{e 28368}#) #{s 28253}# #f)
                      (set-source-properties! #{e 28368}# #{s 28253}#))
                    #{e 28368}#))
                (if (if (vector? #{x 28363}#)
                      (if (= (vector-length #{x 28363}#) 4)
                        (eq? (vector-ref #{x 28363}# 0) 'syntax-object)
                        #f)
                      #f)
                  (let ((#{w 28384}# (vector-ref #{x 28363}# 2)))
                    (let ((#{ms 28385}# (car #{w 28384}#))
                          (#{s 28386}# (cdr #{w 28384}#)))
                      (if (if (pair? #{ms 28385}#)
                            (eq? (car #{ms 28385}#) #f)
                            #f)
                        (let ((#{expression 28394}# (vector-ref #{x 28363}# 1))
                              (#{wrap 28395}#
                                (cons (cdr #{ms 28385}#)
                                      (if #{rib 28254}#
                                        (cons #{rib 28254}# (cdr #{s 28386}#))
                                        (cdr #{s 28386}#))))
                              (#{module 28396}# (vector-ref #{x 28363}# 3)))
                          (vector
                            'syntax-object
                            #{expression 28394}#
                            #{wrap 28395}#
                            #{module 28396}#))
                        (let ((#{expression 28406}#
                                (let ((#{e 28411}# (vector-ref #{x 28363}# 1)))
                                  (begin
                                    (if (if (pair? #{e 28411}#) #{s 28386}# #f)
                                      (set-source-properties!
                                        #{e 28411}#
                                        #{s 28386}#))
                                    #{e 28411}#)))
                              (#{wrap 28407}#
                                (cons (cons #{m 28364}# #{ms 28385}#)
                                      (if #{rib 28254}#
                                        (cons #{rib 28254}#
                                              (cons 'shift #{s 28386}#))
                                        (cons 'shift #{s 28386}#))))
                              (#{module 28408}# (vector-ref #{x 28363}# 3)))
                          (vector
                            'syntax-object
                            #{expression 28406}#
                            #{wrap 28407}#
                            #{module 28408}#)))))
                  (if (vector? #{x 28363}#)
                    (let ((#{n 28423}# (vector-length #{x 28363}#)))
                      (let ((#{v 28424}#
                              (let ((#{e 28432}# (make-vector #{n 28423}#)))
                                (begin
                                  (if (if (pair? #{e 28432}#) #{x 28363}# #f)
                                    (set-source-properties!
                                      #{e 28432}#
                                      #{x 28363}#))
                                  #{e 28432}#))))
                        (letrec*
                          ((#{loop 28425}#
                             (lambda (#{i 28486}#)
                               (if (= #{i 28486}# #{n 28423}#)
                                 #{v 28424}#
                                 (begin
                                   (vector-set!
                                     #{v 28424}#
                                     #{i 28486}#
                                     (#{rebuild-macro-output 28256}#
                                       (vector-ref #{x 28363}# #{i 28486}#)
                                       #{m 28364}#))
                                   (#{loop 28425}# (#{1+}# #{i 28486}#)))))))
                          (#{loop 28425}# 0))))
                    (if (symbol? #{x 28363}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (let ((#{s 28492}# (cdr #{w 28252}#)))
                          (let ((#{x 28496}#
                                  (begin
                                    (if (if (pair? #{e 28250}#) #{s 28492}# #f)
                                      (set-source-properties!
                                        #{e 28250}#
                                        #{s 28492}#))
                                    #{e 28250}#)))
                            (if (if (null? (car #{w 28252}#))
                                  (null? (cdr #{w 28252}#))
                                  #f)
                              #{x 28496}#
                              (if (if (vector? #{x 28496}#)
                                    (if (= (vector-length #{x 28496}#) 4)
                                      (eq? (vector-ref #{x 28496}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 28528}#
                                        (vector-ref #{x 28496}# 1))
                                      (#{wrap 28529}#
                                        (let ((#{w2 28537}#
                                                (vector-ref #{x 28496}# 2)))
                                          (let ((#{m1 28538}#
                                                  (car #{w 28252}#))
                                                (#{s1 28539}#
                                                  (cdr #{w 28252}#)))
                                            (if (null? #{m1 28538}#)
                                              (if (null? #{s1 28539}#)
                                                #{w2 28537}#
                                                (cons (car #{w2 28537}#)
                                                      (let ((#{m2 28554}#
                                                              (cdr #{w2 28537}#)))
                                                        (if (null? #{m2 28554}#)
                                                          #{s1 28539}#
                                                          (append
                                                            #{s1 28539}#
                                                            #{m2 28554}#)))))
                                              (cons (let ((#{m2 28562}#
                                                            (car #{w2 28537}#)))
                                                      (if (null? #{m2 28562}#)
                                                        #{m1 28538}#
                                                        (append
                                                          #{m1 28538}#
                                                          #{m2 28562}#)))
                                                    (let ((#{m2 28570}#
                                                            (cdr #{w2 28537}#)))
                                                      (if (null? #{m2 28570}#)
                                                        #{s1 28539}#
                                                        (append
                                                          #{s1 28539}#
                                                          #{m2 28570}#))))))))
                                      (#{module 28530}#
                                        (vector-ref #{x 28496}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 28528}#
                                    #{wrap 28529}#
                                    #{module 28530}#))
                                (if (null? #{x 28496}#)
                                  #{x 28496}#
                                  (vector
                                    'syntax-object
                                    #{x 28496}#
                                    #{w 28252}#
                                    #{mod 28255}#))))))
                        #{x 28363}#)
                      (begin
                        (if (if (pair? #{x 28363}#) #{s 28253}# #f)
                          (set-source-properties! #{x 28363}# #{s 28253}#))
                        #{x 28363}#))))))))
         (#{rebuild-macro-output 28256}#
           (#{p 28249}#
             (let ((#{w 28263}#
                     (cons (cons #f (car #{w 28252}#))
                           (cons 'shift (cdr #{w 28252}#)))))
               (let ((#{x 28268}#
                       (begin
                         (if (if (pair? #{e 28250}#) #{s 28253}# #f)
                           (set-source-properties! #{e 28250}# #{s 28253}#))
                         #{e 28250}#)))
                 (if (if (null? (car #{w 28263}#))
                       (null? (cdr #{w 28263}#))
                       #f)
                   #{x 28268}#
                   (if (if (vector? #{x 28268}#)
                         (if (= (vector-length #{x 28268}#) 4)
                           (eq? (vector-ref #{x 28268}# 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((#{expression 28306}# (vector-ref #{x 28268}# 1))
                           (#{wrap 28307}#
                             (let ((#{w2 28315}# (vector-ref #{x 28268}# 2)))
                               (let ((#{m1 28316}# (car #{w 28263}#))
                                     (#{s1 28317}# (cdr #{w 28263}#)))
                                 (if (null? #{m1 28316}#)
                                   (if (null? #{s1 28317}#)
                                     #{w2 28315}#
                                     (cons (car #{w2 28315}#)
                                           (let ((#{m2 28332}#
                                                   (cdr #{w2 28315}#)))
                                             (if (null? #{m2 28332}#)
                                               #{s1 28317}#
                                               (append
                                                 #{s1 28317}#
                                                 #{m2 28332}#)))))
                                   (cons (let ((#{m2 28340}#
                                                 (car #{w2 28315}#)))
                                           (if (null? #{m2 28340}#)
                                             #{m1 28316}#
                                             (append
                                               #{m1 28316}#
                                               #{m2 28340}#)))
                                         (let ((#{m2 28348}#
                                                 (cdr #{w2 28315}#)))
                                           (if (null? #{m2 28348}#)
                                             #{s1 28317}#
                                             (append
                                               #{s1 28317}#
                                               #{m2 28348}#))))))))
                           (#{module 28308}# (vector-ref #{x 28268}# 3)))
                       (vector
                         'syntax-object
                         #{expression 28306}#
                         #{wrap 28307}#
                         #{module 28308}#))
                     (if (null? #{x 28268}#)
                       #{x 28268}#
                       (vector
                         'syntax-object
                         #{x 28268}#
                         #{w 28263}#
                         #{mod 28255}#)))))))
           (gensym "m")))))
   (#{expand-body 4447}#
     (lambda (#{body 28600}#
              #{outer-form 28601}#
              #{r 28602}#
              #{w 28603}#
              #{mod 28604}#)
       (let ((#{r 28605}#
               (cons '("placeholder" placeholder) #{r 28602}#)))
         (let ((#{ribcage 28606}# (vector 'ribcage '() '() '())))
           (let ((#{w 28607}#
                   (cons (car #{w 28603}#)
                         (cons #{ribcage 28606}# (cdr #{w 28603}#)))))
             (letrec*
               ((#{parse 28608}#
                  (lambda (#{body 28716}#
                           #{ids 28717}#
                           #{labels 28718}#
                           #{var-ids 28719}#
                           #{vars 28720}#
                           #{vals 28721}#
                           #{bindings 28722}#)
                    (if (null? #{body 28716}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 28601}#)
                      (let ((#{e 28723}# (cdr (car #{body 28716}#)))
                            (#{er 28724}# (car (car #{body 28716}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 4442}#
                              #{e 28723}#
                              #{er 28724}#
                              '(())
                              (#{source-annotation 4404}# #{er 28724}#)
                              #{ribcage 28606}#
                              #{mod 28604}#
                              #f))
                          (lambda (#{type 28930}#
                                   #{value 28931}#
                                   #{e 28932}#
                                   #{w 28933}#
                                   #{s 28934}#
                                   #{mod 28935}#)
                            (if (eqv? #{type 28930}# 'define-form)
                              (let ((#{id 28939}#
                                      (if (if (null? (car #{w 28933}#))
                                            (null? (cdr #{w 28933}#))
                                            #f)
                                        #{value 28931}#
                                        (if (if (vector? #{value 28931}#)
                                              (if (= (vector-length
                                                       #{value 28931}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{value 28931}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (let ((#{expression 28984}#
                                                  (vector-ref
                                                    #{value 28931}#
                                                    1))
                                                (#{wrap 28985}#
                                                  (let ((#{w2 28995}#
                                                          (vector-ref
                                                            #{value 28931}#
                                                            2)))
                                                    (let ((#{m1 28996}#
                                                            (car #{w 28933}#))
                                                          (#{s1 28997}#
                                                            (cdr #{w 28933}#)))
                                                      (if (null? #{m1 28996}#)
                                                        (if (null? #{s1 28997}#)
                                                          #{w2 28995}#
                                                          (cons (car #{w2 28995}#)
                                                                (let ((#{m2 29014}#
                                                                        (cdr #{w2 28995}#)))
                                                                  (if (null? #{m2 29014}#)
                                                                    #{s1 28997}#
                                                                    (append
                                                                      #{s1 28997}#
                                                                      #{m2 29014}#)))))
                                                        (cons (let ((#{m2 29022}#
                                                                      (car #{w2 28995}#)))
                                                                (if (null? #{m2 29022}#)
                                                                  #{m1 28996}#
                                                                  (append
                                                                    #{m1 28996}#
                                                                    #{m2 29022}#)))
                                                              (let ((#{m2 29030}#
                                                                      (cdr #{w2 28995}#)))
                                                                (if (null? #{m2 29030}#)
                                                                  #{s1 28997}#
                                                                  (append
                                                                    #{s1 28997}#
                                                                    #{m2 29030}#))))))))
                                                (#{module 28986}#
                                                  (vector-ref
                                                    #{value 28931}#
                                                    3)))
                                            (vector
                                              'syntax-object
                                              #{expression 28984}#
                                              #{wrap 28985}#
                                              #{module 28986}#))
                                          (if (null? #{value 28931}#)
                                            #{value 28931}#
                                            (vector
                                              'syntax-object
                                              #{value 28931}#
                                              #{w 28933}#
                                              #{mod 28935}#)))))
                                    (#{label 28940}#
                                      (symbol->string (gensym "i"))))
                                (let ((#{var 28941}#
                                        (let ((#{id 29091}#
                                                (if (if (vector? #{id 28939}#)
                                                      (if (= (vector-length
                                                               #{id 28939}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{id 28939}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{id 28939}# 1)
                                                  #{id 28939}#)))
                                          (gensym
                                            (string-append
                                              (symbol->string #{id 29091}#)
                                              " ")))))
                                  (begin
                                    (begin
                                      (let ((#{update 28950}#
                                              (cons (vector-ref #{id 28939}# 1)
                                                    (vector-ref
                                                      #{ribcage 28606}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 28606}#
                                          1
                                          #{update 28950}#))
                                      (let ((#{update 29062}#
                                              (cons (car (vector-ref
                                                           #{id 28939}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 28606}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 28606}#
                                          2
                                          #{update 29062}#))
                                      (let ((#{update 29077}#
                                              (cons #{label 28940}#
                                                    (vector-ref
                                                      #{ribcage 28606}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 28606}#
                                          3
                                          #{update 29077}#)))
                                    (#{parse 28608}#
                                      (cdr #{body 28716}#)
                                      (cons #{id 28939}# #{ids 28717}#)
                                      (cons #{label 28940}# #{labels 28718}#)
                                      (cons #{id 28939}# #{var-ids 28719}#)
                                      (cons #{var 28941}# #{vars 28720}#)
                                      (cons (cons #{er 28724}#
                                                  (if (if (null? (car #{w 28933}#))
                                                        (null? (cdr #{w 28933}#))
                                                        #f)
                                                    #{e 28932}#
                                                    (if (if (vector?
                                                              #{e 28932}#)
                                                          (if (= (vector-length
                                                                   #{e 28932}#)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   #{e 28932}#
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (let ((#{expression 29143}#
                                                              (vector-ref
                                                                #{e 28932}#
                                                                1))
                                                            (#{wrap 29144}#
                                                              (let ((#{w2 29154}#
                                                                      (vector-ref
                                                                        #{e 28932}#
                                                                        2)))
                                                                (let ((#{m1 29155}#
                                                                        (car #{w 28933}#))
                                                                      (#{s1 29156}#
                                                                        (cdr #{w 28933}#)))
                                                                  (if (null? #{m1 29155}#)
                                                                    (if (null? #{s1 29156}#)
                                                                      #{w2 29154}#
                                                                      (cons (car #{w2 29154}#)
                                                                            (let ((#{m2 29173}#
                                                                                    (cdr #{w2 29154}#)))
                                                                              (if (null? #{m2 29173}#)
                                                                                #{s1 29156}#
                                                                                (append
                                                                                  #{s1 29156}#
                                                                                  #{m2 29173}#)))))
                                                                    (cons (let ((#{m2 29181}#
                                                                                  (car #{w2 29154}#)))
                                                                            (if (null? #{m2 29181}#)
                                                                              #{m1 29155}#
                                                                              (append
                                                                                #{m1 29155}#
                                                                                #{m2 29181}#)))
                                                                          (let ((#{m2 29189}#
                                                                                  (cdr #{w2 29154}#)))
                                                                            (if (null? #{m2 29189}#)
                                                                              #{s1 29156}#
                                                                              (append
                                                                                #{s1 29156}#
                                                                                #{m2 29189}#))))))))
                                                            (#{module 29145}#
                                                              (vector-ref
                                                                #{e 28932}#
                                                                3)))
                                                        (vector
                                                          'syntax-object
                                                          #{expression 29143}#
                                                          #{wrap 29144}#
                                                          #{module 29145}#))
                                                      (if (null? #{e 28932}#)
                                                        #{e 28932}#
                                                        (vector
                                                          'syntax-object
                                                          #{e 28932}#
                                                          #{w 28933}#
                                                          #{mod 28935}#)))))
                                            #{vals 28721}#)
                                      (cons (cons 'lexical #{var 28941}#)
                                            #{bindings 28722}#)))))
                              (if (if (eqv? #{type 28930}# 'define-syntax-form)
                                    #t
                                    (eqv? #{type 28930}#
                                          'define-syntax-parameter-form))
                                (let ((#{id 29220}#
                                        (if (if (null? (car #{w 28933}#))
                                              (null? (cdr #{w 28933}#))
                                              #f)
                                          #{value 28931}#
                                          (if (if (vector? #{value 28931}#)
                                                (if (= (vector-length
                                                         #{value 28931}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{value 28931}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (let ((#{expression 29264}#
                                                    (vector-ref
                                                      #{value 28931}#
                                                      1))
                                                  (#{wrap 29265}#
                                                    (let ((#{w2 29275}#
                                                            (vector-ref
                                                              #{value 28931}#
                                                              2)))
                                                      (let ((#{m1 29276}#
                                                              (car #{w 28933}#))
                                                            (#{s1 29277}#
                                                              (cdr #{w 28933}#)))
                                                        (if (null? #{m1 29276}#)
                                                          (if (null? #{s1 29277}#)
                                                            #{w2 29275}#
                                                            (cons (car #{w2 29275}#)
                                                                  (let ((#{m2 29294}#
                                                                          (cdr #{w2 29275}#)))
                                                                    (if (null? #{m2 29294}#)
                                                                      #{s1 29277}#
                                                                      (append
                                                                        #{s1 29277}#
                                                                        #{m2 29294}#)))))
                                                          (cons (let ((#{m2 29302}#
                                                                        (car #{w2 29275}#)))
                                                                  (if (null? #{m2 29302}#)
                                                                    #{m1 29276}#
                                                                    (append
                                                                      #{m1 29276}#
                                                                      #{m2 29302}#)))
                                                                (let ((#{m2 29310}#
                                                                        (cdr #{w2 29275}#)))
                                                                  (if (null? #{m2 29310}#)
                                                                    #{s1 29277}#
                                                                    (append
                                                                      #{s1 29277}#
                                                                      #{m2 29310}#))))))))
                                                  (#{module 29266}#
                                                    (vector-ref
                                                      #{value 28931}#
                                                      3)))
                                              (vector
                                                'syntax-object
                                                #{expression 29264}#
                                                #{wrap 29265}#
                                                #{module 29266}#))
                                            (if (null? #{value 28931}#)
                                              #{value 28931}#
                                              (vector
                                                'syntax-object
                                                #{value 28931}#
                                                #{w 28933}#
                                                #{mod 28935}#)))))
                                      (#{label 29221}#
                                        (symbol->string (gensym "i"))))
                                  (begin
                                    (begin
                                      (let ((#{update 29230}#
                                              (cons (vector-ref #{id 29220}# 1)
                                                    (vector-ref
                                                      #{ribcage 28606}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 28606}#
                                          1
                                          #{update 29230}#))
                                      (let ((#{update 29342}#
                                              (cons (car (vector-ref
                                                           #{id 29220}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 28606}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 28606}#
                                          2
                                          #{update 29342}#))
                                      (let ((#{update 29357}#
                                              (cons #{label 29221}#
                                                    (vector-ref
                                                      #{ribcage 28606}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 28606}#
                                          3
                                          #{update 29357}#)))
                                    (#{parse 28608}#
                                      (cdr #{body 28716}#)
                                      (cons #{id 29220}# #{ids 28717}#)
                                      (cons #{label 29221}# #{labels 28718}#)
                                      #{var-ids 28719}#
                                      #{vars 28720}#
                                      #{vals 28721}#
                                      (cons (cons (if (eq? #{type 28930}#
                                                           'define-syntax-parameter-form)
                                                    'syntax-parameter
                                                    'macro)
                                                  (cons #{er 28724}#
                                                        (if (if (null? (car #{w 28933}#))
                                                              (null? (cdr #{w 28933}#))
                                                              #f)
                                                          #{e 28932}#
                                                          (if (if (vector?
                                                                    #{e 28932}#)
                                                                (if (= (vector-length
                                                                         #{e 28932}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{e 28932}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (let ((#{expression 29396}#
                                                                    (vector-ref
                                                                      #{e 28932}#
                                                                      1))
                                                                  (#{wrap 29397}#
                                                                    (let ((#{w2 29407}#
                                                                            (vector-ref
                                                                              #{e 28932}#
                                                                              2)))
                                                                      (let ((#{m1 29408}#
                                                                              (car #{w 28933}#))
                                                                            (#{s1 29409}#
                                                                              (cdr #{w 28933}#)))
                                                                        (if (null? #{m1 29408}#)
                                                                          (if (null? #{s1 29409}#)
                                                                            #{w2 29407}#
                                                                            (cons (car #{w2 29407}#)
                                                                                  (let ((#{m2 29426}#
                                                                                          (cdr #{w2 29407}#)))
                                                                                    (if (null? #{m2 29426}#)
                                                                                      #{s1 29409}#
                                                                                      (append
                                                                                        #{s1 29409}#
                                                                                        #{m2 29426}#)))))
                                                                          (cons (let ((#{m2 29434}#
                                                                                        (car #{w2 29407}#)))
                                                                                  (if (null? #{m2 29434}#)
                                                                                    #{m1 29408}#
                                                                                    (append
                                                                                      #{m1 29408}#
                                                                                      #{m2 29434}#)))
                                                                                (let ((#{m2 29442}#
                                                                                        (cdr #{w2 29407}#)))
                                                                                  (if (null? #{m2 29442}#)
                                                                                    #{s1 29409}#
                                                                                    (append
                                                                                      #{s1 29409}#
                                                                                      #{m2 29442}#))))))))
                                                                  (#{module 29398}#
                                                                    (vector-ref
                                                                      #{e 28932}#
                                                                      3)))
                                                              (vector
                                                                'syntax-object
                                                                #{expression 29396}#
                                                                #{wrap 29397}#
                                                                #{module 29398}#))
                                                            (if (null? #{e 28932}#)
                                                              #{e 28932}#
                                                              (vector
                                                                'syntax-object
                                                                #{e 28932}#
                                                                #{w 28933}#
                                                                #{mod 28935}#))))))
                                            #{bindings 28722}#))))
                                (if (eqv? #{type 28930}# 'begin-form)
                                  (let ((#{tmp 29469}#
                                          ($sc-dispatch
                                            #{e 28932}#
                                            '(_ . each-any))))
                                    (if #{tmp 29469}#
                                      (@apply
                                        (lambda (#{e1 29473}#)
                                          (#{parse 28608}#
                                            (letrec*
                                              ((#{f 29474}#
                                                 (lambda (#{forms 29690}#)
                                                   (if (null? #{forms 29690}#)
                                                     (cdr #{body 28716}#)
                                                     (cons (cons #{er 28724}#
                                                                 (let ((#{x 29694}#
                                                                         (car #{forms 29690}#)))
                                                                   (if (if (null? (car #{w 28933}#))
                                                                         (null? (cdr #{w 28933}#))
                                                                         #f)
                                                                     #{x 29694}#
                                                                     (if (if (vector?
                                                                               #{x 29694}#)
                                                                           (if (= (vector-length
                                                                                    #{x 29694}#)
                                                                                  4)
                                                                             (eq? (vector-ref
                                                                                    #{x 29694}#
                                                                                    0)
                                                                                  'syntax-object)
                                                                             #f)
                                                                           #f)
                                                                       (let ((#{expression 29712}#
                                                                               (vector-ref
                                                                                 #{x 29694}#
                                                                                 1))
                                                                             (#{wrap 29713}#
                                                                               (let ((#{w2 29721}#
                                                                                       (vector-ref
                                                                                         #{x 29694}#
                                                                                         2)))
                                                                                 (let ((#{m1 29722}#
                                                                                         (car #{w 28933}#))
                                                                                       (#{s1 29723}#
                                                                                         (cdr #{w 28933}#)))
                                                                                   (if (null? #{m1 29722}#)
                                                                                     (if (null? #{s1 29723}#)
                                                                                       #{w2 29721}#
                                                                                       (cons (car #{w2 29721}#)
                                                                                             (let ((#{m2 29738}#
                                                                                                     (cdr #{w2 29721}#)))
                                                                                               (if (null? #{m2 29738}#)
                                                                                                 #{s1 29723}#
                                                                                                 (append
                                                                                                   #{s1 29723}#
                                                                                                   #{m2 29738}#)))))
                                                                                     (cons (let ((#{m2 29746}#
                                                                                                   (car #{w2 29721}#)))
                                                                                             (if (null? #{m2 29746}#)
                                                                                               #{m1 29722}#
                                                                                               (append
                                                                                                 #{m1 29722}#
                                                                                                 #{m2 29746}#)))
                                                                                           (let ((#{m2 29754}#
                                                                                                   (cdr #{w2 29721}#)))
                                                                                             (if (null? #{m2 29754}#)
                                                                                               #{s1 29723}#
                                                                                               (append
                                                                                                 #{s1 29723}#
                                                                                                 #{m2 29754}#))))))))
                                                                             (#{module 29714}#
                                                                               (vector-ref
                                                                                 #{x 29694}#
                                                                                 3)))
                                                                         (vector
                                                                           'syntax-object
                                                                           #{expression 29712}#
                                                                           #{wrap 29713}#
                                                                           #{module 29714}#))
                                                                       (if (null? #{x 29694}#)
                                                                         #{x 29694}#
                                                                         (vector
                                                                           'syntax-object
                                                                           #{x 29694}#
                                                                           #{w 28933}#
                                                                           #{mod 28935}#))))))
                                                           (#{f 29474}#
                                                             (cdr #{forms 29690}#)))))))
                                              (#{f 29474}# #{e1 29473}#))
                                            #{ids 28717}#
                                            #{labels 28718}#
                                            #{var-ids 28719}#
                                            #{vars 28720}#
                                            #{vals 28721}#
                                            #{bindings 28722}#))
                                        #{tmp 29469}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 28932}#)))
                                  (if (eqv? #{type 28930}# 'local-syntax-form)
                                    (#{expand-local-syntax 4448}#
                                      #{value 28931}#
                                      #{e 28932}#
                                      #{er 28724}#
                                      #{w 28933}#
                                      #{s 28934}#
                                      #{mod 28935}#
                                      (lambda (#{forms 29780}#
                                               #{er 29781}#
                                               #{w 29782}#
                                               #{s 29783}#
                                               #{mod 29784}#)
                                        (#{parse 28608}#
                                          (letrec*
                                            ((#{f 29785}#
                                               (lambda (#{forms 30001}#)
                                                 (if (null? #{forms 30001}#)
                                                   (cdr #{body 28716}#)
                                                   (cons (cons #{er 29781}#
                                                               (let ((#{x 30005}#
                                                                       (car #{forms 30001}#)))
                                                                 (if (if (null? (car #{w 29782}#))
                                                                       (null? (cdr #{w 29782}#))
                                                                       #f)
                                                                   #{x 30005}#
                                                                   (if (if (vector?
                                                                             #{x 30005}#)
                                                                         (if (= (vector-length
                                                                                  #{x 30005}#)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  #{x 30005}#
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((#{expression 30023}#
                                                                             (vector-ref
                                                                               #{x 30005}#
                                                                               1))
                                                                           (#{wrap 30024}#
                                                                             (let ((#{w2 30032}#
                                                                                     (vector-ref
                                                                                       #{x 30005}#
                                                                                       2)))
                                                                               (let ((#{m1 30033}#
                                                                                       (car #{w 29782}#))
                                                                                     (#{s1 30034}#
                                                                                       (cdr #{w 29782}#)))
                                                                                 (if (null? #{m1 30033}#)
                                                                                   (if (null? #{s1 30034}#)
                                                                                     #{w2 30032}#
                                                                                     (cons (car #{w2 30032}#)
                                                                                           (let ((#{m2 30049}#
                                                                                                   (cdr #{w2 30032}#)))
                                                                                             (if (null? #{m2 30049}#)
                                                                                               #{s1 30034}#
                                                                                               (append
                                                                                                 #{s1 30034}#
                                                                                                 #{m2 30049}#)))))
                                                                                   (cons (let ((#{m2 30057}#
                                                                                                 (car #{w2 30032}#)))
                                                                                           (if (null? #{m2 30057}#)
                                                                                             #{m1 30033}#
                                                                                             (append
                                                                                               #{m1 30033}#
                                                                                               #{m2 30057}#)))
                                                                                         (let ((#{m2 30065}#
                                                                                                 (cdr #{w2 30032}#)))
                                                                                           (if (null? #{m2 30065}#)
                                                                                             #{s1 30034}#
                                                                                             (append
                                                                                               #{s1 30034}#
                                                                                               #{m2 30065}#))))))))
                                                                           (#{module 30025}#
                                                                             (vector-ref
                                                                               #{x 30005}#
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         #{expression 30023}#
                                                                         #{wrap 30024}#
                                                                         #{module 30025}#))
                                                                     (if (null? #{x 30005}#)
                                                                       #{x 30005}#
                                                                       (vector
                                                                         'syntax-object
                                                                         #{x 30005}#
                                                                         #{w 29782}#
                                                                         #{mod 29784}#))))))
                                                         (#{f 29785}#
                                                           (cdr #{forms 30001}#)))))))
                                            (#{f 29785}# #{forms 29780}#))
                                          #{ids 28717}#
                                          #{labels 28718}#
                                          #{var-ids 28719}#
                                          #{vars 28720}#
                                          #{vals 28721}#
                                          #{bindings 28722}#)))
                                    (if (null? #{ids 28717}#)
                                      (#{build-sequence 4392}#
                                        #f
                                        (map (lambda (#{x 30154}#)
                                               (#{expand 4443}#
                                                 (cdr #{x 30154}#)
                                                 (car #{x 30154}#)
                                                 '(())
                                                 #{mod 28935}#))
                                             (cons (cons #{er 28724}#
                                                         (let ((#{x 30233}#
                                                                 (begin
                                                                   (if (if (pair? #{e 28932}#)
                                                                         #{s 28934}#
                                                                         #f)
                                                                     (set-source-properties!
                                                                       #{e 28932}#
                                                                       #{s 28934}#))
                                                                   #{e 28932}#)))
                                                           (if (if (null? (car #{w 28933}#))
                                                                 (null? (cdr #{w 28933}#))
                                                                 #f)
                                                             #{x 30233}#
                                                             (if (if (vector?
                                                                       #{x 30233}#)
                                                                   (if (= (vector-length
                                                                            #{x 30233}#)
                                                                          4)
                                                                     (eq? (vector-ref
                                                                            #{x 30233}#
                                                                            0)
                                                                          'syntax-object)
                                                                     #f)
                                                                   #f)
                                                               (let ((#{expression 30265}#
                                                                       (vector-ref
                                                                         #{x 30233}#
                                                                         1))
                                                                     (#{wrap 30266}#
                                                                       (let ((#{w2 30274}#
                                                                               (vector-ref
                                                                                 #{x 30233}#
                                                                                 2)))
                                                                         (let ((#{m1 30275}#
                                                                                 (car #{w 28933}#))
                                                                               (#{s1 30276}#
                                                                                 (cdr #{w 28933}#)))
                                                                           (if (null? #{m1 30275}#)
                                                                             (if (null? #{s1 30276}#)
                                                                               #{w2 30274}#
                                                                               (cons (car #{w2 30274}#)
                                                                                     (let ((#{m2 30291}#
                                                                                             (cdr #{w2 30274}#)))
                                                                                       (if (null? #{m2 30291}#)
                                                                                         #{s1 30276}#
                                                                                         (append
                                                                                           #{s1 30276}#
                                                                                           #{m2 30291}#)))))
                                                                             (cons (let ((#{m2 30299}#
                                                                                           (car #{w2 30274}#)))
                                                                                     (if (null? #{m2 30299}#)
                                                                                       #{m1 30275}#
                                                                                       (append
                                                                                         #{m1 30275}#
                                                                                         #{m2 30299}#)))
                                                                                   (let ((#{m2 30307}#
                                                                                           (cdr #{w2 30274}#)))
                                                                                     (if (null? #{m2 30307}#)
                                                                                       #{s1 30276}#
                                                                                       (append
                                                                                         #{s1 30276}#
                                                                                         #{m2 30307}#))))))))
                                                                     (#{module 30267}#
                                                                       (vector-ref
                                                                         #{x 30233}#
                                                                         3)))
                                                                 (vector
                                                                   'syntax-object
                                                                   #{expression 30265}#
                                                                   #{wrap 30266}#
                                                                   #{module 30267}#))
                                                               (if (null? #{x 30233}#)
                                                                 #{x 30233}#
                                                                 (vector
                                                                   'syntax-object
                                                                   #{x 30233}#
                                                                   #{w 28933}#
                                                                   #{mod 28935}#))))))
                                                   (cdr #{body 28716}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 4433}#
                                                   #{ids 28717}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 28601}#))
                                        (letrec*
                                          ((#{loop 30406}#
                                             (lambda (#{bs 30409}#
                                                      #{er-cache 30410}#
                                                      #{r-cache 30411}#)
                                               (if (not (null? #{bs 30409}#))
                                                 (let ((#{b 30412}#
                                                         (car #{bs 30409}#)))
                                                   (if (let ((#{t 30415}#
                                                               (car #{b 30412}#)))
                                                         (if (eq? #{t 30415}#
                                                                  'macro)
                                                           #t
                                                           (eq? #{t 30415}#
                                                                'syntax-parameter)))
                                                     (let ((#{er 30417}#
                                                             (car (cdr #{b 30412}#))))
                                                       (let ((#{r-cache 30418}#
                                                               (if (eq? #{er 30417}#
                                                                        #{er-cache 30410}#)
                                                                 #{r-cache 30411}#
                                                                 (#{macros-only-env 4407}#
                                                                   #{er 30417}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 30412}#
                                                             (#{eval-local-transformer 4449}#
                                                               (#{expand 4443}#
                                                                 (cdr (cdr #{b 30412}#))
                                                                 #{r-cache 30418}#
                                                                 '(())
                                                                 #{mod 28935}#)
                                                               #{mod 28935}#))
                                                           (if (eq? (car #{b 30412}#)
                                                                    'syntax-parameter)
                                                             (set-cdr!
                                                               #{b 30412}#
                                                               (list (cdr #{b 30412}#))))
                                                           (#{loop 30406}#
                                                             (cdr #{bs 30409}#)
                                                             #{er 30417}#
                                                             #{r-cache 30418}#))))
                                                     (#{loop 30406}#
                                                       (cdr #{bs 30409}#)
                                                       #{er-cache 30410}#
                                                       #{r-cache 30411}#)))))))
                                          (#{loop 30406}#
                                            #{bindings 28722}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 28605}#
                                          (#{extend-env 4405}#
                                            #{labels 28718}#
                                            #{bindings 28722}#
                                            (cdr #{r 28605}#)))
                                        (#{build-letrec 4395}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 28719}#))
                                          (reverse #{vars 28720}#)
                                          (map (lambda (#{x 30846}#)
                                                 (#{expand 4443}#
                                                   (cdr #{x 30846}#)
                                                   (car #{x 30846}#)
                                                   '(())
                                                   #{mod 28935}#))
                                               (reverse #{vals 28721}#))
                                          (#{build-sequence 4392}#
                                            #f
                                            (map (lambda (#{x 30990}#)
                                                   (#{expand 4443}#
                                                     (cdr #{x 30990}#)
                                                     (car #{x 30990}#)
                                                     '(())
                                                     #{mod 28935}#))
                                                 (cons (cons #{er 28724}#
                                                             (let ((#{x 31069}#
                                                                     (begin
                                                                       (if (if (pair? #{e 28932}#)
                                                                             #{s 28934}#
                                                                             #f)
                                                                         (set-source-properties!
                                                                           #{e 28932}#
                                                                           #{s 28934}#))
                                                                       #{e 28932}#)))
                                                               (if (if (null? (car #{w 28933}#))
                                                                     (null? (cdr #{w 28933}#))
                                                                     #f)
                                                                 #{x 31069}#
                                                                 (if (if (vector?
                                                                           #{x 31069}#)
                                                                       (if (= (vector-length
                                                                                #{x 31069}#)
                                                                              4)
                                                                         (eq? (vector-ref
                                                                                #{x 31069}#
                                                                                0)
                                                                              'syntax-object)
                                                                         #f)
                                                                       #f)
                                                                   (let ((#{expression 31101}#
                                                                           (vector-ref
                                                                             #{x 31069}#
                                                                             1))
                                                                         (#{wrap 31102}#
                                                                           (let ((#{w2 31110}#
                                                                                   (vector-ref
                                                                                     #{x 31069}#
                                                                                     2)))
                                                                             (let ((#{m1 31111}#
                                                                                     (car #{w 28933}#))
                                                                                   (#{s1 31112}#
                                                                                     (cdr #{w 28933}#)))
                                                                               (if (null? #{m1 31111}#)
                                                                                 (if (null? #{s1 31112}#)
                                                                                   #{w2 31110}#
                                                                                   (cons (car #{w2 31110}#)
                                                                                         (let ((#{m2 31127}#
                                                                                                 (cdr #{w2 31110}#)))
                                                                                           (if (null? #{m2 31127}#)
                                                                                             #{s1 31112}#
                                                                                             (append
                                                                                               #{s1 31112}#
                                                                                               #{m2 31127}#)))))
                                                                                 (cons (let ((#{m2 31135}#
                                                                                               (car #{w2 31110}#)))
                                                                                         (if (null? #{m2 31135}#)
                                                                                           #{m1 31111}#
                                                                                           (append
                                                                                             #{m1 31111}#
                                                                                             #{m2 31135}#)))
                                                                                       (let ((#{m2 31143}#
                                                                                               (cdr #{w2 31110}#)))
                                                                                         (if (null? #{m2 31143}#)
                                                                                           #{s1 31112}#
                                                                                           (append
                                                                                             #{s1 31112}#
                                                                                             #{m2 31143}#))))))))
                                                                         (#{module 31103}#
                                                                           (vector-ref
                                                                             #{x 31069}#
                                                                             3)))
                                                                     (vector
                                                                       'syntax-object
                                                                       #{expression 31101}#
                                                                       #{wrap 31102}#
                                                                       #{module 31103}#))
                                                                   (if (null? #{x 31069}#)
                                                                     #{x 31069}#
                                                                     (vector
                                                                       'syntax-object
                                                                       #{x 31069}#
                                                                       #{w 28933}#
                                                                       #{mod 28935}#))))))
                                                       (cdr #{body 28716}#))))))))))))))))))
               (#{parse 28608}#
                 (map (lambda (#{x 28611}#)
                        (cons #{r 28605}#
                              (if (if (null? (car #{w 28607}#))
                                    (null? (cdr #{w 28607}#))
                                    #f)
                                #{x 28611}#
                                (if (if (vector? #{x 28611}#)
                                      (if (= (vector-length #{x 28611}#) 4)
                                        (eq? (vector-ref #{x 28611}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 28647}#
                                          (vector-ref #{x 28611}# 1))
                                        (#{wrap 28648}#
                                          (let ((#{w2 28658}#
                                                  (vector-ref #{x 28611}# 2)))
                                            (let ((#{m1 28659}#
                                                    (car #{w 28607}#))
                                                  (#{s1 28660}#
                                                    (cdr #{w 28607}#)))
                                              (if (null? #{m1 28659}#)
                                                (if (null? #{s1 28660}#)
                                                  #{w2 28658}#
                                                  (cons (car #{w2 28658}#)
                                                        (let ((#{m2 28677}#
                                                                (cdr #{w2 28658}#)))
                                                          (if (null? #{m2 28677}#)
                                                            #{s1 28660}#
                                                            (append
                                                              #{s1 28660}#
                                                              #{m2 28677}#)))))
                                                (cons (let ((#{m2 28685}#
                                                              (car #{w2 28658}#)))
                                                        (if (null? #{m2 28685}#)
                                                          #{m1 28659}#
                                                          (append
                                                            #{m1 28659}#
                                                            #{m2 28685}#)))
                                                      (let ((#{m2 28693}#
                                                              (cdr #{w2 28658}#)))
                                                        (if (null? #{m2 28693}#)
                                                          #{s1 28660}#
                                                          (append
                                                            #{s1 28660}#
                                                            #{m2 28693}#))))))))
                                        (#{module 28649}#
                                          (vector-ref #{x 28611}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 28647}#
                                      #{wrap 28648}#
                                      #{module 28649}#))
                                  (if (null? #{x 28611}#)
                                    #{x 28611}#
                                    (vector
                                      'syntax-object
                                      #{x 28611}#
                                      #{w 28607}#
                                      #{mod 28604}#))))))
                      #{body 28600}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{expand-local-syntax 4448}#
     (lambda (#{rec? 31158}#
              #{e 31159}#
              #{r 31160}#
              #{w 31161}#
              #{s 31162}#
              #{mod 31163}#
              #{k 31164}#)
       (let ((#{tmp 31166}#
               ($sc-dispatch
                 #{e 31159}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 31166}#
           (@apply
             (lambda (#{id 31170}#
                      #{val 31171}#
                      #{e1 31172}#
                      #{e2 31173}#)
               (if (not (#{valid-bound-ids? 4433}# #{id 31170}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 31159}#)
                 (let ((#{labels 31270}#
                         (#{gen-labels 4413}# #{id 31170}#)))
                   (let ((#{new-w 31271}#
                           (#{make-binding-wrap 4424}#
                             #{id 31170}#
                             #{labels 31270}#
                             #{w 31161}#)))
                     (#{k 31164}#
                       (cons #{e1 31172}# #{e2 31173}#)
                       (#{extend-env 4405}#
                         #{labels 31270}#
                         (let ((#{trans-r 31311}#
                                 (#{macros-only-env 4407}# #{r 31160}#)))
                           (begin
                             (if #{rec? 31158}# (if #f #f))
                             (map (lambda (#{x 31312}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 4449}#
                                            (#{expand 4443}#
                                              #{x 31312}#
                                              #{trans-r 31311}#
                                              (if #{rec? 31158}#
                                                #{new-w 31271}#
                                                #{w 31161}#)
                                              #{mod 31163}#)
                                            #{mod 31163}#)))
                                  #{val 31171}#)))
                         #{r 31160}#)
                       #{new-w 31271}#
                       #{s 31162}#
                       #{mod 31163}#)))))
             #{tmp 31166}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (let ((#{x 31645}#
                     (begin
                       (if (if (pair? #{e 31159}#) #{s 31162}# #f)
                         (set-source-properties! #{e 31159}# #{s 31162}#))
                       #{e 31159}#)))
               (if (if (null? (car #{w 31161}#))
                     (null? (cdr #{w 31161}#))
                     #f)
                 #{x 31645}#
                 (if (if (vector? #{x 31645}#)
                       (if (= (vector-length #{x 31645}#) 4)
                         (eq? (vector-ref #{x 31645}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 31677}# (vector-ref #{x 31645}# 1))
                         (#{wrap 31678}#
                           (let ((#{w2 31686}# (vector-ref #{x 31645}# 2)))
                             (let ((#{m1 31687}# (car #{w 31161}#))
                                   (#{s1 31688}# (cdr #{w 31161}#)))
                               (if (null? #{m1 31687}#)
                                 (if (null? #{s1 31688}#)
                                   #{w2 31686}#
                                   (cons (car #{w2 31686}#)
                                         (let ((#{m2 31703}#
                                                 (cdr #{w2 31686}#)))
                                           (if (null? #{m2 31703}#)
                                             #{s1 31688}#
                                             (append
                                               #{s1 31688}#
                                               #{m2 31703}#)))))
                                 (cons (let ((#{m2 31711}# (car #{w2 31686}#)))
                                         (if (null? #{m2 31711}#)
                                           #{m1 31687}#
                                           (append #{m1 31687}# #{m2 31711}#)))
                                       (let ((#{m2 31719}# (cdr #{w2 31686}#)))
                                         (if (null? #{m2 31719}#)
                                           #{s1 31688}#
                                           (append
                                             #{s1 31688}#
                                             #{m2 31719}#))))))))
                         (#{module 31679}# (vector-ref #{x 31645}# 3)))
                     (vector
                       'syntax-object
                       #{expression 31677}#
                       #{wrap 31678}#
                       #{module 31679}#))
                   (if (null? #{x 31645}#)
                     #{x 31645}#
                     (vector
                       'syntax-object
                       #{x 31645}#
                       #{w 31161}#
                       #{mod 31163}#))))))))))
   (#{eval-local-transformer 4449}#
     (lambda (#{expanded 31737}# #{mod 31738}#)
       (let ((#{p 31739}# (primitive-eval #{expanded 31737}#)))
         (if (procedure? #{p 31739}#)
           #{p 31739}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 31739}#)))))
   (#{ellipsis? 4451}#
     (lambda (#{x 6020}#)
       (if (if (if (vector? #{x 6020}#)
                 (if (= (vector-length #{x 6020}#) 4)
                   (eq? (vector-ref #{x 6020}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 6020}# 1))
             #f)
         (#{free-id=? 4431}#
           #{x 6020}#
           '#(syntax-object
              ...
              ((top)
               #(ribcage () () ())
               #(ribcage () () ())
               #(ribcage #(x) #((top)) #("i2338"))
               #(ribcage
                 (lambda-var-list
                   gen-var
                   strip
                   expand-lambda-case
                   lambda*-formals
                   expand-simple-lambda
                   lambda-formals
                   ellipsis?
                   expand-void
                   eval-local-transformer
                   expand-local-syntax
                   expand-body
                   expand-macro
                   expand-call
                   expand-expr
                   expand
                   syntax-type
                   parse-when-list
                   expand-install-global
                   expand-top-sequence
                   expand-sequence
                   source-wrap
                   wrap
                   bound-id-member?
                   distinct-bound-ids?
                   valid-bound-ids?
                   bound-id=?
                   free-id=?
                   resolve-identifier
                   id-var-name
                   same-marks?
                   join-marks
                   join-wraps
                   smart-append
                   make-binding-wrap
                   extend-ribcage!
                   make-empty-ribcage
                   new-mark
                   anti-mark
                   the-anti-mark
                   top-marked?
                   top-wrap
                   empty-wrap
                   set-ribcage-labels!
                   set-ribcage-marks!
                   set-ribcage-symnames!
                   ribcage-labels
                   ribcage-marks
                   ribcage-symnames
                   ribcage?
                   make-ribcage
                   gen-labels
                   gen-label
                   make-rename
                   rename-marks
                   rename-new
                   rename-old
                   subst-rename?
                   wrap-subst
                   wrap-marks
                   make-wrap
                   id-sym-name&marks
                   id-sym-name
                   id?
                   nonsymbol-id?
                   global-extend
                   macros-only-env
                   extend-var-env
                   extend-env
                   null-env
                   binding-value
                   binding-type
                   make-binding
                   arg-check
                   source-annotation
                   no-source
                   set-syntax-object-module!
                   set-syntax-object-wrap!
                   set-syntax-object-expression!
                   syntax-object-module
                   syntax-object-wrap
                   syntax-object-expression
                   syntax-object?
                   make-syntax-object
                   build-lexical-var
                   build-letrec
                   build-named-let
                   build-let
                   build-sequence
                   build-data
                   build-primref
                   build-primcall
                   build-lambda-case
                   build-case-lambda
                   build-simple-lambda
                   build-global-definition
                   build-global-assignment
                   build-global-reference
                   analyze-variable
                   build-lexical-assignment
                   build-lexical-reference
                   build-dynlet
                   build-conditional
                   build-call
                   build-void
                   maybe-name-value!
                   decorate-source
                   get-global-definition-hook
                   put-global-definition-hook
                   gensym-hook
                   local-eval-hook
                   top-level-eval-hook
                   fx<
                   fx=
                   fx-
                   fx+
                   set-lambda-meta!
                   lambda-meta
                   lambda?
                   make-dynlet
                   make-letrec
                   make-let
                   make-lambda-case
                   make-lambda
                   make-seq
                   make-primcall
                   make-call
                   make-conditional
                   make-toplevel-define
                   make-toplevel-set
                   make-toplevel-ref
                   make-module-set
                   make-module-ref
                   make-lexical-set
                   make-lexical-ref
                   make-primitive-ref
                   make-const
                   make-void)
                 ((top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top))
                 ("i471"
                  "i469"
                  "i467"
                  "i465"
                  "i463"
                  "i461"
                  "i459"
                  "i457"
                  "i455"
                  "i453"
                  "i451"
                  "i449"
                  "i447"
                  "i445"
                  "i443"
                  "i441"
                  "i439"
                  "i437"
                  "i435"
                  "i433"
                  "i431"
                  "i429"
                  "i427"
                  "i425"
                  "i423"
                  "i421"
                  "i419"
                  "i417"
                  "i415"
                  "i413"
                  "i411"
                  "i409"
                  "i407"
                  "i405"
                  "i403"
                  "i401"
                  "i400"
                  "i398"
                  "i395"
                  "i394"
                  "i393"
                  "i391"
                  "i390"
                  "i388"
                  "i386"
                  "i384"
                  "i382"
                  "i380"
                  "i378"
                  "i376"
                  "i374"
                  "i371"
                  "i369"
                  "i368"
                  "i366"
                  "i364"
                  "i362"
                  "i360"
                  "i359"
                  "i358"
                  "i357"
                  "i355"
                  "i354"
                  "i351"
                  "i349"
                  "i347"
                  "i345"
                  "i343"
                  "i341"
                  "i340"
                  "i339"
                  "i337"
                  "i335"
                  "i334"
                  "i331"
                  "i330"
                  "i328"
                  "i326"
                  "i324"
                  "i322"
                  "i320"
                  "i318"
                  "i316"
                  "i314"
                  "i312"
                  "i309"
                  "i307"
                  "i305"
                  "i303"
                  "i301"
                  "i299"
                  "i297"
                  "i295"
                  "i293"
                  "i291"
                  "i289"
                  "i287"
                  "i285"
                  "i283"
                  "i281"
                  "i279"
                  "i277"
                  "i275"
                  "i273"
                  "i271"
                  "i269"
                  "i267"
                  "i265"
                  "i263"
                  "i262"
                  "i259"
                  "i257"
                  "i256"
                  "i255"
                  "i254"
                  "i253"
                  "i251"
                  "i249"
                  "i247"
                  "i244"
                  "i242"
                  "i240"
                  "i238"
                  "i236"
                  "i234"
                  "i232"
                  "i230"
                  "i228"
                  "i226"
                  "i224"
                  "i222"
                  "i220"
                  "i218"
                  "i216"
                  "i214"
                  "i212"
                  "i210"
                  "i208"))
               #(ribcage
                 (define-structure
                   define-expansion-accessors
                   define-expansion-constructors)
                 ((top) (top) (top))
                 ("i46" "i45" "i44"))
               #(ribcage () () ()))
              (hygiene guile)))
         #f)))
   (#{lambda-formals 4452}#
     (lambda (#{orig-args 31744}#)
       (letrec*
         ((#{req 31745}#
            (lambda (#{args 31749}# #{rreq 31750}#)
              (let ((#{tmp 31752}# ($sc-dispatch #{args 31749}# '())))
                (if #{tmp 31752}#
                  (@apply
                    (lambda ()
                      (#{check 31746}# (reverse #{rreq 31750}#) #f))
                    #{tmp 31752}#)
                  (let ((#{tmp 31868}#
                          ($sc-dispatch #{args 31749}# '(any . any))))
                    (if (if #{tmp 31868}#
                          (@apply
                            (lambda (#{a 31872}# #{b 31873}#)
                              (if (symbol? #{a 31872}#)
                                #t
                                (if (if (vector? #{a 31872}#)
                                      (if (= (vector-length #{a 31872}#) 4)
                                        (eq? (vector-ref #{a 31872}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 31872}# 1))
                                  #f)))
                            #{tmp 31868}#)
                          #f)
                      (@apply
                        (lambda (#{a 31900}# #{b 31901}#)
                          (#{req 31745}#
                            #{b 31901}#
                            (cons #{a 31900}# #{rreq 31750}#)))
                        #{tmp 31868}#)
                      (let ((#{tmp 31902}# (list #{args 31749}#)))
                        (if (@apply
                              (lambda (#{r 31904}#)
                                (if (symbol? #{r 31904}#)
                                  #t
                                  (if (if (vector? #{r 31904}#)
                                        (if (= (vector-length #{r 31904}#) 4)
                                          (eq? (vector-ref #{r 31904}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{r 31904}# 1))
                                    #f)))
                              #{tmp 31902}#)
                          (@apply
                            (lambda (#{r 31934}#)
                              (#{check 31746}#
                                (reverse #{rreq 31750}#)
                                #{r 31934}#))
                            #{tmp 31902}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 31744}#
                            #{args 31749}#)))))))))
          (#{check 31746}#
            (lambda (#{req 32058}# #{rest 32059}#)
              (if (#{distinct-bound-ids? 4434}#
                    (if #{rest 32059}#
                      (cons #{rest 32059}# #{req 32058}#)
                      #{req 32058}#))
                (values #{req 32058}# #f #{rest 32059}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 31744}#)))))
         (#{req 31745}# #{orig-args 31744}# '()))))
   (#{expand-simple-lambda 4453}#
     (lambda (#{e 32168}#
              #{r 32169}#
              #{w 32170}#
              #{s 32171}#
              #{mod 32172}#
              #{req 32173}#
              #{rest 32174}#
              #{meta 32175}#
              #{body 32176}#)
       (let ((#{ids 32177}#
               (if #{rest 32174}#
                 (append #{req 32173}# (list #{rest 32174}#))
                 #{req 32173}#)))
         (let ((#{vars 32178}#
                 (map #{gen-var 4457}# #{ids 32177}#)))
           (let ((#{labels 32179}#
                   (#{gen-labels 4413}# #{ids 32177}#)))
             (#{build-simple-lambda 4386}#
               #{s 32171}#
               (map syntax->datum #{req 32173}#)
               (if #{rest 32174}#
                 (syntax->datum #{rest 32174}#)
                 #f)
               #{vars 32178}#
               #{meta 32175}#
               (#{expand-body 4447}#
                 #{body 32176}#
                 (let ((#{x 32368}#
                         (begin
                           (if (if (pair? #{e 32168}#) #{s 32171}# #f)
                             (set-source-properties! #{e 32168}# #{s 32171}#))
                           #{e 32168}#)))
                   (if (if (null? (car #{w 32170}#))
                         (null? (cdr #{w 32170}#))
                         #f)
                     #{x 32368}#
                     (if (if (vector? #{x 32368}#)
                           (if (= (vector-length #{x 32368}#) 4)
                             (eq? (vector-ref #{x 32368}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 32400}# (vector-ref #{x 32368}# 1))
                             (#{wrap 32401}#
                               (let ((#{w2 32409}# (vector-ref #{x 32368}# 2)))
                                 (let ((#{m1 32410}# (car #{w 32170}#))
                                       (#{s1 32411}# (cdr #{w 32170}#)))
                                   (if (null? #{m1 32410}#)
                                     (if (null? #{s1 32411}#)
                                       #{w2 32409}#
                                       (cons (car #{w2 32409}#)
                                             (let ((#{m2 32426}#
                                                     (cdr #{w2 32409}#)))
                                               (if (null? #{m2 32426}#)
                                                 #{s1 32411}#
                                                 (append
                                                   #{s1 32411}#
                                                   #{m2 32426}#)))))
                                     (cons (let ((#{m2 32434}#
                                                   (car #{w2 32409}#)))
                                             (if (null? #{m2 32434}#)
                                               #{m1 32410}#
                                               (append
                                                 #{m1 32410}#
                                                 #{m2 32434}#)))
                                           (let ((#{m2 32442}#
                                                   (cdr #{w2 32409}#)))
                                             (if (null? #{m2 32442}#)
                                               #{s1 32411}#
                                               (append
                                                 #{s1 32411}#
                                                 #{m2 32442}#))))))))
                             (#{module 32402}# (vector-ref #{x 32368}# 3)))
                         (vector
                           'syntax-object
                           #{expression 32400}#
                           #{wrap 32401}#
                           #{module 32402}#))
                       (if (null? #{x 32368}#)
                         #{x 32368}#
                         (vector
                           'syntax-object
                           #{x 32368}#
                           #{w 32170}#
                           #{mod 32172}#)))))
                 (#{extend-var-env 4406}#
                   #{labels 32179}#
                   #{vars 32178}#
                   #{r 32169}#)
                 (#{make-binding-wrap 4424}#
                   #{ids 32177}#
                   #{labels 32179}#
                   #{w 32170}#)
                 #{mod 32172}#)))))))
   (#{lambda*-formals 4454}#
     (lambda (#{orig-args 32673}#)
       (letrec*
         ((#{req 32674}#
            (lambda (#{args 32681}# #{rreq 32682}#)
              (let ((#{tmp 32684}# ($sc-dispatch #{args 32681}# '())))
                (if #{tmp 32684}#
                  (@apply
                    (lambda ()
                      (#{check 32678}#
                        (reverse #{rreq 32682}#)
                        '()
                        #f
                        '()))
                    #{tmp 32684}#)
                  (let ((#{tmp 32803}#
                          ($sc-dispatch #{args 32681}# '(any . any))))
                    (if (if #{tmp 32803}#
                          (@apply
                            (lambda (#{a 32807}# #{b 32808}#)
                              (if (symbol? #{a 32807}#)
                                #t
                                (if (if (vector? #{a 32807}#)
                                      (if (= (vector-length #{a 32807}#) 4)
                                        (eq? (vector-ref #{a 32807}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 32807}# 1))
                                  #f)))
                            #{tmp 32803}#)
                          #f)
                      (@apply
                        (lambda (#{a 32835}# #{b 32836}#)
                          (#{req 32674}#
                            #{b 32836}#
                            (cons #{a 32835}# #{rreq 32682}#)))
                        #{tmp 32803}#)
                      (let ((#{tmp 32837}#
                              ($sc-dispatch #{args 32681}# '(any . any))))
                        (if (if #{tmp 32837}#
                              (@apply
                                (lambda (#{a 32841}# #{b 32842}#)
                                  (eq? (syntax->datum #{a 32841}#) #:optional))
                                #{tmp 32837}#)
                              #f)
                          (@apply
                            (lambda (#{a 32843}# #{b 32844}#)
                              (#{opt 32675}#
                                #{b 32844}#
                                (reverse #{rreq 32682}#)
                                '()))
                            #{tmp 32837}#)
                          (let ((#{tmp 32847}#
                                  ($sc-dispatch #{args 32681}# '(any . any))))
                            (if (if #{tmp 32847}#
                                  (@apply
                                    (lambda (#{a 32851}# #{b 32852}#)
                                      (eq? (syntax->datum #{a 32851}#) #:key))
                                    #{tmp 32847}#)
                                  #f)
                              (@apply
                                (lambda (#{a 32853}# #{b 32854}#)
                                  (#{key 32676}#
                                    #{b 32854}#
                                    (reverse #{rreq 32682}#)
                                    '()
                                    '()))
                                #{tmp 32847}#)
                              (let ((#{tmp 32857}#
                                      ($sc-dispatch
                                        #{args 32681}#
                                        '(any any))))
                                (if (if #{tmp 32857}#
                                      (@apply
                                        (lambda (#{a 32861}# #{b 32862}#)
                                          (eq? (syntax->datum #{a 32861}#)
                                               #:rest))
                                        #{tmp 32857}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 32863}# #{b 32864}#)
                                      (#{rest 32677}#
                                        #{b 32864}#
                                        (reverse #{rreq 32682}#)
                                        '()
                                        '()))
                                    #{tmp 32857}#)
                                  (let ((#{tmp 32867}# (list #{args 32681}#)))
                                    (if (@apply
                                          (lambda (#{r 32869}#)
                                            (if (symbol? #{r 32869}#)
                                              #t
                                              (if (if (vector? #{r 32869}#)
                                                    (if (= (vector-length
                                                             #{r 32869}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 32869}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 32869}# 1))
                                                #f)))
                                          #{tmp 32867}#)
                                      (@apply
                                        (lambda (#{r 32899}#)
                                          (#{rest 32677}#
                                            #{r 32899}#
                                            (reverse #{rreq 32682}#)
                                            '()
                                            '()))
                                        #{tmp 32867}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 32673}#
                                        #{args 32681}#)))))))))))))))
          (#{opt 32675}#
            (lambda (#{args 32918}# #{req 32919}# #{ropt 32920}#)
              (let ((#{tmp 32922}# ($sc-dispatch #{args 32918}# '())))
                (if #{tmp 32922}#
                  (@apply
                    (lambda ()
                      (#{check 32678}#
                        #{req 32919}#
                        (reverse #{ropt 32920}#)
                        #f
                        '()))
                    #{tmp 32922}#)
                  (let ((#{tmp 33043}#
                          ($sc-dispatch #{args 32918}# '(any . any))))
                    (if (if #{tmp 33043}#
                          (@apply
                            (lambda (#{a 33047}# #{b 33048}#)
                              (if (symbol? #{a 33047}#)
                                #t
                                (if (if (vector? #{a 33047}#)
                                      (if (= (vector-length #{a 33047}#) 4)
                                        (eq? (vector-ref #{a 33047}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 33047}# 1))
                                  #f)))
                            #{tmp 33043}#)
                          #f)
                      (@apply
                        (lambda (#{a 33075}# #{b 33076}#)
                          (#{opt 32675}#
                            #{b 33076}#
                            #{req 32919}#
                            (cons (cons #{a 33075}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i2477" "i2478"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i2467" "i2468" "i2469"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i2413"
                                                "i2411"
                                                "i2409"
                                                "i2407"
                                                "i2405"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i2404"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-call
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 resolve-identifier
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i400"
                                                "i398"
                                                "i395"
                                                "i394"
                                                "i393"
                                                "i391"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i371"
                                                "i369"
                                                "i368"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i359"
                                                "i358"
                                                "i357"
                                                "i355"
                                                "i354"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i340"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i334"
                                                "i331"
                                                "i330"
                                                "i328"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i262"
                                                "i259"
                                                "i257"
                                                "i256"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i244"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44"))
                                             #(ribcage () () ()))
                                            (hygiene guile))))
                                  #{ropt 32920}#)))
                        #{tmp 33043}#)
                      (let ((#{tmp 33077}#
                              ($sc-dispatch
                                #{args 32918}#
                                '((any any) . any))))
                        (if (if #{tmp 33077}#
                              (@apply
                                (lambda (#{a 33081}#
                                         #{init 33082}#
                                         #{b 33083}#)
                                  (if (symbol? #{a 33081}#)
                                    #t
                                    (if (if (vector? #{a 33081}#)
                                          (if (= (vector-length #{a 33081}#) 4)
                                            (eq? (vector-ref #{a 33081}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 33081}# 1))
                                      #f)))
                                #{tmp 33077}#)
                              #f)
                          (@apply
                            (lambda (#{a 33110}# #{init 33111}# #{b 33112}#)
                              (#{opt 32675}#
                                #{b 33112}#
                                #{req 32919}#
                                (cons (list #{a 33110}# #{init 33111}#)
                                      #{ropt 32920}#)))
                            #{tmp 33077}#)
                          (let ((#{tmp 33113}#
                                  ($sc-dispatch #{args 32918}# '(any . any))))
                            (if (if #{tmp 33113}#
                                  (@apply
                                    (lambda (#{a 33117}# #{b 33118}#)
                                      (eq? (syntax->datum #{a 33117}#) #:key))
                                    #{tmp 33113}#)
                                  #f)
                              (@apply
                                (lambda (#{a 33119}# #{b 33120}#)
                                  (#{key 32676}#
                                    #{b 33120}#
                                    #{req 32919}#
                                    (reverse #{ropt 32920}#)
                                    '()))
                                #{tmp 33113}#)
                              (let ((#{tmp 33123}#
                                      ($sc-dispatch
                                        #{args 32918}#
                                        '(any any))))
                                (if (if #{tmp 33123}#
                                      (@apply
                                        (lambda (#{a 33127}# #{b 33128}#)
                                          (eq? (syntax->datum #{a 33127}#)
                                               #:rest))
                                        #{tmp 33123}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 33129}# #{b 33130}#)
                                      (#{rest 32677}#
                                        #{b 33130}#
                                        #{req 32919}#
                                        (reverse #{ropt 32920}#)
                                        '()))
                                    #{tmp 33123}#)
                                  (let ((#{tmp 33133}# (list #{args 32918}#)))
                                    (if (@apply
                                          (lambda (#{r 33135}#)
                                            (if (symbol? #{r 33135}#)
                                              #t
                                              (if (if (vector? #{r 33135}#)
                                                    (if (= (vector-length
                                                             #{r 33135}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 33135}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 33135}# 1))
                                                #f)))
                                          #{tmp 33133}#)
                                      (@apply
                                        (lambda (#{r 33165}#)
                                          (#{rest 32677}#
                                            #{r 33165}#
                                            #{req 32919}#
                                            (reverse #{ropt 32920}#)
                                            '()))
                                        #{tmp 33133}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 32673}#
                                        #{args 32918}#)))))))))))))))
          (#{key 32676}#
            (lambda (#{args 33184}#
                     #{req 33185}#
                     #{opt 33186}#
                     #{rkey 33187}#)
              (let ((#{tmp 33189}# ($sc-dispatch #{args 33184}# '())))
                (if #{tmp 33189}#
                  (@apply
                    (lambda ()
                      (#{check 32678}#
                        #{req 33185}#
                        #{opt 33186}#
                        #f
                        (cons #f (reverse #{rkey 33187}#))))
                    #{tmp 33189}#)
                  (let ((#{tmp 33311}#
                          ($sc-dispatch #{args 33184}# '(any . any))))
                    (if (if #{tmp 33311}#
                          (@apply
                            (lambda (#{a 33315}# #{b 33316}#)
                              (if (symbol? #{a 33315}#)
                                #t
                                (if (if (vector? #{a 33315}#)
                                      (if (= (vector-length #{a 33315}#) 4)
                                        (eq? (vector-ref #{a 33315}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 33315}# 1))
                                  #f)))
                            #{tmp 33311}#)
                          #f)
                      (@apply
                        (lambda (#{a 33343}# #{b 33344}#)
                          (let ((#{tmp 33345}#
                                  (symbol->keyword
                                    (syntax->datum #{a 33343}#))))
                            (#{key 32676}#
                              #{b 33344}#
                              #{req 33185}#
                              #{opt 33186}#
                              (cons (cons #{tmp 33345}#
                                          (cons #{a 33343}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i2540"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2534" "i2535"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i2523"
                                                         "i2524"
                                                         "i2525"
                                                         "i2526"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2413"
                                                        "i2411"
                                                        "i2409"
                                                        "i2407"
                                                        "i2405"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2404"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-call
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         resolve-identifier
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-primcall
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-call
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-seq
                                                         make-primcall
                                                         make-call
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i471"
                                                        "i469"
                                                        "i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i400"
                                                        "i398"
                                                        "i395"
                                                        "i394"
                                                        "i393"
                                                        "i391"
                                                        "i390"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i371"
                                                        "i369"
                                                        "i368"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i359"
                                                        "i358"
                                                        "i357"
                                                        "i355"
                                                        "i354"
                                                        "i351"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i340"
                                                        "i339"
                                                        "i337"
                                                        "i335"
                                                        "i334"
                                                        "i331"
                                                        "i330"
                                                        "i328"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i309"
                                                        "i307"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i262"
                                                        "i259"
                                                        "i257"
                                                        "i256"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i244"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44"))
                                                     #(ribcage () () ()))
                                                    (hygiene guile)))))
                                    #{rkey 33187}#))))
                        #{tmp 33311}#)
                      (let ((#{tmp 33348}#
                              ($sc-dispatch
                                #{args 33184}#
                                '((any any) . any))))
                        (if (if #{tmp 33348}#
                              (@apply
                                (lambda (#{a 33352}#
                                         #{init 33353}#
                                         #{b 33354}#)
                                  (if (symbol? #{a 33352}#)
                                    #t
                                    (if (if (vector? #{a 33352}#)
                                          (if (= (vector-length #{a 33352}#) 4)
                                            (eq? (vector-ref #{a 33352}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 33352}# 1))
                                      #f)))
                                #{tmp 33348}#)
                              #f)
                          (@apply
                            (lambda (#{a 33381}# #{init 33382}# #{b 33383}#)
                              (let ((#{tmp 33384}#
                                      (symbol->keyword
                                        (syntax->datum #{a 33381}#))))
                                (#{key 32676}#
                                  #{b 33383}#
                                  #{req 33185}#
                                  #{opt 33186}#
                                  (cons (list #{tmp 33384}#
                                              #{a 33381}#
                                              #{init 33382}#)
                                        #{rkey 33187}#))))
                            #{tmp 33348}#)
                          (let ((#{tmp 33387}#
                                  ($sc-dispatch
                                    #{args 33184}#
                                    '((any any any) . any))))
                            (if (if #{tmp 33387}#
                                  (@apply
                                    (lambda (#{a 33391}#
                                             #{init 33392}#
                                             #{k 33393}#
                                             #{b 33394}#)
                                      (if (if (symbol? #{a 33391}#)
                                            #t
                                            (if (if (vector? #{a 33391}#)
                                                  (if (= (vector-length
                                                           #{a 33391}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{a 33391}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{a 33391}# 1))
                                              #f))
                                        (keyword? (syntax->datum #{k 33393}#))
                                        #f))
                                    #{tmp 33387}#)
                                  #f)
                              (@apply
                                (lambda (#{a 33421}#
                                         #{init 33422}#
                                         #{k 33423}#
                                         #{b 33424}#)
                                  (#{key 32676}#
                                    #{b 33424}#
                                    #{req 33185}#
                                    #{opt 33186}#
                                    (cons (list #{k 33423}#
                                                #{a 33421}#
                                                #{init 33422}#)
                                          #{rkey 33187}#)))
                                #{tmp 33387}#)
                              (let ((#{tmp 33425}#
                                      ($sc-dispatch #{args 33184}# '(any))))
                                (if (if #{tmp 33425}#
                                      (@apply
                                        (lambda (#{aok 33429}#)
                                          (eq? (syntax->datum #{aok 33429}#)
                                               #:allow-other-keys))
                                        #{tmp 33425}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 33430}#)
                                      (#{check 32678}#
                                        #{req 33185}#
                                        #{opt 33186}#
                                        #f
                                        (cons #t (reverse #{rkey 33187}#))))
                                    #{tmp 33425}#)
                                  (let ((#{tmp 33549}#
                                          ($sc-dispatch
                                            #{args 33184}#
                                            '(any any any))))
                                    (if (if #{tmp 33549}#
                                          (@apply
                                            (lambda (#{aok 33553}#
                                                     #{a 33554}#
                                                     #{b 33555}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 33553}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum
                                                       #{a 33554}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 33549}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 33556}#
                                                 #{a 33557}#
                                                 #{b 33558}#)
                                          (#{rest 32677}#
                                            #{b 33558}#
                                            #{req 33185}#
                                            #{opt 33186}#
                                            (cons #t
                                                  (reverse #{rkey 33187}#))))
                                        #{tmp 33549}#)
                                      (let ((#{tmp 33561}#
                                              ($sc-dispatch
                                                #{args 33184}#
                                                '(any . any))))
                                        (if (if #{tmp 33561}#
                                              (@apply
                                                (lambda (#{aok 33565}#
                                                         #{r 33566}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 33565}#)
                                                           #:allow-other-keys)
                                                    (if (symbol? #{r 33566}#)
                                                      #t
                                                      (if (if (vector?
                                                                #{r 33566}#)
                                                            (if (= (vector-length
                                                                     #{r 33566}#)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     #{r 33566}#
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (symbol?
                                                          (vector-ref
                                                            #{r 33566}#
                                                            1))
                                                        #f))
                                                    #f))
                                                #{tmp 33561}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 33593}# #{r 33594}#)
                                              (#{rest 32677}#
                                                #{r 33594}#
                                                #{req 33185}#
                                                #{opt 33186}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 33187}#))))
                                            #{tmp 33561}#)
                                          (let ((#{tmp 33597}#
                                                  ($sc-dispatch
                                                    #{args 33184}#
                                                    '(any any))))
                                            (if (if #{tmp 33597}#
                                                  (@apply
                                                    (lambda (#{a 33601}#
                                                             #{b 33602}#)
                                                      (eq? (syntax->datum
                                                             #{a 33601}#)
                                                           #:rest))
                                                    #{tmp 33597}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 33603}#
                                                         #{b 33604}#)
                                                  (#{rest 32677}#
                                                    #{b 33604}#
                                                    #{req 33185}#
                                                    #{opt 33186}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 33187}#))))
                                                #{tmp 33597}#)
                                              (let ((#{tmp 33607}#
                                                      (list #{args 33184}#)))
                                                (if (@apply
                                                      (lambda (#{r 33609}#)
                                                        (if (symbol?
                                                              #{r 33609}#)
                                                          #t
                                                          (if (if (vector?
                                                                    #{r 33609}#)
                                                                (if (= (vector-length
                                                                         #{r 33609}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{r 33609}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (symbol?
                                                              (vector-ref
                                                                #{r 33609}#
                                                                1))
                                                            #f)))
                                                      #{tmp 33607}#)
                                                  (@apply
                                                    (lambda (#{r 33639}#)
                                                      (#{rest 32677}#
                                                        #{r 33639}#
                                                        #{req 33185}#
                                                        #{opt 33186}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 33187}#))))
                                                    #{tmp 33607}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 32673}#
                                                    #{args 33184}#)))))))))))))))))))))
          (#{rest 32677}#
            (lambda (#{args 33667}#
                     #{req 33668}#
                     #{opt 33669}#
                     #{kw 33670}#)
              (let ((#{tmp 33672}# (list #{args 33667}#)))
                (if (@apply
                      (lambda (#{r 33674}#)
                        (if (symbol? #{r 33674}#)
                          #t
                          (if (if (vector? #{r 33674}#)
                                (if (= (vector-length #{r 33674}#) 4)
                                  (eq? (vector-ref #{r 33674}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{r 33674}# 1))
                            #f)))
                      #{tmp 33672}#)
                  (@apply
                    (lambda (#{r 33704}#)
                      (#{check 32678}#
                        #{req 33668}#
                        #{opt 33669}#
                        #{r 33704}#
                        #{kw 33670}#))
                    #{tmp 33672}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 32673}#
                    #{args 33667}#)))))
          (#{check 32678}#
            (lambda (#{req 33832}#
                     #{opt 33833}#
                     #{rest 33834}#
                     #{kw 33835}#)
              (if (#{distinct-bound-ids? 4434}#
                    (append
                      #{req 33832}#
                      (map car #{opt 33833}#)
                      (if #{rest 33834}# (list #{rest 33834}#) '())
                      (if (pair? #{kw 33835}#)
                        (map cadr (cdr #{kw 33835}#))
                        '())))
                (values
                  #{req 33832}#
                  #{opt 33833}#
                  #{rest 33834}#
                  #{kw 33835}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 32673}#)))))
         (#{req 32674}# #{orig-args 32673}# '()))))
   (#{expand-lambda-case 4455}#
     (lambda (#{e 33944}#
              #{r 33945}#
              #{w 33946}#
              #{s 33947}#
              #{mod 33948}#
              #{get-formals 33949}#
              #{clauses 33950}#)
       (letrec*
         ((#{parse-req 33951}#
            (lambda (#{req 34087}#
                     #{opt 34088}#
                     #{rest 34089}#
                     #{kw 34090}#
                     #{body 34091}#)
              (let ((#{vars 34092}#
                      (map #{gen-var 4457}# #{req 34087}#))
                    (#{labels 34093}#
                      (#{gen-labels 4413}# #{req 34087}#)))
                (let ((#{r* 34094}#
                        (#{extend-var-env 4406}#
                          #{labels 34093}#
                          #{vars 34092}#
                          #{r 33945}#))
                      (#{w* 34095}#
                        (#{make-binding-wrap 4424}#
                          #{req 34087}#
                          #{labels 34093}#
                          #{w 33946}#)))
                  (#{parse-opt 33952}#
                    (map syntax->datum #{req 34087}#)
                    #{opt 34088}#
                    #{rest 34089}#
                    #{kw 34090}#
                    #{body 34091}#
                    (reverse #{vars 34092}#)
                    #{r* 34094}#
                    #{w* 34095}#
                    '()
                    '())))))
          (#{parse-opt 33952}#
            (lambda (#{req 34331}#
                     #{opt 34332}#
                     #{rest 34333}#
                     #{kw 34334}#
                     #{body 34335}#
                     #{vars 34336}#
                     #{r* 34337}#
                     #{w* 34338}#
                     #{out 34339}#
                     #{inits 34340}#)
              (if (pair? #{opt 34332}#)
                (let ((#{tmp 34341}# (car #{opt 34332}#)))
                  (let ((#{tmp 34342}#
                          ($sc-dispatch #{tmp 34341}# '(any any))))
                    (if #{tmp 34342}#
                      (@apply
                        (lambda (#{id 34344}# #{i 34345}#)
                          (let ((#{v 34346}#
                                  (let ((#{id 34354}#
                                          (if (if (vector? #{id 34344}#)
                                                (if (= (vector-length
                                                         #{id 34344}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 34344}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 34344}# 1)
                                            #{id 34344}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 34354}#)
                                        " ")))))
                            (let ((#{l 34347}#
                                    (#{gen-labels 4413}# (list #{v 34346}#))))
                              (let ((#{r** 34348}#
                                      (#{extend-var-env 4406}#
                                        #{l 34347}#
                                        (list #{v 34346}#)
                                        #{r* 34337}#)))
                                (let ((#{w** 34349}#
                                        (#{make-binding-wrap 4424}#
                                          (list #{id 34344}#)
                                          #{l 34347}#
                                          #{w* 34338}#)))
                                  (#{parse-opt 33952}#
                                    #{req 34331}#
                                    (cdr #{opt 34332}#)
                                    #{rest 34333}#
                                    #{kw 34334}#
                                    #{body 34335}#
                                    (cons #{v 34346}# #{vars 34336}#)
                                    #{r** 34348}#
                                    #{w** 34349}#
                                    (cons (syntax->datum #{id 34344}#)
                                          #{out 34339}#)
                                    (cons (#{expand 4443}#
                                            #{i 34345}#
                                            #{r* 34337}#
                                            #{w* 34338}#
                                            #{mod 33948}#)
                                          #{inits 34340}#)))))))
                        #{tmp 34342}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 34341}#))))
                (if #{rest 34333}#
                  (let ((#{v 34655}#
                          (let ((#{id 34665}#
                                  (if (if (vector? #{rest 34333}#)
                                        (if (= (vector-length #{rest 34333}#)
                                               4)
                                          (eq? (vector-ref #{rest 34333}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{rest 34333}# 1)
                                    #{rest 34333}#)))
                            (gensym
                              (string-append
                                (symbol->string #{id 34665}#)
                                " ")))))
                    (let ((#{l 34656}#
                            (#{gen-labels 4413}# (list #{v 34655}#))))
                      (let ((#{r* 34657}#
                              (#{extend-var-env 4406}#
                                #{l 34656}#
                                (list #{v 34655}#)
                                #{r* 34337}#)))
                        (let ((#{w* 34658}#
                                (#{make-binding-wrap 4424}#
                                  (list #{rest 34333}#)
                                  #{l 34656}#
                                  #{w* 34338}#)))
                          (#{parse-kw 33953}#
                            #{req 34331}#
                            (if (pair? #{out 34339}#)
                              (reverse #{out 34339}#)
                              #f)
                            (syntax->datum #{rest 34333}#)
                            (if (pair? #{kw 34334}#)
                              (cdr #{kw 34334}#)
                              #{kw 34334}#)
                            #{body 34335}#
                            (cons #{v 34655}# #{vars 34336}#)
                            #{r* 34657}#
                            #{w* 34658}#
                            (if (pair? #{kw 34334}#) (car #{kw 34334}#) #f)
                            '()
                            #{inits 34340}#)))))
                  (#{parse-kw 33953}#
                    #{req 34331}#
                    (if (pair? #{out 34339}#)
                      (reverse #{out 34339}#)
                      #f)
                    #f
                    (if (pair? #{kw 34334}#)
                      (cdr #{kw 34334}#)
                      #{kw 34334}#)
                    #{body 34335}#
                    #{vars 34336}#
                    #{r* 34337}#
                    #{w* 34338}#
                    (if (pair? #{kw 34334}#) (car #{kw 34334}#) #f)
                    '()
                    #{inits 34340}#)))))
          (#{parse-kw 33953}#
            (lambda (#{req 34887}#
                     #{opt 34888}#
                     #{rest 34889}#
                     #{kw 34890}#
                     #{body 34891}#
                     #{vars 34892}#
                     #{r* 34893}#
                     #{w* 34894}#
                     #{aok 34895}#
                     #{out 34896}#
                     #{inits 34897}#)
              (if (pair? #{kw 34890}#)
                (let ((#{tmp 34898}# (car #{kw 34890}#)))
                  (let ((#{tmp 34899}#
                          ($sc-dispatch #{tmp 34898}# '(any any any))))
                    (if #{tmp 34899}#
                      (@apply
                        (lambda (#{k 34901}# #{id 34902}# #{i 34903}#)
                          (let ((#{v 34904}#
                                  (let ((#{id 34912}#
                                          (if (if (vector? #{id 34902}#)
                                                (if (= (vector-length
                                                         #{id 34902}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 34902}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 34902}# 1)
                                            #{id 34902}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 34912}#)
                                        " ")))))
                            (let ((#{l 34905}#
                                    (#{gen-labels 4413}# (list #{v 34904}#))))
                              (let ((#{r** 34906}#
                                      (#{extend-var-env 4406}#
                                        #{l 34905}#
                                        (list #{v 34904}#)
                                        #{r* 34893}#)))
                                (let ((#{w** 34907}#
                                        (#{make-binding-wrap 4424}#
                                          (list #{id 34902}#)
                                          #{l 34905}#
                                          #{w* 34894}#)))
                                  (#{parse-kw 33953}#
                                    #{req 34887}#
                                    #{opt 34888}#
                                    #{rest 34889}#
                                    (cdr #{kw 34890}#)
                                    #{body 34891}#
                                    (cons #{v 34904}# #{vars 34892}#)
                                    #{r** 34906}#
                                    #{w** 34907}#
                                    #{aok 34895}#
                                    (cons (list (syntax->datum #{k 34901}#)
                                                (syntax->datum #{id 34902}#)
                                                #{v 34904}#)
                                          #{out 34896}#)
                                    (cons (#{expand 4443}#
                                            #{i 34903}#
                                            #{r* 34893}#
                                            #{w* 34894}#
                                            #{mod 33948}#)
                                          #{inits 34897}#)))))))
                        #{tmp 34899}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 34898}#))))
                (#{parse-body 33954}#
                  #{req 34887}#
                  #{opt 34888}#
                  #{rest 34889}#
                  (if (if #{aok 34895}#
                        #{aok 34895}#
                        (pair? #{out 34896}#))
                    (cons #{aok 34895}# (reverse #{out 34896}#))
                    #f)
                  #{body 34891}#
                  (reverse #{vars 34892}#)
                  #{r* 34893}#
                  #{w* 34894}#
                  (reverse #{inits 34897}#)
                  '()))))
          (#{parse-body 33954}#
            (lambda (#{req 35222}#
                     #{opt 35223}#
                     #{rest 35224}#
                     #{kw 35225}#
                     #{body 35226}#
                     #{vars 35227}#
                     #{r* 35228}#
                     #{w* 35229}#
                     #{inits 35230}#
                     #{meta 35231}#)
              (let ((#{tmp 35233}#
                      ($sc-dispatch
                        #{body 35226}#
                        '(any any . each-any))))
                (if (if #{tmp 35233}#
                      (@apply
                        (lambda (#{docstring 35237}# #{e1 35238}# #{e2 35239}#)
                          (string? (syntax->datum #{docstring 35237}#)))
                        #{tmp 35233}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 35240}# #{e1 35241}# #{e2 35242}#)
                      (#{parse-body 33954}#
                        #{req 35222}#
                        #{opt 35223}#
                        #{rest 35224}#
                        #{kw 35225}#
                        (cons #{e1 35241}# #{e2 35242}#)
                        #{vars 35227}#
                        #{r* 35228}#
                        #{w* 35229}#
                        #{inits 35230}#
                        (append
                          #{meta 35231}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 35240}#))))))
                    #{tmp 35233}#)
                  (let ((#{tmp 35243}#
                          ($sc-dispatch
                            #{body 35226}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 35243}#
                      (@apply
                        (lambda (#{k 35247}#
                                 #{v 35248}#
                                 #{e1 35249}#
                                 #{e2 35250}#)
                          (#{parse-body 33954}#
                            #{req 35222}#
                            #{opt 35223}#
                            #{rest 35224}#
                            #{kw 35225}#
                            (cons #{e1 35249}# #{e2 35250}#)
                            #{vars 35227}#
                            #{r* 35228}#
                            #{w* 35229}#
                            #{inits 35230}#
                            (append
                              #{meta 35231}#
                              (syntax->datum
                                (map cons #{k 35247}# #{v 35248}#)))))
                        #{tmp 35243}#)
                      (let ((#{tmp 35251}#
                              ($sc-dispatch #{body 35226}# '(any . each-any))))
                        (if #{tmp 35251}#
                          (@apply
                            (lambda (#{e1 35255}# #{e2 35256}#)
                              (values
                                #{meta 35231}#
                                #{req 35222}#
                                #{opt 35223}#
                                #{rest 35224}#
                                #{kw 35225}#
                                #{inits 35230}#
                                #{vars 35227}#
                                (#{expand-body 4447}#
                                  (cons #{e1 35255}# #{e2 35256}#)
                                  (let ((#{x 35268}#
                                          (begin
                                            (if (if (pair? #{e 33944}#)
                                                  #{s 33947}#
                                                  #f)
                                              (set-source-properties!
                                                #{e 33944}#
                                                #{s 33947}#))
                                            #{e 33944}#)))
                                    (if (if (null? (car #{w 33946}#))
                                          (null? (cdr #{w 33946}#))
                                          #f)
                                      #{x 35268}#
                                      (if (if (vector? #{x 35268}#)
                                            (if (= (vector-length #{x 35268}#)
                                                   4)
                                              (eq? (vector-ref #{x 35268}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (let ((#{expression 35300}#
                                                (vector-ref #{x 35268}# 1))
                                              (#{wrap 35301}#
                                                (let ((#{w2 35309}#
                                                        (vector-ref
                                                          #{x 35268}#
                                                          2)))
                                                  (let ((#{m1 35310}#
                                                          (car #{w 33946}#))
                                                        (#{s1 35311}#
                                                          (cdr #{w 33946}#)))
                                                    (if (null? #{m1 35310}#)
                                                      (if (null? #{s1 35311}#)
                                                        #{w2 35309}#
                                                        (cons (car #{w2 35309}#)
                                                              (let ((#{m2 35326}#
                                                                      (cdr #{w2 35309}#)))
                                                                (if (null? #{m2 35326}#)
                                                                  #{s1 35311}#
                                                                  (append
                                                                    #{s1 35311}#
                                                                    #{m2 35326}#)))))
                                                      (cons (let ((#{m2 35334}#
                                                                    (car #{w2 35309}#)))
                                                              (if (null? #{m2 35334}#)
                                                                #{m1 35310}#
                                                                (append
                                                                  #{m1 35310}#
                                                                  #{m2 35334}#)))
                                                            (let ((#{m2 35342}#
                                                                    (cdr #{w2 35309}#)))
                                                              (if (null? #{m2 35342}#)
                                                                #{s1 35311}#
                                                                (append
                                                                  #{s1 35311}#
                                                                  #{m2 35342}#))))))))
                                              (#{module 35302}#
                                                (vector-ref #{x 35268}# 3)))
                                          (vector
                                            'syntax-object
                                            #{expression 35300}#
                                            #{wrap 35301}#
                                            #{module 35302}#))
                                        (if (null? #{x 35268}#)
                                          #{x 35268}#
                                          (vector
                                            'syntax-object
                                            #{x 35268}#
                                            #{w 33946}#
                                            #{mod 33948}#)))))
                                  #{r* 35228}#
                                  #{w* 35229}#
                                  #{mod 33948}#)))
                            #{tmp 35251}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 35226}#))))))))))
         (let ((#{tmp 33956}#
                 ($sc-dispatch #{clauses 33950}# '())))
           (if #{tmp 33956}#
             (@apply
               (lambda () (values '() #f))
               #{tmp 33956}#)
             (let ((#{tmp 33961}#
                     ($sc-dispatch
                       #{clauses 33950}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 33961}#
                 (@apply
                   (lambda (#{args 33965}#
                            #{e1 33966}#
                            #{e2 33967}#
                            #{args* 33968}#
                            #{e1* 33969}#
                            #{e2* 33970}#)
                     (call-with-values
                       (lambda ()
                         (#{get-formals 33949}# #{args 33965}#))
                       (lambda (#{req 33971}#
                                #{opt 33972}#
                                #{rest 33973}#
                                #{kw 33974}#)
                         (call-with-values
                           (lambda ()
                             (#{parse-req 33951}#
                               #{req 33971}#
                               #{opt 33972}#
                               #{rest 33973}#
                               #{kw 33974}#
                               (cons #{e1 33966}# #{e2 33967}#)))
                           (lambda (#{meta 34043}#
                                    #{req 34044}#
                                    #{opt 34045}#
                                    #{rest 34046}#
                                    #{kw 34047}#
                                    #{inits 34048}#
                                    #{vars 34049}#
                                    #{body 34050}#)
                             (call-with-values
                               (lambda ()
                                 (#{expand-lambda-case 4455}#
                                   #{e 33944}#
                                   #{r 33945}#
                                   #{w 33946}#
                                   #{s 33947}#
                                   #{mod 33948}#
                                   #{get-formals 33949}#
                                   (map (lambda (#{tmp 2883 34051}#
                                                 #{tmp 2882 34052}#
                                                 #{tmp 2881 34053}#)
                                          (cons #{tmp 2881 34053}#
                                                (cons #{tmp 2882 34052}#
                                                      #{tmp 2883 34051}#)))
                                        #{e2* 33970}#
                                        #{e1* 33969}#
                                        #{args* 33968}#)))
                               (lambda (#{meta* 34054}# #{else* 34055}#)
                                 (values
                                   (append #{meta 34043}# #{meta* 34054}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #{s 33947}#
                                     #{req 34044}#
                                     #{opt 34045}#
                                     #{rest 34046}#
                                     #{kw 34047}#
                                     #{inits 34048}#
                                     #{vars 34049}#
                                     #{body 34050}#
                                     #{else* 34055}#)))))))))
                   #{tmp 33961}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 33950}#))))))))
   (#{strip 4456}#
     (lambda (#{x 35369}# #{w 35370}#)
       (if (memq 'top (car #{w 35370}#))
         #{x 35369}#
         (letrec*
           ((#{f 35371}#
              (lambda (#{x 35374}#)
                (if (if (vector? #{x 35374}#)
                      (if (= (vector-length #{x 35374}#) 4)
                        (eq? (vector-ref #{x 35374}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{strip 4456}#
                    (vector-ref #{x 35374}# 1)
                    (vector-ref #{x 35374}# 2))
                  (if (pair? #{x 35374}#)
                    (let ((#{a 35393}# (#{f 35371}# (car #{x 35374}#)))
                          (#{d 35394}# (#{f 35371}# (cdr #{x 35374}#))))
                      (if (if (eq? #{a 35393}# (car #{x 35374}#))
                            (eq? #{d 35394}# (cdr #{x 35374}#))
                            #f)
                        #{x 35374}#
                        (cons #{a 35393}# #{d 35394}#)))
                    (if (vector? #{x 35374}#)
                      (let ((#{old 35397}# (vector->list #{x 35374}#)))
                        (let ((#{new 35398}# (map #{f 35371}# #{old 35397}#)))
                          (letrec*
                            ((#{lp 35399}#
                               (lambda (#{l1 35496}# #{l2 35497}#)
                                 (if (null? #{l1 35496}#)
                                   #{x 35374}#
                                   (if (eq? (car #{l1 35496}#)
                                            (car #{l2 35497}#))
                                     (#{lp 35399}#
                                       (cdr #{l1 35496}#)
                                       (cdr #{l2 35497}#))
                                     (list->vector #{new 35398}#))))))
                            (#{lp 35399}# #{old 35397}# #{new 35398}#))))
                      #{x 35374}#))))))
           (#{f 35371}# #{x 35369}#)))))
   (#{gen-var 4457}#
     (lambda (#{id 34099}#)
       (let ((#{id 34100}#
               (if (if (vector? #{id 34099}#)
                     (if (= (vector-length #{id 34099}#) 4)
                       (eq? (vector-ref #{id 34099}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{id 34099}# 1)
                 #{id 34099}#)))
         (gensym
           (string-append (symbol->string #{id 34100}#) " ")))))
   (#{lambda-var-list 4458}#
     (lambda (#{vars 35498}#)
       (letrec*
         ((#{lvl 35499}#
            (lambda (#{vars 35502}# #{ls 35503}# #{w 35504}#)
              (if (pair? #{vars 35502}#)
                (#{lvl 35499}#
                  (cdr #{vars 35502}#)
                  (cons (let ((#{x 35508}# (car #{vars 35502}#)))
                          (if (if (null? (car #{w 35504}#))
                                (null? (cdr #{w 35504}#))
                                #f)
                            #{x 35508}#
                            (if (if (vector? #{x 35508}#)
                                  (if (= (vector-length #{x 35508}#) 4)
                                    (eq? (vector-ref #{x 35508}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (let ((#{expression 35526}#
                                      (vector-ref #{x 35508}# 1))
                                    (#{wrap 35527}#
                                      (let ((#{w2 35535}#
                                              (vector-ref #{x 35508}# 2)))
                                        (let ((#{m1 35536}# (car #{w 35504}#))
                                              (#{s1 35537}# (cdr #{w 35504}#)))
                                          (if (null? #{m1 35536}#)
                                            (if (null? #{s1 35537}#)
                                              #{w2 35535}#
                                              (cons (car #{w2 35535}#)
                                                    (let ((#{m2 35552}#
                                                            (cdr #{w2 35535}#)))
                                                      (if (null? #{m2 35552}#)
                                                        #{s1 35537}#
                                                        (append
                                                          #{s1 35537}#
                                                          #{m2 35552}#)))))
                                            (cons (let ((#{m2 35560}#
                                                          (car #{w2 35535}#)))
                                                    (if (null? #{m2 35560}#)
                                                      #{m1 35536}#
                                                      (append
                                                        #{m1 35536}#
                                                        #{m2 35560}#)))
                                                  (let ((#{m2 35568}#
                                                          (cdr #{w2 35535}#)))
                                                    (if (null? #{m2 35568}#)
                                                      #{s1 35537}#
                                                      (append
                                                        #{s1 35537}#
                                                        #{m2 35568}#))))))))
                                    (#{module 35528}#
                                      (vector-ref #{x 35508}# 3)))
                                (vector
                                  'syntax-object
                                  #{expression 35526}#
                                  #{wrap 35527}#
                                  #{module 35528}#))
                              (if (null? #{x 35508}#)
                                #{x 35508}#
                                (vector
                                  'syntax-object
                                  #{x 35508}#
                                  #{w 35504}#
                                  #f)))))
                        #{ls 35503}#)
                  #{w 35504}#)
                (if (if (symbol? #{vars 35502}#)
                      #t
                      (if (if (vector? #{vars 35502}#)
                            (if (= (vector-length #{vars 35502}#) 4)
                              (eq? (vector-ref #{vars 35502}# 0)
                                   'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{vars 35502}# 1))
                        #f))
                  (cons (if (if (null? (car #{w 35504}#))
                              (null? (cdr #{w 35504}#))
                              #f)
                          #{vars 35502}#
                          (if (if (vector? #{vars 35502}#)
                                (if (= (vector-length #{vars 35502}#) 4)
                                  (eq? (vector-ref #{vars 35502}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (let ((#{expression 35638}#
                                    (vector-ref #{vars 35502}# 1))
                                  (#{wrap 35639}#
                                    (let ((#{w2 35649}#
                                            (vector-ref #{vars 35502}# 2)))
                                      (let ((#{m1 35650}# (car #{w 35504}#))
                                            (#{s1 35651}# (cdr #{w 35504}#)))
                                        (if (null? #{m1 35650}#)
                                          (if (null? #{s1 35651}#)
                                            #{w2 35649}#
                                            (cons (car #{w2 35649}#)
                                                  (let ((#{m2 35668}#
                                                          (cdr #{w2 35649}#)))
                                                    (if (null? #{m2 35668}#)
                                                      #{s1 35651}#
                                                      (append
                                                        #{s1 35651}#
                                                        #{m2 35668}#)))))
                                          (cons (let ((#{m2 35676}#
                                                        (car #{w2 35649}#)))
                                                  (if (null? #{m2 35676}#)
                                                    #{m1 35650}#
                                                    (append
                                                      #{m1 35650}#
                                                      #{m2 35676}#)))
                                                (let ((#{m2 35684}#
                                                        (cdr #{w2 35649}#)))
                                                  (if (null? #{m2 35684}#)
                                                    #{s1 35651}#
                                                    (append
                                                      #{s1 35651}#
                                                      #{m2 35684}#))))))))
                                  (#{module 35640}#
                                    (vector-ref #{vars 35502}# 3)))
                              (vector
                                'syntax-object
                                #{expression 35638}#
                                #{wrap 35639}#
                                #{module 35640}#))
                            (if (null? #{vars 35502}#)
                              #{vars 35502}#
                              (vector
                                'syntax-object
                                #{vars 35502}#
                                #{w 35504}#
                                #f))))
                        #{ls 35503}#)
                  (if (null? #{vars 35502}#)
                    #{ls 35503}#
                    (if (if (vector? #{vars 35502}#)
                          (if (= (vector-length #{vars 35502}#) 4)
                            (eq? (vector-ref #{vars 35502}# 0)
                                 'syntax-object)
                            #f)
                          #f)
                      (#{lvl 35499}#
                        (vector-ref #{vars 35502}# 1)
                        #{ls 35503}#
                        (let ((#{w2 35725}# (vector-ref #{vars 35502}# 2)))
                          (let ((#{m1 35726}# (car #{w 35504}#))
                                (#{s1 35727}# (cdr #{w 35504}#)))
                            (if (null? #{m1 35726}#)
                              (if (null? #{s1 35727}#)
                                #{w2 35725}#
                                (cons (car #{w2 35725}#)
                                      (let ((#{m2 35738}# (cdr #{w2 35725}#)))
                                        (if (null? #{m2 35738}#)
                                          #{s1 35727}#
                                          (append
                                            #{s1 35727}#
                                            #{m2 35738}#)))))
                              (cons (let ((#{m2 35746}# (car #{w2 35725}#)))
                                      (if (null? #{m2 35746}#)
                                        #{m1 35726}#
                                        (append #{m1 35726}# #{m2 35746}#)))
                                    (let ((#{m2 35754}# (cdr #{w2 35725}#)))
                                      (if (null? #{m2 35754}#)
                                        #{s1 35727}#
                                        (append
                                          #{s1 35727}#
                                          #{m2 35754}#))))))))
                      (cons #{vars 35502}# #{ls 35503}#))))))))
         (#{lvl 35499}# #{vars 35498}# '() '(()))))))
  (begin
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 4408}#
      'core
      'syntax-parameterize
      (lambda (#{e 4585}#
               #{r 4586}#
               #{w 4587}#
               #{s 4588}#
               #{mod 4589}#)
        (let ((#{tmp 4591}#
                ($sc-dispatch
                  #{e 4585}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 4591}#
                (@apply
                  (lambda (#{var 4595}#
                           #{val 4596}#
                           #{e1 4597}#
                           #{e2 4598}#)
                    (#{valid-bound-ids? 4433}# #{var 4595}#))
                  #{tmp 4591}#)
                #f)
            (@apply
              (lambda (#{var 4683}#
                       #{val 4684}#
                       #{e1 4685}#
                       #{e2 4686}#)
                (let ((#{names 4687}#
                        (map (lambda (#{x 5036}#)
                               (call-with-values
                                 (lambda ()
                                   (#{resolve-identifier 4430}#
                                     #{x 5036}#
                                     #{w 4587}#
                                     #{r 4586}#
                                     #{mod 4589}#
                                     #f))
                                 (lambda (#{type 5039}#
                                          #{value 5040}#
                                          #{mod 5041}#)
                                   (if (eqv? #{type 5039}# 'displaced-lexical)
                                     (syntax-violation
                                       'syntax-parameterize
                                       "identifier out of context"
                                       #{e 4585}#
                                       (let ((#{x 5054}#
                                               (begin
                                                 (if (if (pair? #{x 5036}#)
                                                       #{s 4588}#
                                                       #f)
                                                   (set-source-properties!
                                                     #{x 5036}#
                                                     #{s 4588}#))
                                                 #{x 5036}#)))
                                         (if (if (null? (car #{w 4587}#))
                                               (null? (cdr #{w 4587}#))
                                               #f)
                                           #{x 5054}#
                                           (if (if (vector? #{x 5054}#)
                                                 (if (= (vector-length
                                                          #{x 5054}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 5054}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (let ((#{expression 5086}#
                                                     (vector-ref #{x 5054}# 1))
                                                   (#{wrap 5087}#
                                                     (let ((#{w2 5095}#
                                                             (vector-ref
                                                               #{x 5054}#
                                                               2)))
                                                       (let ((#{m1 5096}#
                                                               (car #{w 4587}#))
                                                             (#{s1 5097}#
                                                               (cdr #{w 4587}#)))
                                                         (if (null? #{m1 5096}#)
                                                           (if (null? #{s1 5097}#)
                                                             #{w2 5095}#
                                                             (cons (car #{w2 5095}#)
                                                                   (let ((#{m2 5112}#
                                                                           (cdr #{w2 5095}#)))
                                                                     (if (null? #{m2 5112}#)
                                                                       #{s1 5097}#
                                                                       (append
                                                                         #{s1 5097}#
                                                                         #{m2 5112}#)))))
                                                           (cons (let ((#{m2 5120}#
                                                                         (car #{w2 5095}#)))
                                                                   (if (null? #{m2 5120}#)
                                                                     #{m1 5096}#
                                                                     (append
                                                                       #{m1 5096}#
                                                                       #{m2 5120}#)))
                                                                 (let ((#{m2 5128}#
                                                                         (cdr #{w2 5095}#)))
                                                                   (if (null? #{m2 5128}#)
                                                                     #{s1 5097}#
                                                                     (append
                                                                       #{s1 5097}#
                                                                       #{m2 5128}#))))))))
                                                   (#{module 5088}#
                                                     (vector-ref
                                                       #{x 5054}#
                                                       3)))
                                               (vector
                                                 'syntax-object
                                                 #{expression 5086}#
                                                 #{wrap 5087}#
                                                 #{module 5088}#))
                                             (if (null? #{x 5054}#)
                                               #{x 5054}#
                                               (vector
                                                 'syntax-object
                                                 #{x 5054}#
                                                 #{w 4587}#
                                                 #{mod 5041}#))))))
                                     (if (eqv? #{type 5039}# 'syntax-parameter)
                                       #{value 5040}#
                                       (syntax-violation
                                         'syntax-parameterize
                                         "invalid syntax parameter"
                                         #{e 4585}#
                                         (let ((#{x 5155}#
                                                 (begin
                                                   (if (if (pair? #{x 5036}#)
                                                         #{s 4588}#
                                                         #f)
                                                     (set-source-properties!
                                                       #{x 5036}#
                                                       #{s 4588}#))
                                                   #{x 5036}#)))
                                           (if (if (null? (car #{w 4587}#))
                                                 (null? (cdr #{w 4587}#))
                                                 #f)
                                             #{x 5155}#
                                             (if (if (vector? #{x 5155}#)
                                                   (if (= (vector-length
                                                            #{x 5155}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{x 5155}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (let ((#{expression 5187}#
                                                       (vector-ref
                                                         #{x 5155}#
                                                         1))
                                                     (#{wrap 5188}#
                                                       (let ((#{w2 5196}#
                                                               (vector-ref
                                                                 #{x 5155}#
                                                                 2)))
                                                         (let ((#{m1 5197}#
                                                                 (car #{w 4587}#))
                                                               (#{s1 5198}#
                                                                 (cdr #{w 4587}#)))
                                                           (if (null? #{m1 5197}#)
                                                             (if (null? #{s1 5198}#)
                                                               #{w2 5196}#
                                                               (cons (car #{w2 5196}#)
                                                                     (let ((#{m2 5213}#
                                                                             (cdr #{w2 5196}#)))
                                                                       (if (null? #{m2 5213}#)
                                                                         #{s1 5198}#
                                                                         (append
                                                                           #{s1 5198}#
                                                                           #{m2 5213}#)))))
                                                             (cons (let ((#{m2 5221}#
                                                                           (car #{w2 5196}#)))
                                                                     (if (null? #{m2 5221}#)
                                                                       #{m1 5197}#
                                                                       (append
                                                                         #{m1 5197}#
                                                                         #{m2 5221}#)))
                                                                   (let ((#{m2 5229}#
                                                                           (cdr #{w2 5196}#)))
                                                                     (if (null? #{m2 5229}#)
                                                                       #{s1 5198}#
                                                                       (append
                                                                         #{s1 5198}#
                                                                         #{m2 5229}#))))))))
                                                     (#{module 5189}#
                                                       (vector-ref
                                                         #{x 5155}#
                                                         3)))
                                                 (vector
                                                   'syntax-object
                                                   #{expression 5187}#
                                                   #{wrap 5188}#
                                                   #{module 5189}#))
                                               (if (null? #{x 5155}#)
                                                 #{x 5155}#
                                                 (vector
                                                   'syntax-object
                                                   #{x 5155}#
                                                   #{w 4587}#
                                                   #{mod 5041}#)))))))))))
                             #{var 4683}#))
                      (#{bindings 4688}#
                        (let ((#{trans-r 5244}#
                                (#{macros-only-env 4407}# #{r 4586}#)))
                          (map (lambda (#{x 5245}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 4449}#
                                         (#{expand 4443}#
                                           #{x 5245}#
                                           #{trans-r 5244}#
                                           #{w 4587}#
                                           #{mod 4589}#)
                                         #{mod 4589}#)))
                               #{val 4684}#))))
                  (#{expand-body 4447}#
                    (cons #{e1 4685}# #{e2 4686}#)
                    (let ((#{x 4700}#
                            (begin
                              (if (if (pair? #{e 4585}#) #{s 4588}# #f)
                                (set-source-properties! #{e 4585}# #{s 4588}#))
                              #{e 4585}#)))
                      (if (if (null? (car #{w 4587}#))
                            (null? (cdr #{w 4587}#))
                            #f)
                        #{x 4700}#
                        (if (if (vector? #{x 4700}#)
                              (if (= (vector-length #{x 4700}#) 4)
                                (eq? (vector-ref #{x 4700}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 4732}# (vector-ref #{x 4700}# 1))
                                (#{wrap 4733}#
                                  (let ((#{w2 4741}#
                                          (vector-ref #{x 4700}# 2)))
                                    (let ((#{m1 4742}# (car #{w 4587}#))
                                          (#{s1 4743}# (cdr #{w 4587}#)))
                                      (if (null? #{m1 4742}#)
                                        (if (null? #{s1 4743}#)
                                          #{w2 4741}#
                                          (cons (car #{w2 4741}#)
                                                (let ((#{m2 4758}#
                                                        (cdr #{w2 4741}#)))
                                                  (if (null? #{m2 4758}#)
                                                    #{s1 4743}#
                                                    (append
                                                      #{s1 4743}#
                                                      #{m2 4758}#)))))
                                        (cons (let ((#{m2 4766}#
                                                      (car #{w2 4741}#)))
                                                (if (null? #{m2 4766}#)
                                                  #{m1 4742}#
                                                  (append
                                                    #{m1 4742}#
                                                    #{m2 4766}#)))
                                              (let ((#{m2 4774}#
                                                      (cdr #{w2 4741}#)))
                                                (if (null? #{m2 4774}#)
                                                  #{s1 4743}#
                                                  (append
                                                    #{s1 4743}#
                                                    #{m2 4774}#))))))))
                                (#{module 4734}# (vector-ref #{x 4700}# 3)))
                            (vector
                              'syntax-object
                              #{expression 4732}#
                              #{wrap 4733}#
                              #{module 4734}#))
                          (if (null? #{x 4700}#)
                            #{x 4700}#
                            (vector
                              'syntax-object
                              #{x 4700}#
                              #{w 4587}#
                              #{mod 4589}#)))))
                    (#{extend-env 4405}#
                      #{names 4687}#
                      #{bindings 4688}#
                      #{r 4586}#)
                    #{w 4587}#
                    #{mod 4589}#)))
              #{tmp 4591}#)
            (syntax-violation
              'syntax-parameterize
              "bad syntax"
              (let ((#{x 5469}#
                      (begin
                        (if (if (pair? #{e 4585}#) #{s 4588}# #f)
                          (set-source-properties! #{e 4585}# #{s 4588}#))
                        #{e 4585}#)))
                (if (if (null? (car #{w 4587}#))
                      (null? (cdr #{w 4587}#))
                      #f)
                  #{x 5469}#
                  (if (if (vector? #{x 5469}#)
                        (if (= (vector-length #{x 5469}#) 4)
                          (eq? (vector-ref #{x 5469}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 5501}# (vector-ref #{x 5469}# 1))
                          (#{wrap 5502}#
                            (let ((#{w2 5510}# (vector-ref #{x 5469}# 2)))
                              (let ((#{m1 5511}# (car #{w 4587}#))
                                    (#{s1 5512}# (cdr #{w 4587}#)))
                                (if (null? #{m1 5511}#)
                                  (if (null? #{s1 5512}#)
                                    #{w2 5510}#
                                    (cons (car #{w2 5510}#)
                                          (let ((#{m2 5527}#
                                                  (cdr #{w2 5510}#)))
                                            (if (null? #{m2 5527}#)
                                              #{s1 5512}#
                                              (append
                                                #{s1 5512}#
                                                #{m2 5527}#)))))
                                  (cons (let ((#{m2 5535}# (car #{w2 5510}#)))
                                          (if (null? #{m2 5535}#)
                                            #{m1 5511}#
                                            (append #{m1 5511}# #{m2 5535}#)))
                                        (let ((#{m2 5543}# (cdr #{w2 5510}#)))
                                          (if (null? #{m2 5543}#)
                                            #{s1 5512}#
                                            (append
                                              #{s1 5512}#
                                              #{m2 5543}#))))))))
                          (#{module 5503}# (vector-ref #{x 5469}# 3)))
                      (vector
                        'syntax-object
                        #{expression 5501}#
                        #{wrap 5502}#
                        #{module 5503}#))
                    (if (null? #{x 5469}#)
                      #{x 5469}#
                      (vector
                        'syntax-object
                        #{x 5469}#
                        #{w 4587}#
                        #{mod 4589}#))))))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 5571}#
                 #{r 5572}#
                 #{w 5573}#
                 #{s 5574}#
                 #{mod 5575}#)
          (let ((#{tmp 5577}# ($sc-dispatch #{e 5571}# '(_ any))))
            (if #{tmp 5577}#
              (@apply
                (lambda (#{e 5580}#)
                  (let ((#{exp 5584}#
                          (#{strip 4456}# #{e 5580}# #{w 5573}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 5574}#
                      #{exp 5584}#)))
                #{tmp 5577}#)
              (syntax-violation
                'quote
                "bad syntax"
                (let ((#{x 5598}#
                        (begin
                          (if (if (pair? #{e 5571}#) #{s 5574}# #f)
                            (set-source-properties! #{e 5571}# #{s 5574}#))
                          #{e 5571}#)))
                  (if (if (null? (car #{w 5573}#))
                        (null? (cdr #{w 5573}#))
                        #f)
                    #{x 5598}#
                    (if (if (vector? #{x 5598}#)
                          (if (= (vector-length #{x 5598}#) 4)
                            (eq? (vector-ref #{x 5598}# 0) 'syntax-object)
                            #f)
                          #f)
                      (let ((#{expression 5630}# (vector-ref #{x 5598}# 1))
                            (#{wrap 5631}#
                              (let ((#{w2 5639}# (vector-ref #{x 5598}# 2)))
                                (let ((#{m1 5640}# (car #{w 5573}#))
                                      (#{s1 5641}# (cdr #{w 5573}#)))
                                  (if (null? #{m1 5640}#)
                                    (if (null? #{s1 5641}#)
                                      #{w2 5639}#
                                      (cons (car #{w2 5639}#)
                                            (let ((#{m2 5656}#
                                                    (cdr #{w2 5639}#)))
                                              (if (null? #{m2 5656}#)
                                                #{s1 5641}#
                                                (append
                                                  #{s1 5641}#
                                                  #{m2 5656}#)))))
                                    (cons (let ((#{m2 5664}#
                                                  (car #{w2 5639}#)))
                                            (if (null? #{m2 5664}#)
                                              #{m1 5640}#
                                              (append
                                                #{m1 5640}#
                                                #{m2 5664}#)))
                                          (let ((#{m2 5672}#
                                                  (cdr #{w2 5639}#)))
                                            (if (null? #{m2 5672}#)
                                              #{s1 5641}#
                                              (append
                                                #{s1 5641}#
                                                #{m2 5672}#))))))))
                            (#{module 5632}# (vector-ref #{x 5598}# 3)))
                        (vector
                          'syntax-object
                          #{expression 5630}#
                          #{wrap 5631}#
                          #{module 5632}#))
                      (if (null? #{x 5598}#)
                        #{x 5598}#
                        (vector
                          'syntax-object
                          #{x 5598}#
                          #{w 5573}#
                          #{mod 5575}#)))))))))))
    (#{global-extend 4408}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 5896}#
           (lambda (#{src 6359}#
                    #{e 6360}#
                    #{r 6361}#
                    #{maps 6362}#
                    #{ellipsis? 6363}#
                    #{mod 6364}#)
             (if (if (symbol? #{e 6360}#)
                   #t
                   (if (if (vector? #{e 6360}#)
                         (if (= (vector-length #{e 6360}#) 4)
                           (eq? (vector-ref #{e 6360}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 6360}# 1))
                     #f))
               (call-with-values
                 (lambda ()
                   (#{resolve-identifier 4430}#
                     #{e 6360}#
                     '(())
                     #{r 6361}#
                     #{mod 6364}#
                     #f))
                 (lambda (#{type 6393}# #{value 6394}# #{mod 6395}#)
                   (if (eqv? #{type 6393}# 'syntax)
                     (call-with-values
                       (lambda ()
                         (#{gen-ref 5897}#
                           #{src 6359}#
                           (car #{value 6394}#)
                           (cdr #{value 6394}#)
                           #{maps 6362}#))
                       (lambda (#{var 6401}# #{maps 6402}#)
                         (values (list 'ref #{var 6401}#) #{maps 6402}#)))
                     (if (#{ellipsis? 6363}# #{e 6360}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 6359}#)
                       (values (list 'quote #{e 6360}#) #{maps 6362}#)))))
               (let ((#{tmp 6404}#
                       ($sc-dispatch #{e 6360}# '(any any))))
                 (if (if #{tmp 6404}#
                       (@apply
                         (lambda (#{dots 6408}# #{e 6409}#)
                           (#{ellipsis? 6363}# #{dots 6408}#))
                         #{tmp 6404}#)
                       #f)
                   (@apply
                     (lambda (#{dots 6410}# #{e 6411}#)
                       (#{gen-syntax 5896}#
                         #{src 6359}#
                         #{e 6411}#
                         #{r 6361}#
                         #{maps 6362}#
                         (lambda (#{x 6412}#) #f)
                         #{mod 6364}#))
                     #{tmp 6404}#)
                   (let ((#{tmp 6413}#
                           ($sc-dispatch #{e 6360}# '(any any . any))))
                     (if (if #{tmp 6413}#
                           (@apply
                             (lambda (#{x 6417}# #{dots 6418}# #{y 6419}#)
                               (#{ellipsis? 6363}# #{dots 6418}#))
                             #{tmp 6413}#)
                           #f)
                       (@apply
                         (lambda (#{x 6420}# #{dots 6421}# #{y 6422}#)
                           (letrec*
                             ((#{f 6423}#
                                (lambda (#{y 6431}# #{k 6432}#)
                                  (let ((#{tmp 6434}#
                                          ($sc-dispatch
                                            #{y 6431}#
                                            '(any . any))))
                                    (if (if #{tmp 6434}#
                                          (@apply
                                            (lambda (#{dots 6438}# #{y 6439}#)
                                              (#{ellipsis? 6363}#
                                                #{dots 6438}#))
                                            #{tmp 6434}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 6440}# #{y 6441}#)
                                          (#{f 6423}#
                                            #{y 6441}#
                                            (lambda (#{maps 6442}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 6432}#
                                                    (cons '() #{maps 6442}#)))
                                                (lambda (#{x 6443}#
                                                         #{maps 6444}#)
                                                  (if (null? (car #{maps 6444}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 6359}#)
                                                    (values
                                                      (let ((#{map-env 6448}#
                                                              (car #{maps 6444}#)))
                                                        (list 'apply
                                                              '(primitive
                                                                 append)
                                                              (#{gen-map 5899}#
                                                                #{x 6443}#
                                                                #{map-env 6448}#)))
                                                      (cdr #{maps 6444}#))))))))
                                        #{tmp 6434}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 5896}#
                                            #{src 6359}#
                                            #{y 6431}#
                                            #{r 6361}#
                                            #{maps 6362}#
                                            #{ellipsis? 6363}#
                                            #{mod 6364}#))
                                        (lambda (#{y 6451}# #{maps 6452}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 6432}# #{maps 6452}#))
                                            (lambda (#{x 6453}# #{maps 6454}#)
                                              (values
                                                (if (equal? #{y 6451}# ''())
                                                  #{x 6453}#
                                                  (list 'append
                                                        #{x 6453}#
                                                        #{y 6451}#))
                                                #{maps 6454}#))))))))))
                             (#{f 6423}#
                               #{y 6422}#
                               (lambda (#{maps 6426}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 5896}#
                                       #{src 6359}#
                                       #{x 6420}#
                                       #{r 6361}#
                                       (cons '() #{maps 6426}#)
                                       #{ellipsis? 6363}#
                                       #{mod 6364}#))
                                   (lambda (#{x 6427}# #{maps 6428}#)
                                     (if (null? (car #{maps 6428}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 6359}#)
                                       (values
                                         (#{gen-map 5899}#
                                           #{x 6427}#
                                           (car #{maps 6428}#))
                                         (cdr #{maps 6428}#)))))))))
                         #{tmp 6413}#)
                       (let ((#{tmp 6470}#
                               ($sc-dispatch #{e 6360}# '(any . any))))
                         (if #{tmp 6470}#
                           (@apply
                             (lambda (#{x 6474}# #{y 6475}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 5896}#
                                     #{src 6359}#
                                     #{x 6474}#
                                     #{r 6361}#
                                     #{maps 6362}#
                                     #{ellipsis? 6363}#
                                     #{mod 6364}#))
                                 (lambda (#{x 6476}# #{maps 6477}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5896}#
                                         #{src 6359}#
                                         #{y 6475}#
                                         #{r 6361}#
                                         #{maps 6477}#
                                         #{ellipsis? 6363}#
                                         #{mod 6364}#))
                                     (lambda (#{y 6478}# #{maps 6479}#)
                                       (values
                                         (let ((#{atom-key 6484}#
                                                 (car #{y 6478}#)))
                                           (if (eqv? #{atom-key 6484}# 'quote)
                                             (if (eq? (car #{x 6476}#) 'quote)
                                               (list 'quote
                                                     (cons (car (cdr #{x 6476}#))
                                                           (car (cdr #{y 6478}#))))
                                               (if (eq? (car (cdr #{y 6478}#))
                                                        '())
                                                 (list 'list #{x 6476}#)
                                                 (list 'cons
                                                       #{x 6476}#
                                                       #{y 6478}#)))
                                             (if (eqv? #{atom-key 6484}# 'list)
                                               (cons 'list
                                                     (cons #{x 6476}#
                                                           (cdr #{y 6478}#)))
                                               (list 'cons
                                                     #{x 6476}#
                                                     #{y 6478}#))))
                                         #{maps 6479}#))))))
                             #{tmp 6470}#)
                           (let ((#{tmp 6513}#
                                   ($sc-dispatch
                                     #{e 6360}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 6513}#
                               (@apply
                                 (lambda (#{e1 6517}# #{e2 6518}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5896}#
                                         #{src 6359}#
                                         (cons #{e1 6517}# #{e2 6518}#)
                                         #{r 6361}#
                                         #{maps 6362}#
                                         #{ellipsis? 6363}#
                                         #{mod 6364}#))
                                     (lambda (#{e 6519}# #{maps 6520}#)
                                       (values
                                         (if (eq? (car #{e 6519}#) 'list)
                                           (cons 'vector (cdr #{e 6519}#))
                                           (if (eq? (car #{e 6519}#) 'quote)
                                             (list 'quote
                                                   (list->vector
                                                     (car (cdr #{e 6519}#))))
                                             (list 'list->vector #{e 6519}#)))
                                         #{maps 6520}#))))
                                 #{tmp 6513}#)
                               (values
                                 (list 'quote #{e 6360}#)
                                 #{maps 6362}#))))))))))))
         (#{gen-ref 5897}#
           (lambda (#{src 6547}#
                    #{var 6548}#
                    #{level 6549}#
                    #{maps 6550}#)
             (if (= #{level 6549}# 0)
               (values #{var 6548}# #{maps 6550}#)
               (if (null? #{maps 6550}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 6547}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 5897}#
                       #{src 6547}#
                       #{var 6548}#
                       (#{1-}# #{level 6549}#)
                       (cdr #{maps 6550}#)))
                   (lambda (#{outer-var 6551}# #{outer-maps 6552}#)
                     (let ((#{b 6553}#
                             (assq #{outer-var 6551}# (car #{maps 6550}#))))
                       (if #{b 6553}#
                         (values (cdr #{b 6553}#) #{maps 6550}#)
                         (let ((#{inner-var 6555}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 6555}#
                             (cons (cons (cons #{outer-var 6551}#
                                               #{inner-var 6555}#)
                                         (car #{maps 6550}#))
                                   #{outer-maps 6552}#)))))))))))
         (#{gen-map 5899}#
           (lambda (#{e 6569}# #{map-env 6570}#)
             (let ((#{formals 6571}# (map cdr #{map-env 6570}#))
                   (#{actuals 6572}#
                     (map (lambda (#{x 6574}#)
                            (list 'ref (car #{x 6574}#)))
                          #{map-env 6570}#)))
               (if (eq? (car #{e 6569}#) 'ref)
                 (car #{actuals 6572}#)
                 (if (and-map
                       (lambda (#{x 6575}#)
                         (if (eq? (car #{x 6575}#) 'ref)
                           (memq (car (cdr #{x 6575}#)) #{formals 6571}#)
                           #f))
                       (cdr #{e 6569}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 6569}#))
                               (map (let ((#{r 6577}#
                                            (map cons
                                                 #{formals 6571}#
                                                 #{actuals 6572}#)))
                                      (lambda (#{x 6578}#)
                                        (cdr (assq (car (cdr #{x 6578}#))
                                                   #{r 6577}#))))
                                    (cdr #{e 6569}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 6571}# #{e 6569}#)
                               #{actuals 6572}#)))))))
         (#{regen 5903}#
           (lambda (#{x 6580}#)
             (let ((#{atom-key 6581}# (car #{x 6580}#)))
               (if (eqv? #{atom-key 6581}# 'ref)
                 (let ((#{name 6591}# (car (cdr #{x 6580}#)))
                       (#{var 6592}# (car (cdr #{x 6580}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 6591}#
                     #{var 6592}#))
                 (if (eqv? #{atom-key 6581}# 'primitive)
                   (let ((#{name 6603}# (car (cdr #{x 6580}#))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 2)
                       #f
                       #{name 6603}#))
                   (if (eqv? #{atom-key 6581}# 'quote)
                     (let ((#{exp 6614}# (car (cdr #{x 6580}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 6614}#))
                     (if (eqv? #{atom-key 6581}# 'lambda)
                       (if (list? (car (cdr #{x 6580}#)))
                         (let ((#{req 6625}# (car (cdr #{x 6580}#)))
                               (#{vars 6627}# (car (cdr #{x 6580}#)))
                               (#{exp 6629}#
                                 (#{regen 5903}#
                                   (car (cdr (cdr #{x 6580}#))))))
                           (let ((#{body 6634}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #f
                                     #{req 6625}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 6627}#
                                     #{exp 6629}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 14)
                               #f
                               '()
                               #{body 6634}#)))
                         (error "how did we get here" #{x 6580}#))
                       (let ((#{name 6650}# (car #{x 6580}#))
                             (#{args 6651}#
                               (map #{regen 5903}# (cdr #{x 6580}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 12)
                           #f
                           #{name 6650}#
                           #{args 6651}#))))))))))
        (lambda (#{e 5904}#
                 #{r 5905}#
                 #{w 5906}#
                 #{s 5907}#
                 #{mod 5908}#)
          (let ((#{e 5909}#
                  (let ((#{x 6270}#
                          (begin
                            (if (if (pair? #{e 5904}#) #{s 5907}# #f)
                              (set-source-properties! #{e 5904}# #{s 5907}#))
                            #{e 5904}#)))
                    (if (if (null? (car #{w 5906}#))
                          (null? (cdr #{w 5906}#))
                          #f)
                      #{x 6270}#
                      (if (if (vector? #{x 6270}#)
                            (if (= (vector-length #{x 6270}#) 4)
                              (eq? (vector-ref #{x 6270}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 6302}# (vector-ref #{x 6270}# 1))
                              (#{wrap 6303}#
                                (let ((#{w2 6311}# (vector-ref #{x 6270}# 2)))
                                  (let ((#{m1 6312}# (car #{w 5906}#))
                                        (#{s1 6313}# (cdr #{w 5906}#)))
                                    (if (null? #{m1 6312}#)
                                      (if (null? #{s1 6313}#)
                                        #{w2 6311}#
                                        (cons (car #{w2 6311}#)
                                              (let ((#{m2 6328}#
                                                      (cdr #{w2 6311}#)))
                                                (if (null? #{m2 6328}#)
                                                  #{s1 6313}#
                                                  (append
                                                    #{s1 6313}#
                                                    #{m2 6328}#)))))
                                      (cons (let ((#{m2 6336}#
                                                    (car #{w2 6311}#)))
                                              (if (null? #{m2 6336}#)
                                                #{m1 6312}#
                                                (append
                                                  #{m1 6312}#
                                                  #{m2 6336}#)))
                                            (let ((#{m2 6344}#
                                                    (cdr #{w2 6311}#)))
                                              (if (null? #{m2 6344}#)
                                                #{s1 6313}#
                                                (append
                                                  #{s1 6313}#
                                                  #{m2 6344}#))))))))
                              (#{module 6304}# (vector-ref #{x 6270}# 3)))
                          (vector
                            'syntax-object
                            #{expression 6302}#
                            #{wrap 6303}#
                            #{module 6304}#))
                        (if (null? #{x 6270}#)
                          #{x 6270}#
                          (vector
                            'syntax-object
                            #{x 6270}#
                            #{w 5906}#
                            #{mod 5908}#)))))))
            (let ((#{tmp 5910}# #{e 5909}#))
              (let ((#{tmp 5911}#
                      ($sc-dispatch #{tmp 5910}# '(_ any))))
                (if #{tmp 5911}#
                  (@apply
                    (lambda (#{x 5963}#)
                      (call-with-values
                        (lambda ()
                          (#{gen-syntax 5896}#
                            #{e 5909}#
                            #{x 5963}#
                            #{r 5905}#
                            '()
                            #{ellipsis? 4451}#
                            #{mod 5908}#))
                        (lambda (#{e 6046}# #{maps 6047}#)
                          (#{regen 5903}# #{e 6046}#))))
                    #{tmp 5911}#)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    #{e 5909}#))))))))
    (#{global-extend 4408}#
      'core
      'lambda
      (lambda (#{e 6887}#
               #{r 6888}#
               #{w 6889}#
               #{s 6890}#
               #{mod 6891}#)
        (let ((#{tmp 6893}#
                ($sc-dispatch #{e 6887}# '(_ any any . each-any))))
          (if #{tmp 6893}#
            (@apply
              (lambda (#{args 6897}# #{e1 6898}# #{e2 6899}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 4452}# #{args 6897}#))
                  (lambda (#{req 6902}#
                           #{opt 6903}#
                           #{rest 6904}#
                           #{kw 6905}#)
                    (letrec*
                      ((#{lp 6906}#
                         (lambda (#{body 6909}# #{meta 6910}#)
                           (let ((#{tmp 6912}#
                                   ($sc-dispatch
                                     #{body 6909}#
                                     '(any any . each-any))))
                             (if (if #{tmp 6912}#
                                   (@apply
                                     (lambda (#{docstring 6916}#
                                              #{e1 6917}#
                                              #{e2 6918}#)
                                       (string?
                                         (syntax->datum #{docstring 6916}#)))
                                     #{tmp 6912}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 6919}#
                                          #{e1 6920}#
                                          #{e2 6921}#)
                                   (#{lp 6906}#
                                     (cons #{e1 6920}# #{e2 6921}#)
                                     (append
                                       #{meta 6910}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 6919}#))))))
                                 #{tmp 6912}#)
                               (let ((#{tmp 6922}#
                                       ($sc-dispatch
                                         #{body 6909}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 6922}#
                                   (@apply
                                     (lambda (#{k 6926}#
                                              #{v 6927}#
                                              #{e1 6928}#
                                              #{e2 6929}#)
                                       (#{lp 6906}#
                                         (cons #{e1 6928}# #{e2 6929}#)
                                         (append
                                           #{meta 6910}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 6926}#
                                                  #{v 6927}#)))))
                                     #{tmp 6922}#)
                                   (#{expand-simple-lambda 4453}#
                                     #{e 6887}#
                                     #{r 6888}#
                                     #{w 6889}#
                                     #{s 6890}#
                                     #{mod 6891}#
                                     #{req 6902}#
                                     #{rest 6904}#
                                     #{meta 6910}#
                                     #{body 6909}#))))))))
                      (#{lp 6906}# (cons #{e1 6898}# #{e2 6899}#) '())))))
              #{tmp 6893}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 6887}#)))))
    (#{global-extend 4408}#
      'core
      'lambda*
      (lambda (#{e 7313}#
               #{r 7314}#
               #{w 7315}#
               #{s 7316}#
               #{mod 7317}#)
        (let ((#{tmp 7319}#
                ($sc-dispatch #{e 7313}# '(_ any any . each-any))))
          (if #{tmp 7319}#
            (@apply
              (lambda (#{args 7323}# #{e1 7324}# #{e2 7325}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4455}#
                      #{e 7313}#
                      #{r 7314}#
                      #{w 7315}#
                      #{s 7316}#
                      #{mod 7317}#
                      #{lambda*-formals 4454}#
                      (list (cons #{args 7323}#
                                  (cons #{e1 7324}# #{e2 7325}#)))))
                  (lambda (#{meta 7328}# #{lcase 7329}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7316}#
                      #{meta 7328}#
                      #{lcase 7329}#))))
              #{tmp 7319}#)
            (syntax-violation
              'lambda
              "bad lambda*"
              #{e 7313}#)))))
    (#{global-extend 4408}#
      'core
      'case-lambda
      (lambda (#{e 7492}#
               #{r 7493}#
               #{w 7494}#
               #{s 7495}#
               #{mod 7496}#)
        (let ((#{tmp 7498}#
                ($sc-dispatch
                  #{e 7492}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 7498}#
            (@apply
              (lambda (#{args 7502}#
                       #{e1 7503}#
                       #{e2 7504}#
                       #{args* 7505}#
                       #{e1* 7506}#
                       #{e2* 7507}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4455}#
                      #{e 7492}#
                      #{r 7493}#
                      #{w 7494}#
                      #{s 7495}#
                      #{mod 7496}#
                      #{lambda-formals 4452}#
                      (cons (cons #{args 7502}#
                                  (cons #{e1 7503}# #{e2 7504}#))
                            (map (lambda (#{tmp 3382 7510}#
                                          #{tmp 3381 7511}#
                                          #{tmp 3380 7512}#)
                                   (cons #{tmp 3380 7512}#
                                         (cons #{tmp 3381 7511}#
                                               #{tmp 3382 7510}#)))
                                 #{e2* 7507}#
                                 #{e1* 7506}#
                                 #{args* 7505}#))))
                  (lambda (#{meta 7513}# #{lcase 7514}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7495}#
                      #{meta 7513}#
                      #{lcase 7514}#))))
              #{tmp 7498}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda"
              #{e 7492}#)))))
    (#{global-extend 4408}#
      'core
      'case-lambda*
      (lambda (#{e 7683}#
               #{r 7684}#
               #{w 7685}#
               #{s 7686}#
               #{mod 7687}#)
        (let ((#{tmp 7689}#
                ($sc-dispatch
                  #{e 7683}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 7689}#
            (@apply
              (lambda (#{args 7693}#
                       #{e1 7694}#
                       #{e2 7695}#
                       #{args* 7696}#
                       #{e1* 7697}#
                       #{e2* 7698}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4455}#
                      #{e 7683}#
                      #{r 7684}#
                      #{w 7685}#
                      #{s 7686}#
                      #{mod 7687}#
                      #{lambda*-formals 4454}#
                      (cons (cons #{args 7693}#
                                  (cons #{e1 7694}# #{e2 7695}#))
                            (map (lambda (#{tmp 3417 7701}#
                                          #{tmp 3416 7702}#
                                          #{tmp 3415 7703}#)
                                   (cons #{tmp 3415 7703}#
                                         (cons #{tmp 3416 7702}#
                                               #{tmp 3417 7701}#)))
                                 #{e2* 7698}#
                                 #{e1* 7697}#
                                 #{args* 7696}#))))
                  (lambda (#{meta 7704}# #{lcase 7705}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7686}#
                      #{meta 7704}#
                      #{lcase 7705}#))))
              #{tmp 7689}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda*"
              #{e 7683}#)))))
    (#{global-extend 4408}#
      'core
      'let
      (letrec*
        ((#{expand-let 7914}#
           (lambda (#{e 8124}#
                    #{r 8125}#
                    #{w 8126}#
                    #{s 8127}#
                    #{mod 8128}#
                    #{constructor 8129}#
                    #{ids 8130}#
                    #{vals 8131}#
                    #{exps 8132}#)
             (if (not (#{valid-bound-ids? 4433}# #{ids 8130}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 8124}#)
               (let ((#{labels 8217}#
                       (#{gen-labels 4413}# #{ids 8130}#))
                     (#{new-vars 8218}#
                       (map #{gen-var 4457}# #{ids 8130}#)))
                 (let ((#{nw 8219}#
                         (#{make-binding-wrap 4424}#
                           #{ids 8130}#
                           #{labels 8217}#
                           #{w 8126}#))
                       (#{nr 8220}#
                         (#{extend-var-env 4406}#
                           #{labels 8217}#
                           #{new-vars 8218}#
                           #{r 8125}#)))
                   (#{constructor 8129}#
                     #{s 8127}#
                     (map syntax->datum #{ids 8130}#)
                     #{new-vars 8218}#
                     (map (lambda (#{x 8237}#)
                            (#{expand 4443}#
                              #{x 8237}#
                              #{r 8125}#
                              #{w 8126}#
                              #{mod 8128}#))
                          #{vals 8131}#)
                     (#{expand-body 4447}#
                       #{exps 8132}#
                       (#{source-wrap 4437}#
                         #{e 8124}#
                         #{nw 8219}#
                         #{s 8127}#
                         #{mod 8128}#)
                       #{nr 8220}#
                       #{nw 8219}#
                       #{mod 8128}#))))))))
        (lambda (#{e 7915}#
                 #{r 7916}#
                 #{w 7917}#
                 #{s 7918}#
                 #{mod 7919}#)
          (let ((#{tmp 7921}#
                  ($sc-dispatch
                    #{e 7915}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 7921}#
                  (@apply
                    (lambda (#{id 7925}#
                             #{val 7926}#
                             #{e1 7927}#
                             #{e2 7928}#)
                      (and-map #{id? 4410}# #{id 7925}#))
                    #{tmp 7921}#)
                  #f)
              (@apply
                (lambda (#{id 7944}#
                         #{val 7945}#
                         #{e1 7946}#
                         #{e2 7947}#)
                  (#{expand-let 7914}#
                    #{e 7915}#
                    #{r 7916}#
                    #{w 7917}#
                    #{s 7918}#
                    #{mod 7919}#
                    (lambda (#{src 7951}#
                             #{ids 7952}#
                             #{vars 7953}#
                             #{val-exps 7954}#
                             #{body-exp 7955}#)
                      (begin
                        (for-each
                          #{maybe-name-value! 4375}#
                          #{ids 7952}#
                          #{val-exps 7954}#)
                        (if (null? #{vars 7953}#)
                          #{body-exp 7955}#
                          (make-struct/no-tail
                            (vector-ref %expanded-vtables 16)
                            #{src 7951}#
                            #{ids 7952}#
                            #{vars 7953}#
                            #{val-exps 7954}#
                            #{body-exp 7955}#))))
                    #{id 7944}#
                    #{val 7945}#
                    (cons #{e1 7946}# #{e2 7947}#)))
                #{tmp 7921}#)
              (let ((#{tmp 7962}#
                      ($sc-dispatch
                        #{e 7915}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 7962}#
                      (@apply
                        (lambda (#{f 7966}#
                                 #{id 7967}#
                                 #{val 7968}#
                                 #{e1 7969}#
                                 #{e2 7970}#)
                          (if (if (symbol? #{f 7966}#)
                                #t
                                (if (if (vector? #{f 7966}#)
                                      (if (= (vector-length #{f 7966}#) 4)
                                        (eq? (vector-ref #{f 7966}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 7966}# 1))
                                  #f))
                            (and-map #{id? 4410}# #{id 7967}#)
                            #f))
                        #{tmp 7962}#)
                      #f)
                  (@apply
                    (lambda (#{f 8012}#
                             #{id 8013}#
                             #{val 8014}#
                             #{e1 8015}#
                             #{e2 8016}#)
                      (#{expand-let 7914}#
                        #{e 7915}#
                        #{r 7916}#
                        #{w 7917}#
                        #{s 7918}#
                        #{mod 7919}#
                        #{build-named-let 4394}#
                        (cons #{f 8012}# #{id 8013}#)
                        #{val 8014}#
                        (cons #{e1 8015}# #{e2 8016}#)))
                    #{tmp 7962}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (let ((#{x 8029}#
                            (begin
                              (if (if (pair? #{e 7915}#) #{s 7918}# #f)
                                (set-source-properties! #{e 7915}# #{s 7918}#))
                              #{e 7915}#)))
                      (if (if (null? (car #{w 7917}#))
                            (null? (cdr #{w 7917}#))
                            #f)
                        #{x 8029}#
                        (if (if (vector? #{x 8029}#)
                              (if (= (vector-length #{x 8029}#) 4)
                                (eq? (vector-ref #{x 8029}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 8061}# (vector-ref #{x 8029}# 1))
                                (#{wrap 8062}#
                                  (let ((#{w2 8070}#
                                          (vector-ref #{x 8029}# 2)))
                                    (let ((#{m1 8071}# (car #{w 7917}#))
                                          (#{s1 8072}# (cdr #{w 7917}#)))
                                      (if (null? #{m1 8071}#)
                                        (if (null? #{s1 8072}#)
                                          #{w2 8070}#
                                          (cons (car #{w2 8070}#)
                                                (let ((#{m2 8087}#
                                                        (cdr #{w2 8070}#)))
                                                  (if (null? #{m2 8087}#)
                                                    #{s1 8072}#
                                                    (append
                                                      #{s1 8072}#
                                                      #{m2 8087}#)))))
                                        (cons (let ((#{m2 8095}#
                                                      (car #{w2 8070}#)))
                                                (if (null? #{m2 8095}#)
                                                  #{m1 8071}#
                                                  (append
                                                    #{m1 8071}#
                                                    #{m2 8095}#)))
                                              (let ((#{m2 8103}#
                                                      (cdr #{w2 8070}#)))
                                                (if (null? #{m2 8103}#)
                                                  #{s1 8072}#
                                                  (append
                                                    #{s1 8072}#
                                                    #{m2 8103}#))))))))
                                (#{module 8063}# (vector-ref #{x 8029}# 3)))
                            (vector
                              'syntax-object
                              #{expression 8061}#
                              #{wrap 8062}#
                              #{module 8063}#))
                          (if (null? #{x 8029}#)
                            #{x 8029}#
                            (vector
                              'syntax-object
                              #{x 8029}#
                              #{w 7917}#
                              #{mod 7919}#)))))))))))))
    (#{global-extend 4408}#
      'core
      'letrec
      (lambda (#{e 8714}#
               #{r 8715}#
               #{w 8716}#
               #{s 8717}#
               #{mod 8718}#)
        (let ((#{tmp 8720}#
                ($sc-dispatch
                  #{e 8714}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 8720}#
                (@apply
                  (lambda (#{id 8724}#
                           #{val 8725}#
                           #{e1 8726}#
                           #{e2 8727}#)
                    (and-map #{id? 4410}# #{id 8724}#))
                  #{tmp 8720}#)
                #f)
            (@apply
              (lambda (#{id 8743}#
                       #{val 8744}#
                       #{e1 8745}#
                       #{e2 8746}#)
                (if (not (#{valid-bound-ids? 4433}# #{id 8743}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 8714}#)
                  (let ((#{labels 8843}#
                          (#{gen-labels 4413}# #{id 8743}#))
                        (#{new-vars 8844}#
                          (map #{gen-var 4457}# #{id 8743}#)))
                    (let ((#{w 8845}#
                            (#{make-binding-wrap 4424}#
                              #{id 8743}#
                              #{labels 8843}#
                              #{w 8716}#))
                          (#{r 8846}#
                            (#{extend-var-env 4406}#
                              #{labels 8843}#
                              #{new-vars 8844}#
                              #{r 8715}#)))
                      (#{build-letrec 4395}#
                        #{s 8717}#
                        #f
                        (map syntax->datum #{id 8743}#)
                        #{new-vars 8844}#
                        (map (lambda (#{x 8925}#)
                               (#{expand 4443}#
                                 #{x 8925}#
                                 #{r 8846}#
                                 #{w 8845}#
                                 #{mod 8718}#))
                             #{val 8744}#)
                        (#{expand-body 4447}#
                          (cons #{e1 8745}# #{e2 8746}#)
                          (let ((#{x 8987}#
                                  (begin
                                    (if (if (pair? #{e 8714}#) #{s 8717}# #f)
                                      (set-source-properties!
                                        #{e 8714}#
                                        #{s 8717}#))
                                    #{e 8714}#)))
                            (if (if (null? (car #{w 8845}#))
                                  (null? (cdr #{w 8845}#))
                                  #f)
                              #{x 8987}#
                              (if (if (vector? #{x 8987}#)
                                    (if (= (vector-length #{x 8987}#) 4)
                                      (eq? (vector-ref #{x 8987}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 9019}#
                                        (vector-ref #{x 8987}# 1))
                                      (#{wrap 9020}#
                                        (let ((#{w2 9028}#
                                                (vector-ref #{x 8987}# 2)))
                                          (let ((#{m1 9029}# (car #{w 8845}#))
                                                (#{s1 9030}# (cdr #{w 8845}#)))
                                            (if (null? #{m1 9029}#)
                                              (if (null? #{s1 9030}#)
                                                #{w2 9028}#
                                                (cons (car #{w2 9028}#)
                                                      (let ((#{m2 9045}#
                                                              (cdr #{w2 9028}#)))
                                                        (if (null? #{m2 9045}#)
                                                          #{s1 9030}#
                                                          (append
                                                            #{s1 9030}#
                                                            #{m2 9045}#)))))
                                              (cons (let ((#{m2 9053}#
                                                            (car #{w2 9028}#)))
                                                      (if (null? #{m2 9053}#)
                                                        #{m1 9029}#
                                                        (append
                                                          #{m1 9029}#
                                                          #{m2 9053}#)))
                                                    (let ((#{m2 9061}#
                                                            (cdr #{w2 9028}#)))
                                                      (if (null? #{m2 9061}#)
                                                        #{s1 9030}#
                                                        (append
                                                          #{s1 9030}#
                                                          #{m2 9061}#))))))))
                                      (#{module 9021}#
                                        (vector-ref #{x 8987}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 9019}#
                                    #{wrap 9020}#
                                    #{module 9021}#))
                                (if (null? #{x 8987}#)
                                  #{x 8987}#
                                  (vector
                                    'syntax-object
                                    #{x 8987}#
                                    #{w 8845}#
                                    #{mod 8718}#)))))
                          #{r 8846}#
                          #{w 8845}#
                          #{mod 8718}#))))))
              #{tmp 8720}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (let ((#{x 9301}#
                      (begin
                        (if (if (pair? #{e 8714}#) #{s 8717}# #f)
                          (set-source-properties! #{e 8714}# #{s 8717}#))
                        #{e 8714}#)))
                (if (if (null? (car #{w 8716}#))
                      (null? (cdr #{w 8716}#))
                      #f)
                  #{x 9301}#
                  (if (if (vector? #{x 9301}#)
                        (if (= (vector-length #{x 9301}#) 4)
                          (eq? (vector-ref #{x 9301}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 9333}# (vector-ref #{x 9301}# 1))
                          (#{wrap 9334}#
                            (let ((#{w2 9342}# (vector-ref #{x 9301}# 2)))
                              (let ((#{m1 9343}# (car #{w 8716}#))
                                    (#{s1 9344}# (cdr #{w 8716}#)))
                                (if (null? #{m1 9343}#)
                                  (if (null? #{s1 9344}#)
                                    #{w2 9342}#
                                    (cons (car #{w2 9342}#)
                                          (let ((#{m2 9359}#
                                                  (cdr #{w2 9342}#)))
                                            (if (null? #{m2 9359}#)
                                              #{s1 9344}#
                                              (append
                                                #{s1 9344}#
                                                #{m2 9359}#)))))
                                  (cons (let ((#{m2 9367}# (car #{w2 9342}#)))
                                          (if (null? #{m2 9367}#)
                                            #{m1 9343}#
                                            (append #{m1 9343}# #{m2 9367}#)))
                                        (let ((#{m2 9375}# (cdr #{w2 9342}#)))
                                          (if (null? #{m2 9375}#)
                                            #{s1 9344}#
                                            (append
                                              #{s1 9344}#
                                              #{m2 9375}#))))))))
                          (#{module 9335}# (vector-ref #{x 9301}# 3)))
                      (vector
                        'syntax-object
                        #{expression 9333}#
                        #{wrap 9334}#
                        #{module 9335}#))
                    (if (null? #{x 9301}#)
                      #{x 9301}#
                      (vector
                        'syntax-object
                        #{x 9301}#
                        #{w 8716}#
                        #{mod 8718}#))))))))))
    (#{global-extend 4408}#
      'core
      'letrec*
      (lambda (#{e 9526}#
               #{r 9527}#
               #{w 9528}#
               #{s 9529}#
               #{mod 9530}#)
        (let ((#{tmp 9532}#
                ($sc-dispatch
                  #{e 9526}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 9532}#
                (@apply
                  (lambda (#{id 9536}#
                           #{val 9537}#
                           #{e1 9538}#
                           #{e2 9539}#)
                    (and-map #{id? 4410}# #{id 9536}#))
                  #{tmp 9532}#)
                #f)
            (@apply
              (lambda (#{id 9555}#
                       #{val 9556}#
                       #{e1 9557}#
                       #{e2 9558}#)
                (if (not (#{valid-bound-ids? 4433}# #{id 9555}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 9526}#)
                  (let ((#{labels 9655}#
                          (#{gen-labels 4413}# #{id 9555}#))
                        (#{new-vars 9656}#
                          (map #{gen-var 4457}# #{id 9555}#)))
                    (let ((#{w 9657}#
                            (#{make-binding-wrap 4424}#
                              #{id 9555}#
                              #{labels 9655}#
                              #{w 9528}#))
                          (#{r 9658}#
                            (#{extend-var-env 4406}#
                              #{labels 9655}#
                              #{new-vars 9656}#
                              #{r 9527}#)))
                      (#{build-letrec 4395}#
                        #{s 9529}#
                        #t
                        (map syntax->datum #{id 9555}#)
                        #{new-vars 9656}#
                        (map (lambda (#{x 9737}#)
                               (#{expand 4443}#
                                 #{x 9737}#
                                 #{r 9658}#
                                 #{w 9657}#
                                 #{mod 9530}#))
                             #{val 9556}#)
                        (#{expand-body 4447}#
                          (cons #{e1 9557}# #{e2 9558}#)
                          (let ((#{x 9799}#
                                  (begin
                                    (if (if (pair? #{e 9526}#) #{s 9529}# #f)
                                      (set-source-properties!
                                        #{e 9526}#
                                        #{s 9529}#))
                                    #{e 9526}#)))
                            (if (if (null? (car #{w 9657}#))
                                  (null? (cdr #{w 9657}#))
                                  #f)
                              #{x 9799}#
                              (if (if (vector? #{x 9799}#)
                                    (if (= (vector-length #{x 9799}#) 4)
                                      (eq? (vector-ref #{x 9799}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 9831}#
                                        (vector-ref #{x 9799}# 1))
                                      (#{wrap 9832}#
                                        (let ((#{w2 9840}#
                                                (vector-ref #{x 9799}# 2)))
                                          (let ((#{m1 9841}# (car #{w 9657}#))
                                                (#{s1 9842}# (cdr #{w 9657}#)))
                                            (if (null? #{m1 9841}#)
                                              (if (null? #{s1 9842}#)
                                                #{w2 9840}#
                                                (cons (car #{w2 9840}#)
                                                      (let ((#{m2 9857}#
                                                              (cdr #{w2 9840}#)))
                                                        (if (null? #{m2 9857}#)
                                                          #{s1 9842}#
                                                          (append
                                                            #{s1 9842}#
                                                            #{m2 9857}#)))))
                                              (cons (let ((#{m2 9865}#
                                                            (car #{w2 9840}#)))
                                                      (if (null? #{m2 9865}#)
                                                        #{m1 9841}#
                                                        (append
                                                          #{m1 9841}#
                                                          #{m2 9865}#)))
                                                    (let ((#{m2 9873}#
                                                            (cdr #{w2 9840}#)))
                                                      (if (null? #{m2 9873}#)
                                                        #{s1 9842}#
                                                        (append
                                                          #{s1 9842}#
                                                          #{m2 9873}#))))))))
                                      (#{module 9833}#
                                        (vector-ref #{x 9799}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 9831}#
                                    #{wrap 9832}#
                                    #{module 9833}#))
                                (if (null? #{x 9799}#)
                                  #{x 9799}#
                                  (vector
                                    'syntax-object
                                    #{x 9799}#
                                    #{w 9657}#
                                    #{mod 9530}#)))))
                          #{r 9658}#
                          #{w 9657}#
                          #{mod 9530}#))))))
              #{tmp 9532}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (let ((#{x 10113}#
                      (begin
                        (if (if (pair? #{e 9526}#) #{s 9529}# #f)
                          (set-source-properties! #{e 9526}# #{s 9529}#))
                        #{e 9526}#)))
                (if (if (null? (car #{w 9528}#))
                      (null? (cdr #{w 9528}#))
                      #f)
                  #{x 10113}#
                  (if (if (vector? #{x 10113}#)
                        (if (= (vector-length #{x 10113}#) 4)
                          (eq? (vector-ref #{x 10113}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 10145}# (vector-ref #{x 10113}# 1))
                          (#{wrap 10146}#
                            (let ((#{w2 10154}# (vector-ref #{x 10113}# 2)))
                              (let ((#{m1 10155}# (car #{w 9528}#))
                                    (#{s1 10156}# (cdr #{w 9528}#)))
                                (if (null? #{m1 10155}#)
                                  (if (null? #{s1 10156}#)
                                    #{w2 10154}#
                                    (cons (car #{w2 10154}#)
                                          (let ((#{m2 10171}#
                                                  (cdr #{w2 10154}#)))
                                            (if (null? #{m2 10171}#)
                                              #{s1 10156}#
                                              (append
                                                #{s1 10156}#
                                                #{m2 10171}#)))))
                                  (cons (let ((#{m2 10179}#
                                                (car #{w2 10154}#)))
                                          (if (null? #{m2 10179}#)
                                            #{m1 10155}#
                                            (append
                                              #{m1 10155}#
                                              #{m2 10179}#)))
                                        (let ((#{m2 10187}#
                                                (cdr #{w2 10154}#)))
                                          (if (null? #{m2 10187}#)
                                            #{s1 10156}#
                                            (append
                                              #{s1 10156}#
                                              #{m2 10187}#))))))))
                          (#{module 10147}# (vector-ref #{x 10113}# 3)))
                      (vector
                        'syntax-object
                        #{expression 10145}#
                        #{wrap 10146}#
                        #{module 10147}#))
                    (if (null? #{x 10113}#)
                      #{x 10113}#
                      (vector
                        'syntax-object
                        #{x 10113}#
                        #{w 9528}#
                        #{mod 9530}#))))))))))
    (#{global-extend 4408}#
      'core
      'set!
      (lambda (#{e 10350}#
               #{r 10351}#
               #{w 10352}#
               #{s 10353}#
               #{mod 10354}#)
        (let ((#{tmp 10356}#
                ($sc-dispatch #{e 10350}# '(_ any any))))
          (if (if #{tmp 10356}#
                (@apply
                  (lambda (#{id 10360}# #{val 10361}#)
                    (if (symbol? #{id 10360}#)
                      #t
                      (if (if (vector? #{id 10360}#)
                            (if (= (vector-length #{id 10360}#) 4)
                              (eq? (vector-ref #{id 10360}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 10360}# 1))
                        #f)))
                  #{tmp 10356}#)
                #f)
            (@apply
              (lambda (#{id 10388}# #{val 10389}#)
                (call-with-values
                  (lambda ()
                    (#{resolve-identifier 4430}#
                      #{id 10388}#
                      #{w 10352}#
                      #{r 10351}#
                      #{mod 10354}#
                      #t))
                  (lambda (#{type 10392}# #{value 10393}# #{id-mod 10394}#)
                    (if (eqv? #{type 10392}# 'lexical)
                      (#{build-lexical-assignment 4381}#
                        #{s 10353}#
                        (syntax->datum #{id 10388}#)
                        #{value 10393}#
                        (#{expand 4443}#
                          #{val 10389}#
                          #{r 10351}#
                          #{w 10352}#
                          #{mod 10354}#))
                      (if (eqv? #{type 10392}# 'global)
                        (#{build-global-assignment 4384}#
                          #{s 10353}#
                          #{value 10393}#
                          (#{expand 4443}#
                            #{val 10389}#
                            #{r 10351}#
                            #{w 10352}#
                            #{mod 10354}#)
                          #{id-mod 10394}#)
                        (if (eqv? #{type 10392}# 'macro)
                          (if (procedure-property
                                #{value 10393}#
                                'variable-transformer)
                            (#{expand 4443}#
                              (#{expand-macro 4446}#
                                #{value 10393}#
                                #{e 10350}#
                                #{r 10351}#
                                #{w 10352}#
                                #{s 10353}#
                                #f
                                #{mod 10354}#)
                              #{r 10351}#
                              '(())
                              #{mod 10354}#)
                            (syntax-violation
                              'set!
                              "not a variable transformer"
                              (if (if (null? (car #{w 10352}#))
                                    (null? (cdr #{w 10352}#))
                                    #f)
                                #{e 10350}#
                                (if (if (vector? #{e 10350}#)
                                      (if (= (vector-length #{e 10350}#) 4)
                                        (eq? (vector-ref #{e 10350}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 10854}#
                                          (vector-ref #{e 10350}# 1))
                                        (#{wrap 10855}#
                                          (let ((#{w2 10865}#
                                                  (vector-ref #{e 10350}# 2)))
                                            (let ((#{m1 10866}#
                                                    (car #{w 10352}#))
                                                  (#{s1 10867}#
                                                    (cdr #{w 10352}#)))
                                              (if (null? #{m1 10866}#)
                                                (if (null? #{s1 10867}#)
                                                  #{w2 10865}#
                                                  (cons (car #{w2 10865}#)
                                                        (let ((#{m2 10884}#
                                                                (cdr #{w2 10865}#)))
                                                          (if (null? #{m2 10884}#)
                                                            #{s1 10867}#
                                                            (append
                                                              #{s1 10867}#
                                                              #{m2 10884}#)))))
                                                (cons (let ((#{m2 10892}#
                                                              (car #{w2 10865}#)))
                                                        (if (null? #{m2 10892}#)
                                                          #{m1 10866}#
                                                          (append
                                                            #{m1 10866}#
                                                            #{m2 10892}#)))
                                                      (let ((#{m2 10900}#
                                                              (cdr #{w2 10865}#)))
                                                        (if (null? #{m2 10900}#)
                                                          #{s1 10867}#
                                                          (append
                                                            #{s1 10867}#
                                                            #{m2 10900}#))))))))
                                        (#{module 10856}#
                                          (vector-ref #{e 10350}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 10854}#
                                      #{wrap 10855}#
                                      #{module 10856}#))
                                  (if (null? #{e 10350}#)
                                    #{e 10350}#
                                    (vector
                                      'syntax-object
                                      #{e 10350}#
                                      #{w 10352}#
                                      #{mod 10354}#))))
                              (if (if (null? (car #{w 10352}#))
                                    (null? (cdr #{w 10352}#))
                                    #f)
                                #{id 10388}#
                                (if (if (vector? #{id 10388}#)
                                      (if (= (vector-length #{id 10388}#) 4)
                                        (eq? (vector-ref #{id 10388}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 10952}#
                                          (vector-ref #{id 10388}# 1))
                                        (#{wrap 10953}#
                                          (let ((#{w2 10963}#
                                                  (vector-ref #{id 10388}# 2)))
                                            (let ((#{m1 10964}#
                                                    (car #{w 10352}#))
                                                  (#{s1 10965}#
                                                    (cdr #{w 10352}#)))
                                              (if (null? #{m1 10964}#)
                                                (if (null? #{s1 10965}#)
                                                  #{w2 10963}#
                                                  (cons (car #{w2 10963}#)
                                                        (let ((#{m2 10982}#
                                                                (cdr #{w2 10963}#)))
                                                          (if (null? #{m2 10982}#)
                                                            #{s1 10965}#
                                                            (append
                                                              #{s1 10965}#
                                                              #{m2 10982}#)))))
                                                (cons (let ((#{m2 10990}#
                                                              (car #{w2 10963}#)))
                                                        (if (null? #{m2 10990}#)
                                                          #{m1 10964}#
                                                          (append
                                                            #{m1 10964}#
                                                            #{m2 10990}#)))
                                                      (let ((#{m2 10998}#
                                                              (cdr #{w2 10963}#)))
                                                        (if (null? #{m2 10998}#)
                                                          #{s1 10965}#
                                                          (append
                                                            #{s1 10965}#
                                                            #{m2 10998}#))))))))
                                        (#{module 10954}#
                                          (vector-ref #{id 10388}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 10952}#
                                      #{wrap 10953}#
                                      #{module 10954}#))
                                  (if (null? #{id 10388}#)
                                    #{id 10388}#
                                    (vector
                                      'syntax-object
                                      #{id 10388}#
                                      #{w 10352}#
                                      #{id-mod 10394}#))))))
                          (if (eqv? #{type 10392}# 'displaced-lexical)
                            (syntax-violation
                              'set!
                              "identifier out of context"
                              (if (if (null? (car #{w 10352}#))
                                    (null? (cdr #{w 10352}#))
                                    #f)
                                #{id 10388}#
                                (if (if (vector? #{id 10388}#)
                                      (if (= (vector-length #{id 10388}#) 4)
                                        (eq? (vector-ref #{id 10388}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 11053}#
                                          (vector-ref #{id 10388}# 1))
                                        (#{wrap 11054}#
                                          (let ((#{w2 11064}#
                                                  (vector-ref #{id 10388}# 2)))
                                            (let ((#{m1 11065}#
                                                    (car #{w 10352}#))
                                                  (#{s1 11066}#
                                                    (cdr #{w 10352}#)))
                                              (if (null? #{m1 11065}#)
                                                (if (null? #{s1 11066}#)
                                                  #{w2 11064}#
                                                  (cons (car #{w2 11064}#)
                                                        (let ((#{m2 11083}#
                                                                (cdr #{w2 11064}#)))
                                                          (if (null? #{m2 11083}#)
                                                            #{s1 11066}#
                                                            (append
                                                              #{s1 11066}#
                                                              #{m2 11083}#)))))
                                                (cons (let ((#{m2 11091}#
                                                              (car #{w2 11064}#)))
                                                        (if (null? #{m2 11091}#)
                                                          #{m1 11065}#
                                                          (append
                                                            #{m1 11065}#
                                                            #{m2 11091}#)))
                                                      (let ((#{m2 11099}#
                                                              (cdr #{w2 11064}#)))
                                                        (if (null? #{m2 11099}#)
                                                          #{s1 11066}#
                                                          (append
                                                            #{s1 11066}#
                                                            #{m2 11099}#))))))))
                                        (#{module 11055}#
                                          (vector-ref #{id 10388}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 11053}#
                                      #{wrap 11054}#
                                      #{module 11055}#))
                                  (if (null? #{id 10388}#)
                                    #{id 10388}#
                                    (vector
                                      'syntax-object
                                      #{id 10388}#
                                      #{w 10352}#
                                      #{mod 10354}#)))))
                            (syntax-violation
                              'set!
                              "bad set!"
                              (let ((#{x 11131}#
                                      (begin
                                        (if (if (pair? #{e 10350}#)
                                              #{s 10353}#
                                              #f)
                                          (set-source-properties!
                                            #{e 10350}#
                                            #{s 10353}#))
                                        #{e 10350}#)))
                                (if (if (null? (car #{w 10352}#))
                                      (null? (cdr #{w 10352}#))
                                      #f)
                                  #{x 11131}#
                                  (if (if (vector? #{x 11131}#)
                                        (if (= (vector-length #{x 11131}#) 4)
                                          (eq? (vector-ref #{x 11131}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 11163}#
                                            (vector-ref #{x 11131}# 1))
                                          (#{wrap 11164}#
                                            (let ((#{w2 11172}#
                                                    (vector-ref
                                                      #{x 11131}#
                                                      2)))
                                              (let ((#{m1 11173}#
                                                      (car #{w 10352}#))
                                                    (#{s1 11174}#
                                                      (cdr #{w 10352}#)))
                                                (if (null? #{m1 11173}#)
                                                  (if (null? #{s1 11174}#)
                                                    #{w2 11172}#
                                                    (cons (car #{w2 11172}#)
                                                          (let ((#{m2 11189}#
                                                                  (cdr #{w2 11172}#)))
                                                            (if (null? #{m2 11189}#)
                                                              #{s1 11174}#
                                                              (append
                                                                #{s1 11174}#
                                                                #{m2 11189}#)))))
                                                  (cons (let ((#{m2 11197}#
                                                                (car #{w2 11172}#)))
                                                          (if (null? #{m2 11197}#)
                                                            #{m1 11173}#
                                                            (append
                                                              #{m1 11173}#
                                                              #{m2 11197}#)))
                                                        (let ((#{m2 11205}#
                                                                (cdr #{w2 11172}#)))
                                                          (if (null? #{m2 11205}#)
                                                            #{s1 11174}#
                                                            (append
                                                              #{s1 11174}#
                                                              #{m2 11205}#))))))))
                                          (#{module 11165}#
                                            (vector-ref #{x 11131}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 11163}#
                                        #{wrap 11164}#
                                        #{module 11165}#))
                                    (if (null? #{x 11131}#)
                                      #{x 11131}#
                                      (vector
                                        'syntax-object
                                        #{x 11131}#
                                        #{w 10352}#
                                        #{mod 10354}#)))))))))))))
              #{tmp 10356}#)
            (let ((#{tmp 11220}#
                    ($sc-dispatch
                      #{e 10350}#
                      '(_ (any . each-any) any))))
              (if #{tmp 11220}#
                (@apply
                  (lambda (#{head 11224}# #{tail 11225}# #{val 11226}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 4442}#
                          #{head 11224}#
                          #{r 10351}#
                          '(())
                          #f
                          #f
                          #{mod 10354}#
                          #t))
                      (lambda (#{type 11229}#
                               #{value 11230}#
                               #{ee 11231}#
                               #{ww 11232}#
                               #{ss 11233}#
                               #{modmod 11234}#)
                        (if (eqv? #{type 11229}# 'module-ref)
                          (let ((#{val 11238}#
                                  (#{expand 4443}#
                                    #{val 11226}#
                                    #{r 10351}#
                                    #{w 10352}#
                                    #{mod 10354}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 11230}#
                                  (cons #{head 11224}# #{tail 11225}#)
                                  #{r 10351}#
                                  #{w 10352}#))
                              (lambda (#{e 11239}#
                                       #{r 11240}#
                                       #{w 11241}#
                                       #{s* 11242}#
                                       #{mod 11243}#)
                                (let ((#{tmp 11245}# (list #{e 11239}#)))
                                  (if (@apply
                                        (lambda (#{e 11247}#)
                                          (if (symbol? #{e 11247}#)
                                            #t
                                            (if (if (vector? #{e 11247}#)
                                                  (if (= (vector-length
                                                           #{e 11247}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{e 11247}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{e 11247}# 1))
                                              #f)))
                                        #{tmp 11245}#)
                                    (@apply
                                      (lambda (#{e 11277}#)
                                        (#{build-global-assignment 4384}#
                                          #{s 10353}#
                                          (syntax->datum #{e 11277}#)
                                          #{val 11238}#
                                          #{mod 11243}#))
                                      #{tmp 11245}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 11239}#))))))
                          (#{build-call 4377}#
                            #{s 10353}#
                            (#{expand 4443}#
                              (list '#(syntax-object
                                       setter
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(type value ee ww ss modmod)
                                          #((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                          #("i3655"
                                            "i3656"
                                            "i3657"
                                            "i3658"
                                            "i3659"
                                            "i3660"))
                                        #(ribcage
                                          #(head tail val)
                                          #((top) (top) (top))
                                          #("i3641" "i3642" "i3643"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w s mod)
                                          #((top) (top) (top) (top) (top))
                                          #("i3613"
                                            "i3614"
                                            "i3615"
                                            "i3616"
                                            "i3617"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-call
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            resolve-identifier
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-primcall
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-call
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-seq
                                            make-primcall
                                            make-call
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i471"
                                           "i469"
                                           "i467"
                                           "i465"
                                           "i463"
                                           "i461"
                                           "i459"
                                           "i457"
                                           "i455"
                                           "i453"
                                           "i451"
                                           "i449"
                                           "i447"
                                           "i445"
                                           "i443"
                                           "i441"
                                           "i439"
                                           "i437"
                                           "i435"
                                           "i433"
                                           "i431"
                                           "i429"
                                           "i427"
                                           "i425"
                                           "i423"
                                           "i421"
                                           "i419"
                                           "i417"
                                           "i415"
                                           "i413"
                                           "i411"
                                           "i409"
                                           "i407"
                                           "i405"
                                           "i403"
                                           "i401"
                                           "i400"
                                           "i398"
                                           "i395"
                                           "i394"
                                           "i393"
                                           "i391"
                                           "i390"
                                           "i388"
                                           "i386"
                                           "i384"
                                           "i382"
                                           "i380"
                                           "i378"
                                           "i376"
                                           "i374"
                                           "i371"
                                           "i369"
                                           "i368"
                                           "i366"
                                           "i364"
                                           "i362"
                                           "i360"
                                           "i359"
                                           "i358"
                                           "i357"
                                           "i355"
                                           "i354"
                                           "i351"
                                           "i349"
                                           "i347"
                                           "i345"
                                           "i343"
                                           "i341"
                                           "i340"
                                           "i339"
                                           "i337"
                                           "i335"
                                           "i334"
                                           "i331"
                                           "i330"
                                           "i328"
                                           "i326"
                                           "i324"
                                           "i322"
                                           "i320"
                                           "i318"
                                           "i316"
                                           "i314"
                                           "i312"
                                           "i309"
                                           "i307"
                                           "i305"
                                           "i303"
                                           "i301"
                                           "i299"
                                           "i297"
                                           "i295"
                                           "i293"
                                           "i291"
                                           "i289"
                                           "i287"
                                           "i285"
                                           "i283"
                                           "i281"
                                           "i279"
                                           "i277"
                                           "i275"
                                           "i273"
                                           "i271"
                                           "i269"
                                           "i267"
                                           "i265"
                                           "i263"
                                           "i262"
                                           "i259"
                                           "i257"
                                           "i256"
                                           "i255"
                                           "i254"
                                           "i253"
                                           "i251"
                                           "i249"
                                           "i247"
                                           "i244"
                                           "i242"
                                           "i240"
                                           "i238"
                                           "i236"
                                           "i234"
                                           "i232"
                                           "i230"
                                           "i228"
                                           "i226"
                                           "i224"
                                           "i222"
                                           "i220"
                                           "i218"
                                           "i216"
                                           "i214"
                                           "i212"
                                           "i210"
                                           "i208"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("i46" "i45" "i44"))
                                        #(ribcage () () ()))
                                       (hygiene guile))
                                    #{head 11224}#)
                              #{r 10351}#
                              #{w 10352}#
                              #{mod 10354}#)
                            (map (lambda (#{e 11606}#)
                                   (#{expand 4443}#
                                     #{e 11606}#
                                     #{r 10351}#
                                     #{w 10352}#
                                     #{mod 10354}#))
                                 (append
                                   #{tail 11225}#
                                   (list #{val 11226}#))))))))
                  #{tmp 11220}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (let ((#{x 11698}#
                          (begin
                            (if (if (pair? #{e 10350}#) #{s 10353}# #f)
                              (set-source-properties! #{e 10350}# #{s 10353}#))
                            #{e 10350}#)))
                    (if (if (null? (car #{w 10352}#))
                          (null? (cdr #{w 10352}#))
                          #f)
                      #{x 11698}#
                      (if (if (vector? #{x 11698}#)
                            (if (= (vector-length #{x 11698}#) 4)
                              (eq? (vector-ref #{x 11698}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 11730}# (vector-ref #{x 11698}# 1))
                              (#{wrap 11731}#
                                (let ((#{w2 11739}#
                                        (vector-ref #{x 11698}# 2)))
                                  (let ((#{m1 11740}# (car #{w 10352}#))
                                        (#{s1 11741}# (cdr #{w 10352}#)))
                                    (if (null? #{m1 11740}#)
                                      (if (null? #{s1 11741}#)
                                        #{w2 11739}#
                                        (cons (car #{w2 11739}#)
                                              (let ((#{m2 11756}#
                                                      (cdr #{w2 11739}#)))
                                                (if (null? #{m2 11756}#)
                                                  #{s1 11741}#
                                                  (append
                                                    #{s1 11741}#
                                                    #{m2 11756}#)))))
                                      (cons (let ((#{m2 11764}#
                                                    (car #{w2 11739}#)))
                                              (if (null? #{m2 11764}#)
                                                #{m1 11740}#
                                                (append
                                                  #{m1 11740}#
                                                  #{m2 11764}#)))
                                            (let ((#{m2 11772}#
                                                    (cdr #{w2 11739}#)))
                                              (if (null? #{m2 11772}#)
                                                #{s1 11741}#
                                                (append
                                                  #{s1 11741}#
                                                  #{m2 11772}#))))))))
                              (#{module 11732}# (vector-ref #{x 11698}# 3)))
                          (vector
                            'syntax-object
                            #{expression 11730}#
                            #{wrap 11731}#
                            #{module 11732}#))
                        (if (null? #{x 11698}#)
                          #{x 11698}#
                          (vector
                            'syntax-object
                            #{x 11698}#
                            #{w 10352}#
                            #{mod 10354}#))))))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 11803}# #{r 11804}# #{w 11805}#)
          (let ((#{tmp 11807}#
                  ($sc-dispatch #{e 11803}# '(_ each-any any))))
            (if (if #{tmp 11807}#
                  (@apply
                    (lambda (#{mod 11810}# #{id 11811}#)
                      (if (and-map #{id? 4410}# #{mod 11810}#)
                        (if (symbol? #{id 11811}#)
                          #t
                          (if (if (vector? #{id 11811}#)
                                (if (= (vector-length #{id 11811}#) 4)
                                  (eq? (vector-ref #{id 11811}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 11811}# 1))
                            #f))
                        #f))
                    #{tmp 11807}#)
                  #f)
              (@apply
                (lambda (#{mod 11851}# #{id 11852}#)
                  (values
                    (syntax->datum #{id 11852}#)
                    #{r 11804}#
                    #{w 11805}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i3702" "i3703"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i3690" "i3691" "i3692"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    expand-lambda-case
                                    lambda*-formals
                                    expand-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    expand-void
                                    eval-local-transformer
                                    expand-local-syntax
                                    expand-body
                                    expand-macro
                                    expand-call
                                    expand-expr
                                    expand
                                    syntax-type
                                    parse-when-list
                                    expand-install-global
                                    expand-top-sequence
                                    expand-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    resolve-identifier
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-primcall
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-call
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-seq
                                    make-primcall
                                    make-call
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i471"
                                   "i469"
                                   "i467"
                                   "i465"
                                   "i463"
                                   "i461"
                                   "i459"
                                   "i457"
                                   "i455"
                                   "i453"
                                   "i451"
                                   "i449"
                                   "i447"
                                   "i445"
                                   "i443"
                                   "i441"
                                   "i439"
                                   "i437"
                                   "i435"
                                   "i433"
                                   "i431"
                                   "i429"
                                   "i427"
                                   "i425"
                                   "i423"
                                   "i421"
                                   "i419"
                                   "i417"
                                   "i415"
                                   "i413"
                                   "i411"
                                   "i409"
                                   "i407"
                                   "i405"
                                   "i403"
                                   "i401"
                                   "i400"
                                   "i398"
                                   "i395"
                                   "i394"
                                   "i393"
                                   "i391"
                                   "i390"
                                   "i388"
                                   "i386"
                                   "i384"
                                   "i382"
                                   "i380"
                                   "i378"
                                   "i376"
                                   "i374"
                                   "i371"
                                   "i369"
                                   "i368"
                                   "i366"
                                   "i364"
                                   "i362"
                                   "i360"
                                   "i359"
                                   "i358"
                                   "i357"
                                   "i355"
                                   "i354"
                                   "i351"
                                   "i349"
                                   "i347"
                                   "i345"
                                   "i343"
                                   "i341"
                                   "i340"
                                   "i339"
                                   "i337"
                                   "i335"
                                   "i334"
                                   "i331"
                                   "i330"
                                   "i328"
                                   "i326"
                                   "i324"
                                   "i322"
                                   "i320"
                                   "i318"
                                   "i316"
                                   "i314"
                                   "i312"
                                   "i309"
                                   "i307"
                                   "i305"
                                   "i303"
                                   "i301"
                                   "i299"
                                   "i297"
                                   "i295"
                                   "i293"
                                   "i291"
                                   "i289"
                                   "i287"
                                   "i285"
                                   "i283"
                                   "i281"
                                   "i279"
                                   "i277"
                                   "i275"
                                   "i273"
                                   "i271"
                                   "i269"
                                   "i267"
                                   "i265"
                                   "i263"
                                   "i262"
                                   "i259"
                                   "i257"
                                   "i256"
                                   "i255"
                                   "i254"
                                   "i253"
                                   "i251"
                                   "i249"
                                   "i247"
                                   "i244"
                                   "i242"
                                   "i240"
                                   "i238"
                                   "i236"
                                   "i234"
                                   "i232"
                                   "i230"
                                   "i228"
                                   "i226"
                                   "i224"
                                   "i222"
                                   "i220"
                                   "i218"
                                   "i216"
                                   "i214"
                                   "i212"
                                   "i210"
                                   "i208"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i46" "i45" "i44"))
                                #(ribcage () () ()))
                               (hygiene guile))
                            #{mod 11851}#))))
                #{tmp 11807}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 11803}#))))))
    (#{global-extend 4408}#
      'module-ref
      '@@
      (lambda (#{e 11956}# #{r 11957}# #{w 11958}#)
        (letrec*
          ((#{remodulate 11959}#
             (lambda (#{x 12195}# #{mod 12196}#)
               (if (pair? #{x 12195}#)
                 (cons (#{remodulate 11959}#
                         (car #{x 12195}#)
                         #{mod 12196}#)
                       (#{remodulate 11959}#
                         (cdr #{x 12195}#)
                         #{mod 12196}#))
                 (if (if (vector? #{x 12195}#)
                       (if (= (vector-length #{x 12195}#) 4)
                         (eq? (vector-ref #{x 12195}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 12210}#
                           (#{remodulate 11959}#
                             (vector-ref #{x 12195}# 1)
                             #{mod 12196}#))
                         (#{wrap 12211}# (vector-ref #{x 12195}# 2)))
                     (vector
                       'syntax-object
                       #{expression 12210}#
                       #{wrap 12211}#
                       #{mod 12196}#))
                   (if (vector? #{x 12195}#)
                     (let ((#{n 12219}# (vector-length #{x 12195}#)))
                       (let ((#{v 12220}# (make-vector #{n 12219}#)))
                         (letrec*
                           ((#{loop 12221}#
                              (lambda (#{i 12276}#)
                                (if (= #{i 12276}# #{n 12219}#)
                                  #{v 12220}#
                                  (begin
                                    (vector-set!
                                      #{v 12220}#
                                      #{i 12276}#
                                      (#{remodulate 11959}#
                                        (vector-ref #{x 12195}# #{i 12276}#)
                                        #{mod 12196}#))
                                    (#{loop 12221}# (#{1+}# #{i 12276}#)))))))
                           (#{loop 12221}# 0))))
                     #{x 12195}#))))))
          (let ((#{tmp 11961}#
                  ($sc-dispatch #{e 11956}# '(_ each-any any))))
            (if (if #{tmp 11961}#
                  (@apply
                    (lambda (#{mod 11965}# #{exp 11966}#)
                      (and-map #{id? 4410}# #{mod 11965}#))
                    #{tmp 11961}#)
                  #f)
              (@apply
                (lambda (#{mod 11982}# #{exp 11983}#)
                  (let ((#{mod 11984}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i3746" "i3747"))
                                      #(ribcage (remodulate) ((top)) ("i3713"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i3710" "i3711" "i3712"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          expand-lambda-case
                                          lambda*-formals
                                          expand-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          expand-void
                                          eval-local-transformer
                                          expand-local-syntax
                                          expand-body
                                          expand-macro
                                          expand-call
                                          expand-expr
                                          expand
                                          syntax-type
                                          parse-when-list
                                          expand-install-global
                                          expand-top-sequence
                                          expand-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          resolve-identifier
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-primcall
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-call
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-seq
                                          make-primcall
                                          make-call
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i471"
                                         "i469"
                                         "i467"
                                         "i465"
                                         "i463"
                                         "i461"
                                         "i459"
                                         "i457"
                                         "i455"
                                         "i453"
                                         "i451"
                                         "i449"
                                         "i447"
                                         "i445"
                                         "i443"
                                         "i441"
                                         "i439"
                                         "i437"
                                         "i435"
                                         "i433"
                                         "i431"
                                         "i429"
                                         "i427"
                                         "i425"
                                         "i423"
                                         "i421"
                                         "i419"
                                         "i417"
                                         "i415"
                                         "i413"
                                         "i411"
                                         "i409"
                                         "i407"
                                         "i405"
                                         "i403"
                                         "i401"
                                         "i400"
                                         "i398"
                                         "i395"
                                         "i394"
                                         "i393"
                                         "i391"
                                         "i390"
                                         "i388"
                                         "i386"
                                         "i384"
                                         "i382"
                                         "i380"
                                         "i378"
                                         "i376"
                                         "i374"
                                         "i371"
                                         "i369"
                                         "i368"
                                         "i366"
                                         "i364"
                                         "i362"
                                         "i360"
                                         "i359"
                                         "i358"
                                         "i357"
                                         "i355"
                                         "i354"
                                         "i351"
                                         "i349"
                                         "i347"
                                         "i345"
                                         "i343"
                                         "i341"
                                         "i340"
                                         "i339"
                                         "i337"
                                         "i335"
                                         "i334"
                                         "i331"
                                         "i330"
                                         "i328"
                                         "i326"
                                         "i324"
                                         "i322"
                                         "i320"
                                         "i318"
                                         "i316"
                                         "i314"
                                         "i312"
                                         "i309"
                                         "i307"
                                         "i305"
                                         "i303"
                                         "i301"
                                         "i299"
                                         "i297"
                                         "i295"
                                         "i293"
                                         "i291"
                                         "i289"
                                         "i287"
                                         "i285"
                                         "i283"
                                         "i281"
                                         "i279"
                                         "i277"
                                         "i275"
                                         "i273"
                                         "i271"
                                         "i269"
                                         "i267"
                                         "i265"
                                         "i263"
                                         "i262"
                                         "i259"
                                         "i257"
                                         "i256"
                                         "i255"
                                         "i254"
                                         "i253"
                                         "i251"
                                         "i249"
                                         "i247"
                                         "i244"
                                         "i242"
                                         "i240"
                                         "i238"
                                         "i236"
                                         "i234"
                                         "i232"
                                         "i230"
                                         "i228"
                                         "i226"
                                         "i224"
                                         "i222"
                                         "i220"
                                         "i218"
                                         "i216"
                                         "i214"
                                         "i212"
                                         "i210"
                                         "i208"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i46" "i45" "i44"))
                                      #(ribcage () () ()))
                                     (hygiene guile))
                                  #{mod 11982}#))))
                    (values
                      (#{remodulate 11959}#
                        #{exp 11983}#
                        #{mod 11984}#)
                      #{r 11957}#
                      #{w 11958}#
                      (#{source-annotation 4404}# #{exp 11983}#)
                      #{mod 11984}#)))
                #{tmp 11961}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 11956}#))))))
    (#{global-extend 4408}#
      'core
      'if
      (lambda (#{e 12389}#
               #{r 12390}#
               #{w 12391}#
               #{s 12392}#
               #{mod 12393}#)
        (let ((#{tmp 12395}#
                ($sc-dispatch #{e 12389}# '(_ any any))))
          (if #{tmp 12395}#
            (@apply
              (lambda (#{test 12399}# #{then 12400}#)
                (#{build-conditional 4378}#
                  #{s 12392}#
                  (#{expand 4443}#
                    #{test 12399}#
                    #{r 12390}#
                    #{w 12391}#
                    #{mod 12393}#)
                  (#{expand 4443}#
                    #{then 12400}#
                    #{r 12390}#
                    #{w 12391}#
                    #{mod 12393}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 12395}#)
            (let ((#{tmp 12661}#
                    ($sc-dispatch #{e 12389}# '(_ any any any))))
              (if #{tmp 12661}#
                (@apply
                  (lambda (#{test 12665}# #{then 12666}# #{else 12667}#)
                    (#{build-conditional 4378}#
                      #{s 12392}#
                      (#{expand 4443}#
                        #{test 12665}#
                        #{r 12390}#
                        #{w 12391}#
                        #{mod 12393}#)
                      (#{expand 4443}#
                        #{then 12666}#
                        #{r 12390}#
                        #{w 12391}#
                        #{mod 12393}#)
                      (#{expand 4443}#
                        #{else 12667}#
                        #{r 12390}#
                        #{w 12391}#
                        #{mod 12393}#)))
                  #{tmp 12661}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 12389}#)))))))
    (#{global-extend 4408}#
      'core
      'with-fluids
      (lambda (#{e 13126}#
               #{r 13127}#
               #{w 13128}#
               #{s 13129}#
               #{mod 13130}#)
        (let ((#{tmp 13132}#
                ($sc-dispatch
                  #{e 13126}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 13132}#
            (@apply
              (lambda (#{fluid 13136}#
                       #{val 13137}#
                       #{b 13138}#
                       #{b* 13139}#)
                (#{build-dynlet 4379}#
                  #{s 13129}#
                  (map (lambda (#{x 13232}#)
                         (#{expand 4443}#
                           #{x 13232}#
                           #{r 13127}#
                           #{w 13128}#
                           #{mod 13130}#))
                       #{fluid 13136}#)
                  (map (lambda (#{x 13314}#)
                         (#{expand 4443}#
                           #{x 13314}#
                           #{r 13127}#
                           #{w 13128}#
                           #{mod 13130}#))
                       #{val 13137}#)
                  (#{expand-body 4447}#
                    (cons #{b 13138}# #{b* 13139}#)
                    (let ((#{x 13407}#
                            (begin
                              (if (if (pair? #{e 13126}#) #{s 13129}# #f)
                                (set-source-properties!
                                  #{e 13126}#
                                  #{s 13129}#))
                              #{e 13126}#)))
                      (if (if (null? (car #{w 13128}#))
                            (null? (cdr #{w 13128}#))
                            #f)
                        #{x 13407}#
                        (if (if (vector? #{x 13407}#)
                              (if (= (vector-length #{x 13407}#) 4)
                                (eq? (vector-ref #{x 13407}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 13439}#
                                  (vector-ref #{x 13407}# 1))
                                (#{wrap 13440}#
                                  (let ((#{w2 13448}#
                                          (vector-ref #{x 13407}# 2)))
                                    (let ((#{m1 13449}# (car #{w 13128}#))
                                          (#{s1 13450}# (cdr #{w 13128}#)))
                                      (if (null? #{m1 13449}#)
                                        (if (null? #{s1 13450}#)
                                          #{w2 13448}#
                                          (cons (car #{w2 13448}#)
                                                (let ((#{m2 13465}#
                                                        (cdr #{w2 13448}#)))
                                                  (if (null? #{m2 13465}#)
                                                    #{s1 13450}#
                                                    (append
                                                      #{s1 13450}#
                                                      #{m2 13465}#)))))
                                        (cons (let ((#{m2 13473}#
                                                      (car #{w2 13448}#)))
                                                (if (null? #{m2 13473}#)
                                                  #{m1 13449}#
                                                  (append
                                                    #{m1 13449}#
                                                    #{m2 13473}#)))
                                              (let ((#{m2 13481}#
                                                      (cdr #{w2 13448}#)))
                                                (if (null? #{m2 13481}#)
                                                  #{s1 13450}#
                                                  (append
                                                    #{s1 13450}#
                                                    #{m2 13481}#))))))))
                                (#{module 13441}# (vector-ref #{x 13407}# 3)))
                            (vector
                              'syntax-object
                              #{expression 13439}#
                              #{wrap 13440}#
                              #{module 13441}#))
                          (if (null? #{x 13407}#)
                            #{x 13407}#
                            (vector
                              'syntax-object
                              #{x 13407}#
                              #{w 13128}#
                              #{mod 13130}#)))))
                    #{r 13127}#
                    #{w 13128}#
                    #{mod 13130}#)))
              #{tmp 13132}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 13126}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'define-syntax-parameter
      (make-syntax-transformer
        'define-syntax-parameter
        'define-syntax-parameter
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 4408}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 13785}#
           (lambda (#{pattern 15441}# #{keys 15442}#)
             (letrec*
               ((#{cvt* 15443}#
                  (lambda (#{p* 16242}# #{n 16243}# #{ids 16244}#)
                    (if (not (pair? #{p* 16242}#))
                      (#{cvt 15445}#
                        #{p* 16242}#
                        #{n 16243}#
                        #{ids 16244}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 15443}#
                            (cdr #{p* 16242}#)
                            #{n 16243}#
                            #{ids 16244}#))
                        (lambda (#{y 16247}# #{ids 16248}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 15445}#
                                (car #{p* 16242}#)
                                #{n 16243}#
                                #{ids 16248}#))
                            (lambda (#{x 16251}# #{ids 16252}#)
                              (values
                                (cons #{x 16251}# #{y 16247}#)
                                #{ids 16252}#))))))))
                (#{v-reverse 15444}#
                  (lambda (#{x 16253}#)
                    (letrec*
                      ((#{loop 16254}#
                         (lambda (#{r 16355}# #{x 16356}#)
                           (if (not (pair? #{x 16356}#))
                             (values #{r 16355}# #{x 16356}#)
                             (#{loop 16254}#
                               (cons (car #{x 16356}#) #{r 16355}#)
                               (cdr #{x 16356}#))))))
                      (#{loop 16254}# '() #{x 16253}#))))
                (#{cvt 15445}#
                  (lambda (#{p 15448}# #{n 15449}# #{ids 15450}#)
                    (if (if (symbol? #{p 15448}#)
                          #t
                          (if (if (vector? #{p 15448}#)
                                (if (= (vector-length #{p 15448}#) 4)
                                  (eq? (vector-ref #{p 15448}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 15448}# 1))
                            #f))
                      (if (#{bound-id-member? 4435}#
                            #{p 15448}#
                            #{keys 15442}#)
                        (values
                          (vector 'free-id #{p 15448}#)
                          #{ids 15450}#)
                        (if (#{free-id=? 4431}#
                              #{p 15448}#
                              '#(syntax-object
                                 _
                                 ((top)
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(p n ids)
                                    #((top) (top) (top))
                                    #("i3847" "i3848" "i3849"))
                                  #(ribcage
                                    (cvt v-reverse cvt*)
                                    ((top) (top) (top))
                                    ("i3820" "i3818" "i3816"))
                                  #(ribcage
                                    #(pattern keys)
                                    #((top) (top))
                                    #("i3814" "i3815"))
                                  #(ribcage
                                    (gen-syntax-case
                                      gen-clause
                                      build-dispatch-call
                                      convert-pattern)
                                    ((top) (top) (top) (top))
                                    ("i3810" "i3808" "i3806" "i3804"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      expand-lambda-case
                                      lambda*-formals
                                      expand-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      expand-void
                                      eval-local-transformer
                                      expand-local-syntax
                                      expand-body
                                      expand-macro
                                      expand-call
                                      expand-expr
                                      expand
                                      syntax-type
                                      parse-when-list
                                      expand-install-global
                                      expand-top-sequence
                                      expand-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      resolve-identifier
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-primcall
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-call
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-seq
                                      make-primcall
                                      make-call
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("i471"
                                     "i469"
                                     "i467"
                                     "i465"
                                     "i463"
                                     "i461"
                                     "i459"
                                     "i457"
                                     "i455"
                                     "i453"
                                     "i451"
                                     "i449"
                                     "i447"
                                     "i445"
                                     "i443"
                                     "i441"
                                     "i439"
                                     "i437"
                                     "i435"
                                     "i433"
                                     "i431"
                                     "i429"
                                     "i427"
                                     "i425"
                                     "i423"
                                     "i421"
                                     "i419"
                                     "i417"
                                     "i415"
                                     "i413"
                                     "i411"
                                     "i409"
                                     "i407"
                                     "i405"
                                     "i403"
                                     "i401"
                                     "i400"
                                     "i398"
                                     "i395"
                                     "i394"
                                     "i393"
                                     "i391"
                                     "i390"
                                     "i388"
                                     "i386"
                                     "i384"
                                     "i382"
                                     "i380"
                                     "i378"
                                     "i376"
                                     "i374"
                                     "i371"
                                     "i369"
                                     "i368"
                                     "i366"
                                     "i364"
                                     "i362"
                                     "i360"
                                     "i359"
                                     "i358"
                                     "i357"
                                     "i355"
                                     "i354"
                                     "i351"
                                     "i349"
                                     "i347"
                                     "i345"
                                     "i343"
                                     "i341"
                                     "i340"
                                     "i339"
                                     "i337"
                                     "i335"
                                     "i334"
                                     "i331"
                                     "i330"
                                     "i328"
                                     "i326"
                                     "i324"
                                     "i322"
                                     "i320"
                                     "i318"
                                     "i316"
                                     "i314"
                                     "i312"
                                     "i309"
                                     "i307"
                                     "i305"
                                     "i303"
                                     "i301"
                                     "i299"
                                     "i297"
                                     "i295"
                                     "i293"
                                     "i291"
                                     "i289"
                                     "i287"
                                     "i285"
                                     "i283"
                                     "i281"
                                     "i279"
                                     "i277"
                                     "i275"
                                     "i273"
                                     "i271"
                                     "i269"
                                     "i267"
                                     "i265"
                                     "i263"
                                     "i262"
                                     "i259"
                                     "i257"
                                     "i256"
                                     "i255"
                                     "i254"
                                     "i253"
                                     "i251"
                                     "i249"
                                     "i247"
                                     "i244"
                                     "i242"
                                     "i240"
                                     "i238"
                                     "i236"
                                     "i234"
                                     "i232"
                                     "i230"
                                     "i228"
                                     "i226"
                                     "i224"
                                     "i222"
                                     "i220"
                                     "i218"
                                     "i216"
                                     "i214"
                                     "i212"
                                     "i210"
                                     "i208"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("i46" "i45" "i44"))
                                  #(ribcage () () ()))
                                 (hygiene guile)))
                          (values '_ #{ids 15450}#)
                          (values
                            'any
                            (cons (cons #{p 15448}# #{n 15449}#)
                                  #{ids 15450}#))))
                      (let ((#{tmp 15582}#
                              ($sc-dispatch #{p 15448}# '(any any))))
                        (if (if #{tmp 15582}#
                              (@apply
                                (lambda (#{x 15586}# #{dots 15587}#)
                                  (if (if (if (vector? #{dots 15587}#)
                                            (if (= (vector-length
                                                     #{dots 15587}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{dots 15587}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 15587}# 1))
                                        #f)
                                    (#{free-id=? 4431}#
                                      #{dots 15587}#
                                      '#(syntax-object
                                         ...
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i2338"))
                                          #(ribcage
                                            (lambda-var-list
                                              gen-var
                                              strip
                                              expand-lambda-case
                                              lambda*-formals
                                              expand-simple-lambda
                                              lambda-formals
                                              ellipsis?
                                              expand-void
                                              eval-local-transformer
                                              expand-local-syntax
                                              expand-body
                                              expand-macro
                                              expand-call
                                              expand-expr
                                              expand
                                              syntax-type
                                              parse-when-list
                                              expand-install-global
                                              expand-top-sequence
                                              expand-sequence
                                              source-wrap
                                              wrap
                                              bound-id-member?
                                              distinct-bound-ids?
                                              valid-bound-ids?
                                              bound-id=?
                                              free-id=?
                                              resolve-identifier
                                              id-var-name
                                              same-marks?
                                              join-marks
                                              join-wraps
                                              smart-append
                                              make-binding-wrap
                                              extend-ribcage!
                                              make-empty-ribcage
                                              new-mark
                                              anti-mark
                                              the-anti-mark
                                              top-marked?
                                              top-wrap
                                              empty-wrap
                                              set-ribcage-labels!
                                              set-ribcage-marks!
                                              set-ribcage-symnames!
                                              ribcage-labels
                                              ribcage-marks
                                              ribcage-symnames
                                              ribcage?
                                              make-ribcage
                                              gen-labels
                                              gen-label
                                              make-rename
                                              rename-marks
                                              rename-new
                                              rename-old
                                              subst-rename?
                                              wrap-subst
                                              wrap-marks
                                              make-wrap
                                              id-sym-name&marks
                                              id-sym-name
                                              id?
                                              nonsymbol-id?
                                              global-extend
                                              macros-only-env
                                              extend-var-env
                                              extend-env
                                              null-env
                                              binding-value
                                              binding-type
                                              make-binding
                                              arg-check
                                              source-annotation
                                              no-source
                                              set-syntax-object-module!
                                              set-syntax-object-wrap!
                                              set-syntax-object-expression!
                                              syntax-object-module
                                              syntax-object-wrap
                                              syntax-object-expression
                                              syntax-object?
                                              make-syntax-object
                                              build-lexical-var
                                              build-letrec
                                              build-named-let
                                              build-let
                                              build-sequence
                                              build-data
                                              build-primref
                                              build-primcall
                                              build-lambda-case
                                              build-case-lambda
                                              build-simple-lambda
                                              build-global-definition
                                              build-global-assignment
                                              build-global-reference
                                              analyze-variable
                                              build-lexical-assignment
                                              build-lexical-reference
                                              build-dynlet
                                              build-conditional
                                              build-call
                                              build-void
                                              maybe-name-value!
                                              decorate-source
                                              get-global-definition-hook
                                              put-global-definition-hook
                                              gensym-hook
                                              local-eval-hook
                                              top-level-eval-hook
                                              fx<
                                              fx=
                                              fx-
                                              fx+
                                              set-lambda-meta!
                                              lambda-meta
                                              lambda?
                                              make-dynlet
                                              make-letrec
                                              make-let
                                              make-lambda-case
                                              make-lambda
                                              make-seq
                                              make-primcall
                                              make-call
                                              make-conditional
                                              make-toplevel-define
                                              make-toplevel-set
                                              make-toplevel-ref
                                              make-module-set
                                              make-module-ref
                                              make-lexical-set
                                              make-lexical-ref
                                              make-primitive-ref
                                              make-const
                                              make-void)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i471"
                                             "i469"
                                             "i467"
                                             "i465"
                                             "i463"
                                             "i461"
                                             "i459"
                                             "i457"
                                             "i455"
                                             "i453"
                                             "i451"
                                             "i449"
                                             "i447"
                                             "i445"
                                             "i443"
                                             "i441"
                                             "i439"
                                             "i437"
                                             "i435"
                                             "i433"
                                             "i431"
                                             "i429"
                                             "i427"
                                             "i425"
                                             "i423"
                                             "i421"
                                             "i419"
                                             "i417"
                                             "i415"
                                             "i413"
                                             "i411"
                                             "i409"
                                             "i407"
                                             "i405"
                                             "i403"
                                             "i401"
                                             "i400"
                                             "i398"
                                             "i395"
                                             "i394"
                                             "i393"
                                             "i391"
                                             "i390"
                                             "i388"
                                             "i386"
                                             "i384"
                                             "i382"
                                             "i380"
                                             "i378"
                                             "i376"
                                             "i374"
                                             "i371"
                                             "i369"
                                             "i368"
                                             "i366"
                                             "i364"
                                             "i362"
                                             "i360"
                                             "i359"
                                             "i358"
                                             "i357"
                                             "i355"
                                             "i354"
                                             "i351"
                                             "i349"
                                             "i347"
                                             "i345"
                                             "i343"
                                             "i341"
                                             "i340"
                                             "i339"
                                             "i337"
                                             "i335"
                                             "i334"
                                             "i331"
                                             "i330"
                                             "i328"
                                             "i326"
                                             "i324"
                                             "i322"
                                             "i320"
                                             "i318"
                                             "i316"
                                             "i314"
                                             "i312"
                                             "i309"
                                             "i307"
                                             "i305"
                                             "i303"
                                             "i301"
                                             "i299"
                                             "i297"
                                             "i295"
                                             "i293"
                                             "i291"
                                             "i289"
                                             "i287"
                                             "i285"
                                             "i283"
                                             "i281"
                                             "i279"
                                             "i277"
                                             "i275"
                                             "i273"
                                             "i271"
                                             "i269"
                                             "i267"
                                             "i265"
                                             "i263"
                                             "i262"
                                             "i259"
                                             "i257"
                                             "i256"
                                             "i255"
                                             "i254"
                                             "i253"
                                             "i251"
                                             "i249"
                                             "i247"
                                             "i244"
                                             "i242"
                                             "i240"
                                             "i238"
                                             "i236"
                                             "i234"
                                             "i232"
                                             "i230"
                                             "i228"
                                             "i226"
                                             "i224"
                                             "i222"
                                             "i220"
                                             "i218"
                                             "i216"
                                             "i214"
                                             "i212"
                                             "i210"
                                             "i208"))
                                          #(ribcage
                                            (define-structure
                                              define-expansion-accessors
                                              define-expansion-constructors)
                                            ((top) (top) (top))
                                            ("i46" "i45" "i44"))
                                          #(ribcage () () ()))
                                         (hygiene guile)))
                                    #f))
                                #{tmp 15582}#)
                              #f)
                          (@apply
                            (lambda (#{x 15626}# #{dots 15627}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 15445}#
                                    #{x 15626}#
                                    (#{1+}# #{n 15449}#)
                                    #{ids 15450}#))
                                (lambda (#{p 15628}# #{ids 15629}#)
                                  (values
                                    (if (eq? #{p 15628}# 'any)
                                      'each-any
                                      (vector 'each #{p 15628}#))
                                    #{ids 15629}#))))
                            #{tmp 15582}#)
                          (let ((#{tmp 15630}#
                                  ($sc-dispatch #{p 15448}# '(any any . any))))
                            (if (if #{tmp 15630}#
                                  (@apply
                                    (lambda (#{x 15634}#
                                             #{dots 15635}#
                                             #{ys 15636}#)
                                      (if (if (if (vector? #{dots 15635}#)
                                                (if (= (vector-length
                                                         #{dots 15635}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 15635}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 15635}# 1))
                                            #f)
                                        (#{free-id=? 4431}#
                                          #{dots 15635}#
                                          '#(syntax-object
                                             ...
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i2338"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-call
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  resolve-identifier
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-primcall
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-call
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-seq
                                                  make-primcall
                                                  make-call
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i471"
                                                 "i469"
                                                 "i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i400"
                                                 "i398"
                                                 "i395"
                                                 "i394"
                                                 "i393"
                                                 "i391"
                                                 "i390"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i371"
                                                 "i369"
                                                 "i368"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i359"
                                                 "i358"
                                                 "i357"
                                                 "i355"
                                                 "i354"
                                                 "i351"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i340"
                                                 "i339"
                                                 "i337"
                                                 "i335"
                                                 "i334"
                                                 "i331"
                                                 "i330"
                                                 "i328"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i309"
                                                 "i307"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i262"
                                                 "i259"
                                                 "i257"
                                                 "i256"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i244"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44"))
                                              #(ribcage () () ()))
                                             (hygiene guile)))
                                        #f))
                                    #{tmp 15630}#)
                                  #f)
                              (@apply
                                (lambda (#{x 15675}#
                                         #{dots 15676}#
                                         #{ys 15677}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 15443}#
                                        #{ys 15677}#
                                        #{n 15449}#
                                        #{ids 15450}#))
                                    (lambda (#{ys 16162}# #{ids 16163}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 15445}#
                                            #{x 15675}#
                                            (#{1+}# #{n 15449}#)
                                            #{ids 16163}#))
                                        (lambda (#{x 16164}# #{ids 16165}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 15444}#
                                                #{ys 16162}#))
                                            (lambda (#{ys 16201}# #{e 16202}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 16164}#
                                                  #{ys 16201}#
                                                  #{e 16202}#)
                                                #{ids 16165}#))))))))
                                #{tmp 15630}#)
                              (let ((#{tmp 16203}#
                                      ($sc-dispatch #{p 15448}# '(any . any))))
                                (if #{tmp 16203}#
                                  (@apply
                                    (lambda (#{x 16207}# #{y 16208}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 15445}#
                                            #{y 16208}#
                                            #{n 15449}#
                                            #{ids 15450}#))
                                        (lambda (#{y 16209}# #{ids 16210}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 15445}#
                                                #{x 16207}#
                                                #{n 15449}#
                                                #{ids 16210}#))
                                            (lambda (#{x 16211}# #{ids 16212}#)
                                              (values
                                                (cons #{x 16211}# #{y 16209}#)
                                                #{ids 16212}#))))))
                                    #{tmp 16203}#)
                                  (let ((#{tmp 16213}#
                                          ($sc-dispatch #{p 15448}# '())))
                                    (if #{tmp 16213}#
                                      (@apply
                                        (lambda () (values '() #{ids 15450}#))
                                        #{tmp 16213}#)
                                      (let ((#{tmp 16217}#
                                              ($sc-dispatch
                                                #{p 15448}#
                                                '#(vector each-any))))
                                        (if #{tmp 16217}#
                                          (@apply
                                            (lambda (#{x 16221}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 15445}#
                                                    #{x 16221}#
                                                    #{n 15449}#
                                                    #{ids 15450}#))
                                                (lambda (#{p 16222}#
                                                         #{ids 16223}#)
                                                  (values
                                                    (vector
                                                      'vector
                                                      #{p 16222}#)
                                                    #{ids 16223}#))))
                                            #{tmp 16217}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 4456}#
                                                #{p 15448}#
                                                '(())))
                                            #{ids 15450}#)))))))))))))))
               (#{cvt 15445}# #{pattern 15441}# 0 '()))))
         (#{build-dispatch-call 13786}#
           (lambda (#{pvars 16357}#
                    #{exp 16358}#
                    #{y 16359}#
                    #{r 16360}#
                    #{mod 16361}#)
             (let ((#{ids 16362}# (map car #{pvars 16357}#)))
               (begin
                 (map cdr #{pvars 16357}#)
                 (let ((#{labels 16364}#
                         (#{gen-labels 4413}# #{ids 16362}#))
                       (#{new-vars 16365}#
                         (map #{gen-var 4457}# #{ids 16362}#)))
                   (#{build-primcall 4389}#
                     #f
                     'apply
                     (list (#{build-simple-lambda 4386}#
                             #f
                             (map syntax->datum #{ids 16362}#)
                             #f
                             #{new-vars 16365}#
                             '()
                             (#{expand 4443}#
                               #{exp 16358}#
                               (#{extend-env 4405}#
                                 #{labels 16364}#
                                 (map (lambda (#{var 16697}# #{level 16698}#)
                                        (cons 'syntax
                                              (cons #{var 16697}#
                                                    #{level 16698}#)))
                                      #{new-vars 16365}#
                                      (map cdr #{pvars 16357}#))
                                 #{r 16360}#)
                               (#{make-binding-wrap 4424}#
                                 #{ids 16362}#
                                 #{labels 16364}#
                                 '(()))
                               #{mod 16361}#))
                           #{y 16359}#)))))))
         (#{gen-clause 13787}#
           (lambda (#{x 15035}#
                    #{keys 15036}#
                    #{clauses 15037}#
                    #{r 15038}#
                    #{pat 15039}#
                    #{fender 15040}#
                    #{exp 15041}#
                    #{mod 15042}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 13785}#
                   #{pat 15039}#
                   #{keys 15036}#))
               (lambda (#{p 15180}# #{pvars 15181}#)
                 (if (not (#{distinct-bound-ids? 4434}#
                            (map car #{pvars 15181}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 15039}#)
                   (if (not (and-map
                              (lambda (#{x 15290}#)
                                (not (let ((#{x 15294}# (car #{x 15290}#)))
                                       (if (if (if (vector? #{x 15294}#)
                                                 (if (= (vector-length
                                                          #{x 15294}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 15294}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 15294}# 1))
                                             #f)
                                         (#{free-id=? 4431}#
                                           #{x 15294}#
                                           '#(syntax-object
                                              ...
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i2338"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-call
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   resolve-identifier
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-primcall
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-call
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-seq
                                                   make-primcall
                                                   make-call
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i471"
                                                  "i469"
                                                  "i467"
                                                  "i465"
                                                  "i463"
                                                  "i461"
                                                  "i459"
                                                  "i457"
                                                  "i455"
                                                  "i453"
                                                  "i451"
                                                  "i449"
                                                  "i447"
                                                  "i445"
                                                  "i443"
                                                  "i441"
                                                  "i439"
                                                  "i437"
                                                  "i435"
                                                  "i433"
                                                  "i431"
                                                  "i429"
                                                  "i427"
                                                  "i425"
                                                  "i423"
                                                  "i421"
                                                  "i419"
                                                  "i417"
                                                  "i415"
                                                  "i413"
                                                  "i411"
                                                  "i409"
                                                  "i407"
                                                  "i405"
                                                  "i403"
                                                  "i401"
                                                  "i400"
                                                  "i398"
                                                  "i395"
                                                  "i394"
                                                  "i393"
                                                  "i391"
                                                  "i390"
                                                  "i388"
                                                  "i386"
                                                  "i384"
                                                  "i382"
                                                  "i380"
                                                  "i378"
                                                  "i376"
                                                  "i374"
                                                  "i371"
                                                  "i369"
                                                  "i368"
                                                  "i366"
                                                  "i364"
                                                  "i362"
                                                  "i360"
                                                  "i359"
                                                  "i358"
                                                  "i357"
                                                  "i355"
                                                  "i354"
                                                  "i351"
                                                  "i349"
                                                  "i347"
                                                  "i345"
                                                  "i343"
                                                  "i341"
                                                  "i340"
                                                  "i339"
                                                  "i337"
                                                  "i335"
                                                  "i334"
                                                  "i331"
                                                  "i330"
                                                  "i328"
                                                  "i326"
                                                  "i324"
                                                  "i322"
                                                  "i320"
                                                  "i318"
                                                  "i316"
                                                  "i314"
                                                  "i312"
                                                  "i309"
                                                  "i307"
                                                  "i305"
                                                  "i303"
                                                  "i301"
                                                  "i299"
                                                  "i297"
                                                  "i295"
                                                  "i293"
                                                  "i291"
                                                  "i289"
                                                  "i287"
                                                  "i285"
                                                  "i283"
                                                  "i281"
                                                  "i279"
                                                  "i277"
                                                  "i275"
                                                  "i273"
                                                  "i271"
                                                  "i269"
                                                  "i267"
                                                  "i265"
                                                  "i263"
                                                  "i262"
                                                  "i259"
                                                  "i257"
                                                  "i256"
                                                  "i255"
                                                  "i254"
                                                  "i253"
                                                  "i251"
                                                  "i249"
                                                  "i247"
                                                  "i244"
                                                  "i242"
                                                  "i240"
                                                  "i238"
                                                  "i236"
                                                  "i234"
                                                  "i232"
                                                  "i230"
                                                  "i228"
                                                  "i226"
                                                  "i224"
                                                  "i222"
                                                  "i220"
                                                  "i218"
                                                  "i216"
                                                  "i214"
                                                  "i212"
                                                  "i210"
                                                  "i208"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i46" "i45" "i44"))
                                               #(ribcage () () ()))
                                              (hygiene guile)))
                                         #f))))
                              #{pvars 15181}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 15039}#)
                     (let ((#{y 15319}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (let ((#{fun-exp 15324}#
                               (let ((#{req 15333}# (list 'tmp))
                                     (#{vars 15335}# (list #{y 15319}#))
                                     (#{exp 15337}#
                                       (let ((#{y 15366}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   3)
                                                 #f
                                                 'tmp
                                                 #{y 15319}#)))
                                         (let ((#{test-exp 15370}#
                                                 (let ((#{tmp 15379}#
                                                         ($sc-dispatch
                                                           #{fender 15040}#
                                                           '#(atom #t))))
                                                   (if #{tmp 15379}#
                                                     (@apply
                                                       (lambda () #{y 15366}#)
                                                       #{tmp 15379}#)
                                                     (let ((#{then-exp 15397}#
                                                             (#{build-dispatch-call 13786}#
                                                               #{pvars 15181}#
                                                               #{fender 15040}#
                                                               #{y 15366}#
                                                               #{r 15038}#
                                                               #{mod 15042}#))
                                                           (#{else-exp 15398}#
                                                             (make-struct/no-tail
                                                               (vector-ref
                                                                 %expanded-vtables
                                                                 1)
                                                               #f
                                                               #f)))
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           10)
                                                         #f
                                                         #{y 15366}#
                                                         #{then-exp 15397}#
                                                         #{else-exp 15398}#)))))
                                               (#{then-exp 15371}#
                                                 (#{build-dispatch-call 13786}#
                                                   #{pvars 15181}#
                                                   #{exp 15041}#
                                                   #{y 15366}#
                                                   #{r 15038}#
                                                   #{mod 15042}#))
                                               (#{else-exp 15372}#
                                                 (#{gen-syntax-case 13788}#
                                                   #{x 15035}#
                                                   #{keys 15036}#
                                                   #{clauses 15037}#
                                                   #{r 15038}#
                                                   #{mod 15042}#)))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 10)
                                             #f
                                             #{test-exp 15370}#
                                             #{then-exp 15371}#
                                             #{else-exp 15372}#)))))
                                 (let ((#{body 15342}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 15)
                                           #f
                                           #{req 15333}#
                                           #f
                                           #f
                                           #f
                                           '()
                                           #{vars 15335}#
                                           #{exp 15337}#
                                           #f)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     '()
                                     #{body 15342}#))))
                             (#{arg-exps 15325}#
                               (list (if (eq? #{p 15180}# 'any)
                                       (let ((#{args 15420}#
                                               (list #{x 15035}#)))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           'list
                                           #{args 15420}#))
                                       (let ((#{args 15429}#
                                               (list #{x 15035}#
                                                     (make-struct/no-tail
                                                       (vector-ref
                                                         %expanded-vtables
                                                         1)
                                                       #f
                                                       #{p 15180}#))))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           '$sc-dispatch
                                           #{args 15429}#))))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 15324}#
                           #{arg-exps 15325}#)))))))))
         (#{gen-syntax-case 13788}#
           (lambda (#{x 14532}#
                    #{keys 14533}#
                    #{clauses 14534}#
                    #{r 14535}#
                    #{mod 14536}#)
             (if (null? #{clauses 14534}#)
               (let ((#{args 14542}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 14532}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'syntax-violation
                   #{args 14542}#))
               (let ((#{tmp 14561}# (car #{clauses 14534}#)))
                 (let ((#{tmp 14562}#
                         ($sc-dispatch #{tmp 14561}# '(any any))))
                   (if #{tmp 14562}#
                     (@apply
                       (lambda (#{pat 14564}# #{exp 14565}#)
                         (if (if (if (symbol? #{pat 14564}#)
                                   #t
                                   (if (if (vector? #{pat 14564}#)
                                         (if (= (vector-length #{pat 14564}#)
                                                4)
                                           (eq? (vector-ref #{pat 14564}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 14564}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 14592}#)
                                   (not (#{free-id=? 4431}#
                                          #{pat 14564}#
                                          #{x 14592}#)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i4007" "i4008"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i3997"
                                               "i3998"
                                               "i3999"
                                               "i4000"
                                               "i4001"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3810" "i3808" "i3806" "i3804"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-call
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               resolve-identifier
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-primcall
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-call
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-seq
                                               make-primcall
                                               make-call
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i471"
                                              "i469"
                                              "i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i400"
                                              "i398"
                                              "i395"
                                              "i394"
                                              "i393"
                                              "i391"
                                              "i390"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i371"
                                              "i369"
                                              "i368"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i359"
                                              "i358"
                                              "i357"
                                              "i355"
                                              "i354"
                                              "i351"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i340"
                                              "i339"
                                              "i337"
                                              "i335"
                                              "i334"
                                              "i331"
                                              "i330"
                                              "i328"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i309"
                                              "i307"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i262"
                                              "i259"
                                              "i257"
                                              "i256"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i244"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44"))
                                           #(ribcage () () ()))
                                          (hygiene guile))
                                       #{keys 14533}#))
                               #f)
                           (if (#{free-id=? 4431}#
                                 '#(syntax-object
                                    pad
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i4007" "i4008"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i3997"
                                         "i3998"
                                         "i3999"
                                         "i4000"
                                         "i4001"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i3810" "i3808" "i3806" "i3804"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-call
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         resolve-identifier
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i471"
                                        "i469"
                                        "i467"
                                        "i465"
                                        "i463"
                                        "i461"
                                        "i459"
                                        "i457"
                                        "i455"
                                        "i453"
                                        "i451"
                                        "i449"
                                        "i447"
                                        "i445"
                                        "i443"
                                        "i441"
                                        "i439"
                                        "i437"
                                        "i435"
                                        "i433"
                                        "i431"
                                        "i429"
                                        "i427"
                                        "i425"
                                        "i423"
                                        "i421"
                                        "i419"
                                        "i417"
                                        "i415"
                                        "i413"
                                        "i411"
                                        "i409"
                                        "i407"
                                        "i405"
                                        "i403"
                                        "i401"
                                        "i400"
                                        "i398"
                                        "i395"
                                        "i394"
                                        "i393"
                                        "i391"
                                        "i390"
                                        "i388"
                                        "i386"
                                        "i384"
                                        "i382"
                                        "i380"
                                        "i378"
                                        "i376"
                                        "i374"
                                        "i371"
                                        "i369"
                                        "i368"
                                        "i366"
                                        "i364"
                                        "i362"
                                        "i360"
                                        "i359"
                                        "i358"
                                        "i357"
                                        "i355"
                                        "i354"
                                        "i351"
                                        "i349"
                                        "i347"
                                        "i345"
                                        "i343"
                                        "i341"
                                        "i340"
                                        "i339"
                                        "i337"
                                        "i335"
                                        "i334"
                                        "i331"
                                        "i330"
                                        "i328"
                                        "i326"
                                        "i324"
                                        "i322"
                                        "i320"
                                        "i318"
                                        "i316"
                                        "i314"
                                        "i312"
                                        "i309"
                                        "i307"
                                        "i305"
                                        "i303"
                                        "i301"
                                        "i299"
                                        "i297"
                                        "i295"
                                        "i293"
                                        "i291"
                                        "i289"
                                        "i287"
                                        "i285"
                                        "i283"
                                        "i281"
                                        "i279"
                                        "i277"
                                        "i275"
                                        "i273"
                                        "i271"
                                        "i269"
                                        "i267"
                                        "i265"
                                        "i263"
                                        "i262"
                                        "i259"
                                        "i257"
                                        "i256"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i251"
                                        "i249"
                                        "i247"
                                        "i244"
                                        "i242"
                                        "i240"
                                        "i238"
                                        "i236"
                                        "i234"
                                        "i232"
                                        "i230"
                                        "i228"
                                        "i226"
                                        "i224"
                                        "i222"
                                        "i220"
                                        "i218"
                                        "i216"
                                        "i214"
                                        "i212"
                                        "i210"
                                        "i208"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i46" "i45" "i44"))
                                     #(ribcage () () ()))
                                    (hygiene guile))
                                 '#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i4007" "i4008"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i3997"
                                         "i3998"
                                         "i3999"
                                         "i4000"
                                         "i4001"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i3810" "i3808" "i3806" "i3804"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-call
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         resolve-identifier
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i471"
                                        "i469"
                                        "i467"
                                        "i465"
                                        "i463"
                                        "i461"
                                        "i459"
                                        "i457"
                                        "i455"
                                        "i453"
                                        "i451"
                                        "i449"
                                        "i447"
                                        "i445"
                                        "i443"
                                        "i441"
                                        "i439"
                                        "i437"
                                        "i435"
                                        "i433"
                                        "i431"
                                        "i429"
                                        "i427"
                                        "i425"
                                        "i423"
                                        "i421"
                                        "i419"
                                        "i417"
                                        "i415"
                                        "i413"
                                        "i411"
                                        "i409"
                                        "i407"
                                        "i405"
                                        "i403"
                                        "i401"
                                        "i400"
                                        "i398"
                                        "i395"
                                        "i394"
                                        "i393"
                                        "i391"
                                        "i390"
                                        "i388"
                                        "i386"
                                        "i384"
                                        "i382"
                                        "i380"
                                        "i378"
                                        "i376"
                                        "i374"
                                        "i371"
                                        "i369"
                                        "i368"
                                        "i366"
                                        "i364"
                                        "i362"
                                        "i360"
                                        "i359"
                                        "i358"
                                        "i357"
                                        "i355"
                                        "i354"
                                        "i351"
                                        "i349"
                                        "i347"
                                        "i345"
                                        "i343"
                                        "i341"
                                        "i340"
                                        "i339"
                                        "i337"
                                        "i335"
                                        "i334"
                                        "i331"
                                        "i330"
                                        "i328"
                                        "i326"
                                        "i324"
                                        "i322"
                                        "i320"
                                        "i318"
                                        "i316"
                                        "i314"
                                        "i312"
                                        "i309"
                                        "i307"
                                        "i305"
                                        "i303"
                                        "i301"
                                        "i299"
                                        "i297"
                                        "i295"
                                        "i293"
                                        "i291"
                                        "i289"
                                        "i287"
                                        "i285"
                                        "i283"
                                        "i281"
                                        "i279"
                                        "i277"
                                        "i275"
                                        "i273"
                                        "i271"
                                        "i269"
                                        "i267"
                                        "i265"
                                        "i263"
                                        "i262"
                                        "i259"
                                        "i257"
                                        "i256"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i251"
                                        "i249"
                                        "i247"
                                        "i244"
                                        "i242"
                                        "i240"
                                        "i238"
                                        "i236"
                                        "i234"
                                        "i232"
                                        "i230"
                                        "i228"
                                        "i226"
                                        "i224"
                                        "i222"
                                        "i220"
                                        "i218"
                                        "i216"
                                        "i214"
                                        "i212"
                                        "i210"
                                        "i208"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i46" "i45" "i44"))
                                     #(ribcage () () ()))
                                    (hygiene guile)))
                             (#{expand 4443}#
                               #{exp 14565}#
                               #{r 14535}#
                               '(())
                               #{mod 14536}#)
                             (let ((#{labels 14678}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 14679}#
                                     (let ((#{id 14717}#
                                             (if (if (vector? #{pat 14564}#)
                                                   (if (= (vector-length
                                                            #{pat 14564}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 14564}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 14564}# 1)
                                               #{pat 14564}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 14717}#)
                                           " ")))))
                               (#{build-call 4377}#
                                 #f
                                 (#{build-simple-lambda 4386}#
                                   #f
                                   (list (syntax->datum #{pat 14564}#))
                                   #f
                                   (list #{var 14679}#)
                                   '()
                                   (#{expand 4443}#
                                     #{exp 14565}#
                                     (#{extend-env 4405}#
                                       #{labels 14678}#
                                       (list (cons 'syntax
                                                   (cons #{var 14679}# 0)))
                                       #{r 14535}#)
                                     (#{make-binding-wrap 4424}#
                                       (list #{pat 14564}#)
                                       #{labels 14678}#
                                       '(()))
                                     #{mod 14536}#))
                                 (list #{x 14532}#))))
                           (#{gen-clause 13787}#
                             #{x 14532}#
                             #{keys 14533}#
                             (cdr #{clauses 14534}#)
                             #{r 14535}#
                             #{pat 14564}#
                             #t
                             #{exp 14565}#
                             #{mod 14536}#)))
                       #{tmp 14562}#)
                     (let ((#{tmp 15027}#
                             ($sc-dispatch #{tmp 14561}# '(any any any))))
                       (if #{tmp 15027}#
                         (@apply
                           (lambda (#{pat 15029}#
                                    #{fender 15030}#
                                    #{exp 15031}#)
                             (#{gen-clause 13787}#
                               #{x 14532}#
                               #{keys 14533}#
                               (cdr #{clauses 14534}#)
                               #{r 14535}#
                               #{pat 15029}#
                               #{fender 15030}#
                               #{exp 15031}#
                               #{mod 14536}#))
                           #{tmp 15027}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 14534}#)))))))))))
        (lambda (#{e 13789}#
                 #{r 13790}#
                 #{w 13791}#
                 #{s 13792}#
                 #{mod 13793}#)
          (let ((#{e 13794}#
                  (let ((#{x 14443}#
                          (begin
                            (if (if (pair? #{e 13789}#) #{s 13792}# #f)
                              (set-source-properties! #{e 13789}# #{s 13792}#))
                            #{e 13789}#)))
                    (if (if (null? (car #{w 13791}#))
                          (null? (cdr #{w 13791}#))
                          #f)
                      #{x 14443}#
                      (if (if (vector? #{x 14443}#)
                            (if (= (vector-length #{x 14443}#) 4)
                              (eq? (vector-ref #{x 14443}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 14475}# (vector-ref #{x 14443}# 1))
                              (#{wrap 14476}#
                                (let ((#{w2 14484}#
                                        (vector-ref #{x 14443}# 2)))
                                  (let ((#{m1 14485}# (car #{w 13791}#))
                                        (#{s1 14486}# (cdr #{w 13791}#)))
                                    (if (null? #{m1 14485}#)
                                      (if (null? #{s1 14486}#)
                                        #{w2 14484}#
                                        (cons (car #{w2 14484}#)
                                              (let ((#{m2 14501}#
                                                      (cdr #{w2 14484}#)))
                                                (if (null? #{m2 14501}#)
                                                  #{s1 14486}#
                                                  (append
                                                    #{s1 14486}#
                                                    #{m2 14501}#)))))
                                      (cons (let ((#{m2 14509}#
                                                    (car #{w2 14484}#)))
                                              (if (null? #{m2 14509}#)
                                                #{m1 14485}#
                                                (append
                                                  #{m1 14485}#
                                                  #{m2 14509}#)))
                                            (let ((#{m2 14517}#
                                                    (cdr #{w2 14484}#)))
                                              (if (null? #{m2 14517}#)
                                                #{s1 14486}#
                                                (append
                                                  #{s1 14486}#
                                                  #{m2 14517}#))))))))
                              (#{module 14477}# (vector-ref #{x 14443}# 3)))
                          (vector
                            'syntax-object
                            #{expression 14475}#
                            #{wrap 14476}#
                            #{module 14477}#))
                        (if (null? #{x 14443}#)
                          #{x 14443}#
                          (vector
                            'syntax-object
                            #{x 14443}#
                            #{w 13791}#
                            #{mod 13793}#)))))))
            (let ((#{tmp 13795}# #{e 13794}#))
              (let ((#{tmp 13796}#
                      ($sc-dispatch
                        #{tmp 13795}#
                        '(_ any each-any . each-any))))
                (if #{tmp 13796}#
                  (@apply
                    (lambda (#{val 13848}# #{key 13849}# #{m 13850}#)
                      (if (and-map
                            (lambda (#{x 13851}#)
                              (if (if (symbol? #{x 13851}#)
                                    #t
                                    (if (if (vector? #{x 13851}#)
                                          (if (= (vector-length #{x 13851}#) 4)
                                            (eq? (vector-ref #{x 13851}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{x 13851}# 1))
                                      #f))
                                (not (if (if (if (vector? #{x 13851}#)
                                               (if (= (vector-length
                                                        #{x 13851}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 13851}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol? (vector-ref #{x 13851}# 1))
                                           #f)
                                       (#{free-id=? 4431}#
                                         #{x 13851}#
                                         '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i2338"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-call
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 resolve-identifier
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i400"
                                                "i398"
                                                "i395"
                                                "i394"
                                                "i393"
                                                "i391"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i371"
                                                "i369"
                                                "i368"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i359"
                                                "i358"
                                                "i357"
                                                "i355"
                                                "i354"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i340"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i334"
                                                "i331"
                                                "i330"
                                                "i328"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i262"
                                                "i259"
                                                "i257"
                                                "i256"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i244"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44"))
                                             #(ribcage () () ()))
                                            (hygiene guile)))
                                       #f))
                                #f))
                            #{key 13849}#)
                        (let ((#{x 13916}#
                                (gensym
                                  (string-append (symbol->string 'tmp) " "))))
                          (#{build-call 4377}#
                            #{s 13792}#
                            (let ((#{req 14058}# (list 'tmp))
                                  (#{vars 14060}# (list #{x 13916}#))
                                  (#{exp 14062}#
                                    (#{gen-syntax-case 13788}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        #{x 13916}#)
                                      #{key 13849}#
                                      #{m 13850}#
                                      #{r 13790}#
                                      #{mod 13793}#)))
                              (let ((#{body 14067}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 15)
                                        #f
                                        #{req 14058}#
                                        #f
                                        #f
                                        #f
                                        '()
                                        #{vars 14060}#
                                        #{exp 14062}#
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 14)
                                  #f
                                  '()
                                  #{body 14067}#)))
                            (list (#{expand 4443}#
                                    #{val 13848}#
                                    #{r 13790}#
                                    '(())
                                    #{mod 13793}#))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          #{e 13794}#)))
                    #{tmp 13796}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp 13795}#))))))))
    (set! macroexpand
      (lambda*
        (#{x 16799}#
          #:optional
          (#{m 16800}# 'e)
          (#{esew 16801}# '(eval)))
        (#{expand-top-sequence 4439}#
          (list #{x 16799}#)
          '()
          '((top))
          #f
          #{m 16800}#
          #{esew 16801}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 16804}#)
        (if (if (vector? #{x 16804}#)
              (if (= (vector-length #{x 16804}#) 4)
                (eq? (vector-ref #{x 16804}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 16804}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 16829}# #{datum 16830}#)
        (let ((#{wrap 16835}# (vector-ref #{id 16829}# 2))
              (#{module 16836}# (vector-ref #{id 16829}# 3)))
          (vector
            'syntax-object
            #{datum 16830}#
            #{wrap 16835}#
            #{module 16836}#))))
    (set! syntax->datum
      (lambda (#{x 16843}#)
        (#{strip 4456}# #{x 16843}# '(()))))
    (set! syntax-source
      (lambda (#{x 16846}#)
        (#{source-annotation 4404}# #{x 16846}#)))
    (set! generate-temporaries
      (lambda (#{ls 17048}#)
        (begin
          (if (not (list? #{ls 17048}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 17048}#))
          (let ((#{mod 17056}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 17057}#)
                   (let ((#{x 17061}# (gensym)))
                     (if (if (vector? #{x 17061}#)
                           (if (= (vector-length #{x 17061}#) 4)
                             (eq? (vector-ref #{x 17061}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 17076}# (vector-ref #{x 17061}# 1))
                             (#{wrap 17077}#
                               (let ((#{w2 17085}# (vector-ref #{x 17061}# 2)))
                                 (cons (let ((#{m2 17092}# (car #{w2 17085}#)))
                                         (if (null? #{m2 17092}#)
                                           '(top)
                                           (append '(top) #{m2 17092}#)))
                                       (let ((#{m2 17099}# (cdr #{w2 17085}#)))
                                         (if (null? #{m2 17099}#)
                                           '()
                                           (append '() #{m2 17099}#))))))
                             (#{module 17078}# (vector-ref #{x 17061}# 3)))
                         (vector
                           'syntax-object
                           #{expression 17076}#
                           #{wrap 17077}#
                           #{module 17078}#))
                       (if (null? #{x 17061}#)
                         #{x 17061}#
                         (vector
                           'syntax-object
                           #{x 17061}#
                           '((top))
                           #{mod 17056}#)))))
                 #{ls 17048}#)))))
    (set! free-identifier=?
      (lambda (#{x 17108}# #{y 17109}#)
        (begin
          (if (not (if (if (vector? #{x 17108}#)
                         (if (= (vector-length #{x 17108}#) 4)
                           (eq? (vector-ref #{x 17108}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 17108}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 17108}#))
          (if (not (if (if (vector? #{y 17109}#)
                         (if (= (vector-length #{y 17109}#) 4)
                           (eq? (vector-ref #{y 17109}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 17109}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 17109}#))
          (#{free-id=? 4431}# #{x 17108}# #{y 17109}#))))
    (set! bound-identifier=?
      (lambda (#{x 17184}# #{y 17185}#)
        (begin
          (if (not (if (if (vector? #{x 17184}#)
                         (if (= (vector-length #{x 17184}#) 4)
                           (eq? (vector-ref #{x 17184}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 17184}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 17184}#))
          (if (not (if (if (vector? #{y 17185}#)
                         (if (= (vector-length #{y 17185}#) 4)
                           (eq? (vector-ref #{y 17185}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 17185}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 17185}#))
          (#{bound-id=? 4432}# #{x 17184}# #{y 17185}#))))
    (set! syntax-violation
      (lambda*
        (#{who 17351}#
          #{message 17352}#
          #{form 17353}#
          #:optional
          (#{subform 17354}# #f))
        (begin
          (if (not (if (not #{who 17351}#)
                     (not #{who 17351}#)
                     (let ((#{t 17372}# (string? #{who 17351}#)))
                       (if #{t 17372}#
                         #{t 17372}#
                         (symbol? #{who 17351}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 17351}#))
          (if (not (string? #{message 17352}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 17352}#))
          (throw 'syntax-error
                 #{who 17351}#
                 #{message 17352}#
                 (#{source-annotation 4404}#
                   (if #{form 17353}#
                     #{form 17353}#
                     #{subform 17354}#))
                 (#{strip 4456}# #{form 17353}# '(()))
                 (if #{subform 17354}#
                   (#{strip 4456}# #{subform 17354}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 17623}#
         (lambda (#{e 18511}#
                  #{p 18512}#
                  #{w 18513}#
                  #{mod 18514}#)
           (if (pair? #{e 18511}#)
             (let ((#{first 18515}#
                     (#{match 17629}#
                       (car #{e 18511}#)
                       #{p 18512}#
                       #{w 18513}#
                       '()
                       #{mod 18514}#)))
               (if #{first 18515}#
                 (let ((#{rest 18518}#
                         (#{match-each 17623}#
                           (cdr #{e 18511}#)
                           #{p 18512}#
                           #{w 18513}#
                           #{mod 18514}#)))
                   (if #{rest 18518}#
                     (cons #{first 18515}# #{rest 18518}#)
                     #f))
                 #f))
             (if (null? #{e 18511}#)
               '()
               (if (if (vector? #{e 18511}#)
                     (if (= (vector-length #{e 18511}#) 4)
                       (eq? (vector-ref #{e 18511}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 17623}#
                   (vector-ref #{e 18511}# 1)
                   #{p 18512}#
                   (let ((#{w2 18540}# (vector-ref #{e 18511}# 2)))
                     (let ((#{m1 18541}# (car #{w 18513}#))
                           (#{s1 18542}# (cdr #{w 18513}#)))
                       (if (null? #{m1 18541}#)
                         (if (null? #{s1 18542}#)
                           #{w2 18540}#
                           (cons (car #{w2 18540}#)
                                 (let ((#{m2 18553}# (cdr #{w2 18540}#)))
                                   (if (null? #{m2 18553}#)
                                     #{s1 18542}#
                                     (append #{s1 18542}# #{m2 18553}#)))))
                         (cons (let ((#{m2 18561}# (car #{w2 18540}#)))
                                 (if (null? #{m2 18561}#)
                                   #{m1 18541}#
                                   (append #{m1 18541}# #{m2 18561}#)))
                               (let ((#{m2 18569}# (cdr #{w2 18540}#)))
                                 (if (null? #{m2 18569}#)
                                   #{s1 18542}#
                                   (append #{s1 18542}# #{m2 18569}#)))))))
                   (vector-ref #{e 18511}# 3))
                 #f)))))
       (#{match-each-any 17625}#
         (lambda (#{e 18578}# #{w 18579}# #{mod 18580}#)
           (if (pair? #{e 18578}#)
             (let ((#{l 18581}#
                     (#{match-each-any 17625}#
                       (cdr #{e 18578}#)
                       #{w 18579}#
                       #{mod 18580}#)))
               (if #{l 18581}#
                 (cons (let ((#{x 18586}# (car #{e 18578}#)))
                         (if (if (null? (car #{w 18579}#))
                               (null? (cdr #{w 18579}#))
                               #f)
                           #{x 18586}#
                           (if (if (vector? #{x 18586}#)
                                 (if (= (vector-length #{x 18586}#) 4)
                                   (eq? (vector-ref #{x 18586}# 0)
                                        'syntax-object)
                                   #f)
                                 #f)
                             (let ((#{expression 18604}#
                                     (vector-ref #{x 18586}# 1))
                                   (#{wrap 18605}#
                                     (let ((#{w2 18613}#
                                             (vector-ref #{x 18586}# 2)))
                                       (let ((#{m1 18614}# (car #{w 18579}#))
                                             (#{s1 18615}# (cdr #{w 18579}#)))
                                         (if (null? #{m1 18614}#)
                                           (if (null? #{s1 18615}#)
                                             #{w2 18613}#
                                             (cons (car #{w2 18613}#)
                                                   (let ((#{m2 18630}#
                                                           (cdr #{w2 18613}#)))
                                                     (if (null? #{m2 18630}#)
                                                       #{s1 18615}#
                                                       (append
                                                         #{s1 18615}#
                                                         #{m2 18630}#)))))
                                           (cons (let ((#{m2 18638}#
                                                         (car #{w2 18613}#)))
                                                   (if (null? #{m2 18638}#)
                                                     #{m1 18614}#
                                                     (append
                                                       #{m1 18614}#
                                                       #{m2 18638}#)))
                                                 (let ((#{m2 18646}#
                                                         (cdr #{w2 18613}#)))
                                                   (if (null? #{m2 18646}#)
                                                     #{s1 18615}#
                                                     (append
                                                       #{s1 18615}#
                                                       #{m2 18646}#))))))))
                                   (#{module 18606}#
                                     (vector-ref #{x 18586}# 3)))
                               (vector
                                 'syntax-object
                                 #{expression 18604}#
                                 #{wrap 18605}#
                                 #{module 18606}#))
                             (if (null? #{x 18586}#)
                               #{x 18586}#
                               (vector
                                 'syntax-object
                                 #{x 18586}#
                                 #{w 18579}#
                                 #{mod 18580}#)))))
                       #{l 18581}#)
                 #f))
             (if (null? #{e 18578}#)
               '()
               (if (if (vector? #{e 18578}#)
                     (if (= (vector-length #{e 18578}#) 4)
                       (eq? (vector-ref #{e 18578}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 17625}#
                   (vector-ref #{e 18578}# 1)
                   (let ((#{w2 18679}# (vector-ref #{e 18578}# 2)))
                     (let ((#{m1 18680}# (car #{w 18579}#))
                           (#{s1 18681}# (cdr #{w 18579}#)))
                       (if (null? #{m1 18680}#)
                         (if (null? #{s1 18681}#)
                           #{w2 18679}#
                           (cons (car #{w2 18679}#)
                                 (let ((#{m2 18692}# (cdr #{w2 18679}#)))
                                   (if (null? #{m2 18692}#)
                                     #{s1 18681}#
                                     (append #{s1 18681}# #{m2 18692}#)))))
                         (cons (let ((#{m2 18700}# (car #{w2 18679}#)))
                                 (if (null? #{m2 18700}#)
                                   #{m1 18680}#
                                   (append #{m1 18680}# #{m2 18700}#)))
                               (let ((#{m2 18708}# (cdr #{w2 18679}#)))
                                 (if (null? #{m2 18708}#)
                                   #{s1 18681}#
                                   (append #{s1 18681}# #{m2 18708}#)))))))
                   #{mod 18580}#)
                 #f)))))
       (#{match-empty 17626}#
         (lambda (#{p 18713}# #{r 18714}#)
           (if (null? #{p 18713}#)
             #{r 18714}#
             (if (eq? #{p 18713}# '_)
               #{r 18714}#
               (if (eq? #{p 18713}# 'any)
                 (cons '() #{r 18714}#)
                 (if (pair? #{p 18713}#)
                   (#{match-empty 17626}#
                     (car #{p 18713}#)
                     (#{match-empty 17626}#
                       (cdr #{p 18713}#)
                       #{r 18714}#))
                   (if (eq? #{p 18713}# 'each-any)
                     (cons '() #{r 18714}#)
                     (let ((#{atom-key 18715}# (vector-ref #{p 18713}# 0)))
                       (if (eqv? #{atom-key 18715}# 'each)
                         (#{match-empty 17626}#
                           (vector-ref #{p 18713}# 1)
                           #{r 18714}#)
                         (if (eqv? #{atom-key 18715}# 'each+)
                           (#{match-empty 17626}#
                             (vector-ref #{p 18713}# 1)
                             (#{match-empty 17626}#
                               (reverse (vector-ref #{p 18713}# 2))
                               (#{match-empty 17626}#
                                 (vector-ref #{p 18713}# 3)
                                 #{r 18714}#)))
                           (if (if (eqv? #{atom-key 18715}# 'free-id)
                                 #t
                                 (eqv? #{atom-key 18715}# 'atom))
                             #{r 18714}#
                             (if (eqv? #{atom-key 18715}# 'vector)
                               (#{match-empty 17626}#
                                 (vector-ref #{p 18713}# 1)
                                 #{r 18714}#)))))))))))))
       (#{combine 17627}#
         (lambda (#{r* 18734}# #{r 18735}#)
           (if (null? (car #{r* 18734}#))
             #{r 18735}#
             (cons (map car #{r* 18734}#)
                   (#{combine 17627}#
                     (map cdr #{r* 18734}#)
                     #{r 18735}#)))))
       (#{match* 17628}#
         (lambda (#{e 17658}#
                  #{p 17659}#
                  #{w 17660}#
                  #{r 17661}#
                  #{mod 17662}#)
           (if (null? #{p 17659}#)
             (if (null? #{e 17658}#) #{r 17661}# #f)
             (if (pair? #{p 17659}#)
               (if (pair? #{e 17658}#)
                 (#{match 17629}#
                   (car #{e 17658}#)
                   (car #{p 17659}#)
                   #{w 17660}#
                   (#{match 17629}#
                     (cdr #{e 17658}#)
                     (cdr #{p 17659}#)
                     #{w 17660}#
                     #{r 17661}#
                     #{mod 17662}#)
                   #{mod 17662}#)
                 #f)
               (if (eq? #{p 17659}# 'each-any)
                 (let ((#{l 17667}#
                         (#{match-each-any 17625}#
                           #{e 17658}#
                           #{w 17660}#
                           #{mod 17662}#)))
                   (if #{l 17667}#
                     (cons #{l 17667}# #{r 17661}#)
                     #f))
                 (let ((#{atom-key 17672}# (vector-ref #{p 17659}# 0)))
                   (if (eqv? #{atom-key 17672}# 'each)
                     (if (null? #{e 17658}#)
                       (#{match-empty 17626}#
                         (vector-ref #{p 17659}# 1)
                         #{r 17661}#)
                       (let ((#{l 17679}#
                               (#{match-each 17623}#
                                 #{e 17658}#
                                 (vector-ref #{p 17659}# 1)
                                 #{w 17660}#
                                 #{mod 17662}#)))
                         (if #{l 17679}#
                           (letrec*
                             ((#{collect 17682}#
                                (lambda (#{l 17743}#)
                                  (if (null? (car #{l 17743}#))
                                    #{r 17661}#
                                    (cons (map car #{l 17743}#)
                                          (#{collect 17682}#
                                            (map cdr #{l 17743}#)))))))
                             (#{collect 17682}# #{l 17679}#))
                           #f)))
                     (if (eqv? #{atom-key 17672}# 'each+)
                       (call-with-values
                         (lambda ()
                           (let ((#{x-pat 17752}# (vector-ref #{p 17659}# 1))
                                 (#{y-pat 17753}# (vector-ref #{p 17659}# 2))
                                 (#{z-pat 17754}# (vector-ref #{p 17659}# 3)))
                             (letrec*
                               ((#{f 17758}#
                                  (lambda (#{e 17760}# #{w 17761}#)
                                    (if (pair? #{e 17760}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{f 17758}#
                                            (cdr #{e 17760}#)
                                            #{w 17761}#))
                                        (lambda (#{xr* 17762}#
                                                 #{y-pat 17763}#
                                                 #{r 17764}#)
                                          (if #{r 17764}#
                                            (if (null? #{y-pat 17763}#)
                                              (let ((#{xr 17765}#
                                                      (#{match 17629}#
                                                        (car #{e 17760}#)
                                                        #{x-pat 17752}#
                                                        #{w 17761}#
                                                        '()
                                                        #{mod 17662}#)))
                                                (if #{xr 17765}#
                                                  (values
                                                    (cons #{xr 17765}#
                                                          #{xr* 17762}#)
                                                    #{y-pat 17763}#
                                                    #{r 17764}#)
                                                  (values #f #f #f)))
                                              (values
                                                '()
                                                (cdr #{y-pat 17763}#)
                                                (#{match 17629}#
                                                  (car #{e 17760}#)
                                                  (car #{y-pat 17763}#)
                                                  #{w 17761}#
                                                  #{r 17764}#
                                                  #{mod 17662}#)))
                                            (values #f #f #f))))
                                      (if (if (vector? #{e 17760}#)
                                            (if (= (vector-length #{e 17760}#)
                                                   4)
                                              (eq? (vector-ref #{e 17760}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (#{f 17758}#
                                          (vector-ref #{e 17760}# 1)
                                          (let ((#{m1 17793}#
                                                  (car #{w 17761}#))
                                                (#{s1 17794}#
                                                  (cdr #{w 17761}#)))
                                            (if (null? #{m1 17793}#)
                                              (if (null? #{s1 17794}#)
                                                #{e 17760}#
                                                (cons (car #{e 17760}#)
                                                      (let ((#{m2 17806}#
                                                              (cdr #{e 17760}#)))
                                                        (if (null? #{m2 17806}#)
                                                          #{s1 17794}#
                                                          (append
                                                            #{s1 17794}#
                                                            #{m2 17806}#)))))
                                              (cons (let ((#{m2 17816}#
                                                            (car #{e 17760}#)))
                                                      (if (null? #{m2 17816}#)
                                                        #{m1 17793}#
                                                        (append
                                                          #{m1 17793}#
                                                          #{m2 17816}#)))
                                                    (let ((#{m2 17826}#
                                                            (cdr #{e 17760}#)))
                                                      (if (null? #{m2 17826}#)
                                                        #{s1 17794}#
                                                        (append
                                                          #{s1 17794}#
                                                          #{m2 17826}#)))))))
                                        (values
                                          '()
                                          #{y-pat 17753}#
                                          (#{match 17629}#
                                            #{e 17760}#
                                            #{z-pat 17754}#
                                            #{w 17761}#
                                            #{r 17661}#
                                            #{mod 17662}#)))))))
                               (#{f 17758}# #{e 17658}# #{w 17660}#))))
                         (lambda (#{xr* 17836}# #{y-pat 17837}# #{r 17838}#)
                           (if #{r 17838}#
                             (if (null? #{y-pat 17837}#)
                               (if (null? #{xr* 17836}#)
                                 (#{match-empty 17626}#
                                   (vector-ref #{p 17659}# 1)
                                   #{r 17838}#)
                                 (#{combine 17627}# #{xr* 17836}# #{r 17838}#))
                               #f)
                             #f)))
                       (if (eqv? #{atom-key 17672}# 'free-id)
                         (if (if (symbol? #{e 17658}#)
                               #t
                               (if (if (vector? #{e 17658}#)
                                     (if (= (vector-length #{e 17658}#) 4)
                                       (eq? (vector-ref #{e 17658}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 17658}# 1))
                                 #f))
                           (if (#{free-id=? 4431}#
                                 (if (if (null? (car #{w 17660}#))
                                       (null? (cdr #{w 17660}#))
                                       #f)
                                   #{e 17658}#
                                   (if (if (vector? #{e 17658}#)
                                         (if (= (vector-length #{e 17658}#) 4)
                                           (eq? (vector-ref #{e 17658}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 18269}#
                                             (vector-ref #{e 17658}# 1))
                                           (#{wrap 18270}#
                                             (let ((#{w2 18280}#
                                                     (vector-ref
                                                       #{e 17658}#
                                                       2)))
                                               (let ((#{m1 18281}#
                                                       (car #{w 17660}#))
                                                     (#{s1 18282}#
                                                       (cdr #{w 17660}#)))
                                                 (if (null? #{m1 18281}#)
                                                   (if (null? #{s1 18282}#)
                                                     #{w2 18280}#
                                                     (cons (car #{w2 18280}#)
                                                           (let ((#{m2 18299}#
                                                                   (cdr #{w2 18280}#)))
                                                             (if (null? #{m2 18299}#)
                                                               #{s1 18282}#
                                                               (append
                                                                 #{s1 18282}#
                                                                 #{m2 18299}#)))))
                                                   (cons (let ((#{m2 18307}#
                                                                 (car #{w2 18280}#)))
                                                           (if (null? #{m2 18307}#)
                                                             #{m1 18281}#
                                                             (append
                                                               #{m1 18281}#
                                                               #{m2 18307}#)))
                                                         (let ((#{m2 18315}#
                                                                 (cdr #{w2 18280}#)))
                                                           (if (null? #{m2 18315}#)
                                                             #{s1 18282}#
                                                             (append
                                                               #{s1 18282}#
                                                               #{m2 18315}#))))))))
                                           (#{module 18271}#
                                             (vector-ref #{e 17658}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 18269}#
                                         #{wrap 18270}#
                                         #{module 18271}#))
                                     (if (null? #{e 17658}#)
                                       #{e 17658}#
                                       (vector
                                         'syntax-object
                                         #{e 17658}#
                                         #{w 17660}#
                                         #{mod 17662}#))))
                                 (vector-ref #{p 17659}# 1))
                             #{r 17661}#
                             #f)
                           #f)
                         (if (eqv? #{atom-key 17672}# 'atom)
                           (if (equal?
                                 (vector-ref #{p 17659}# 1)
                                 (#{strip 4456}# #{e 17658}# #{w 17660}#))
                             #{r 17661}#
                             #f)
                           (if (eqv? #{atom-key 17672}# 'vector)
                             (if (vector? #{e 17658}#)
                               (#{match 17629}#
                                 (vector->list #{e 17658}#)
                                 (vector-ref #{p 17659}# 1)
                                 #{w 17660}#
                                 #{r 17661}#
                                 #{mod 17662}#)
                               #f))))))))))))
       (#{match 17629}#
         (lambda (#{e 18348}#
                  #{p 18349}#
                  #{w 18350}#
                  #{r 18351}#
                  #{mod 18352}#)
           (if (not #{r 18351}#)
             #f
             (if (eq? #{p 18349}# '_)
               #{r 18351}#
               (if (eq? #{p 18349}# 'any)
                 (cons (if (if (null? (car #{w 18350}#))
                             (null? (cdr #{w 18350}#))
                             #f)
                         #{e 18348}#
                         (if (if (vector? #{e 18348}#)
                               (if (= (vector-length #{e 18348}#) 4)
                                 (eq? (vector-ref #{e 18348}# 0)
                                      'syntax-object)
                                 #f)
                               #f)
                           (let ((#{expression 18382}#
                                   (vector-ref #{e 18348}# 1))
                                 (#{wrap 18383}#
                                   (let ((#{w2 18393}#
                                           (vector-ref #{e 18348}# 2)))
                                     (let ((#{m1 18394}# (car #{w 18350}#))
                                           (#{s1 18395}# (cdr #{w 18350}#)))
                                       (if (null? #{m1 18394}#)
                                         (if (null? #{s1 18395}#)
                                           #{w2 18393}#
                                           (cons (car #{w2 18393}#)
                                                 (let ((#{m2 18412}#
                                                         (cdr #{w2 18393}#)))
                                                   (if (null? #{m2 18412}#)
                                                     #{s1 18395}#
                                                     (append
                                                       #{s1 18395}#
                                                       #{m2 18412}#)))))
                                         (cons (let ((#{m2 18420}#
                                                       (car #{w2 18393}#)))
                                                 (if (null? #{m2 18420}#)
                                                   #{m1 18394}#
                                                   (append
                                                     #{m1 18394}#
                                                     #{m2 18420}#)))
                                               (let ((#{m2 18428}#
                                                       (cdr #{w2 18393}#)))
                                                 (if (null? #{m2 18428}#)
                                                   #{s1 18395}#
                                                   (append
                                                     #{s1 18395}#
                                                     #{m2 18428}#))))))))
                                 (#{module 18384}# (vector-ref #{e 18348}# 3)))
                             (vector
                               'syntax-object
                               #{expression 18382}#
                               #{wrap 18383}#
                               #{module 18384}#))
                           (if (null? #{e 18348}#)
                             #{e 18348}#
                             (vector
                               'syntax-object
                               #{e 18348}#
                               #{w 18350}#
                               #{mod 18352}#))))
                       #{r 18351}#)
                 (if (if (vector? #{e 18348}#)
                       (if (= (vector-length #{e 18348}#) 4)
                         (eq? (vector-ref #{e 18348}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 17628}#
                     (vector-ref #{e 18348}# 1)
                     #{p 18349}#
                     (let ((#{w2 18471}# (vector-ref #{e 18348}# 2)))
                       (let ((#{m1 18472}# (car #{w 18350}#))
                             (#{s1 18473}# (cdr #{w 18350}#)))
                         (if (null? #{m1 18472}#)
                           (if (null? #{s1 18473}#)
                             #{w2 18471}#
                             (cons (car #{w2 18471}#)
                                   (let ((#{m2 18484}# (cdr #{w2 18471}#)))
                                     (if (null? #{m2 18484}#)
                                       #{s1 18473}#
                                       (append #{s1 18473}# #{m2 18484}#)))))
                           (cons (let ((#{m2 18492}# (car #{w2 18471}#)))
                                   (if (null? #{m2 18492}#)
                                     #{m1 18472}#
                                     (append #{m1 18472}# #{m2 18492}#)))
                                 (let ((#{m2 18500}# (cdr #{w2 18471}#)))
                                   (if (null? #{m2 18500}#)
                                     #{s1 18473}#
                                     (append #{s1 18473}# #{m2 18500}#)))))))
                     #{r 18351}#
                     (vector-ref #{e 18348}# 3))
                   (#{match* 17628}#
                     #{e 18348}#
                     #{p 18349}#
                     #{w 18350}#
                     #{r 18351}#
                     #{mod 18352}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 17630}# #{p 17631}#)
          (if (eq? #{p 17631}# 'any)
            (list #{e 17630}#)
            (if (eq? #{p 17631}# '_)
              '()
              (if (if (vector? #{e 17630}#)
                    (if (= (vector-length #{e 17630}#) 4)
                      (eq? (vector-ref #{e 17630}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 17628}#
                  (vector-ref #{e 17630}# 1)
                  #{p 17631}#
                  (vector-ref #{e 17630}# 2)
                  '()
                  (vector-ref #{e 17630}# 3))
                (#{match* 17628}#
                  #{e 17630}#
                  #{p 17631}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 36772}#)
      (let ((#{tmp 36774}#
              ($sc-dispatch #{x 36772}# '(_ () any . each-any))))
        (if #{tmp 36774}#
          (@apply
            (lambda (#{e1 36778}# #{e2 36779}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i36745" "i36746"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i36742"))
                        #(ribcage
                          (with-syntax)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              with-syntax
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    (cons '() (cons #{e1 36778}# #{e2 36779}#))))
            #{tmp 36774}#)
          (let ((#{tmp 36780}#
                  ($sc-dispatch
                    #{x 36772}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 36780}#
              (@apply
                (lambda (#{out 36784}#
                         #{in 36785}#
                         #{e1 36786}#
                         #{e2 36787}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i36751" "i36752" "i36753" "i36754"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i36742"))
                            #(ribcage
                              (with-syntax)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  with-syntax
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        #{in 36785}#
                        '()
                        (list #{out 36784}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i36751"
                                            "i36752"
                                            "i36753"
                                            "i36754"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i36742"))
                                        #(ribcage
                                          (with-syntax)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              with-syntax
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 36786}# #{e2 36787}#))))))
                #{tmp 36780}#)
              (let ((#{tmp 36788}#
                      ($sc-dispatch
                        #{x 36772}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 36788}#
                  (@apply
                    (lambda (#{out 36792}#
                             #{in 36793}#
                             #{e1 36794}#
                             #{e2 36795}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i36761" "i36762" "i36763" "i36764"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i36742"))
                                #(ribcage
                                  (with-syntax)
                                  ((top))
                                  (((hygiene guile)
                                    .
                                    #(syntax-object
                                      with-syntax
                                      ((top))
                                      (hygiene guile))))))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i36761" "i36762" "i36763" "i36764"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i36742"))
                                      #(ribcage
                                        (with-syntax)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            with-syntax
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                  #{in 36793}#)
                            '()
                            (list #{out 36792}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i36761"
                                                "i36762"
                                                "i36763"
                                                "i36764"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i36742"))
                                            #(ribcage
                                              (with-syntax)
                                              ((top))
                                              (((hygiene guile)
                                                .
                                                #(syntax-object
                                                  with-syntax
                                                  ((top))
                                                  (hygiene guile))))))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 36794}#
                                                    #{e2 36795}#))))))
                    #{tmp 36788}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 36772}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 36850}#)
      (let ((#{tmp 36852}#
              ($sc-dispatch
                #{x 36850}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 36852}#
          (@apply
            (lambda (#{k 36856}#
                     #{keyword 36857}#
                     #{pattern 36858}#
                     #{template 36859}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i36813" "i36814" "i36815" "i36816"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i36810"))
                        #(ribcage
                          (syntax-rules)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              syntax-rules
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i36813" "i36814" "i36815" "i36816"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i36810"))
                         #(ribcage
                           (syntax-rules)
                           ((top))
                           (((hygiene guile)
                             .
                             #(syntax-object
                               syntax-rules
                               ((top))
                               (hygiene guile))))))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i36813" "i36814" "i36815" "i36816"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i36810"))
                           #(ribcage
                             (syntax-rules)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 syntax-rules
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i36813" "i36814" "i36815" "i36816"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i36810"))
                           #(ribcage
                             (syntax-rules)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 syntax-rules
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i36813" "i36814" "i36815" "i36816"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i36810"))
                                #(ribcage
                                  (syntax-rules)
                                  ((top))
                                  (((hygiene guile)
                                    .
                                    #(syntax-object
                                      syntax-rules
                                      ((top))
                                      (hygiene guile))))))
                               (hygiene guile))
                            #{pattern 36858}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i36813" "i36814" "i36815" "i36816"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i36810"))
                              #(ribcage
                                (syntax-rules)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    syntax-rules
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i36813" "i36814" "i36815" "i36816"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i36810"))
                                    #(ribcage
                                      (syntax-rules)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          syntax-rules
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile))
                                (cons #{k 36856}#
                                      (map (lambda (#{tmp 36824 36860}#
                                                    #{tmp 36823 36861}#)
                                             (list (cons '#(syntax-object
                                                            _
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i36813"
                                                                 "i36814"
                                                                 "i36815"
                                                                 "i36816"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i36810"))
                                                             #(ribcage
                                                               (syntax-rules)
                                                               ((top))
                                                               (((hygiene
                                                                   guile)
                                                                 .
                                                                 #(syntax-object
                                                                   syntax-rules
                                                                   ((top))
                                                                   (hygiene
                                                                     guile))))))
                                                            (hygiene guile))
                                                         #{tmp 36823 36861}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i36813"
                                                                 "i36814"
                                                                 "i36815"
                                                                 "i36816"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i36810"))
                                                             #(ribcage
                                                               (syntax-rules)
                                                               ((top))
                                                               (((hygiene
                                                                   guile)
                                                                 .
                                                                 #(syntax-object
                                                                   syntax-rules
                                                                   ((top))
                                                                   (hygiene
                                                                     guile))))))
                                                            (hygiene guile))
                                                         #{tmp 36824 36860}#)))
                                           #{template 36859}#
                                           #{pattern 36858}#))))))
            #{tmp 36852}#)
          (let ((#{tmp 36862}#
                  ($sc-dispatch
                    #{x 36850}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 36862}#
                  (@apply
                    (lambda (#{k 36866}#
                             #{docstring 36867}#
                             #{keyword 36868}#
                             #{pattern 36869}#
                             #{template 36870}#)
                      (string? (syntax->datum #{docstring 36867}#)))
                    #{tmp 36862}#)
                  #f)
              (@apply
                (lambda (#{k 36871}#
                         #{docstring 36872}#
                         #{keyword 36873}#
                         #{pattern 36874}#
                         #{template 36875}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i36836" "i36837" "i36838" "i36839" "i36840"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i36810"))
                            #(ribcage
                              (syntax-rules)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  syntax-rules
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i36836" "i36837" "i36838" "i36839" "i36840"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i36810"))
                             #(ribcage
                               (syntax-rules)
                               ((top))
                               (((hygiene guile)
                                 .
                                 #(syntax-object
                                   syntax-rules
                                   ((top))
                                   (hygiene guile))))))
                            (hygiene guile)))
                        #{docstring 36872}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i36836"
                                   "i36837"
                                   "i36838"
                                   "i36839"
                                   "i36840"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i36810"))
                               #(ribcage
                                 (syntax-rules)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     syntax-rules
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i36836"
                                   "i36837"
                                   "i36838"
                                   "i36839"
                                   "i36840"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i36810"))
                               #(ribcage
                                 (syntax-rules)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     syntax-rules
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i36836"
                                        "i36837"
                                        "i36838"
                                        "i36839"
                                        "i36840"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i36810"))
                                    #(ribcage
                                      (syntax-rules)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          syntax-rules
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile))
                                #{pattern 36874}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i36836"
                                      "i36837"
                                      "i36838"
                                      "i36839"
                                      "i36840"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i36810"))
                                  #(ribcage
                                    (syntax-rules)
                                    ((top))
                                    (((hygiene guile)
                                      .
                                      #(syntax-object
                                        syntax-rules
                                        ((top))
                                        (hygiene guile))))))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i36836"
                                            "i36837"
                                            "i36838"
                                            "i36839"
                                            "i36840"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i36810"))
                                        #(ribcage
                                          (syntax-rules)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              syntax-rules
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    (cons #{k 36871}#
                                          (map (lambda (#{tmp 36849 36876}#
                                                        #{tmp 36848 36877}#)
                                                 (list (cons '#(syntax-object
                                                                _
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i36836"
                                                                     "i36837"
                                                                     "i36838"
                                                                     "i36839"
                                                                     "i36840"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i36810"))
                                                                 #(ribcage
                                                                   (syntax-rules)
                                                                   ((top))
                                                                   (((hygiene
                                                                       guile)
                                                                     .
                                                                     #(syntax-object
                                                                       syntax-rules
                                                                       ((top))
                                                                       (hygiene
                                                                         guile))))))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 36848 36877}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i36836"
                                                                     "i36837"
                                                                     "i36838"
                                                                     "i36839"
                                                                     "i36840"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i36810"))
                                                                 #(ribcage
                                                                   (syntax-rules)
                                                                   ((top))
                                                                   (((hygiene
                                                                       guile)
                                                                     .
                                                                     #(syntax-object
                                                                       syntax-rules
                                                                       ((top))
                                                                       (hygiene
                                                                         guile))))))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 36849 36876}#)))
                                               #{template 36875}#
                                               #{pattern 36874}#))))))
                #{tmp 36862}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 36850}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 36915}#)
      (let ((#{tmp 36917}#
              ($sc-dispatch #{x 36915}# '(_ (any . any) any))))
        (if #{tmp 36917}#
          (@apply
            (lambda (#{name 36921}#
                     #{pattern 36922}#
                     #{template 36923}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i36892" "i36893" "i36894"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i36889"))
                        #(ribcage
                          (define-syntax-rule)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              define-syntax-rule
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    #{name 36921}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i36892" "i36893" "i36894"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i36889"))
                              #(ribcage
                                (define-syntax-rule)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    define-syntax-rule
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i36892" "i36893" "i36894"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i36889"))
                                          #(ribcage
                                            (define-syntax-rule)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                define-syntax-rule
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      #{pattern 36922}#)
                                #{template 36923}#))))
            #{tmp 36917}#)
          (let ((#{tmp 36924}#
                  ($sc-dispatch
                    #{x 36915}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 36924}#
                  (@apply
                    (lambda (#{name 36928}#
                             #{pattern 36929}#
                             #{docstring 36930}#
                             #{template 36931}#)
                      (string? (syntax->datum #{docstring 36930}#)))
                    #{tmp 36924}#)
                  #f)
              (@apply
                (lambda (#{name 36932}#
                         #{pattern 36933}#
                         #{docstring 36934}#
                         #{template 36935}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i36907" "i36908" "i36909" "i36910"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i36889"))
                            #(ribcage
                              (define-syntax-rule)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  define-syntax-rule
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        #{name 36932}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i36907" "i36908" "i36909" "i36910"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i36889"))
                                  #(ribcage
                                    (define-syntax-rule)
                                    ((top))
                                    (((hygiene guile)
                                      .
                                      #(syntax-object
                                        define-syntax-rule
                                        ((top))
                                        (hygiene guile))))))
                                 (hygiene guile))
                              '()
                              #{docstring 36934}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i36907"
                                                  "i36908"
                                                  "i36909"
                                                  "i36910"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i36889"))
                                              #(ribcage
                                                (define-syntax-rule)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    define-syntax-rule
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                          #{pattern 36933}#)
                                    #{template 36935}#))))
                #{tmp 36924}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 36915}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 36985}#)
      (let ((#{tmp 36987}#
              ($sc-dispatch
                #{x 36985}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 36987}#
              (@apply
                (lambda (#{let* 36991}#
                         #{x 36992}#
                         #{v 36993}#
                         #{e1 36994}#
                         #{e2 36995}#)
                  (and-map identifier? #{x 36992}#))
                #{tmp 36987}#)
              #f)
          (@apply
            (lambda (#{let* 36996}#
                     #{x 36997}#
                     #{v 36998}#
                     #{e1 36999}#
                     #{e2 37000}#)
              (letrec*
                ((#{f 37001}#
                   (lambda (#{bindings 37004}#)
                     (if (null? #{bindings 37004}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i36971" "i36972"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i36961"
                                     "i36962"
                                     "i36963"
                                     "i36964"
                                     "i36965"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i36947"))
                                 #(ribcage
                                   (let*)
                                   ((top))
                                   (((hygiene guile)
                                     .
                                     #(syntax-object
                                       let*
                                       ((top))
                                       (hygiene guile))))))
                                (hygiene guile))
                             (cons '() (cons #{e1 36999}# #{e2 37000}#)))
                       (let ((#{tmp 37005}#
                               (list (#{f 37001}# (cdr #{bindings 37004}#))
                                     (car #{bindings 37004}#))))
                         (let ((#{tmp 37006}#
                                 ($sc-dispatch #{tmp 37005}# '(any any))))
                           (if #{tmp 37006}#
                             (@apply
                               (lambda (#{body 37008}# #{binding 37009}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i36981" "i36982"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i36971" "i36972"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i36961"
                                               "i36962"
                                               "i36963"
                                               "i36964"
                                               "i36965"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i36947"))
                                           #(ribcage
                                             (let*)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 let*
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       (list #{binding 37009}#)
                                       #{body 37008}#))
                               #{tmp 37006}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 37005}#))))))))
                (#{f 37001}# (map list #{x 36997}# #{v 36998}#))))
            #{tmp 36987}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 36985}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 37068}#)
      (let ((#{tmp 37070}#
              ($sc-dispatch
                #{orig-x 37068}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 37070}#
          (@apply
            (lambda (#{var 37074}#
                     #{init 37075}#
                     #{step 37076}#
                     #{e0 37077}#
                     #{e1 37078}#
                     #{c 37079}#)
              (let ((#{tmp 37080}#
                      (map (lambda (#{v 37083}# #{s 37084}#)
                             (let ((#{tmp 37086}#
                                     ($sc-dispatch #{s 37084}# '())))
                               (if #{tmp 37086}#
                                 (@apply (lambda () #{v 37083}#) #{tmp 37086}#)
                                 (let ((#{tmp 37089}#
                                         ($sc-dispatch #{s 37084}# '(any))))
                                   (if #{tmp 37089}#
                                     (@apply
                                       (lambda (#{e 37092}#) #{e 37092}#)
                                       #{tmp 37089}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 37068}#
                                       #{s 37084}#))))))
                           #{var 37074}#
                           #{step 37076}#)))
                (let ((#{tmp 37081}#
                        ($sc-dispatch #{tmp 37080}# 'each-any)))
                  (if #{tmp 37081}#
                    (@apply
                      (lambda (#{step 37098}#)
                        (let ((#{tmp 37100}# ($sc-dispatch #{e1 37078}# '())))
                          (if #{tmp 37100}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i37036"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i37021"
                                              "i37022"
                                              "i37023"
                                              "i37024"
                                              "i37025"
                                              "i37026"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i37018"))
                                          #(ribcage
                                            (do)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                do
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i37036"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i37021"
                                              "i37022"
                                              "i37023"
                                              "i37024"
                                              "i37025"
                                              "i37026"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i37018"))
                                          #(ribcage
                                            (do)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                do
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      (map list #{var 37074}# #{init 37075}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i37036"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i37021"
                                                    "i37022"
                                                    "i37023"
                                                    "i37024"
                                                    "i37025"
                                                    "i37026"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i37018"))
                                                #(ribcage
                                                  (do)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      do
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i37036"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i37021"
                                                          "i37022"
                                                          "i37023"
                                                          "i37024"
                                                          "i37025"
                                                          "i37026"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i37018"))
                                                      #(ribcage
                                                        (do)
                                                        ((top))
                                                        (((hygiene guile)
                                                          .
                                                          #(syntax-object
                                                            do
                                                            ((top))
                                                            (hygiene
                                                              guile))))))
                                                     (hygiene guile))
                                                  #{e0 37077}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i37036"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i37021"
                                                          "i37022"
                                                          "i37023"
                                                          "i37024"
                                                          "i37025"
                                                          "i37026"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i37018"))
                                                      #(ribcage
                                                        (do)
                                                        ((top))
                                                        (((hygiene guile)
                                                          .
                                                          #(syntax-object
                                                            do
                                                            ((top))
                                                            (hygiene
                                                              guile))))))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 37079}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i37036"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i37021"
                                                                        "i37022"
                                                                        "i37023"
                                                                        "i37024"
                                                                        "i37025"
                                                                        "i37026"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i37018"))
                                                                    #(ribcage
                                                                      (do)
                                                                      ((top))
                                                                      (((hygiene
                                                                          guile)
                                                                        .
                                                                        #(syntax-object
                                                                          do
                                                                          ((top))
                                                                          (hygiene
                                                                            guile))))))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 37098}#)))))))
                              #{tmp 37100}#)
                            (let ((#{tmp 37104}#
                                    ($sc-dispatch
                                      #{e1 37078}#
                                      '(any . each-any))))
                              (if #{tmp 37104}#
                                (@apply
                                  (lambda (#{e1 37108}# #{e2 37109}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i37045" "i37046"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i37036"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i37021"
                                                  "i37022"
                                                  "i37023"
                                                  "i37024"
                                                  "i37025"
                                                  "i37026"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i37018"))
                                              #(ribcage
                                                (do)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    do
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i37045" "i37046"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i37036"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i37021"
                                                  "i37022"
                                                  "i37023"
                                                  "i37024"
                                                  "i37025"
                                                  "i37026"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i37018"))
                                              #(ribcage
                                                (do)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    do
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                          (map list
                                               #{var 37074}#
                                               #{init 37075}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i37045" "i37046"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i37036"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i37021"
                                                        "i37022"
                                                        "i37023"
                                                        "i37024"
                                                        "i37025"
                                                        "i37026"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i37018"))
                                                    #(ribcage
                                                      (do)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          do
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{e0 37077}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i37045"
                                                              "i37046"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i37036"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i37021"
                                                              "i37022"
                                                              "i37023"
                                                              "i37024"
                                                              "i37025"
                                                              "i37026"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i37018"))
                                                          #(ribcage
                                                            (do)
                                                            ((top))
                                                            (((hygiene guile)
                                                              .
                                                              #(syntax-object
                                                                do
                                                                ((top))
                                                                (hygiene
                                                                  guile))))))
                                                         (hygiene guile))
                                                      (cons #{e1 37108}#
                                                            #{e2 37109}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i37045"
                                                              "i37046"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i37036"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i37021"
                                                              "i37022"
                                                              "i37023"
                                                              "i37024"
                                                              "i37025"
                                                              "i37026"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i37018"))
                                                          #(ribcage
                                                            (do)
                                                            ((top))
                                                            (((hygiene guile)
                                                              .
                                                              #(syntax-object
                                                                do
                                                                ((top))
                                                                (hygiene
                                                                  guile))))))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 37079}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i37045"
                                                                            "i37046"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i37036"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i37021"
                                                                            "i37022"
                                                                            "i37023"
                                                                            "i37024"
                                                                            "i37025"
                                                                            "i37026"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i37018"))
                                                                        #(ribcage
                                                                          (do)
                                                                          ((top))
                                                                          (((hygiene
                                                                              guile)
                                                                            .
                                                                            #(syntax-object
                                                                              do
                                                                              ((top))
                                                                              (hygiene
                                                                                guile))))))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 37098}#)))))))
                                  #{tmp 37104}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 37078}#))))))
                      #{tmp 37081}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 37080}#)))))
            #{tmp 37070}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 37068}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 37396}#
         (lambda (#{p 37420}# #{lev 37421}#)
           (let ((#{tmp 37423}#
                   ($sc-dispatch
                     #{p 37420}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37142" "i37143"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37138"
                               "i37136"
                               "i37134"
                               "i37132"
                               "i37130"
                               "i37128"
                               "i37126"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile)))
                       any))))
             (if #{tmp 37423}#
               (@apply
                 (lambda (#{p 37427}#)
                   (if (= #{lev 37421}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i37146"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i37142" "i37143"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i37138"
                                  "i37136"
                                  "i37134"
                                  "i37132"
                                  "i37130"
                                  "i37128"
                                  "i37126"))
                               #(ribcage
                                 (quasiquote)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     quasiquote
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile))
                           #{p 37427}#)
                     (#{quasicons 37398}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i37146"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37142" "i37143"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37138"
                               "i37136"
                               "i37134"
                               "i37132"
                               "i37130"
                               "i37128"
                               "i37126"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i37146"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37142" "i37143"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37138"
                               "i37136"
                               "i37134"
                               "i37132"
                               "i37130"
                               "i37128"
                               "i37126"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile)))
                       (#{quasi 37396}#
                         (list #{p 37427}#)
                         (#{1-}# #{lev 37421}#)))))
                 #{tmp 37423}#)
               (let ((#{tmp 37430}#
                       ($sc-dispatch
                         #{p 37420}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i37142" "i37143"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i37138"
                                   "i37136"
                                   "i37134"
                                   "i37132"
                                   "i37130"
                                   "i37128"
                                   "i37126"))
                                #(ribcage
                                  (quasiquote)
                                  ((top))
                                  (((hygiene guile)
                                    .
                                    #(syntax-object
                                      quasiquote
                                      ((top))
                                      (hygiene guile))))))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 37430}#
                   (@apply
                     (lambda (#{p 37434}#)
                       (#{quasicons 37398}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i37149"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i37142" "i37143"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i37138"
                                 "i37136"
                                 "i37134"
                                 "i37132"
                                 "i37130"
                                 "i37128"
                                 "i37126"))
                              #(ribcage
                                (quasiquote)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    quasiquote
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i37149"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i37142" "i37143"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i37138"
                                 "i37136"
                                 "i37134"
                                 "i37132"
                                 "i37130"
                                 "i37128"
                                 "i37126"))
                              #(ribcage
                                (quasiquote)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    quasiquote
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile)))
                         (#{quasi 37396}#
                           (list #{p 37434}#)
                           (#{1+}# #{lev 37421}#))))
                     #{tmp 37430}#)
                   (let ((#{tmp 37437}#
                           ($sc-dispatch #{p 37420}# '(any . any))))
                     (if #{tmp 37437}#
                       (@apply
                         (lambda (#{p 37441}# #{q 37442}#)
                           (let ((#{tmp 37444}#
                                   ($sc-dispatch
                                     #{p 37441}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i37152" "i37153"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i37142" "i37143"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i37138"
                                               "i37136"
                                               "i37134"
                                               "i37132"
                                               "i37130"
                                               "i37128"
                                               "i37126"))
                                            #(ribcage
                                              (quasiquote)
                                              ((top))
                                              (((hygiene guile)
                                                .
                                                #(syntax-object
                                                  quasiquote
                                                  ((top))
                                                  (hygiene guile))))))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 37444}#
                               (@apply
                                 (lambda (#{p 37448}#)
                                   (if (= #{lev 37421}# 0)
                                     (#{quasilist* 37400}#
                                       (map (lambda (#{tmp 37160 37487}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i37158"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i37152" "i37153"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i37142" "i37143"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i37138"
                                                           "i37136"
                                                           "i37134"
                                                           "i37132"
                                                           "i37130"
                                                           "i37128"
                                                           "i37126"))
                                                        #(ribcage
                                                          (quasiquote)
                                                          ((top))
                                                          (((hygiene guile)
                                                            .
                                                            #(syntax-object
                                                              quasiquote
                                                              ((top))
                                                              (hygiene
                                                                guile))))))
                                                       (hygiene guile))
                                                    #{tmp 37160 37487}#))
                                            #{p 37448}#)
                                       (#{quasi 37396}#
                                         #{q 37442}#
                                         #{lev 37421}#))
                                     (#{quasicons 37398}#
                                       (#{quasicons 37398}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i37158"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i37152" "i37153"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i37142" "i37143"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i37138"
                                                 "i37136"
                                                 "i37134"
                                                 "i37132"
                                                 "i37130"
                                                 "i37128"
                                                 "i37126"))
                                              #(ribcage
                                                (quasiquote)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    quasiquote
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i37158"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i37152" "i37153"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i37142" "i37143"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i37138"
                                                 "i37136"
                                                 "i37134"
                                                 "i37132"
                                                 "i37130"
                                                 "i37128"
                                                 "i37126"))
                                              #(ribcage
                                                (quasiquote)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    quasiquote
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile)))
                                         (#{quasi 37396}#
                                           #{p 37448}#
                                           (#{1-}# #{lev 37421}#)))
                                       (#{quasi 37396}#
                                         #{q 37442}#
                                         #{lev 37421}#))))
                                 #{tmp 37444}#)
                               (let ((#{tmp 37492}#
                                       ($sc-dispatch
                                         #{p 37441}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i37152" "i37153"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i37142" "i37143"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i37138"
                                                   "i37136"
                                                   "i37134"
                                                   "i37132"
                                                   "i37130"
                                                   "i37128"
                                                   "i37126"))
                                                #(ribcage
                                                  (quasiquote)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      quasiquote
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 37492}#
                                   (@apply
                                     (lambda (#{p 37496}#)
                                       (if (= #{lev 37421}# 0)
                                         (#{quasiappend 37399}#
                                           (map (lambda (#{tmp 37165 37499}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i37163"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i37152"
                                                                "i37153"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i37142"
                                                                "i37143"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i37138"
                                                               "i37136"
                                                               "i37134"
                                                               "i37132"
                                                               "i37130"
                                                               "i37128"
                                                               "i37126"))
                                                            #(ribcage
                                                              (quasiquote)
                                                              ((top))
                                                              (((hygiene guile)
                                                                .
                                                                #(syntax-object
                                                                  quasiquote
                                                                  ((top))
                                                                  (hygiene
                                                                    guile))))))
                                                           (hygiene guile))
                                                        #{tmp 37165 37499}#))
                                                #{p 37496}#)
                                           (#{quasi 37396}#
                                             #{q 37442}#
                                             #{lev 37421}#))
                                         (#{quasicons 37398}#
                                           (#{quasicons 37398}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i37163"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i37152" "i37153"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i37142" "i37143"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i37138"
                                                     "i37136"
                                                     "i37134"
                                                     "i37132"
                                                     "i37130"
                                                     "i37128"
                                                     "i37126"))
                                                  #(ribcage
                                                    (quasiquote)
                                                    ((top))
                                                    (((hygiene guile)
                                                      .
                                                      #(syntax-object
                                                        quasiquote
                                                        ((top))
                                                        (hygiene guile))))))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i37163"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i37152" "i37153"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i37142" "i37143"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i37138"
                                                     "i37136"
                                                     "i37134"
                                                     "i37132"
                                                     "i37130"
                                                     "i37128"
                                                     "i37126"))
                                                  #(ribcage
                                                    (quasiquote)
                                                    ((top))
                                                    (((hygiene guile)
                                                      .
                                                      #(syntax-object
                                                        quasiquote
                                                        ((top))
                                                        (hygiene guile))))))
                                                 (hygiene guile)))
                                             (#{quasi 37396}#
                                               #{p 37496}#
                                               (#{1-}# #{lev 37421}#)))
                                           (#{quasi 37396}#
                                             #{q 37442}#
                                             #{lev 37421}#))))
                                     #{tmp 37492}#)
                                   (#{quasicons 37398}#
                                     (#{quasi 37396}#
                                       #{p 37441}#
                                       #{lev 37421}#)
                                     (#{quasi 37396}#
                                       #{q 37442}#
                                       #{lev 37421}#)))))))
                         #{tmp 37437}#)
                       (let ((#{tmp 37513}#
                               ($sc-dispatch #{p 37420}# '#(vector each-any))))
                         (if #{tmp 37513}#
                           (@apply
                             (lambda (#{x 37517}#)
                               (let ((#{x 37520}#
                                       (#{vquasi 37397}#
                                         #{x 37517}#
                                         #{lev 37421}#)))
                                 (let ((#{tmp 37522}#
                                         ($sc-dispatch
                                           #{x 37520}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 37522}#
                                     (@apply
                                       (lambda (#{x 37526}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37270"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37267"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i37138"
                                                      "i37136"
                                                      "i37134"
                                                      "i37132"
                                                      "i37130"
                                                      "i37128"
                                                      "i37126"))
                                                   #(ribcage
                                                     (quasiquote)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         quasiquote
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               (list->vector #{x 37526}#)))
                                       #{tmp 37522}#)
                                     (letrec*
                                       ((#{f 37528}#
                                          (lambda (#{y 37540}# #{k 37541}#)
                                            (let ((#{tmp 37543}#
                                                    ($sc-dispatch
                                                      #{y 37540}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 37543}#
                                                (@apply
                                                  (lambda (#{y 37546}#)
                                                    (#{k 37541}#
                                                      (map (lambda (#{tmp 37295 37547}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i37293"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i37275"
                                                                           "i37276"
                                                                           "i37277"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i37273"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i37267"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i37138"
                                                                          "i37136"
                                                                          "i37134"
                                                                          "i37132"
                                                                          "i37130"
                                                                          "i37128"
                                                                          "i37126"))
                                                                       #(ribcage
                                                                         (quasiquote)
                                                                         ((top))
                                                                         (((hygiene
                                                                             guile)
                                                                           .
                                                                           #(syntax-object
                                                                             quasiquote
                                                                             ((top))
                                                                             (hygiene
                                                                               guile))))))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 37295 37547}#))
                                                           #{y 37546}#)))
                                                  #{tmp 37543}#)
                                                (let ((#{tmp 37548}#
                                                        ($sc-dispatch
                                                          #{y 37540}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 37548}#
                                                    (@apply
                                                      (lambda (#{y 37551}#)
                                                        (#{k 37541}#
                                                          #{y 37551}#))
                                                      #{tmp 37548}#)
                                                    (let ((#{tmp 37552}#
                                                            ($sc-dispatch
                                                              #{y 37540}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 37552}#
                                                        (@apply
                                                          (lambda (#{y 37555}#
                                                                   #{z 37556}#)
                                                            (#{f 37528}#
                                                              #{z 37556}#
                                                              (lambda (#{ls 37557}#)
                                                                (#{k 37541}#
                                                                  (append
                                                                    #{y 37555}#
                                                                    #{ls 37557}#)))))
                                                          #{tmp 37552}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g37310}#)
                                                                    #((m37311
                                                                        top))
                                                                    #("i37314"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i37308"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i37275"
                                                                      "i37276"
                                                                      "i37277"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i37273"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i37267"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i37138"
                                                                     "i37136"
                                                                     "i37134"
                                                                     "i37132"
                                                                     "i37130"
                                                                     "i37128"
                                                                     "i37126"))
                                                                  #(ribcage
                                                                    (quasiquote)
                                                                    ((top))
                                                                    (((hygiene
                                                                        guile)
                                                                      .
                                                                      #(syntax-object
                                                                        quasiquote
                                                                        ((top))
                                                                        (hygiene
                                                                          guile))))))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 37520}#))))))))))
                                       (#{f 37528}#
                                         #{x 37520}#
                                         (lambda (#{ls 37530}#)
                                           (let ((#{tmp 37532}#
                                                   ($sc-dispatch
                                                     #{ls 37530}#
                                                     'each-any)))
                                             (if #{tmp 37532}#
                                               (@apply
                                                 (lambda (#{ g37283 37535}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g37283}#)
                                                               #((m37284 top))
                                                               #("i37288"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i37282"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i37273"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i37267"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i37138"
                                                                "i37136"
                                                                "i37134"
                                                                "i37132"
                                                                "i37130"
                                                                "i37128"
                                                                "i37126"))
                                                             #(ribcage
                                                               (quasiquote)
                                                               ((top))
                                                               (((hygiene
                                                                   guile)
                                                                 .
                                                                 #(syntax-object
                                                                   quasiquote
                                                                   ((top))
                                                                   (hygiene
                                                                     guile))))))
                                                            (hygiene guile))
                                                         #{ g37283 37535}#))
                                                 #{tmp 37532}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 37530}#))))))))))
                             #{tmp 37513}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i37173"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i37142" "i37143"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i37138"
                                        "i37136"
                                        "i37134"
                                        "i37132"
                                        "i37130"
                                        "i37128"
                                        "i37126"))
                                     #(ribcage
                                       (quasiquote)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           quasiquote
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                 #{p 37420}#)))))))))))
       (#{vquasi 37397}#
         (lambda (#{p 37585}# #{lev 37586}#)
           (let ((#{tmp 37588}#
                   ($sc-dispatch #{p 37585}# '(any . any))))
             (if #{tmp 37588}#
               (@apply
                 (lambda (#{p 37592}# #{q 37593}#)
                   (let ((#{tmp 37595}#
                           ($sc-dispatch
                             #{p 37592}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i37181" "i37182"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i37177" "i37178"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i37138"
                                       "i37136"
                                       "i37134"
                                       "i37132"
                                       "i37130"
                                       "i37128"
                                       "i37126"))
                                    #(ribcage
                                      (quasiquote)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          quasiquote
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 37595}#
                       (@apply
                         (lambda (#{p 37599}#)
                           (if (= #{lev 37586}# 0)
                             (#{quasilist* 37400}#
                               (map (lambda (#{tmp 37189 37638}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i37187"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i37181" "i37182"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i37177" "i37178"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i37138"
                                                   "i37136"
                                                   "i37134"
                                                   "i37132"
                                                   "i37130"
                                                   "i37128"
                                                   "i37126"))
                                                #(ribcage
                                                  (quasiquote)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      quasiquote
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile))
                                            #{tmp 37189 37638}#))
                                    #{p 37599}#)
                               (#{vquasi 37397}# #{q 37593}# #{lev 37586}#))
                             (#{quasicons 37398}#
                               (#{quasicons 37398}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i37187"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i37181" "i37182"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i37177" "i37178"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i37138"
                                         "i37136"
                                         "i37134"
                                         "i37132"
                                         "i37130"
                                         "i37128"
                                         "i37126"))
                                      #(ribcage
                                        (quasiquote)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            quasiquote
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i37187"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i37181" "i37182"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i37177" "i37178"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i37138"
                                         "i37136"
                                         "i37134"
                                         "i37132"
                                         "i37130"
                                         "i37128"
                                         "i37126"))
                                      #(ribcage
                                        (quasiquote)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            quasiquote
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile)))
                                 (#{quasi 37396}#
                                   #{p 37599}#
                                   (#{1-}# #{lev 37586}#)))
                               (#{vquasi 37397}# #{q 37593}# #{lev 37586}#))))
                         #{tmp 37595}#)
                       (let ((#{tmp 37645}#
                               ($sc-dispatch
                                 #{p 37592}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i37181" "i37182"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i37177" "i37178"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i37138"
                                           "i37136"
                                           "i37134"
                                           "i37132"
                                           "i37130"
                                           "i37128"
                                           "i37126"))
                                        #(ribcage
                                          (quasiquote)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              quasiquote
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 37645}#
                           (@apply
                             (lambda (#{p 37649}#)
                               (if (= #{lev 37586}# 0)
                                 (#{quasiappend 37399}#
                                   (map (lambda (#{tmp 37194 37652}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i37192"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i37181" "i37182"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i37177" "i37178"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i37138"
                                                       "i37136"
                                                       "i37134"
                                                       "i37132"
                                                       "i37130"
                                                       "i37128"
                                                       "i37126"))
                                                    #(ribcage
                                                      (quasiquote)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          quasiquote
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{tmp 37194 37652}#))
                                        #{p 37649}#)
                                   (#{vquasi 37397}#
                                     #{q 37593}#
                                     #{lev 37586}#))
                                 (#{quasicons 37398}#
                                   (#{quasicons 37398}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i37192"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i37181" "i37182"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i37177" "i37178"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i37138"
                                             "i37136"
                                             "i37134"
                                             "i37132"
                                             "i37130"
                                             "i37128"
                                             "i37126"))
                                          #(ribcage
                                            (quasiquote)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                quasiquote
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i37192"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i37181" "i37182"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i37177" "i37178"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i37138"
                                             "i37136"
                                             "i37134"
                                             "i37132"
                                             "i37130"
                                             "i37128"
                                             "i37126"))
                                          #(ribcage
                                            (quasiquote)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                quasiquote
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile)))
                                     (#{quasi 37396}#
                                       #{p 37649}#
                                       (#{1-}# #{lev 37586}#)))
                                   (#{vquasi 37397}#
                                     #{q 37593}#
                                     #{lev 37586}#))))
                             #{tmp 37645}#)
                           (#{quasicons 37398}#
                             (#{quasi 37396}# #{p 37592}# #{lev 37586}#)
                             (#{vquasi 37397}# #{q 37593}# #{lev 37586}#)))))))
                 #{tmp 37588}#)
               (let ((#{tmp 37670}# ($sc-dispatch #{p 37585}# '())))
                 (if #{tmp 37670}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37177" "i37178"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37138"
                               "i37136"
                               "i37134"
                               "i37132"
                               "i37130"
                               "i37128"
                               "i37126"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                         ()))
                     #{tmp 37670}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 37585}#)))))))
       (#{quasicons 37398}#
         (lambda (#{x 37683}# #{y 37684}#)
           (let ((#{tmp 37685}# (list #{x 37683}# #{y 37684}#)))
             (let ((#{tmp 37686}#
                     ($sc-dispatch #{tmp 37685}# '(any any))))
               (if #{tmp 37686}#
                 (@apply
                   (lambda (#{x 37688}# #{y 37689}#)
                     (let ((#{tmp 37691}#
                             ($sc-dispatch
                               #{y 37689}#
                               '(#(atom "quote") any))))
                       (if #{tmp 37691}#
                         (@apply
                           (lambda (#{dy 37695}#)
                             (let ((#{tmp 37697}#
                                     ($sc-dispatch
                                       #{x 37688}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 37697}#
                                 (@apply
                                   (lambda (#{dx 37701}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i37216"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i37212"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37206" "i37207"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37201" "i37202"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i37138"
                                                  "i37136"
                                                  "i37134"
                                                  "i37132"
                                                  "i37130"
                                                  "i37128"
                                                  "i37126"))
                                               #(ribcage
                                                 (quasiquote)
                                                 ((top))
                                                 (((hygiene guile)
                                                   .
                                                   #(syntax-object
                                                     quasiquote
                                                     ((top))
                                                     (hygiene guile))))))
                                              (hygiene guile))
                                           (cons #{dx 37701}# #{dy 37695}#)))
                                   #{tmp 37697}#)
                                 (if (null? #{dy 37695}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i37218"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i37212"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37206" "i37207"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37201" "i37202"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i37138"
                                                "i37136"
                                                "i37134"
                                                "i37132"
                                                "i37130"
                                                "i37128"
                                                "i37126"))
                                             #(ribcage
                                               (quasiquote)
                                               ((top))
                                               (((hygiene guile)
                                                 .
                                                 #(syntax-object
                                                   quasiquote
                                                   ((top))
                                                   (hygiene guile))))))
                                            (hygiene guile))
                                         #{x 37688}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i37218"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i37212"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37206" "i37207"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37201" "i37202"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i37138"
                                                "i37136"
                                                "i37134"
                                                "i37132"
                                                "i37130"
                                                "i37128"
                                                "i37126"))
                                             #(ribcage
                                               (quasiquote)
                                               ((top))
                                               (((hygiene guile)
                                                 .
                                                 #(syntax-object
                                                   quasiquote
                                                   ((top))
                                                   (hygiene guile))))))
                                            (hygiene guile))
                                         #{x 37688}#
                                         #{y 37689}#)))))
                           #{tmp 37691}#)
                         (let ((#{tmp 37706}#
                                 ($sc-dispatch
                                   #{y 37689}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 37706}#
                             (@apply
                               (lambda (#{stuff 37710}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i37221"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37206" "i37207"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37201" "i37202"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i37138"
                                              "i37136"
                                              "i37134"
                                              "i37132"
                                              "i37130"
                                              "i37128"
                                              "i37126"))
                                           #(ribcage
                                             (quasiquote)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 quasiquote
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       (cons #{x 37688}# #{stuff 37710}#)))
                               #{tmp 37706}#)
                             (let ((#{tmp 37711}#
                                     ($sc-dispatch
                                       #{y 37689}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 37711}#
                                 (@apply
                                   (lambda (#{stuff 37715}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i37224"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37206" "i37207"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37201" "i37202"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i37138"
                                                  "i37136"
                                                  "i37134"
                                                  "i37132"
                                                  "i37130"
                                                  "i37128"
                                                  "i37126"))
                                               #(ribcage
                                                 (quasiquote)
                                                 ((top))
                                                 (((hygiene guile)
                                                   .
                                                   #(syntax-object
                                                     quasiquote
                                                     ((top))
                                                     (hygiene guile))))))
                                              (hygiene guile))
                                           (cons #{x 37688}# #{stuff 37715}#)))
                                   #{tmp 37711}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i37226"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37206" "i37207"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37201" "i37202"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i37138"
                                              "i37136"
                                              "i37134"
                                              "i37132"
                                              "i37130"
                                              "i37128"
                                              "i37126"))
                                           #(ribcage
                                             (quasiquote)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 quasiquote
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       #{x 37688}#
                                       #{y 37689}#))))))))
                   #{tmp 37686}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 37685}#))))))
       (#{quasiappend 37399}#
         (lambda (#{x 37726}# #{y 37727}#)
           (let ((#{tmp 37729}#
                   ($sc-dispatch #{y 37727}# '(#(atom "quote") ()))))
             (if #{tmp 37729}#
               (@apply
                 (lambda ()
                   (if (null? #{x 37726}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i37230" "i37231"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i37138"
                             "i37136"
                             "i37134"
                             "i37132"
                             "i37130"
                             "i37128"
                             "i37126"))
                          #(ribcage
                            (quasiquote)
                            ((top))
                            (((hygiene guile)
                              .
                              #(syntax-object
                                quasiquote
                                ((top))
                                (hygiene guile))))))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 37726}#))
                       (car #{x 37726}#)
                       (let ((#{tmp 37734}#
                               ($sc-dispatch #{x 37726}# 'each-any)))
                         (if #{tmp 37734}#
                           (@apply
                             (lambda (#{p 37738}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i37242"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i37230" "i37231"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i37138"
                                            "i37136"
                                            "i37134"
                                            "i37132"
                                            "i37130"
                                            "i37128"
                                            "i37126"))
                                         #(ribcage
                                           (quasiquote)
                                           ((top))
                                           (((hygiene guile)
                                             .
                                             #(syntax-object
                                               quasiquote
                                               ((top))
                                               (hygiene guile))))))
                                        (hygiene guile))
                                     #{p 37738}#))
                             #{tmp 37734}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 37726}#))))))
                 #{tmp 37729}#)
               (if (null? #{x 37726}#)
                 #{y 37727}#
                 (let ((#{tmp 37746}# (list #{x 37726}# #{y 37727}#)))
                   (let ((#{tmp 37747}#
                           ($sc-dispatch #{tmp 37746}# '(each-any any))))
                     (if #{tmp 37747}#
                       (@apply
                         (lambda (#{p 37749}# #{y 37750}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i37253" "i37254"))
                                     #(ribcage #(_) #((top)) #("i37245"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i37230" "i37231"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i37138"
                                        "i37136"
                                        "i37134"
                                        "i37132"
                                        "i37130"
                                        "i37128"
                                        "i37126"))
                                     #(ribcage
                                       (quasiquote)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           quasiquote
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                 (append #{p 37749}# (list #{y 37750}#))))
                         #{tmp 37747}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 37746}#)))))))))
       (#{quasilist* 37400}#
         (lambda (#{x 37754}# #{y 37755}#)
           (letrec*
             ((#{f 37756}#
                (lambda (#{x 37860}#)
                  (if (null? #{x 37860}#)
                    #{y 37755}#
                    (#{quasicons 37398}#
                      (car #{x 37860}#)
                      (#{f 37756}# (cdr #{x 37860}#)))))))
             (#{f 37756}# #{x 37754}#))))
       (#{emit 37402}#
         (lambda (#{x 37863}#)
           (let ((#{tmp 37865}#
                   ($sc-dispatch #{x 37863}# '(#(atom "quote") any))))
             (if #{tmp 37865}#
               (@apply
                 (lambda (#{x 37869}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i37320"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i37317"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i37138"
                                "i37136"
                                "i37134"
                                "i37132"
                                "i37130"
                                "i37128"
                                "i37126"))
                             #(ribcage
                               (quasiquote)
                               ((top))
                               (((hygiene guile)
                                 .
                                 #(syntax-object
                                   quasiquote
                                   ((top))
                                   (hygiene guile))))))
                            (hygiene guile))
                         #{x 37869}#))
                 #{tmp 37865}#)
               (let ((#{tmp 37870}#
                       ($sc-dispatch
                         #{x 37863}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 37870}#
                   (@apply
                     (lambda (#{x 37874}#)
                       (let ((#{tmp 37875}# (map #{emit 37402}# #{x 37874}#)))
                         (let ((#{tmp 37876}#
                                 ($sc-dispatch #{tmp 37875}# 'each-any)))
                           (if #{tmp 37876}#
                             (@apply
                               (lambda (#{ g37325 37878}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g37325}#)
                                             #((m37326 top))
                                             #("i37330"))
                                           #(ribcage #(x) #((top)) #("i37323"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i37317"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i37138"
                                              "i37136"
                                              "i37134"
                                              "i37132"
                                              "i37130"
                                              "i37128"
                                              "i37126"))
                                           #(ribcage
                                             (quasiquote)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 quasiquote
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       #{ g37325 37878}#))
                               #{tmp 37876}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 37875}#)))))
                     #{tmp 37870}#)
                   (let ((#{tmp 37879}#
                           ($sc-dispatch
                             #{x 37863}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 37879}#
                       (@apply
                         (lambda (#{x 37883}# #{y 37884}#)
                           (letrec*
                             ((#{f 37885}#
                                (lambda (#{x* 37888}#)
                                  (if (null? #{x* 37888}#)
                                    (#{emit 37402}# #{y 37884}#)
                                    (let ((#{tmp 37889}#
                                            (list (#{emit 37402}#
                                                    (car #{x* 37888}#))
                                                  (#{f 37885}#
                                                    (cdr #{x* 37888}#)))))
                                      (let ((#{tmp 37890}#
                                              ($sc-dispatch
                                                #{tmp 37889}#
                                                '(any any))))
                                        (if #{tmp 37890}#
                                          (@apply
                                            (lambda (#{ g37345 37892}#
                                                     #{ g37344 37893}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g37345}#
                                                            #{ g37344}#)
                                                          #((m37346 top)
                                                            (m37346 top))
                                                          #("i37350" "i37351"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i37339" "i37340"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i37335" "i37336"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i37317"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i37138"
                                                           "i37136"
                                                           "i37134"
                                                           "i37132"
                                                           "i37130"
                                                           "i37128"
                                                           "i37126"))
                                                        #(ribcage
                                                          (quasiquote)
                                                          ((top))
                                                          (((hygiene guile)
                                                            .
                                                            #(syntax-object
                                                              quasiquote
                                                              ((top))
                                                              (hygiene
                                                                guile))))))
                                                       (hygiene guile))
                                                    #{ g37345 37892}#
                                                    #{ g37344 37893}#))
                                            #{tmp 37890}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 37889}#))))))))
                             (#{f 37885}# #{x 37883}#)))
                         #{tmp 37879}#)
                       (let ((#{tmp 37894}#
                               ($sc-dispatch
                                 #{x 37863}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 37894}#
                           (@apply
                             (lambda (#{x 37898}#)
                               (let ((#{tmp 37899}#
                                       (map #{emit 37402}# #{x 37898}#)))
                                 (let ((#{tmp 37900}#
                                         ($sc-dispatch
                                           #{tmp 37899}#
                                           'each-any)))
                                   (if #{tmp 37900}#
                                     (@apply
                                       (lambda (#{ g37357 37902}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g37357}#)
                                                     #((m37358 top))
                                                     #("i37362"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37355"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37317"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i37138"
                                                      "i37136"
                                                      "i37134"
                                                      "i37132"
                                                      "i37130"
                                                      "i37128"
                                                      "i37126"))
                                                   #(ribcage
                                                     (quasiquote)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         quasiquote
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               #{ g37357 37902}#))
                                       #{tmp 37900}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 37899}#)))))
                             #{tmp 37894}#)
                           (let ((#{tmp 37903}#
                                   ($sc-dispatch
                                     #{x 37863}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 37903}#
                               (@apply
                                 (lambda (#{x 37907}#)
                                   (let ((#{tmp 37908}#
                                           (map #{emit 37402}# #{x 37907}#)))
                                     (let ((#{tmp 37909}#
                                             ($sc-dispatch
                                               #{tmp 37908}#
                                               'each-any)))
                                       (if #{tmp 37909}#
                                         (@apply
                                           (lambda (#{ g37369 37911}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g37369}#)
                                                         #((m37370 top))
                                                         #("i37374"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i37367"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i37317"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i37138"
                                                          "i37136"
                                                          "i37134"
                                                          "i37132"
                                                          "i37130"
                                                          "i37128"
                                                          "i37126"))
                                                       #(ribcage
                                                         (quasiquote)
                                                         ((top))
                                                         (((hygiene guile)
                                                           .
                                                           #(syntax-object
                                                             quasiquote
                                                             ((top))
                                                             (hygiene
                                                               guile))))))
                                                      (hygiene guile))
                                                   #{ g37369 37911}#))
                                           #{tmp 37909}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 37908}#)))))
                                 #{tmp 37903}#)
                               (let ((#{tmp 37912}#
                                       ($sc-dispatch
                                         #{x 37863}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 37912}#
                                   (@apply
                                     (lambda (#{x 37916}#)
                                       (let ((#{tmp 37917}#
                                               (#{emit 37402}# #{x 37916}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g37381}#)
                                                     #((m37382 top))
                                                     #("i37385"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37379"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37317"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i37138"
                                                      "i37136"
                                                      "i37134"
                                                      "i37132"
                                                      "i37130"
                                                      "i37128"
                                                      "i37126"))
                                                   #(ribcage
                                                     (quasiquote)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         quasiquote
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               #{tmp 37917}#)))
                                     #{tmp 37912}#)
                                   (let ((#{tmp 37920}#
                                           ($sc-dispatch
                                             #{x 37863}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 37920}#
                                       (@apply
                                         (lambda (#{x 37924}#) #{x 37924}#)
                                         #{tmp 37920}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 37863}#))))))))))))))))))
      (lambda (#{x 37403}#)
        (let ((#{tmp 37405}#
                ($sc-dispatch #{x 37403}# '(_ any))))
          (if #{tmp 37405}#
            (@apply
              (lambda (#{e 37409}#)
                (#{emit 37402}# (#{quasi 37396}# #{e 37409}# 0)))
              #{tmp 37405}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 37403}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 37980}#)
      (letrec*
        ((#{read-file 37981}#
           (lambda (#{fn 38097}# #{k 38098}#)
             (let ((#{p 38099}# (open-input-file #{fn 38097}#)))
               (letrec*
                 ((#{f 38100}#
                    (lambda (#{x 38157}# #{result 38158}#)
                      (if (eof-object? #{x 38157}#)
                        (begin
                          (close-input-port #{p 38099}#)
                          (reverse #{result 38158}#))
                        (#{f 38100}#
                          (read #{p 38099}#)
                          (cons (datum->syntax #{k 38098}# #{x 38157}#)
                                #{result 38158}#))))))
                 (#{f 38100}# (read #{p 38099}#) '()))))))
        (let ((#{tmp 37983}#
                ($sc-dispatch #{x 37980}# '(any any))))
          (if #{tmp 37983}#
            (@apply
              (lambda (#{k 37987}# #{filename 37988}#)
                (let ((#{fn 37989}# (syntax->datum #{filename 37988}#)))
                  (let ((#{tmp 37990}#
                          (#{read-file 37981}#
                            #{fn 37989}#
                            #{filename 37988}#)))
                    (let ((#{tmp 37991}#
                            ($sc-dispatch #{tmp 37990}# 'each-any)))
                      (if #{tmp 37991}#
                        (@apply
                          (lambda (#{exp 38009}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i37977"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i37972"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i37968" "i37969"))
                                      #(ribcage (read-file) ((top)) ("i37952"))
                                      #(ribcage #(x) #((top)) #("i37951"))
                                      #(ribcage
                                        (include)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            include
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                  #{exp 38009}#))
                          #{tmp 37991}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 37990}#))))))
              #{tmp 37983}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 37980}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 38178}#)
      (let ((#{tmp 38180}#
              ($sc-dispatch #{x 38178}# '(any any))))
        (if #{tmp 38180}#
          (@apply
            (lambda (#{k 38184}# #{filename 38185}#)
              (let ((#{fn 38186}# (syntax->datum #{filename 38185}#)))
                (let ((#{tmp 38187}#
                        (datum->syntax
                          #{filename 38185}#
                          (let ((#{t 38190}# (%search-load-path #{fn 38186}#)))
                            (if #{t 38190}#
                              #{t 38190}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 38178}#
                                #{filename 38185}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i38172"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i38168"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i38164" "i38165"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38161"))
                            #(ribcage
                              (include-from-path)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  include-from-path
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        #{tmp 38187}#))))
            #{tmp 38180}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 38178}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 38200}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 38200}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 38204}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 38204}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 38261}#)
      (let ((#{tmp 38263}#
              ($sc-dispatch
                #{x 38261}#
                '(_ any any . each-any))))
        (if #{tmp 38263}#
          (@apply
            (lambda (#{e 38267}# #{m1 38268}# #{m2 38269}#)
              (let ((#{tmp 38270}#
                      (letrec*
                        ((#{f 38331}#
                           (lambda (#{clause 38334}# #{clauses 38335}#)
                             (if (null? #{clauses 38335}#)
                               (let ((#{tmp 38337}#
                                       ($sc-dispatch
                                         #{clause 38334}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i38220"
                                                    "i38221"
                                                    "i38222"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i38210"
                                                    "i38211"
                                                    "i38212"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i38207"))
                                                #(ribcage
                                                  (case)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      case
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 38337}#
                                   (@apply
                                     (lambda (#{e1 38341}# #{e2 38342}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i38229" "i38230"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i38220"
                                                     "i38221"
                                                     "i38222"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i38210"
                                                     "i38211"
                                                     "i38212"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38207"))
                                                 #(ribcage
                                                   (case)
                                                   ((top))
                                                   (((hygiene guile)
                                                     .
                                                     #(syntax-object
                                                       case
                                                       ((top))
                                                       (hygiene guile))))))
                                                (hygiene guile))
                                             (cons #{e1 38341}# #{e2 38342}#)))
                                     #{tmp 38337}#)
                                   (let ((#{tmp 38343}#
                                           ($sc-dispatch
                                             #{clause 38334}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 38343}#
                                       (@apply
                                         (lambda (#{k 38347}#
                                                  #{e1 38348}#
                                                  #{e2 38349}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i38235"
                                                         "i38236"
                                                         "i38237"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i38220"
                                                         "i38221"
                                                         "i38222"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i38210"
                                                         "i38211"
                                                         "i38212"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38207"))
                                                     #(ribcage
                                                       (case)
                                                       ((top))
                                                       (((hygiene guile)
                                                         .
                                                         #(syntax-object
                                                           case
                                                           ((top))
                                                           (hygiene guile))))))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38235"
                                                               "i38236"
                                                               "i38237"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38220"
                                                               "i38221"
                                                               "i38222"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38210"
                                                               "i38211"
                                                               "i38212"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38207"))
                                                           #(ribcage
                                                             (case)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 case
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38235"
                                                               "i38236"
                                                               "i38237"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38220"
                                                               "i38221"
                                                               "i38222"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38210"
                                                               "i38211"
                                                               "i38212"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38207"))
                                                           #(ribcage
                                                             (case)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 case
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i38235"
                                                                     "i38236"
                                                                     "i38237"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i38220"
                                                                     "i38221"
                                                                     "i38222"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i38210"
                                                                     "i38211"
                                                                     "i38212"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i38207"))
                                                                 #(ribcage
                                                                   (case)
                                                                   ((top))
                                                                   (((hygiene
                                                                       guile)
                                                                     .
                                                                     #(syntax-object
                                                                       case
                                                                       ((top))
                                                                       (hygiene
                                                                         guile))))))
                                                                (hygiene
                                                                  guile))
                                                             #{k 38347}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38235"
                                                               "i38236"
                                                               "i38237"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38220"
                                                               "i38221"
                                                               "i38222"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38210"
                                                               "i38211"
                                                               "i38212"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38207"))
                                                           #(ribcage
                                                             (case)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 case
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                       (cons #{e1 38348}#
                                                             #{e2 38349}#))))
                                         #{tmp 38343}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 38261}#
                                         #{clause 38334}#)))))
                               (let ((#{tmp 38357}#
                                       (#{f 38331}#
                                         (car #{clauses 38335}#)
                                         (cdr #{clauses 38335}#))))
                                 (let ((#{tmp 38360}#
                                         ($sc-dispatch
                                           #{clause 38334}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 38360}#
                                     (@apply
                                       (lambda (#{k 38364}#
                                                #{e1 38365}#
                                                #{e2 38366}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i38251"
                                                       "i38252"
                                                       "i38253"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i38247"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i38220"
                                                       "i38221"
                                                       "i38222"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i38210"
                                                       "i38211"
                                                       "i38212"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i38207"))
                                                   #(ribcage
                                                     (case)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         case
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i38251"
                                                             "i38252"
                                                             "i38253"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i38247"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i38220"
                                                             "i38221"
                                                             "i38222"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i38210"
                                                             "i38211"
                                                             "i38212"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i38207"))
                                                         #(ribcage
                                                           (case)
                                                           ((top))
                                                           (((hygiene guile)
                                                             .
                                                             #(syntax-object
                                                               case
                                                               ((top))
                                                               (hygiene
                                                                 guile))))))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i38251"
                                                             "i38252"
                                                             "i38253"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i38247"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i38220"
                                                             "i38221"
                                                             "i38222"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i38210"
                                                             "i38211"
                                                             "i38212"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i38207"))
                                                         #(ribcage
                                                           (case)
                                                           ((top))
                                                           (((hygiene guile)
                                                             .
                                                             #(syntax-object
                                                               case
                                                               ((top))
                                                               (hygiene
                                                                 guile))))))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i38251"
                                                                   "i38252"
                                                                   "i38253"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i38247"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i38220"
                                                                   "i38221"
                                                                   "i38222"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i38210"
                                                                   "i38211"
                                                                   "i38212"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i38207"))
                                                               #(ribcage
                                                                 (case)
                                                                 ((top))
                                                                 (((hygiene
                                                                     guile)
                                                                   .
                                                                   #(syntax-object
                                                                     case
                                                                     ((top))
                                                                     (hygiene
                                                                       guile))))))
                                                              (hygiene guile))
                                                           #{k 38364}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i38251"
                                                             "i38252"
                                                             "i38253"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i38247"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i38220"
                                                             "i38221"
                                                             "i38222"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i38210"
                                                             "i38211"
                                                             "i38212"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i38207"))
                                                         #(ribcage
                                                           (case)
                                                           ((top))
                                                           (((hygiene guile)
                                                             .
                                                             #(syntax-object
                                                               case
                                                               ((top))
                                                               (hygiene
                                                                 guile))))))
                                                        (hygiene guile))
                                                     (cons #{e1 38365}#
                                                           #{e2 38366}#))
                                               #{tmp 38357}#))
                                       #{tmp 38360}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 38261}#
                                       #{clause 38334}#))))))))
                        (#{f 38331}# #{m1 38268}# #{m2 38269}#))))
                (let ((#{body 38271}# #{tmp 38270}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i38218"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i38210" "i38211" "i38212"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38207"))
                            #(ribcage
                              (case)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  case
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i38218"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i38210" "i38211" "i38212"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38207"))
                                        #(ribcage
                                          (case)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              case
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    #{e 38267}#))
                        #{body 38271}#))))
            #{tmp 38263}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 38261}#))))))

(define make-variable-transformer
  (lambda (#{proc 38385}#)
    (if (procedure? #{proc 38385}#)
      (letrec*
        ((#{trans 38386}#
           (lambda (#{x 38392}#)
             (#{proc 38385}# #{x 38392}#))))
        (begin
          (set-procedure-property!
            #{trans 38386}#
            'variable-transformer
            #t)
          #{trans 38386}#))
      (error "variable transformer not a procedure"
             #{proc 38385}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 38425}#)
      (let ((#{tmp 38427}#
              ($sc-dispatch #{x 38425}# '(_ any))))
        (if #{tmp 38427}#
          (@apply
            (lambda (#{e 38431}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i38400"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i38397"))
                        #(ribcage
                          (identifier-syntax)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              identifier-syntax
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i38400"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i38397"))
                         #(ribcage
                           (identifier-syntax)
                           ((top))
                           (((hygiene guile)
                             .
                             #(syntax-object
                               identifier-syntax
                               ((top))
                               (hygiene guile))))))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i38400"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i38397"))
                           #(ribcage
                             (identifier-syntax)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 identifier-syntax
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i38400"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i38397"))
                           #(ribcage
                             (identifier-syntax)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 identifier-syntax
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i38400"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38397"))
                              #(ribcage
                                (identifier-syntax)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    identifier-syntax
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i38400"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38397"))
                              #(ribcage
                                (identifier-syntax)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    identifier-syntax
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i38400"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i38397"))
                                    #(ribcage
                                      (identifier-syntax)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          identifier-syntax
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38400"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38397"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i38400"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i38397"))
                                      #(ribcage
                                        (identifier-syntax)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            identifier-syntax
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i38400"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i38397"))
                                      #(ribcage
                                        (identifier-syntax)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            identifier-syntax
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i38400"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i38397"))
                                          #(ribcage
                                            (identifier-syntax)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                identifier-syntax
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      #{e 38431}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38400"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38397"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38400"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38397"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38400"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38397"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i38400"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i38397"))
                                          #(ribcage
                                            (identifier-syntax)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                identifier-syntax
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      (cons #{e 38431}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i38400"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38397"))
                                                 #(ribcage
                                                   (identifier-syntax)
                                                   ((top))
                                                   (((hygiene guile)
                                                     .
                                                     #(syntax-object
                                                       identifier-syntax
                                                       ((top))
                                                       (hygiene guile))))))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i38400"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38397"))
                                                 #(ribcage
                                                   (identifier-syntax)
                                                   ((top))
                                                   (((hygiene guile)
                                                     .
                                                     #(syntax-object
                                                       identifier-syntax
                                                       ((top))
                                                       (hygiene guile))))))
                                                (hygiene guile)))))))))
            #{tmp 38427}#)
          (let ((#{tmp 38432}#
                  ($sc-dispatch
                    #{x 38425}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i38397"))
                               #(ribcage
                                 (identifier-syntax)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     identifier-syntax
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 38432}#
                  (@apply
                    (lambda (#{id 38436}#
                             #{exp1 38437}#
                             #{var 38438}#
                             #{val 38439}#
                             #{exp2 38440}#)
                      (if (identifier? #{id 38436}#)
                        (identifier? #{var 38438}#)
                        #f))
                    #{tmp 38432}#)
                  #f)
              (@apply
                (lambda (#{id 38441}#
                         #{exp1 38442}#
                         #{var 38443}#
                         #{val 38444}#
                         #{exp2 38445}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i38415" "i38416" "i38417" "i38418" "i38419"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38397"))
                            #(ribcage
                              (identifier-syntax)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  identifier-syntax
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i38415"
                                      "i38416"
                                      "i38417"
                                      "i38418"
                                      "i38419"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i38397"))
                                  #(ribcage
                                    (identifier-syntax)
                                    ((top))
                                    (((hygiene guile)
                                      .
                                      #(syntax-object
                                        identifier-syntax
                                        ((top))
                                        (hygiene guile))))))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i38415"
                                       "i38416"
                                       "i38417"
                                       "i38418"
                                       "i38419"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i38397"))
                                   #(ribcage
                                     (identifier-syntax)
                                     ((top))
                                     (((hygiene guile)
                                       .
                                       #(syntax-object
                                         identifier-syntax
                                         ((top))
                                         (hygiene guile))))))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i38415"
                                         "i38416"
                                         "i38417"
                                         "i38418"
                                         "i38419"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38397"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i38415"
                                         "i38416"
                                         "i38417"
                                         "i38418"
                                         "i38419"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38397"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i38415"
                                            "i38416"
                                            "i38417"
                                            "i38418"
                                            "i38419"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38397"))
                                        #(ribcage
                                          (identifier-syntax)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              identifier-syntax
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i38415"
                                            "i38416"
                                            "i38417"
                                            "i38418"
                                            "i38419"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38397"))
                                        #(ribcage
                                          (identifier-syntax)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              identifier-syntax
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i38415"
                                             "i38416"
                                             "i38417"
                                             "i38418"
                                             "i38419"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i38397"))
                                         #(ribcage
                                           (identifier-syntax)
                                           ((top))
                                           (((hygiene guile)
                                             .
                                             #(syntax-object
                                               identifier-syntax
                                               ((top))
                                               (hygiene guile))))))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38415"
                                                        "i38416"
                                                        "i38417"
                                                        "i38418"
                                                        "i38419"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38397"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{var 38443}#
                                                #{val 38444}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38415"
                                                        "i38416"
                                                        "i38417"
                                                        "i38418"
                                                        "i38419"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38397"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{exp2 38445}#))
                                    (list (cons #{id 38441}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i38415"
                                                         "i38416"
                                                         "i38417"
                                                         "i38418"
                                                         "i38419"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38397"))
                                                     #(ribcage
                                                       (identifier-syntax)
                                                       ((top))
                                                       (((hygiene guile)
                                                         .
                                                         #(syntax-object
                                                           identifier-syntax
                                                           ((top))
                                                           (hygiene guile))))))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i38415"
                                                         "i38416"
                                                         "i38417"
                                                         "i38418"
                                                         "i38419"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38397"))
                                                     #(ribcage
                                                       (identifier-syntax)
                                                       ((top))
                                                       (((hygiene guile)
                                                         .
                                                         #(syntax-object
                                                           identifier-syntax
                                                           ((top))
                                                           (hygiene guile))))))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38415"
                                                        "i38416"
                                                        "i38417"
                                                        "i38418"
                                                        "i38419"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38397"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                (cons #{exp1 38442}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i38415"
                                                               "i38416"
                                                               "i38417"
                                                               "i38418"
                                                               "i38419"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38397"))
                                                           #(ribcage
                                                             (identifier-syntax)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 identifier-syntax
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i38415"
                                                               "i38416"
                                                               "i38417"
                                                               "i38418"
                                                               "i38419"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38397"))
                                                           #(ribcage
                                                             (identifier-syntax)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 identifier-syntax
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))))))
                                    (list #{id 38441}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38415"
                                                        "i38416"
                                                        "i38417"
                                                        "i38418"
                                                        "i38419"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38397"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i38415"
                                                              "i38416"
                                                              "i38417"
                                                              "i38418"
                                                              "i38419"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i38397"))
                                                          #(ribcage
                                                            (identifier-syntax)
                                                            ((top))
                                                            (((hygiene guile)
                                                              .
                                                              #(syntax-object
                                                                identifier-syntax
                                                                ((top))
                                                                (hygiene
                                                                  guile))))))
                                                         (hygiene guile))
                                                      #{id 38441}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38415"
                                                        "i38416"
                                                        "i38417"
                                                        "i38418"
                                                        "i38419"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38397"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                #{exp1 38442}#))))))
                #{tmp 38432}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 38425}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 38478}#)
      (let ((#{tmp 38480}#
              ($sc-dispatch
                #{x 38478}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 38480}#
          (@apply
            (lambda (#{id 38484}#
                     #{args 38485}#
                     #{b0 38486}#
                     #{b1 38487}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i38460" "i38461" "i38462" "i38463"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i38457"))
                        #(ribcage
                          (define*)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              define*
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    #{id 38484}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i38460" "i38461" "i38462" "i38463"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38457"))
                              #(ribcage
                                (define*)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    define*
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          (cons #{args 38485}#
                                (cons #{b0 38486}# #{b1 38487}#)))))
            #{tmp 38480}#)
          (let ((#{tmp 38488}#
                  ($sc-dispatch #{x 38478}# '(_ any any))))
            (if (if #{tmp 38488}#
                  (@apply
                    (lambda (#{id 38492}# #{val 38493}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i38470" "i38471"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38457"))
                            #(ribcage
                              (define*)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  define*
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))))
                    #{tmp 38488}#)
                  #f)
              (@apply
                (lambda (#{id 38494}# #{val 38495}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i38474" "i38475"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38457"))
                            #(ribcage
                              (define*)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  define*
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        #{id 38494}#
                        #{val 38495}#))
                #{tmp 38488}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 38478}#))))))))

