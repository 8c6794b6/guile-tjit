(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{top-level-eval-hook 4273}#
     (lambda (#{x 28128}# #{mod 28129}#)
       (primitive-eval #{x 28128}#)))
   (#{maybe-name-value! 4278}#
     (lambda (#{name 16665}# #{val 16666}#)
       (if (if (struct? #{val 16666}#)
             (eq? (struct-vtable #{val 16666}#)
                  (vector-ref %expanded-vtables 13))
             #f)
         (let ((#{meta 16673}# (struct-ref #{val 16666}# 1)))
           (if (not (assq 'name #{meta 16673}#))
             (let ((#{v 16678}#
                     (cons (cons 'name #{name 16665}#) #{meta 16673}#)))
               (struct-set! #{val 16666}# 1 #{v 16678}#)))))))
   (#{build-application 4280}#
     (lambda (#{source 16390}#
              #{fun-exp 16391}#
              #{arg-exps 16392}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{source 16390}#
         #{fun-exp 16391}#
         #{arg-exps 16392}#)))
   (#{build-conditional 4281}#
     (lambda (#{source 16398}#
              #{test-exp 16399}#
              #{then-exp 16400}#
              #{else-exp 16401}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{source 16398}#
         #{test-exp 16399}#
         #{then-exp 16400}#
         #{else-exp 16401}#)))
   (#{build-dynlet 4282}#
     (lambda (#{source 16408}#
              #{fluids 16409}#
              #{vals 16410}#
              #{body 16411}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 17)
         #{source 16408}#
         #{fluids 16409}#
         #{vals 16410}#
         #{body 16411}#)))
   (#{build-lexical-reference 4283}#
     (lambda (#{type 28130}#
              #{source 28131}#
              #{name 28132}#
              #{var 28133}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{source 28131}#
         #{name 28132}#
         #{var 28133}#)))
   (#{build-lexical-assignment 4284}#
     (lambda (#{source 16418}#
              #{name 16419}#
              #{var 16420}#
              #{exp 16421}#)
       (begin
         (if (if (struct? #{exp 16421}#)
               (eq? (struct-vtable #{exp 16421}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 16437}# (struct-ref #{exp 16421}# 1)))
             (if (not (assq 'name #{meta 16437}#))
               (let ((#{v 16444}#
                       (cons (cons 'name #{name 16419}#) #{meta 16437}#)))
                 (struct-set! #{exp 16421}# 1 #{v 16444}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 4)
           #{source 16418}#
           #{name 16419}#
           #{var 16420}#
           #{exp 16421}#))))
   (#{analyze-variable 4285}#
     (lambda (#{mod 28139}#
              #{var 28140}#
              #{modref-cont 28141}#
              #{bare-cont 28142}#)
       (if (not #{mod 28139}#)
         (#{bare-cont 28142}# #{var 28140}#)
         (let ((#{kind 28143}# (car #{mod 28139}#))
               (#{mod 28144}# (cdr #{mod 28139}#)))
           (if (eqv? #{kind 28143}# 'public)
             (#{modref-cont 28141}#
               #{mod 28144}#
               #{var 28140}#
               #t)
             (if (eqv? #{kind 28143}# 'private)
               (if (not (equal?
                          #{mod 28144}#
                          (module-name (current-module))))
                 (#{modref-cont 28141}#
                   #{mod 28144}#
                   #{var 28140}#
                   #f)
                 (#{bare-cont 28142}# #{var 28140}#))
               (if (eqv? #{kind 28143}# 'bare)
                 (#{bare-cont 28142}# #{var 28140}#)
                 (if (eqv? #{kind 28143}# 'hygiene)
                   (if (if (not (equal?
                                  #{mod 28144}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 28144}#)
                           #{var 28140}#)
                         #f)
                     (#{modref-cont 28141}#
                       #{mod 28144}#
                       #{var 28140}#
                       #f)
                     (#{bare-cont 28142}# #{var 28140}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 28140}#
                     #{mod 28144}#)))))))))
   (#{build-global-reference 4286}#
     (lambda (#{source 28159}# #{var 28160}# #{mod 28161}#)
       (#{analyze-variable 4285}#
         #{mod 28161}#
         #{var 28160}#
         (lambda (#{mod 28164}# #{var 28165}# #{public? 28166}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 5)
             #{source 28159}#
             #{mod 28164}#
             #{var 28165}#
             #{public? 28166}#))
         (lambda (#{var 28174}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 7)
             #{source 28159}#
             #{var 28174}#)))))
   (#{build-global-assignment 4287}#
     (lambda (#{source 16453}#
              #{var 16454}#
              #{exp 16455}#
              #{mod 16456}#)
       (begin
         (if (if (struct? #{exp 16455}#)
               (eq? (struct-vtable #{exp 16455}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 16472}# (struct-ref #{exp 16455}# 1)))
             (if (not (assq 'name #{meta 16472}#))
               (let ((#{v 16479}#
                       (cons (cons 'name #{var 16454}#) #{meta 16472}#)))
                 (struct-set! #{exp 16455}# 1 #{v 16479}#)))))
         (#{analyze-variable 4285}#
           #{mod 16456}#
           #{var 16454}#
           (lambda (#{mod 16484}# #{var 16485}# #{public? 16486}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{source 16453}#
               #{mod 16484}#
               #{var 16485}#
               #{public? 16486}#
               #{exp 16455}#))
           (lambda (#{var 16494}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{source 16453}#
               #{var 16494}#
               #{exp 16455}#))))))
   (#{build-global-definition 4288}#
     (lambda (#{source 28180}# #{var 28181}# #{exp 28182}#)
       (begin
         (if (if (struct? #{exp 28182}#)
               (eq? (struct-vtable #{exp 28182}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 28198}# (struct-ref #{exp 28182}# 1)))
             (if (not (assq 'name #{meta 28198}#))
               (let ((#{v 28205}#
                       (cons (cons 'name #{var 28181}#) #{meta 28198}#)))
                 (struct-set! #{exp 28182}# 1 #{v 28205}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 9)
           #{source 28180}#
           #{var 28181}#
           #{exp 28182}#))))
   (#{build-simple-lambda 4289}#
     (lambda (#{src 16500}#
              #{req 16501}#
              #{rest 16502}#
              #{vars 16503}#
              #{meta 16504}#
              #{exp 16505}#)
       (let ((#{body 16511}#
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 14)
                 #{src 16500}#
                 #{req 16501}#
                 #f
                 #{rest 16502}#
                 #f
                 '()
                 #{vars 16503}#
                 #{exp 16505}#
                 #f)))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 13)
           #{src 16500}#
           #{meta 16504}#
           #{body 16511}#))))
   (#{build-sequence 4294}#
     (lambda (#{src 28213}# #{exps 28214}#)
       (if (null? (cdr #{exps 28214}#))
         (car #{exps 28214}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 12)
           #{src 28213}#
           #{exps 28214}#))))
   (#{build-let 4295}#
     (lambda (#{src 16523}#
              #{ids 16524}#
              #{vars 16525}#
              #{val-exps 16526}#
              #{body-exp 16527}#)
       (begin
         (for-each
           #{maybe-name-value! 4278}#
           #{ids 16524}#
           #{val-exps 16526}#)
         (if (null? #{vars 16525}#)
           #{body-exp 16527}#
           (make-struct/no-tail
             (vector-ref %expanded-vtables 15)
             #{src 16523}#
             #{ids 16524}#
             #{vars 16525}#
             #{val-exps 16526}#
             #{body-exp 16527}#)))))
   (#{build-named-let 4296}#
     (lambda (#{src 16551}#
              #{ids 16552}#
              #{vars 16553}#
              #{val-exps 16554}#
              #{body-exp 16555}#)
       (let ((#{f 16556}# (car #{vars 16553}#))
             (#{f-name 16557}# (car #{ids 16552}#))
             (#{vars 16558}# (cdr #{vars 16553}#))
             (#{ids 16559}# (cdr #{ids 16552}#)))
         (let ((#{proc 16560}#
                 (let ((#{body 16580}#
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 14)
                           #{src 16551}#
                           #{ids 16559}#
                           #f
                           #f
                           #f
                           '()
                           #{vars 16558}#
                           #{body-exp 16555}#
                           #f)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 13)
                     #{src 16551}#
                     '()
                     #{body 16580}#))))
           (begin
             (if (if (struct? #{proc 16560}#)
                   (eq? (struct-vtable #{proc 16560}#)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((#{meta 16604}# (struct-ref #{proc 16560}# 1)))
                 (if (not (assq 'name #{meta 16604}#))
                   (let ((#{v 16611}#
                           (cons (cons 'name #{f-name 16557}#)
                                 #{meta 16604}#)))
                     (struct-set! #{proc 16560}# 1 #{v 16611}#)))))
             (for-each
               #{maybe-name-value! 4278}#
               #{ids 16559}#
               #{val-exps 16554}#)
             (let ((#{names 16635}# (list #{f-name 16557}#))
                   (#{gensyms 16636}# (list #{f 16556}#))
                   (#{vals 16637}# (list #{proc 16560}#))
                   (#{body 16638}#
                     (let ((#{fun-exp 16642}#
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 3)
                               #{src 16551}#
                               #{f-name 16557}#
                               #{f 16556}#)))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 11)
                         #{src 16551}#
                         #{fun-exp 16642}#
                         #{val-exps 16554}#))))
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 16)
                 #{src 16551}#
                 #f
                 #{names 16635}#
                 #{gensyms 16636}#
                 #{vals 16637}#
                 #{body 16638}#)))))))
   (#{build-letrec 4297}#
     (lambda (#{src 16658}#
              #{in-order? 16659}#
              #{ids 16660}#
              #{vars 16661}#
              #{val-exps 16662}#
              #{body-exp 16663}#)
       (if (null? #{vars 16661}#)
         #{body-exp 16663}#
         (begin
           (for-each
             #{maybe-name-value! 4278}#
             #{ids 16660}#
             #{val-exps 16662}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 16)
             #{src 16658}#
             #{in-order? 16659}#
             #{ids 16660}#
             #{vars 16661}#
             #{val-exps 16662}#
             #{body-exp 16663}#)))))
   (#{source-annotation 4306}#
     (lambda (#{x 16689}#)
       (if (if (vector? #{x 16689}#)
             (if (= (vector-length #{x 16689}#) 4)
               (eq? (vector-ref #{x 16689}# 0) 'syntax-object)
               #f)
             #f)
         (#{source-annotation 4306}#
           (vector-ref #{x 16689}# 1))
         (if (pair? #{x 16689}#)
           (let ((#{props 16704}# (source-properties #{x 16689}#)))
             (if (pair? #{props 16704}#) #{props 16704}# #f))
           #f))))
   (#{extend-env 4307}#
     (lambda (#{labels 16706}# #{bindings 16707}# #{r 16708}#)
       (if (null? #{labels 16706}#)
         #{r 16708}#
         (#{extend-env 4307}#
           (cdr #{labels 16706}#)
           (cdr #{bindings 16707}#)
           (cons (cons (car #{labels 16706}#)
                       (car #{bindings 16707}#))
                 #{r 16708}#)))))
   (#{extend-var-env 4308}#
     (lambda (#{labels 16709}# #{vars 16710}# #{r 16711}#)
       (if (null? #{labels 16709}#)
         #{r 16711}#
         (#{extend-var-env 4308}#
           (cdr #{labels 16709}#)
           (cdr #{vars 16710}#)
           (cons (cons (car #{labels 16709}#)
                       (cons 'lexical (car #{vars 16710}#)))
                 #{r 16711}#)))))
   (#{macros-only-env 4309}#
     (lambda (#{r 16712}#)
       (if (null? #{r 16712}#)
         '()
         (let ((#{a 16713}# (car #{r 16712}#)))
           (if (eq? (car (cdr #{a 16713}#)) 'macro)
             (cons #{a 16713}#
                   (#{macros-only-env 4309}# (cdr #{r 16712}#)))
             (#{macros-only-env 4309}# (cdr #{r 16712}#)))))))
   (#{global-extend 4311}#
     (lambda (#{type 16715}# #{sym 16716}# #{val 16717}#)
       (module-define!
         (current-module)
         #{sym 16716}#
         (make-syntax-transformer
           #{sym 16716}#
           #{type 16715}#
           #{val 16717}#))))
   (#{id? 4313}#
     (lambda (#{x 10549}#)
       (if (symbol? #{x 10549}#)
         #t
         (if (if (vector? #{x 10549}#)
               (if (= (vector-length #{x 10549}#) 4)
                 (eq? (vector-ref #{x 10549}# 0) 'syntax-object)
                 #f)
               #f)
           (symbol? (vector-ref #{x 10549}# 1))
           #f))))
   (#{gen-labels 4316}#
     (lambda (#{ls 16727}#)
       (if (null? #{ls 16727}#)
         '()
         (cons (symbol->string (gensym "i"))
               (#{gen-labels 4316}# (cdr #{ls 16727}#))))))
   (#{make-binding-wrap 4327}#
     (lambda (#{ids 16731}# #{labels 16732}# #{w 16733}#)
       (if (null? #{ids 16731}#)
         #{w 16733}#
         (cons (car #{w 16733}#)
               (cons (let ((#{labelvec 16734}#
                             (list->vector #{labels 16732}#)))
                       (let ((#{n 16735}# (vector-length #{labelvec 16734}#)))
                         (let ((#{symnamevec 16736}# (make-vector #{n 16735}#))
                               (#{marksvec 16737}# (make-vector #{n 16735}#)))
                           (begin
                             (letrec*
                               ((#{f 16738}#
                                  (lambda (#{ids 16741}# #{i 16742}#)
                                    (if (not (null? #{ids 16741}#))
                                      (call-with-values
                                        (lambda ()
                                          (let ((#{x 16745}#
                                                  (car #{ids 16741}#)))
                                            (if (if (vector? #{x 16745}#)
                                                  (if (= (vector-length
                                                           #{x 16745}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{x 16745}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (values
                                                (vector-ref #{x 16745}# 1)
                                                (let ((#{m1 16761}#
                                                        (car #{w 16733}#))
                                                      (#{m2 16762}#
                                                        (car (vector-ref
                                                               #{x 16745}#
                                                               2))))
                                                  (if (null? #{m2 16762}#)
                                                    #{m1 16761}#
                                                    (append
                                                      #{m1 16761}#
                                                      #{m2 16762}#))))
                                              (values
                                                #{x 16745}#
                                                (car #{w 16733}#)))))
                                        (lambda (#{symname 16782}#
                                                 #{marks 16783}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 16736}#
                                              #{i 16742}#
                                              #{symname 16782}#)
                                            (vector-set!
                                              #{marksvec 16737}#
                                              #{i 16742}#
                                              #{marks 16783}#)
                                            (#{f 16738}#
                                              (cdr #{ids 16741}#)
                                              (#{1+}# #{i 16742}#)))))))))
                               (#{f 16738}# #{ids 16731}# 0))
                             (vector
                               'ribcage
                               #{symnamevec 16736}#
                               #{marksvec 16737}#
                               #{labelvec 16734}#)))))
                     (cdr #{w 16733}#))))))
   (#{join-wraps 4329}#
     (lambda (#{w1 16792}# #{w2 16793}#)
       (let ((#{m1 16794}# (car #{w1 16792}#))
             (#{s1 16795}# (cdr #{w1 16792}#)))
         (if (null? #{m1 16794}#)
           (if (null? #{s1 16795}#)
             #{w2 16793}#
             (cons (car #{w2 16793}#)
                   (let ((#{m2 16802}# (cdr #{w2 16793}#)))
                     (if (null? #{m2 16802}#)
                       #{s1 16795}#
                       (append #{s1 16795}# #{m2 16802}#)))))
           (cons (let ((#{m2 16811}# (car #{w2 16793}#)))
                   (if (null? #{m2 16811}#)
                     #{m1 16794}#
                     (append #{m1 16794}# #{m2 16811}#)))
                 (let ((#{m2 16820}# (cdr #{w2 16793}#)))
                   (if (null? #{m2 16820}#)
                     #{s1 16795}#
                     (append #{s1 16795}# #{m2 16820}#))))))))
   (#{same-marks? 4331}#
     (lambda (#{x 16825}# #{y 16826}#)
       (if (eq? #{x 16825}# #{y 16826}#)
         (eq? #{x 16825}# #{y 16826}#)
         (if (not (null? #{x 16825}#))
           (if (not (null? #{y 16826}#))
             (if (eq? (car #{x 16825}#) (car #{y 16826}#))
               (#{same-marks? 4331}#
                 (cdr #{x 16825}#)
                 (cdr #{y 16826}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 4332}#
     (lambda (#{id 16834}# #{w 16835}#)
       (letrec*
         ((#{search 16836}#
            (lambda (#{sym 16897}# #{subst 16898}# #{marks 16899}#)
              (if (null? #{subst 16898}#)
                (values #f #{marks 16899}#)
                (let ((#{fst 16900}# (car #{subst 16898}#)))
                  (if (eq? #{fst 16900}# 'shift)
                    (#{search 16836}#
                      #{sym 16897}#
                      (cdr #{subst 16898}#)
                      (cdr #{marks 16899}#))
                    (let ((#{symnames 16902}# (vector-ref #{fst 16900}# 1)))
                      (if (vector? #{symnames 16902}#)
                        (let ((#{n 16914}# (vector-length #{symnames 16902}#)))
                          (letrec*
                            ((#{f 16915}#
                               (lambda (#{i 16917}#)
                                 (if (= #{i 16917}# #{n 16914}#)
                                   (#{search 16836}#
                                     #{sym 16897}#
                                     (cdr #{subst 16898}#)
                                     #{marks 16899}#)
                                   (if (if (eq? (vector-ref
                                                  #{symnames 16902}#
                                                  #{i 16917}#)
                                                #{sym 16897}#)
                                         (#{same-marks? 4331}#
                                           #{marks 16899}#
                                           (vector-ref
                                             (vector-ref #{fst 16900}# 2)
                                             #{i 16917}#))
                                         #f)
                                     (values
                                       (vector-ref
                                         (vector-ref #{fst 16900}# 3)
                                         #{i 16917}#)
                                       #{marks 16899}#)
                                     (#{f 16915}# (#{1+}# #{i 16917}#)))))))
                            (#{f 16915}# 0)))
                        (letrec*
                          ((#{f 16950}#
                             (lambda (#{symnames 16952}# #{i 16953}#)
                               (if (null? #{symnames 16952}#)
                                 (#{search 16836}#
                                   #{sym 16897}#
                                   (cdr #{subst 16898}#)
                                   #{marks 16899}#)
                                 (if (if (eq? (car #{symnames 16952}#)
                                              #{sym 16897}#)
                                       (#{same-marks? 4331}#
                                         #{marks 16899}#
                                         (list-ref
                                           (vector-ref #{fst 16900}# 2)
                                           #{i 16953}#))
                                       #f)
                                   (values
                                     (list-ref
                                       (vector-ref #{fst 16900}# 3)
                                       #{i 16953}#)
                                     #{marks 16899}#)
                                   (#{f 16950}#
                                     (cdr #{symnames 16952}#)
                                     (#{1+}# #{i 16953}#)))))))
                          (#{f 16950}# #{symnames 16902}# 0))))))))))
         (if (symbol? #{id 16834}#)
           (let ((#{t 16839}#
                   (#{search 16836}#
                     #{id 16834}#
                     (cdr #{w 16835}#)
                     (car #{w 16835}#))))
             (if #{t 16839}# #{t 16839}# #{id 16834}#))
           (if (if (vector? #{id 16834}#)
                 (if (= (vector-length #{id 16834}#) 4)
                   (eq? (vector-ref #{id 16834}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{id 16854}# (vector-ref #{id 16834}# 1))
                   (#{w1 16855}# (vector-ref #{id 16834}# 2)))
               (let ((#{marks 16856}#
                       (let ((#{m1 16866}# (car #{w 16835}#))
                             (#{m2 16867}# (car #{w1 16855}#)))
                         (if (null? #{m2 16867}#)
                           #{m1 16866}#
                           (append #{m1 16866}# #{m2 16867}#)))))
                 (call-with-values
                   (lambda ()
                     (#{search 16836}#
                       #{id 16854}#
                       (cdr #{w 16835}#)
                       #{marks 16856}#))
                   (lambda (#{new-id 16883}# #{marks 16884}#)
                     (if #{new-id 16883}#
                       #{new-id 16883}#
                       (let ((#{t 16892}#
                               (#{search 16836}#
                                 #{id 16854}#
                                 (cdr #{w1 16855}#)
                                 #{marks 16884}#)))
                         (if #{t 16892}# #{t 16892}# #{id 16854}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 16834}#))))))
   (#{valid-bound-ids? 4335}#
     (lambda (#{ids 16975}#)
       (if (letrec*
             ((#{all-ids? 16976}#
                (lambda (#{ids 17138}#)
                  (if (null? #{ids 17138}#)
                    (null? #{ids 17138}#)
                    (if (let ((#{x 17149}# (car #{ids 17138}#)))
                          (if (symbol? #{x 17149}#)
                            #t
                            (if (if (vector? #{x 17149}#)
                                  (if (= (vector-length #{x 17149}#) 4)
                                    (eq? (vector-ref #{x 17149}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{x 17149}# 1))
                              #f)))
                      (#{all-ids? 16976}# (cdr #{ids 17138}#))
                      #f)))))
             (#{all-ids? 16976}# #{ids 16975}#))
         (#{distinct-bound-ids? 4336}# #{ids 16975}#)
         #f)))
   (#{distinct-bound-ids? 4336}#
     (lambda (#{ids 17281}#)
       (letrec*
         ((#{distinct? 17282}#
            (lambda (#{ids 17398}#)
              (if (null? #{ids 17398}#)
                (null? #{ids 17398}#)
                (if (not (#{bound-id-member? 4337}#
                           (car #{ids 17398}#)
                           (cdr #{ids 17398}#)))
                  (#{distinct? 17282}# (cdr #{ids 17398}#))
                  #f)))))
         (#{distinct? 17282}# #{ids 17281}#))))
   (#{bound-id-member? 4337}#
     (lambda (#{x 17618}# #{list 17619}#)
       (if (not (null? #{list 17619}#))
         (let ((#{t 17620}#
                 (let ((#{j 17701}# (car #{list 17619}#)))
                   (if (if (if (vector? #{x 17618}#)
                             (if (= (vector-length #{x 17618}#) 4)
                               (eq? (vector-ref #{x 17618}# 0) 'syntax-object)
                               #f)
                             #f)
                         (if (vector? #{j 17701}#)
                           (if (= (vector-length #{j 17701}#) 4)
                             (eq? (vector-ref #{j 17701}# 0) 'syntax-object)
                             #f)
                           #f)
                         #f)
                     (if (eq? (vector-ref #{x 17618}# 1)
                              (vector-ref #{j 17701}# 1))
                       (#{same-marks? 4331}#
                         (car (vector-ref #{x 17618}# 2))
                         (car (vector-ref #{j 17701}# 2)))
                       #f)
                     (eq? #{x 17618}# #{j 17701}#)))))
           (if #{t 17620}#
             #{t 17620}#
             (#{bound-id-member? 4337}#
               #{x 17618}#
               (cdr #{list 17619}#))))
         #f)))
   (#{wrap 4338}#
     (lambda (#{x 17745}# #{w 17746}# #{defmod 17747}#)
       (if (if (null? (car #{w 17746}#))
             (null? (cdr #{w 17746}#))
             #f)
         #{x 17745}#
         (if (if (vector? #{x 17745}#)
               (if (= (vector-length #{x 17745}#) 4)
                 (eq? (vector-ref #{x 17745}# 0) 'syntax-object)
                 #f)
               #f)
           (let ((#{expression 17761}# (vector-ref #{x 17745}# 1))
                 (#{wrap 17762}#
                   (#{join-wraps 4329}#
                     #{w 17746}#
                     (vector-ref #{x 17745}# 2)))
                 (#{module 17763}# (vector-ref #{x 17745}# 3)))
             (vector
               'syntax-object
               #{expression 17761}#
               #{wrap 17762}#
               #{module 17763}#))
           (if (null? #{x 17745}#)
             #{x 17745}#
             (vector
               'syntax-object
               #{x 17745}#
               #{w 17746}#
               #{defmod 17747}#))))))
   (#{source-wrap 4339}#
     (lambda (#{x 17780}#
              #{w 17781}#
              #{s 17782}#
              #{defmod 17783}#)
       (#{wrap 4338}#
         (begin
           (if (if (pair? #{x 17780}#) #{s 17782}# #f)
             (set-source-properties! #{x 17780}# #{s 17782}#))
           #{x 17780}#)
         #{w 17781}#
         #{defmod 17783}#)))
   (#{expand-sequence 4340}#
     (lambda (#{body 28219}#
              #{r 28220}#
              #{w 28221}#
              #{s 28222}#
              #{mod 28223}#)
       (#{build-sequence 4294}#
         #{s 28222}#
         (letrec*
           ((#{dobody 28308}#
              (lambda (#{body 28388}#
                       #{r 28389}#
                       #{w 28390}#
                       #{mod 28391}#)
                (if (null? #{body 28388}#)
                  '()
                  (let ((#{first 28392}#
                          (#{expand 4345}#
                            (car #{body 28388}#)
                            #{r 28389}#
                            #{w 28390}#
                            #{mod 28391}#)))
                    (cons #{first 28392}#
                          (#{dobody 28308}#
                            (cdr #{body 28388}#)
                            #{r 28389}#
                            #{w 28390}#
                            #{mod 28391}#)))))))
           (#{dobody 28308}#
             #{body 28219}#
             #{r 28220}#
             #{w 28221}#
             #{mod 28223}#)))))
   (#{expand-top-sequence 4341}#
     (lambda (#{body 17801}#
              #{r 17802}#
              #{w 17803}#
              #{s 17804}#
              #{m 17805}#
              #{esew 17806}#
              #{mod 17807}#)
       (letrec*
         ((#{scan 17808}#
            (lambda (#{body 17939}#
                     #{r 17940}#
                     #{w 17941}#
                     #{s 17942}#
                     #{m 17943}#
                     #{esew 17944}#
                     #{mod 17945}#
                     #{exps 17946}#)
              (if (null? #{body 17939}#)
                #{exps 17946}#
                (call-with-values
                  (lambda ()
                    (call-with-values
                      (lambda ()
                        (let ((#{e 17947}# (car #{body 17939}#)))
                          (#{syntax-type 4344}#
                            #{e 17947}#
                            #{r 17940}#
                            #{w 17941}#
                            (let ((#{t 17951}#
                                    (#{source-annotation 4306}# #{e 17947}#)))
                              (if #{t 17951}# #{t 17951}# #{s 17942}#))
                            #f
                            #{mod 17945}#
                            #f)))
                      (lambda (#{type 18211}#
                               #{value 18212}#
                               #{e 18213}#
                               #{w 18214}#
                               #{s 18215}#
                               #{mod 18216}#)
                        (if (eqv? #{type 18211}# 'begin-form)
                          (let ((#{tmp 18221}#
                                  ($sc-dispatch #{e 18213}# '(_))))
                            (if #{tmp 18221}#
                              (@apply (lambda () #{exps 17946}#) #{tmp 18221}#)
                              (let ((#{tmp 18225}#
                                      ($sc-dispatch
                                        #{e 18213}#
                                        '(_ any . each-any))))
                                (if #{tmp 18225}#
                                  (@apply
                                    (lambda (#{e1 18229}# #{e2 18230}#)
                                      (#{scan 17808}#
                                        (cons #{e1 18229}# #{e2 18230}#)
                                        #{r 17940}#
                                        #{w 18214}#
                                        #{s 18215}#
                                        #{m 17943}#
                                        #{esew 17944}#
                                        #{mod 18216}#
                                        #{exps 17946}#))
                                    #{tmp 18225}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 18213}#)))))
                          (if (eqv? #{type 18211}# 'local-syntax-form)
                            (#{expand-local-syntax 4350}#
                              #{value 18212}#
                              #{e 18213}#
                              #{r 17940}#
                              #{w 18214}#
                              #{s 18215}#
                              #{mod 18216}#
                              (lambda (#{body 18245}#
                                       #{r 18246}#
                                       #{w 18247}#
                                       #{s 18248}#
                                       #{mod 18249}#)
                                (#{scan 17808}#
                                  #{body 18245}#
                                  #{r 18246}#
                                  #{w 18247}#
                                  #{s 18248}#
                                  #{m 17943}#
                                  #{esew 17944}#
                                  #{mod 18249}#
                                  #{exps 17946}#)))
                            (if (eqv? #{type 18211}# 'eval-when-form)
                              (let ((#{tmp 18254}#
                                      ($sc-dispatch
                                        #{e 18213}#
                                        '(_ each-any any . each-any))))
                                (if #{tmp 18254}#
                                  (@apply
                                    (lambda (#{x 18258}#
                                             #{e1 18259}#
                                             #{e2 18260}#)
                                      (let ((#{when-list 18261}#
                                              (#{expand-when-list 4343}#
                                                #{e 18213}#
                                                #{x 18258}#
                                                #{w 18214}#))
                                            (#{body 18262}#
                                              (cons #{e1 18259}#
                                                    #{e2 18260}#)))
                                        (if (eq? #{m 17943}# 'e)
                                          (if (memq 'eval #{when-list 18261}#)
                                            (#{scan 17808}#
                                              #{body 18262}#
                                              #{r 17940}#
                                              #{w 18214}#
                                              #{s 18215}#
                                              (if (memq 'expand
                                                        #{when-list 18261}#)
                                                'c&e
                                                'e)
                                              '(eval)
                                              #{mod 18216}#
                                              #{exps 17946}#)
                                            (begin
                                              (if (memq 'expand
                                                        #{when-list 18261}#)
                                                (let ((#{x 18269}#
                                                        (#{expand-top-sequence 4341}#
                                                          #{body 18262}#
                                                          #{r 17940}#
                                                          #{w 18214}#
                                                          #{s 18215}#
                                                          'e
                                                          '(eval)
                                                          #{mod 18216}#)))
                                                  (primitive-eval
                                                    #{x 18269}#)))
                                              (values #{exps 17946}#)))
                                          (if (memq 'load #{when-list 18261}#)
                                            (if (let ((#{t 18271}#
                                                        (memq 'compile
                                                              #{when-list 18261}#)))
                                                  (if #{t 18271}#
                                                    #{t 18271}#
                                                    (let ((#{t 18273}#
                                                            (memq 'expand
                                                                  #{when-list 18261}#)))
                                                      (if #{t 18273}#
                                                        #{t 18273}#
                                                        (if (eq? #{m 17943}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 18261}#)
                                                          #f)))))
                                              (#{scan 17808}#
                                                #{body 18262}#
                                                #{r 17940}#
                                                #{w 18214}#
                                                #{s 18215}#
                                                'c&e
                                                '(compile load)
                                                #{mod 18216}#
                                                #{exps 17946}#)
                                              (if (if (eq? #{m 17943}# 'c)
                                                    #t
                                                    (eq? #{m 17943}# 'c&e))
                                                (#{scan 17808}#
                                                  #{body 18262}#
                                                  #{r 17940}#
                                                  #{w 18214}#
                                                  #{s 18215}#
                                                  'c
                                                  '(load)
                                                  #{mod 18216}#
                                                  #{exps 17946}#)
                                                (values #{exps 17946}#)))
                                            (if (let ((#{t 18283}#
                                                        (memq 'compile
                                                              #{when-list 18261}#)))
                                                  (if #{t 18283}#
                                                    #{t 18283}#
                                                    (let ((#{t 18285}#
                                                            (memq 'expand
                                                                  #{when-list 18261}#)))
                                                      (if #{t 18285}#
                                                        #{t 18285}#
                                                        (if (eq? #{m 17943}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 18261}#)
                                                          #f)))))
                                              (begin
                                                (let ((#{x 18290}#
                                                        (#{expand-top-sequence 4341}#
                                                          #{body 18262}#
                                                          #{r 17940}#
                                                          #{w 18214}#
                                                          #{s 18215}#
                                                          'e
                                                          '(eval)
                                                          #{mod 18216}#)))
                                                  (primitive-eval #{x 18290}#))
                                                (values #{exps 17946}#))
                                              (values #{exps 17946}#))))))
                                    #{tmp 18254}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 18213}#)))
                              (if (eqv? #{type 18211}# 'define-syntax-form)
                                (let ((#{n 18301}#
                                        (#{id-var-name 4332}#
                                          #{value 18212}#
                                          #{w 18214}#))
                                      (#{r 18302}#
                                        (#{macros-only-env 4309}#
                                          #{r 17940}#)))
                                  (if (eqv? #{m 17943}# 'c)
                                    (if (memq 'compile #{esew 17944}#)
                                      (let ((#{e 18306}#
                                              (#{expand-install-global 4342}#
                                                #{n 18301}#
                                                (#{expand 4345}#
                                                  #{e 18213}#
                                                  #{r 18302}#
                                                  #{w 18214}#
                                                  #{mod 18216}#))))
                                        (begin
                                          (#{top-level-eval-hook 4273}#
                                            #{e 18306}#
                                            #{mod 18216}#)
                                          (if (memq 'load #{esew 17944}#)
                                            (values
                                              (cons #{e 18306}#
                                                    #{exps 17946}#))
                                            (values #{exps 17946}#))))
                                      (if (memq 'load #{esew 17944}#)
                                        (values
                                          (cons (#{expand-install-global 4342}#
                                                  #{n 18301}#
                                                  (#{expand 4345}#
                                                    #{e 18213}#
                                                    #{r 18302}#
                                                    #{w 18214}#
                                                    #{mod 18216}#))
                                                #{exps 17946}#))
                                        (values #{exps 17946}#)))
                                    (if (eqv? #{m 17943}# 'c&e)
                                      (let ((#{e 18763}#
                                              (#{expand-install-global 4342}#
                                                #{n 18301}#
                                                (#{expand 4345}#
                                                  #{e 18213}#
                                                  #{r 18302}#
                                                  #{w 18214}#
                                                  #{mod 18216}#))))
                                        (begin
                                          (#{top-level-eval-hook 4273}#
                                            #{e 18763}#
                                            #{mod 18216}#)
                                          (values
                                            (cons #{e 18763}#
                                                  #{exps 17946}#))))
                                      (begin
                                        (if (memq 'eval #{esew 17944}#)
                                          (#{top-level-eval-hook 4273}#
                                            (#{expand-install-global 4342}#
                                              #{n 18301}#
                                              (#{expand 4345}#
                                                #{e 18213}#
                                                #{r 18302}#
                                                #{w 18214}#
                                                #{mod 18216}#))
                                            #{mod 18216}#))
                                        (values #{exps 17946}#)))))
                                (if (eqv? #{type 18211}# 'define-form)
                                  (let ((#{n 19413}#
                                          (#{id-var-name 4332}#
                                            #{value 18212}#
                                            #{w 18214}#)))
                                    (let ((#{type 19414}#
                                            (car (let ((#{t 20183}#
                                                         (assq #{n 19413}#
                                                               #{r 17940}#)))
                                                   (if #{t 20183}#
                                                     (cdr #{t 20183}#)
                                                     (if (symbol? #{n 19413}#)
                                                       (let ((#{t 20188}#
                                                               (begin
                                                                 (if (if (not #{mod 18216}#)
                                                                       (current-module)
                                                                       #f)
                                                                   (warn "module system is booted, we should have a module"
                                                                         #{n 19413}#))
                                                                 (let ((#{v 20225}#
                                                                         (module-variable
                                                                           (if #{mod 18216}#
                                                                             (resolve-module
                                                                               (cdr #{mod 18216}#))
                                                                             (current-module))
                                                                           #{n 19413}#)))
                                                                   (if #{v 20225}#
                                                                     (if (variable-bound?
                                                                           #{v 20225}#)
                                                                       (let ((#{val 20234}#
                                                                               (variable-ref
                                                                                 #{v 20225}#)))
                                                                         (if (macro?
                                                                               #{val 20234}#)
                                                                           (if (macro-type
                                                                                 #{val 20234}#)
                                                                             (cons (macro-type
                                                                                     #{val 20234}#)
                                                                                   (macro-binding
                                                                                     #{val 20234}#))
                                                                             #f)
                                                                           #f))
                                                                       #f)
                                                                     #f)))))
                                                         (if #{t 20188}#
                                                           #{t 20188}#
                                                           '(global)))
                                                       '(displaced-lexical)))))))
                                      (if (let ((#{t 19448}# #{type 19414}#))
                                            (if (eqv? #{t 19448}# 'global)
                                              #t
                                              (if (eqv? #{t 19448}# 'core)
                                                #t
                                                (if (eqv? #{t 19448}# 'macro)
                                                  #t
                                                  (eqv? #{t 19448}#
                                                        'module-ref)))))
                                        (begin
                                          (if (if (if (eq? #{m 17943}# 'c)
                                                    #t
                                                    (eq? #{m 17943}# 'c&e))
                                                (if (not (module-local-variable
                                                           (current-module)
                                                           #{n 19413}#))
                                                  (current-module)
                                                  #f)
                                                #f)
                                            (let ((#{old 19612}#
                                                    (module-variable
                                                      (current-module)
                                                      #{n 19413}#)))
                                              (if (if (variable? #{old 19612}#)
                                                    (variable-bound?
                                                      #{old 19612}#)
                                                    #f)
                                                (module-define!
                                                  (current-module)
                                                  #{n 19413}#
                                                  (variable-ref #{old 19612}#))
                                                (module-add!
                                                  (current-module)
                                                  #{n 19413}#
                                                  (make-undefined-variable)))))
                                          (values
                                            (cons (if (eq? #{m 17943}# 'c&e)
                                                    (let ((#{x 19614}#
                                                            (#{build-global-definition 4288}#
                                                              #{s 18215}#
                                                              #{n 19413}#
                                                              (#{expand 4345}#
                                                                #{e 18213}#
                                                                #{r 17940}#
                                                                #{w 18214}#
                                                                #{mod 18216}#))))
                                                      (begin
                                                        (#{top-level-eval-hook 4273}#
                                                          #{x 19614}#
                                                          #{mod 18216}#)
                                                        #{x 19614}#))
                                                    (lambda ()
                                                      (#{build-global-definition 4288}#
                                                        #{s 18215}#
                                                        #{n 19413}#
                                                        (#{expand 4345}#
                                                          #{e 18213}#
                                                          #{r 17940}#
                                                          #{w 18214}#
                                                          #{mod 18216}#))))
                                                  #{exps 17946}#)))
                                        (if (let ((#{t 20110}# #{type 19414}#))
                                              (eqv? #{t 20110}#
                                                    'displaced-lexical))
                                          (syntax-violation
                                            #f
                                            "identifier out of context"
                                            #{e 18213}#
                                            (#{wrap 4338}#
                                              #{value 18212}#
                                              #{w 18214}#
                                              #{mod 18216}#))
                                          (syntax-violation
                                            #f
                                            "cannot define keyword at top level"
                                            #{e 18213}#
                                            (#{wrap 4338}#
                                              #{value 18212}#
                                              #{w 18214}#
                                              #{mod 18216}#))))))
                                  (values
                                    (cons (if (eq? #{m 17943}# 'c&e)
                                            (let ((#{x 20245}#
                                                    (#{expand-expr 4346}#
                                                      #{type 18211}#
                                                      #{value 18212}#
                                                      #{e 18213}#
                                                      #{r 17940}#
                                                      #{w 18214}#
                                                      #{s 18215}#
                                                      #{mod 18216}#)))
                                              (begin
                                                (primitive-eval #{x 20245}#)
                                                #{x 20245}#))
                                            (lambda ()
                                              (#{expand-expr 4346}#
                                                #{type 18211}#
                                                #{value 18212}#
                                                #{e 18213}#
                                                #{r 17940}#
                                                #{w 18214}#
                                                #{s 18215}#
                                                #{mod 18216}#)))
                                          #{exps 17946}#))))))))))
                  (lambda (#{exps 20254}#)
                    (#{scan 17808}#
                      (cdr #{body 17939}#)
                      #{r 17940}#
                      #{w 17941}#
                      #{s 17942}#
                      #{m 17943}#
                      #{esew 17944}#
                      #{mod 17945}#
                      #{exps 20254}#)))))))
         (call-with-values
           (lambda ()
             (#{scan 17808}#
               #{body 17801}#
               #{r 17802}#
               #{w 17803}#
               #{s 17804}#
               #{m 17805}#
               #{esew 17806}#
               #{mod 17807}#
               '()))
           (lambda (#{exps 17811}#)
             (if (null? #{exps 17811}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 0)
                 #{s 17804}#)
               (#{build-sequence 4294}#
                 #{s 17804}#
                 (letrec*
                   ((#{lp 17851}#
                      (lambda (#{in 17935}# #{out 17936}#)
                        (if (null? #{in 17935}#)
                          #{out 17936}#
                          (let ((#{e 17937}# (car #{in 17935}#)))
                            (#{lp 17851}#
                              (cdr #{in 17935}#)
                              (cons (if (procedure? #{e 17937}#)
                                      (#{e 17937}#)
                                      #{e 17937}#)
                                    #{out 17936}#)))))))
                   (#{lp 17851}# #{exps 17811}# '())))))))))
   (#{expand-install-global 4342}#
     (lambda (#{name 20255}# #{e 20256}#)
       (let ((#{exp 20262}#
               (let ((#{fun-exp 20272}#
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'make-syntax-transformer)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'make-syntax-transformer
                           #f)))
                     (#{arg-exps 20273}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #{name 20255}#)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               'macro)
                             #{e 20256}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 11)
                   #f
                   #{fun-exp 20272}#
                   #{arg-exps 20273}#))))
         (begin
           (if (if (struct? #{exp 20262}#)
                 (eq? (struct-vtable #{exp 20262}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta 20314}# (struct-ref #{exp 20262}# 1)))
               (if (not (assq 'name #{meta 20314}#))
                 (let ((#{v 20321}#
                         (cons (cons 'name #{name 20255}#) #{meta 20314}#)))
                   (struct-set! #{exp 20262}# 1 #{v 20321}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #f
             #{name 20255}#
             #{exp 20262}#)))))
   (#{expand-when-list 4343}#
     (lambda (#{e 20332}# #{when-list 20333}# #{w 20334}#)
       (letrec*
         ((#{f 20335}#
            (lambda (#{when-list 20338}# #{situations 20339}#)
              (if (null? #{when-list 20338}#)
                #{situations 20339}#
                (#{f 20335}#
                  (cdr #{when-list 20338}#)
                  (cons (let ((#{x 20340}# (car #{when-list 20338}#)))
                          (if (if (eq? (if (if (vector? #{x 20340}#)
                                             (if (= (vector-length #{x 20340}#)
                                                    4)
                                               (eq? (vector-ref #{x 20340}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (vector-ref #{x 20340}# 1)
                                         #{x 20340}#)
                                       (if (if (= (vector-length
                                                    '#(syntax-object
                                                       compile
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i1754"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f
                                                            when-list
                                                            situations)
                                                          #((top) (top) (top))
                                                          #("i1748"
                                                            "i1749"
                                                            "i1750"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(e when-list w)
                                                          #((top) (top) (top))
                                                          #("i1745"
                                                            "i1746"
                                                            "i1747"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            expand-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i467"
                                                           "i465"
                                                           "i463"
                                                           "i461"
                                                           "i459"
                                                           "i457"
                                                           "i455"
                                                           "i453"
                                                           "i451"
                                                           "i449"
                                                           "i447"
                                                           "i445"
                                                           "i443"
                                                           "i441"
                                                           "i439"
                                                           "i437"
                                                           "i435"
                                                           "i433"
                                                           "i431"
                                                           "i429"
                                                           "i427"
                                                           "i425"
                                                           "i423"
                                                           "i421"
                                                           "i419"
                                                           "i417"
                                                           "i415"
                                                           "i413"
                                                           "i411"
                                                           "i409"
                                                           "i407"
                                                           "i405"
                                                           "i403"
                                                           "i401"
                                                           "i399"
                                                           "i398"
                                                           "i396"
                                                           "i393"
                                                           "i392"
                                                           "i391"
                                                           "i389"
                                                           "i388"
                                                           "i386"
                                                           "i384"
                                                           "i382"
                                                           "i380"
                                                           "i378"
                                                           "i376"
                                                           "i374"
                                                           "i372"
                                                           "i369"
                                                           "i367"
                                                           "i366"
                                                           "i364"
                                                           "i362"
                                                           "i360"
                                                           "i358"
                                                           "i357"
                                                           "i356"
                                                           "i355"
                                                           "i353"
                                                           "i352"
                                                           "i349"
                                                           "i347"
                                                           "i345"
                                                           "i343"
                                                           "i341"
                                                           "i339"
                                                           "i337"
                                                           "i336"
                                                           "i335"
                                                           "i333"
                                                           "i331"
                                                           "i330"
                                                           "i327"
                                                           "i326"
                                                           "i324"
                                                           "i322"
                                                           "i320"
                                                           "i318"
                                                           "i316"
                                                           "i314"
                                                           "i312"
                                                           "i310"
                                                           "i308"
                                                           "i305"
                                                           "i303"
                                                           "i301"
                                                           "i299"
                                                           "i297"
                                                           "i295"
                                                           "i293"
                                                           "i291"
                                                           "i289"
                                                           "i287"
                                                           "i285"
                                                           "i283"
                                                           "i281"
                                                           "i279"
                                                           "i277"
                                                           "i275"
                                                           "i273"
                                                           "i271"
                                                           "i269"
                                                           "i267"
                                                           "i265"
                                                           "i263"
                                                           "i261"
                                                           "i260"
                                                           "i257"
                                                           "i255"
                                                           "i254"
                                                           "i253"
                                                           "i252"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i242"
                                                           "i240"
                                                           "i238"
                                                           "i236"
                                                           "i234"
                                                           "i232"
                                                           "i230"
                                                           "i228"
                                                           "i226"
                                                           "i224"
                                                           "i222"
                                                           "i220"
                                                           "i218"
                                                           "i216"
                                                           "i214"
                                                           "i212"
                                                           "i210"
                                                           "i208"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("i46" "i45" "i44")))
                                                       (hygiene guile)))
                                                  4)
                                             #t
                                             #f)
                                         'compile
                                         '#(syntax-object
                                            compile
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i1754"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(f when-list situations)
                                               #((top) (top) (top))
                                               #("i1748" "i1749" "i1750"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(e when-list w)
                                               #((top) (top) (top))
                                               #("i1745" "i1746" "i1747"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 expand-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i398"
                                                "i396"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i389"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i372"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i356"
                                                "i355"
                                                "i353"
                                                "i352"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i336"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i330"
                                                "i327"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i310"
                                                "i308"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i260"
                                                "i257"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i252"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))))
                                (eq? (#{id-var-name 4332}# #{x 20340}# '(()))
                                     (#{id-var-name 4332}#
                                       '#(syntax-object
                                          compile
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i1754"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f when-list situations)
                                             #((top) (top) (top))
                                             #("i1748" "i1749" "i1750"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(e when-list w)
                                             #((top) (top) (top))
                                             #("i1745" "i1746" "i1747"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               expand-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))
                                       '(())))
                                #f)
                            'compile
                            (if (if (eq? (if (if (vector? #{x 20340}#)
                                               (if (= (vector-length
                                                        #{x 20340}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 20340}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (vector-ref #{x 20340}# 1)
                                           #{x 20340}#)
                                         (if (if (= (vector-length
                                                      '#(syntax-object
                                                         load
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i1754"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(f
                                                              when-list
                                                              situations)
                                                            #((top)
                                                              (top)
                                                              (top))
                                                            #("i1748"
                                                              "i1749"
                                                              "i1750"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e when-list w)
                                                            #((top)
                                                              (top)
                                                              (top))
                                                            #("i1745"
                                                              "i1746"
                                                              "i1747"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              expand-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile)))
                                                    4)
                                               #t
                                               #f)
                                           'load
                                           '#(syntax-object
                                              load
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i1754"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(f when-list situations)
                                                 #((top) (top) (top))
                                                 #("i1748" "i1749" "i1750"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(e when-list w)
                                                 #((top) (top) (top))
                                                 #("i1745" "i1746" "i1747"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-application
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   expand-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i467"
                                                  "i465"
                                                  "i463"
                                                  "i461"
                                                  "i459"
                                                  "i457"
                                                  "i455"
                                                  "i453"
                                                  "i451"
                                                  "i449"
                                                  "i447"
                                                  "i445"
                                                  "i443"
                                                  "i441"
                                                  "i439"
                                                  "i437"
                                                  "i435"
                                                  "i433"
                                                  "i431"
                                                  "i429"
                                                  "i427"
                                                  "i425"
                                                  "i423"
                                                  "i421"
                                                  "i419"
                                                  "i417"
                                                  "i415"
                                                  "i413"
                                                  "i411"
                                                  "i409"
                                                  "i407"
                                                  "i405"
                                                  "i403"
                                                  "i401"
                                                  "i399"
                                                  "i398"
                                                  "i396"
                                                  "i393"
                                                  "i392"
                                                  "i391"
                                                  "i389"
                                                  "i388"
                                                  "i386"
                                                  "i384"
                                                  "i382"
                                                  "i380"
                                                  "i378"
                                                  "i376"
                                                  "i374"
                                                  "i372"
                                                  "i369"
                                                  "i367"
                                                  "i366"
                                                  "i364"
                                                  "i362"
                                                  "i360"
                                                  "i358"
                                                  "i357"
                                                  "i356"
                                                  "i355"
                                                  "i353"
                                                  "i352"
                                                  "i349"
                                                  "i347"
                                                  "i345"
                                                  "i343"
                                                  "i341"
                                                  "i339"
                                                  "i337"
                                                  "i336"
                                                  "i335"
                                                  "i333"
                                                  "i331"
                                                  "i330"
                                                  "i327"
                                                  "i326"
                                                  "i324"
                                                  "i322"
                                                  "i320"
                                                  "i318"
                                                  "i316"
                                                  "i314"
                                                  "i312"
                                                  "i310"
                                                  "i308"
                                                  "i305"
                                                  "i303"
                                                  "i301"
                                                  "i299"
                                                  "i297"
                                                  "i295"
                                                  "i293"
                                                  "i291"
                                                  "i289"
                                                  "i287"
                                                  "i285"
                                                  "i283"
                                                  "i281"
                                                  "i279"
                                                  "i277"
                                                  "i275"
                                                  "i273"
                                                  "i271"
                                                  "i269"
                                                  "i267"
                                                  "i265"
                                                  "i263"
                                                  "i261"
                                                  "i260"
                                                  "i257"
                                                  "i255"
                                                  "i254"
                                                  "i253"
                                                  "i252"
                                                  "i251"
                                                  "i249"
                                                  "i247"
                                                  "i245"
                                                  "i242"
                                                  "i240"
                                                  "i238"
                                                  "i236"
                                                  "i234"
                                                  "i232"
                                                  "i230"
                                                  "i228"
                                                  "i226"
                                                  "i224"
                                                  "i222"
                                                  "i220"
                                                  "i218"
                                                  "i216"
                                                  "i214"
                                                  "i212"
                                                  "i210"
                                                  "i208"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i46" "i45" "i44")))
                                              (hygiene guile))))
                                  (eq? (#{id-var-name 4332}# #{x 20340}# '(()))
                                       (#{id-var-name 4332}#
                                         '#(syntax-object
                                            load
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i1754"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(f when-list situations)
                                               #((top) (top) (top))
                                               #("i1748" "i1749" "i1750"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(e when-list w)
                                               #((top) (top) (top))
                                               #("i1745" "i1746" "i1747"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 expand-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i398"
                                                "i396"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i389"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i372"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i356"
                                                "i355"
                                                "i353"
                                                "i352"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i336"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i330"
                                                "i327"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i310"
                                                "i308"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i260"
                                                "i257"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i252"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))
                                         '(())))
                                  #f)
                              'load
                              (if (if (eq? (if (if (vector? #{x 20340}#)
                                                 (if (= (vector-length
                                                          #{x 20340}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 20340}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (vector-ref #{x 20340}# 1)
                                             #{x 20340}#)
                                           (if (if (= (vector-length
                                                        '#(syntax-object
                                                           eval
                                                           ((top)
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(x)
                                                              #((top))
                                                              #("i1754"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(f
                                                                when-list
                                                                situations)
                                                              #((top)
                                                                (top)
                                                                (top))
                                                              #("i1748"
                                                                "i1749"
                                                                "i1750"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e when-list w)
                                                              #((top)
                                                                (top)
                                                                (top))
                                                              #("i1745"
                                                                "i1746"
                                                                "i1747"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                expand-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i467"
                                                               "i465"
                                                               "i463"
                                                               "i461"
                                                               "i459"
                                                               "i457"
                                                               "i455"
                                                               "i453"
                                                               "i451"
                                                               "i449"
                                                               "i447"
                                                               "i445"
                                                               "i443"
                                                               "i441"
                                                               "i439"
                                                               "i437"
                                                               "i435"
                                                               "i433"
                                                               "i431"
                                                               "i429"
                                                               "i427"
                                                               "i425"
                                                               "i423"
                                                               "i421"
                                                               "i419"
                                                               "i417"
                                                               "i415"
                                                               "i413"
                                                               "i411"
                                                               "i409"
                                                               "i407"
                                                               "i405"
                                                               "i403"
                                                               "i401"
                                                               "i399"
                                                               "i398"
                                                               "i396"
                                                               "i393"
                                                               "i392"
                                                               "i391"
                                                               "i389"
                                                               "i388"
                                                               "i386"
                                                               "i384"
                                                               "i382"
                                                               "i380"
                                                               "i378"
                                                               "i376"
                                                               "i374"
                                                               "i372"
                                                               "i369"
                                                               "i367"
                                                               "i366"
                                                               "i364"
                                                               "i362"
                                                               "i360"
                                                               "i358"
                                                               "i357"
                                                               "i356"
                                                               "i355"
                                                               "i353"
                                                               "i352"
                                                               "i349"
                                                               "i347"
                                                               "i345"
                                                               "i343"
                                                               "i341"
                                                               "i339"
                                                               "i337"
                                                               "i336"
                                                               "i335"
                                                               "i333"
                                                               "i331"
                                                               "i330"
                                                               "i327"
                                                               "i326"
                                                               "i324"
                                                               "i322"
                                                               "i320"
                                                               "i318"
                                                               "i316"
                                                               "i314"
                                                               "i312"
                                                               "i310"
                                                               "i308"
                                                               "i305"
                                                               "i303"
                                                               "i301"
                                                               "i299"
                                                               "i297"
                                                               "i295"
                                                               "i293"
                                                               "i291"
                                                               "i289"
                                                               "i287"
                                                               "i285"
                                                               "i283"
                                                               "i281"
                                                               "i279"
                                                               "i277"
                                                               "i275"
                                                               "i273"
                                                               "i271"
                                                               "i269"
                                                               "i267"
                                                               "i265"
                                                               "i263"
                                                               "i261"
                                                               "i260"
                                                               "i257"
                                                               "i255"
                                                               "i254"
                                                               "i253"
                                                               "i252"
                                                               "i251"
                                                               "i249"
                                                               "i247"
                                                               "i245"
                                                               "i242"
                                                               "i240"
                                                               "i238"
                                                               "i236"
                                                               "i234"
                                                               "i232"
                                                               "i230"
                                                               "i228"
                                                               "i226"
                                                               "i224"
                                                               "i222"
                                                               "i220"
                                                               "i218"
                                                               "i216"
                                                               "i214"
                                                               "i212"
                                                               "i210"
                                                               "i208"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("i46"
                                                               "i45"
                                                               "i44")))
                                                           (hygiene guile)))
                                                      4)
                                                 #t
                                                 #f)
                                             'eval
                                             '#(syntax-object
                                                eval
                                                ((top)
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i1754"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f when-list situations)
                                                   #((top) (top) (top))
                                                   #("i1748" "i1749" "i1750"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(e when-list w)
                                                   #((top) (top) (top))
                                                   #("i1745" "i1746" "i1747"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     expand-lambda-case
                                                     lambda*-formals
                                                     expand-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     expand-void
                                                     eval-local-transformer
                                                     expand-local-syntax
                                                     expand-body
                                                     expand-macro
                                                     expand-application
                                                     expand-expr
                                                     expand
                                                     syntax-type
                                                     expand-when-list
                                                     expand-install-global
                                                     expand-top-sequence
                                                     expand-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     maybe-name-value!
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i467"
                                                    "i465"
                                                    "i463"
                                                    "i461"
                                                    "i459"
                                                    "i457"
                                                    "i455"
                                                    "i453"
                                                    "i451"
                                                    "i449"
                                                    "i447"
                                                    "i445"
                                                    "i443"
                                                    "i441"
                                                    "i439"
                                                    "i437"
                                                    "i435"
                                                    "i433"
                                                    "i431"
                                                    "i429"
                                                    "i427"
                                                    "i425"
                                                    "i423"
                                                    "i421"
                                                    "i419"
                                                    "i417"
                                                    "i415"
                                                    "i413"
                                                    "i411"
                                                    "i409"
                                                    "i407"
                                                    "i405"
                                                    "i403"
                                                    "i401"
                                                    "i399"
                                                    "i398"
                                                    "i396"
                                                    "i393"
                                                    "i392"
                                                    "i391"
                                                    "i389"
                                                    "i388"
                                                    "i386"
                                                    "i384"
                                                    "i382"
                                                    "i380"
                                                    "i378"
                                                    "i376"
                                                    "i374"
                                                    "i372"
                                                    "i369"
                                                    "i367"
                                                    "i366"
                                                    "i364"
                                                    "i362"
                                                    "i360"
                                                    "i358"
                                                    "i357"
                                                    "i356"
                                                    "i355"
                                                    "i353"
                                                    "i352"
                                                    "i349"
                                                    "i347"
                                                    "i345"
                                                    "i343"
                                                    "i341"
                                                    "i339"
                                                    "i337"
                                                    "i336"
                                                    "i335"
                                                    "i333"
                                                    "i331"
                                                    "i330"
                                                    "i327"
                                                    "i326"
                                                    "i324"
                                                    "i322"
                                                    "i320"
                                                    "i318"
                                                    "i316"
                                                    "i314"
                                                    "i312"
                                                    "i310"
                                                    "i308"
                                                    "i305"
                                                    "i303"
                                                    "i301"
                                                    "i299"
                                                    "i297"
                                                    "i295"
                                                    "i293"
                                                    "i291"
                                                    "i289"
                                                    "i287"
                                                    "i285"
                                                    "i283"
                                                    "i281"
                                                    "i279"
                                                    "i277"
                                                    "i275"
                                                    "i273"
                                                    "i271"
                                                    "i269"
                                                    "i267"
                                                    "i265"
                                                    "i263"
                                                    "i261"
                                                    "i260"
                                                    "i257"
                                                    "i255"
                                                    "i254"
                                                    "i253"
                                                    "i252"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i242"
                                                    "i240"
                                                    "i238"
                                                    "i236"
                                                    "i234"
                                                    "i232"
                                                    "i230"
                                                    "i228"
                                                    "i226"
                                                    "i224"
                                                    "i222"
                                                    "i220"
                                                    "i218"
                                                    "i216"
                                                    "i214"
                                                    "i212"
                                                    "i210"
                                                    "i208"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors)
                                                   ((top) (top) (top))
                                                   ("i46" "i45" "i44")))
                                                (hygiene guile))))
                                    (eq? (#{id-var-name 4332}#
                                           #{x 20340}#
                                           '(()))
                                         (#{id-var-name 4332}#
                                           '#(syntax-object
                                              eval
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i1754"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(f when-list situations)
                                                 #((top) (top) (top))
                                                 #("i1748" "i1749" "i1750"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(e when-list w)
                                                 #((top) (top) (top))
                                                 #("i1745" "i1746" "i1747"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-application
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   expand-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i467"
                                                  "i465"
                                                  "i463"
                                                  "i461"
                                                  "i459"
                                                  "i457"
                                                  "i455"
                                                  "i453"
                                                  "i451"
                                                  "i449"
                                                  "i447"
                                                  "i445"
                                                  "i443"
                                                  "i441"
                                                  "i439"
                                                  "i437"
                                                  "i435"
                                                  "i433"
                                                  "i431"
                                                  "i429"
                                                  "i427"
                                                  "i425"
                                                  "i423"
                                                  "i421"
                                                  "i419"
                                                  "i417"
                                                  "i415"
                                                  "i413"
                                                  "i411"
                                                  "i409"
                                                  "i407"
                                                  "i405"
                                                  "i403"
                                                  "i401"
                                                  "i399"
                                                  "i398"
                                                  "i396"
                                                  "i393"
                                                  "i392"
                                                  "i391"
                                                  "i389"
                                                  "i388"
                                                  "i386"
                                                  "i384"
                                                  "i382"
                                                  "i380"
                                                  "i378"
                                                  "i376"
                                                  "i374"
                                                  "i372"
                                                  "i369"
                                                  "i367"
                                                  "i366"
                                                  "i364"
                                                  "i362"
                                                  "i360"
                                                  "i358"
                                                  "i357"
                                                  "i356"
                                                  "i355"
                                                  "i353"
                                                  "i352"
                                                  "i349"
                                                  "i347"
                                                  "i345"
                                                  "i343"
                                                  "i341"
                                                  "i339"
                                                  "i337"
                                                  "i336"
                                                  "i335"
                                                  "i333"
                                                  "i331"
                                                  "i330"
                                                  "i327"
                                                  "i326"
                                                  "i324"
                                                  "i322"
                                                  "i320"
                                                  "i318"
                                                  "i316"
                                                  "i314"
                                                  "i312"
                                                  "i310"
                                                  "i308"
                                                  "i305"
                                                  "i303"
                                                  "i301"
                                                  "i299"
                                                  "i297"
                                                  "i295"
                                                  "i293"
                                                  "i291"
                                                  "i289"
                                                  "i287"
                                                  "i285"
                                                  "i283"
                                                  "i281"
                                                  "i279"
                                                  "i277"
                                                  "i275"
                                                  "i273"
                                                  "i271"
                                                  "i269"
                                                  "i267"
                                                  "i265"
                                                  "i263"
                                                  "i261"
                                                  "i260"
                                                  "i257"
                                                  "i255"
                                                  "i254"
                                                  "i253"
                                                  "i252"
                                                  "i251"
                                                  "i249"
                                                  "i247"
                                                  "i245"
                                                  "i242"
                                                  "i240"
                                                  "i238"
                                                  "i236"
                                                  "i234"
                                                  "i232"
                                                  "i230"
                                                  "i228"
                                                  "i226"
                                                  "i224"
                                                  "i222"
                                                  "i220"
                                                  "i218"
                                                  "i216"
                                                  "i214"
                                                  "i212"
                                                  "i210"
                                                  "i208"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i46" "i45" "i44")))
                                              (hygiene guile))
                                           '(())))
                                    #f)
                                'eval
                                (if (eq? (syntax->datum #{x 20340}#) 'expand)
                                  'expand
                                  (syntax-violation
                                    'eval-when
                                    "invalid situation"
                                    #{e 20332}#
                                    (#{wrap 4338}#
                                      #{x 20340}#
                                      #{w 20334}#
                                      #f)))))))
                        #{situations 20339}#))))))
         (#{f 20335}# #{when-list 20333}# '()))))
   (#{syntax-type 4344}#
     (lambda (#{e 20502}#
              #{r 20503}#
              #{w 20504}#
              #{s 20505}#
              #{rib 20506}#
              #{mod 20507}#
              #{for-car? 20508}#)
       (if (symbol? #{e 20502}#)
         (let ((#{n 20509}#
                 (#{id-var-name 4332}# #{e 20502}# #{w 20504}#)))
           (let ((#{b 20510}#
                   (let ((#{t 21085}# (assq #{n 20509}# #{r 20503}#)))
                     (if #{t 21085}#
                       (cdr #{t 21085}#)
                       (if (symbol? #{n 20509}#)
                         (let ((#{t 21090}#
                                 (begin
                                   (if (if (not #{mod 20507}#)
                                         (current-module)
                                         #f)
                                     (warn "module system is booted, we should have a module"
                                           #{n 20509}#))
                                   (let ((#{v 21127}#
                                           (module-variable
                                             (if #{mod 20507}#
                                               (resolve-module
                                                 (cdr #{mod 20507}#))
                                               (current-module))
                                             #{n 20509}#)))
                                     (if #{v 21127}#
                                       (if (variable-bound? #{v 21127}#)
                                         (let ((#{val 21136}#
                                                 (variable-ref #{v 21127}#)))
                                           (if (macro? #{val 21136}#)
                                             (if (macro-type #{val 21136}#)
                                               (cons (macro-type #{val 21136}#)
                                                     (macro-binding
                                                       #{val 21136}#))
                                               #f)
                                             #f))
                                         #f)
                                       #f)))))
                           (if #{t 21090}# #{t 21090}# '(global)))
                         '(displaced-lexical))))))
             (let ((#{type 20511}# (car #{b 20510}#)))
               (if (let ((#{t 20545}# #{type 20511}#))
                     (eqv? #{t 20545}# 'lexical))
                 (values
                   #{type 20511}#
                   (cdr #{b 20510}#)
                   #{e 20502}#
                   #{w 20504}#
                   #{s 20505}#
                   #{mod 20507}#)
                 (if (let ((#{t 20702}# #{type 20511}#))
                       (eqv? #{t 20702}# 'global))
                   (values
                     #{type 20511}#
                     #{n 20509}#
                     #{e 20502}#
                     #{w 20504}#
                     #{s 20505}#
                     #{mod 20507}#)
                   (if (let ((#{t 20828}# #{type 20511}#))
                         (eqv? #{t 20828}# 'macro))
                     (if #{for-car? 20508}#
                       (values
                         #{type 20511}#
                         (cdr #{b 20510}#)
                         #{e 20502}#
                         #{w 20504}#
                         #{s 20505}#
                         #{mod 20507}#)
                       (#{syntax-type 4344}#
                         (#{expand-macro 4348}#
                           (cdr #{b 20510}#)
                           #{e 20502}#
                           #{r 20503}#
                           #{w 20504}#
                           #{s 20505}#
                           #{rib 20506}#
                           #{mod 20507}#)
                         #{r 20503}#
                         '(())
                         #{s 20505}#
                         #{rib 20506}#
                         #{mod 20507}#
                         #f))
                     (values
                       #{type 20511}#
                       (cdr #{b 20510}#)
                       #{e 20502}#
                       #{w 20504}#
                       #{s 20505}#
                       #{mod 20507}#)))))))
         (if (pair? #{e 20502}#)
           (let ((#{first 21147}# (car #{e 20502}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 4344}#
                   #{first 21147}#
                   #{r 20503}#
                   #{w 20504}#
                   #{s 20505}#
                   #{rib 20506}#
                   #{mod 20507}#
                   #t))
               (lambda (#{ftype 21149}#
                        #{fval 21150}#
                        #{fe 21151}#
                        #{fw 21152}#
                        #{fs 21153}#
                        #{fmod 21154}#)
                 (if (eqv? #{ftype 21149}# 'lexical)
                   (values
                     'lexical-call
                     #{fval 21150}#
                     #{e 20502}#
                     #{w 20504}#
                     #{s 20505}#
                     #{mod 20507}#)
                   (if (eqv? #{ftype 21149}# 'global)
                     (values
                       'global-call
                       (vector
                         'syntax-object
                         #{fval 21150}#
                         #{w 20504}#
                         #{fmod 21154}#)
                       #{e 20502}#
                       #{w 20504}#
                       #{s 20505}#
                       #{mod 20507}#)
                     (if (eqv? #{ftype 21149}# 'macro)
                       (#{syntax-type 4344}#
                         (#{expand-macro 4348}#
                           #{fval 21150}#
                           #{e 20502}#
                           #{r 20503}#
                           #{w 20504}#
                           #{s 20505}#
                           #{rib 20506}#
                           #{mod 20507}#)
                         #{r 20503}#
                         '(())
                         #{s 20505}#
                         #{rib 20506}#
                         #{mod 20507}#
                         #{for-car? 20508}#)
                       (if (eqv? #{ftype 21149}# 'module-ref)
                         (call-with-values
                           (lambda ()
                             (#{fval 21150}#
                               #{e 20502}#
                               #{r 20503}#
                               #{w 20504}#))
                           (lambda (#{e 21175}#
                                    #{r 21176}#
                                    #{w 21177}#
                                    #{s 21178}#
                                    #{mod 21179}#)
                             (#{syntax-type 4344}#
                               #{e 21175}#
                               #{r 21176}#
                               #{w 21177}#
                               #{s 21178}#
                               #{rib 20506}#
                               #{mod 21179}#
                               #{for-car? 20508}#)))
                         (if (eqv? #{ftype 21149}# 'core)
                           (values
                             'core-form
                             #{fval 21150}#
                             #{e 20502}#
                             #{w 20504}#
                             #{s 20505}#
                             #{mod 20507}#)
                           (if (eqv? #{ftype 21149}# 'local-syntax)
                             (values
                               'local-syntax-form
                               #{fval 21150}#
                               #{e 20502}#
                               #{w 20504}#
                               #{s 20505}#
                               #{mod 20507}#)
                             (if (eqv? #{ftype 21149}# 'begin)
                               (values
                                 'begin-form
                                 #f
                                 #{e 20502}#
                                 #{w 20504}#
                                 #{s 20505}#
                                 #{mod 20507}#)
                               (if (eqv? #{ftype 21149}# 'eval-when)
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 20502}#
                                   #{w 20504}#
                                   #{s 20505}#
                                   #{mod 20507}#)
                                 (if (eqv? #{ftype 21149}# 'define)
                                   (let ((#{tmp 21196}#
                                           ($sc-dispatch
                                             #{e 20502}#
                                             '(_ any any))))
                                     (if (if #{tmp 21196}#
                                           (@apply
                                             (lambda (#{name 21200}#
                                                      #{val 21201}#)
                                               (if (symbol? #{name 21200}#)
                                                 #t
                                                 (if (if (vector?
                                                           #{name 21200}#)
                                                       (if (= (vector-length
                                                                #{name 21200}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{name 21200}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (symbol?
                                                     (vector-ref
                                                       #{name 21200}#
                                                       1))
                                                   #f)))
                                             #{tmp 21196}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 21228}# #{val 21229}#)
                                           (values
                                             'define-form
                                             #{name 21228}#
                                             #{val 21229}#
                                             #{w 20504}#
                                             #{s 20505}#
                                             #{mod 20507}#))
                                         #{tmp 21196}#)
                                       (let ((#{tmp 21230}#
                                               ($sc-dispatch
                                                 #{e 20502}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 21230}#
                                               (@apply
                                                 (lambda (#{name 21234}#
                                                          #{args 21235}#
                                                          #{e1 21236}#
                                                          #{e2 21237}#)
                                                   (if (if (symbol?
                                                             #{name 21234}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 21234}#)
                                                               (if (= (vector-length
                                                                        #{name 21234}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 21234}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 21234}#
                                                               1))
                                                           #f))
                                                     (#{valid-bound-ids? 4335}#
                                                       (letrec*
                                                         ((#{lvl 21386}#
                                                            (lambda (#{vars 21388}#
                                                                     #{ls 21389}#
                                                                     #{w 21390}#)
                                                              (if (pair? #{vars 21388}#)
                                                                (#{lvl 21386}#
                                                                  (cdr #{vars 21388}#)
                                                                  (cons (#{wrap 4338}#
                                                                          (car #{vars 21388}#)
                                                                          #{w 21390}#
                                                                          #f)
                                                                        #{ls 21389}#)
                                                                  #{w 21390}#)
                                                                (if (if (symbol?
                                                                          #{vars 21388}#)
                                                                      #t
                                                                      (if (if (vector?
                                                                                #{vars 21388}#)
                                                                            (if (= (vector-length
                                                                                     #{vars 21388}#)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     #{vars 21388}#
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (symbol?
                                                                          (vector-ref
                                                                            #{vars 21388}#
                                                                            1))
                                                                        #f))
                                                                  (cons (#{wrap 4338}#
                                                                          #{vars 21388}#
                                                                          #{w 21390}#
                                                                          #f)
                                                                        #{ls 21389}#)
                                                                  (if (null? #{vars 21388}#)
                                                                    #{ls 21389}#
                                                                    (if (if (vector?
                                                                              #{vars 21388}#)
                                                                          (if (= (vector-length
                                                                                   #{vars 21388}#)
                                                                                 4)
                                                                            (eq? (vector-ref
                                                                                   #{vars 21388}#
                                                                                   0)
                                                                                 'syntax-object)
                                                                            #f)
                                                                          #f)
                                                                      (#{lvl 21386}#
                                                                        (vector-ref
                                                                          #{vars 21388}#
                                                                          1)
                                                                        #{ls 21389}#
                                                                        (#{join-wraps 4329}#
                                                                          #{w 21390}#
                                                                          (vector-ref
                                                                            #{vars 21388}#
                                                                            2)))
                                                                      (cons #{vars 21388}#
                                                                            #{ls 21389}#))))))))
                                                         (#{lvl 21386}#
                                                           #{args 21235}#
                                                           '()
                                                           '(()))))
                                                     #f))
                                                 #{tmp 21230}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 21434}#
                                                      #{args 21435}#
                                                      #{e1 21436}#
                                                      #{e2 21437}#)
                                               (values
                                                 'define-form
                                                 (#{wrap 4338}#
                                                   #{name 21434}#
                                                   #{w 20504}#
                                                   #{mod 20507}#)
                                                 (let ((#{e 21443}#
                                                         (cons '#(syntax-object
                                                                  lambda
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(name
                                                                       args
                                                                       e1
                                                                       e2)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1855"
                                                                       "i1856"
                                                                       "i1857"
                                                                       "i1858"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(ftype
                                                                       fval
                                                                       fe
                                                                       fw
                                                                       fs
                                                                       fmod)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1808"
                                                                       "i1809"
                                                                       "i1810"
                                                                       "i1811"
                                                                       "i1812"
                                                                       "i1813"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(first)
                                                                     #((top))
                                                                     #("i1800"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(e
                                                                       r
                                                                       w
                                                                       s
                                                                       rib
                                                                       mod
                                                                       for-car?)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1772"
                                                                       "i1773"
                                                                       "i1774"
                                                                       "i1775"
                                                                       "i1776"
                                                                       "i1777"
                                                                       "i1778"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       expand-lambda-case
                                                                       lambda*-formals
                                                                       expand-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       expand-void
                                                                       eval-local-transformer
                                                                       expand-local-syntax
                                                                       expand-body
                                                                       expand-macro
                                                                       expand-application
                                                                       expand-expr
                                                                       expand
                                                                       syntax-type
                                                                       expand-when-list
                                                                       expand-install-global
                                                                       expand-top-sequence
                                                                       expand-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-application
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-sequence
                                                                       make-application
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i401"
                                                                      "i399"
                                                                      "i398"
                                                                      "i396"
                                                                      "i393"
                                                                      "i392"
                                                                      "i391"
                                                                      "i389"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i374"
                                                                      "i372"
                                                                      "i369"
                                                                      "i367"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i360"
                                                                      "i358"
                                                                      "i357"
                                                                      "i356"
                                                                      "i355"
                                                                      "i353"
                                                                      "i352"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i339"
                                                                      "i337"
                                                                      "i336"
                                                                      "i335"
                                                                      "i333"
                                                                      "i331"
                                                                      "i330"
                                                                      "i327"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i310"
                                                                      "i308"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i261"
                                                                      "i260"
                                                                      "i257"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i252"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i245"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile))
                                                               (#{wrap 4338}#
                                                                 (cons #{args 21435}#
                                                                       (cons #{e1 21436}#
                                                                             #{e2 21437}#))
                                                                 #{w 20504}#
                                                                 #{mod 20507}#))))
                                                   (begin
                                                     (if (if (pair? #{e 21443}#)
                                                           #{s 20505}#
                                                           #f)
                                                       (set-source-properties!
                                                         #{e 21443}#
                                                         #{s 20505}#))
                                                     #{e 21443}#))
                                                 '(())
                                                 #{s 20505}#
                                                 #{mod 20507}#))
                                             #{tmp 21230}#)
                                           (let ((#{tmp 21450}#
                                                   ($sc-dispatch
                                                     #{e 20502}#
                                                     '(_ any))))
                                             (if (if #{tmp 21450}#
                                                   (@apply
                                                     (lambda (#{name 21454}#)
                                                       (if (symbol?
                                                             #{name 21454}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 21454}#)
                                                               (if (= (vector-length
                                                                        #{name 21454}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 21454}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 21454}#
                                                               1))
                                                           #f)))
                                                     #{tmp 21450}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 21481}#)
                                                   (values
                                                     'define-form
                                                     (#{wrap 4338}#
                                                       #{name 21481}#
                                                       #{w 20504}#
                                                       #{mod 20507}#)
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1868"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1808"
                                                              "i1809"
                                                              "i1810"
                                                              "i1811"
                                                              "i1812"
                                                              "i1813"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1800"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1772"
                                                              "i1773"
                                                              "i1774"
                                                              "i1775"
                                                              "i1776"
                                                              "i1777"
                                                              "i1778"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              expand-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1868"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1808"
                                                              "i1809"
                                                              "i1810"
                                                              "i1811"
                                                              "i1812"
                                                              "i1813"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1800"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1772"
                                                              "i1773"
                                                              "i1774"
                                                              "i1775"
                                                              "i1776"
                                                              "i1777"
                                                              "i1778"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              expand-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1868"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1808"
                                                              "i1809"
                                                              "i1810"
                                                              "i1811"
                                                              "i1812"
                                                              "i1813"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1800"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1772"
                                                              "i1773"
                                                              "i1774"
                                                              "i1775"
                                                              "i1776"
                                                              "i1777"
                                                              "i1778"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              expand-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 20505}#
                                                     #{mod 20507}#))
                                                 #{tmp 21450}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 20502}#)))))))
                                   (if (eqv? #{ftype 21149}# 'define-syntax)
                                     (let ((#{tmp 21500}#
                                             ($sc-dispatch
                                               #{e 20502}#
                                               '(_ any any))))
                                       (if (if #{tmp 21500}#
                                             (@apply
                                               (lambda (#{name 21504}#
                                                        #{val 21505}#)
                                                 (if (symbol? #{name 21504}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 21504}#)
                                                         (if (= (vector-length
                                                                  #{name 21504}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 21504}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 21504}#
                                                         1))
                                                     #f)))
                                               #{tmp 21500}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 21532}#
                                                    #{val 21533}#)
                                             (values
                                               'define-syntax-form
                                               #{name 21532}#
                                               #{val 21533}#
                                               #{w 20504}#
                                               #{s 20505}#
                                               #{mod 20507}#))
                                           #{tmp 21500}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{e 20502}#)))
                                     (values
                                       'call
                                       #f
                                       #{e 20502}#
                                       #{w 20504}#
                                       #{s 20505}#
                                       #{mod 20507}#))))))))))))))
           (if (if (vector? #{e 20502}#)
                 (if (= (vector-length #{e 20502}#) 4)
                   (eq? (vector-ref #{e 20502}# 0) 'syntax-object)
                   #f)
                 #f)
             (#{syntax-type 4344}#
               (vector-ref #{e 20502}# 1)
               #{r 20503}#
               (#{join-wraps 4329}#
                 #{w 20504}#
                 (vector-ref #{e 20502}# 2))
               (let ((#{t 21560}#
                       (#{source-annotation 4306}# #{e 20502}#)))
                 (if #{t 21560}# #{t 21560}# #{s 20505}#))
               #{rib 20506}#
               (let ((#{t 21820}# (vector-ref #{e 20502}# 3)))
                 (if #{t 21820}# #{t 21820}# #{mod 20507}#))
               #{for-car? 20508}#)
             (if (self-evaluating? #{e 20502}#)
               (values
                 'constant
                 #f
                 #{e 20502}#
                 #{w 20504}#
                 #{s 20505}#
                 #{mod 20507}#)
               (values
                 'other
                 #f
                 #{e 20502}#
                 #{w 20504}#
                 #{s 20505}#
                 #{mod 20507}#)))))))
   (#{expand 4345}#
     (lambda (#{e 21829}#
              #{r 21830}#
              #{w 21831}#
              #{mod 21832}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 4344}#
             #{e 21829}#
             #{r 21830}#
             #{w 21831}#
             (#{source-annotation 4306}# #{e 21829}#)
             #f
             #{mod 21832}#
             #f))
         (lambda (#{type 22006}#
                  #{value 22007}#
                  #{e 22008}#
                  #{w 22009}#
                  #{s 22010}#
                  #{mod 22011}#)
           (#{expand-expr 4346}#
             #{type 22006}#
             #{value 22007}#
             #{e 22008}#
             #{r 21830}#
             #{w 22009}#
             #{s 22010}#
             #{mod 22011}#)))))
   (#{expand-expr 4346}#
     (lambda (#{type 22014}#
              #{value 22015}#
              #{e 22016}#
              #{r 22017}#
              #{w 22018}#
              #{s 22019}#
              #{mod 22020}#)
       (if (eqv? #{type 22014}# 'lexical)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{s 22019}#
           #{e 22016}#
           #{value 22015}#)
         (if (if (eqv? #{type 22014}# 'core)
               #t
               (eqv? #{type 22014}# 'core-form))
           (#{value 22015}#
             #{e 22016}#
             #{r 22017}#
             #{w 22018}#
             #{s 22019}#
             #{mod 22020}#)
           (if (eqv? #{type 22014}# 'module-ref)
             (call-with-values
               (lambda ()
                 (#{value 22015}#
                   #{e 22016}#
                   #{r 22017}#
                   #{w 22018}#))
               (lambda (#{e 22046}#
                        #{r 22047}#
                        #{w 22048}#
                        #{s 22049}#
                        #{mod 22050}#)
                 (#{expand 4345}#
                   #{e 22046}#
                   #{r 22047}#
                   #{w 22048}#
                   #{mod 22050}#)))
             (if (eqv? #{type 22014}# 'lexical-call)
               (#{expand-application 4347}#
                 (let ((#{id 22130}# (car #{e 22016}#)))
                   (#{build-lexical-reference 4283}#
                     'fun
                     (#{source-annotation 4306}# #{id 22130}#)
                     (if (if (vector? #{id 22130}#)
                           (if (= (vector-length #{id 22130}#) 4)
                             (eq? (vector-ref #{id 22130}# 0) 'syntax-object)
                             #f)
                           #f)
                       (syntax->datum #{id 22130}#)
                       #{id 22130}#)
                     #{value 22015}#))
                 #{e 22016}#
                 #{r 22017}#
                 #{w 22018}#
                 #{s 22019}#
                 #{mod 22020}#)
               (if (eqv? #{type 22014}# 'global-call)
                 (#{expand-application 4347}#
                   (#{build-global-reference 4286}#
                     (#{source-annotation 4306}# (car #{e 22016}#))
                     (if (if (vector? #{value 22015}#)
                           (if (= (vector-length #{value 22015}#) 4)
                             (eq? (vector-ref #{value 22015}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 22015}# 1)
                       #{value 22015}#)
                     (if (if (vector? #{value 22015}#)
                           (if (= (vector-length #{value 22015}#) 4)
                             (eq? (vector-ref #{value 22015}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 22015}# 3)
                       #{mod 22020}#))
                   #{e 22016}#
                   #{r 22017}#
                   #{w 22018}#
                   #{s 22019}#
                   #{mod 22020}#)
                 (if (eqv? #{type 22014}# 'constant)
                   (let ((#{exp 22666}#
                           (#{strip 4358}#
                             (#{wrap 4338}#
                               (begin
                                 (if (if (pair? #{e 22016}#) #{s 22019}# #f)
                                   (set-source-properties!
                                     #{e 22016}#
                                     #{s 22019}#))
                                 #{e 22016}#)
                               #{w 22018}#
                               #{mod 22020}#)
                             '(()))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 1)
                       #{s 22019}#
                       #{exp 22666}#))
                   (if (eqv? #{type 22014}# 'global)
                     (#{analyze-variable 4285}#
                       #{mod 22020}#
                       #{value 22015}#
                       (lambda (#{mod 22702}# #{var 22703}# #{public? 22704}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #{s 22019}#
                           #{mod 22702}#
                           #{var 22703}#
                           #{public? 22704}#))
                       (lambda (#{var 22713}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #{s 22019}#
                           #{var 22713}#)))
                     (if (eqv? #{type 22014}# 'call)
                       (#{expand-application 4347}#
                         (#{expand 4345}#
                           (car #{e 22016}#)
                           #{r 22017}#
                           #{w 22018}#
                           #{mod 22020}#)
                         #{e 22016}#
                         #{r 22017}#
                         #{w 22018}#
                         #{s 22019}#
                         #{mod 22020}#)
                       (if (eqv? #{type 22014}# 'begin-form)
                         (let ((#{tmp 22793}#
                                 ($sc-dispatch
                                   #{e 22016}#
                                   '(_ any . each-any))))
                           (if #{tmp 22793}#
                             (@apply
                               (lambda (#{e1 22797}# #{e2 22798}#)
                                 (#{expand-sequence 4340}#
                                   (cons #{e1 22797}# #{e2 22798}#)
                                   #{r 22017}#
                                   #{w 22018}#
                                   #{s 22019}#
                                   #{mod 22020}#))
                               #{tmp 22793}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{e 22016}#)))
                         (if (eqv? #{type 22014}# 'local-syntax-form)
                           (#{expand-local-syntax 4350}#
                             #{value 22015}#
                             #{e 22016}#
                             #{r 22017}#
                             #{w 22018}#
                             #{s 22019}#
                             #{mod 22020}#
                             #{expand-sequence 4340}#)
                           (if (eqv? #{type 22014}# 'eval-when-form)
                             (let ((#{tmp 22964}#
                                     ($sc-dispatch
                                       #{e 22016}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 22964}#
                                 (@apply
                                   (lambda (#{x 22968}#
                                            #{e1 22969}#
                                            #{e2 22970}#)
                                     (let ((#{when-list 22971}#
                                             (#{expand-when-list 4343}#
                                               #{e 22016}#
                                               #{x 22968}#
                                               #{w 22018}#)))
                                       (if (memq 'eval #{when-list 22971}#)
                                         (#{expand-sequence 4340}#
                                           (cons #{e1 22969}# #{e2 22970}#)
                                           #{r 22017}#
                                           #{w 22018}#
                                           #{s 22019}#
                                           #{mod 22020}#)
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))))
                                   #{tmp 22964}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 22016}#)))
                             (if (if (eqv? #{type 22014}# 'define-form)
                                   #t
                                   (eqv? #{type 22014}# 'define-syntax-form))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 22016}#
                                 (#{wrap 4338}#
                                   #{value 22015}#
                                   #{w 22018}#
                                   #{mod 22020}#))
                               (if (eqv? #{type 22014}# 'syntax)
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (#{wrap 4338}#
                                     (begin
                                       (if (if (pair? #{e 22016}#)
                                             #{s 22019}#
                                             #f)
                                         (set-source-properties!
                                           #{e 22016}#
                                           #{s 22019}#))
                                       #{e 22016}#)
                                     #{w 22018}#
                                     #{mod 22020}#))
                                 (if (eqv? #{type 22014}# 'displaced-lexical)
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (#{wrap 4338}#
                                       (begin
                                         (if (if (pair? #{e 22016}#)
                                               #{s 22019}#
                                               #f)
                                           (set-source-properties!
                                             #{e 22016}#
                                             #{s 22019}#))
                                         #{e 22016}#)
                                       #{w 22018}#
                                       #{mod 22020}#))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (#{wrap 4338}#
                                       (begin
                                         (if (if (pair? #{e 22016}#)
                                               #{s 22019}#
                                               #f)
                                           (set-source-properties!
                                             #{e 22016}#
                                             #{s 22019}#))
                                         #{e 22016}#)
                                       #{w 22018}#
                                       #{mod 22020}#))))))))))))))))))
   (#{expand-application 4347}#
     (lambda (#{x 23160}#
              #{e 23161}#
              #{r 23162}#
              #{w 23163}#
              #{s 23164}#
              #{mod 23165}#)
       (let ((#{tmp 23167}#
               ($sc-dispatch #{e 23161}# '(any . each-any))))
         (if #{tmp 23167}#
           (@apply
             (lambda (#{e0 23171}# #{e1 23172}#)
               (#{build-application 4280}#
                 #{s 23164}#
                 #{x 23160}#
                 (map (lambda (#{e 23257}#)
                        (#{expand 4345}#
                          #{e 23257}#
                          #{r 23162}#
                          #{w 23163}#
                          #{mod 23165}#))
                      #{e1 23172}#)))
             #{tmp 23167}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 23161}#)))))
   (#{expand-macro 4348}#
     (lambda (#{p 23338}#
              #{e 23339}#
              #{r 23340}#
              #{w 23341}#
              #{s 23342}#
              #{rib 23343}#
              #{mod 23344}#)
       (letrec*
         ((#{rebuild-macro-output 23345}#
            (lambda (#{x 23376}# #{m 23377}#)
              (if (pair? #{x 23376}#)
                (let ((#{e 23381}#
                        (cons (#{rebuild-macro-output 23345}#
                                (car #{x 23376}#)
                                #{m 23377}#)
                              (#{rebuild-macro-output 23345}#
                                (cdr #{x 23376}#)
                                #{m 23377}#))))
                  (begin
                    (if (if (pair? #{e 23381}#) #{s 23342}# #f)
                      (set-source-properties! #{e 23381}# #{s 23342}#))
                    #{e 23381}#))
                (if (if (vector? #{x 23376}#)
                      (if (= (vector-length #{x 23376}#) 4)
                        (eq? (vector-ref #{x 23376}# 0) 'syntax-object)
                        #f)
                      #f)
                  (let ((#{w 23397}# (vector-ref #{x 23376}# 2)))
                    (let ((#{ms 23398}# (car #{w 23397}#))
                          (#{s 23399}# (cdr #{w 23397}#)))
                      (if (if (pair? #{ms 23398}#)
                            (eq? (car #{ms 23398}#) #f)
                            #f)
                        (let ((#{expression 23407}# (vector-ref #{x 23376}# 1))
                              (#{wrap 23408}#
                                (cons (cdr #{ms 23398}#)
                                      (if #{rib 23343}#
                                        (cons #{rib 23343}# (cdr #{s 23399}#))
                                        (cdr #{s 23399}#))))
                              (#{module 23409}# (vector-ref #{x 23376}# 3)))
                          (vector
                            'syntax-object
                            #{expression 23407}#
                            #{wrap 23408}#
                            #{module 23409}#))
                        (let ((#{expression 23419}#
                                (let ((#{e 23424}# (vector-ref #{x 23376}# 1)))
                                  (begin
                                    (if (if (pair? #{e 23424}#) #{s 23399}# #f)
                                      (set-source-properties!
                                        #{e 23424}#
                                        #{s 23399}#))
                                    #{e 23424}#)))
                              (#{wrap 23420}#
                                (cons (cons #{m 23377}# #{ms 23398}#)
                                      (if #{rib 23343}#
                                        (cons #{rib 23343}#
                                              (cons 'shift #{s 23399}#))
                                        (cons 'shift #{s 23399}#))))
                              (#{module 23421}# (vector-ref #{x 23376}# 3)))
                          (vector
                            'syntax-object
                            #{expression 23419}#
                            #{wrap 23420}#
                            #{module 23421}#)))))
                  (if (vector? #{x 23376}#)
                    (let ((#{n 23436}# (vector-length #{x 23376}#)))
                      (let ((#{v 23437}#
                              (let ((#{e 23445}# (make-vector #{n 23436}#)))
                                (begin
                                  (if (if (pair? #{e 23445}#) #{x 23376}# #f)
                                    (set-source-properties!
                                      #{e 23445}#
                                      #{x 23376}#))
                                  #{e 23445}#))))
                        (letrec*
                          ((#{loop 23438}#
                             (lambda (#{i 23490}#)
                               (if (= #{i 23490}# #{n 23436}#)
                                 #{v 23437}#
                                 (begin
                                   (vector-set!
                                     #{v 23437}#
                                     #{i 23490}#
                                     (#{rebuild-macro-output 23345}#
                                       (vector-ref #{x 23376}# #{i 23490}#)
                                       #{m 23377}#))
                                   (#{loop 23438}# (#{1+}# #{i 23490}#)))))))
                          (#{loop 23438}# 0))))
                    (if (symbol? #{x 23376}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (let ((#{s 23496}# (cdr #{w 23341}#)))
                          (#{wrap 4338}#
                            (begin
                              (if (if (pair? #{e 23339}#) #{s 23496}# #f)
                                (set-source-properties!
                                  #{e 23339}#
                                  #{s 23496}#))
                              #{e 23339}#)
                            #{w 23341}#
                            #{mod 23344}#))
                        #{x 23376}#)
                      (begin
                        (if (if (pair? #{x 23376}#) #{s 23342}# #f)
                          (set-source-properties! #{x 23376}# #{s 23342}#))
                        #{x 23376}#))))))))
         (#{rebuild-macro-output 23345}#
           (#{p 23338}#
             (let ((#{w 23352}#
                     (cons (cons #f (car #{w 23341}#))
                           (cons 'shift (cdr #{w 23341}#)))))
               (#{wrap 4338}#
                 (begin
                   (if (if (pair? #{e 23339}#) #{s 23342}# #f)
                     (set-source-properties! #{e 23339}# #{s 23342}#))
                   #{e 23339}#)
                 #{w 23352}#
                 #{mod 23344}#)))
           (gensym "m")))))
   (#{expand-body 4349}#
     (lambda (#{body 23528}#
              #{outer-form 23529}#
              #{r 23530}#
              #{w 23531}#
              #{mod 23532}#)
       (let ((#{r 23533}#
               (cons '("placeholder" placeholder) #{r 23530}#)))
         (let ((#{ribcage 23534}# (vector 'ribcage '() '() '())))
           (let ((#{w 23535}#
                   (cons (car #{w 23531}#)
                         (cons #{ribcage 23534}# (cdr #{w 23531}#)))))
             (letrec*
               ((#{parse 23536}#
                  (lambda (#{body 23549}#
                           #{ids 23550}#
                           #{labels 23551}#
                           #{var-ids 23552}#
                           #{vars 23553}#
                           #{vals 23554}#
                           #{bindings 23555}#)
                    (if (null? #{body 23549}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 23529}#)
                      (let ((#{e 23556}# (cdr (car #{body 23549}#)))
                            (#{er 23557}# (car (car #{body 23549}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 4344}#
                              #{e 23556}#
                              #{er 23557}#
                              '(())
                              (#{source-annotation 4306}# #{er 23557}#)
                              #{ribcage 23534}#
                              #{mod 23532}#
                              #f))
                          (lambda (#{type 23733}#
                                   #{value 23734}#
                                   #{e 23735}#
                                   #{w 23736}#
                                   #{s 23737}#
                                   #{mod 23738}#)
                            (if (eqv? #{type 23733}# 'define-form)
                              (let ((#{id 23742}#
                                      (#{wrap 4338}#
                                        #{value 23734}#
                                        #{w 23736}#
                                        #{mod 23738}#))
                                    (#{label 23743}#
                                      (symbol->string (gensym "i"))))
                                (let ((#{var 23744}#
                                        (let ((#{id 23804}#
                                                (if (if (vector? #{id 23742}#)
                                                      (if (= (vector-length
                                                               #{id 23742}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{id 23742}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{id 23742}# 1)
                                                  #{id 23742}#)))
                                          (gensym
                                            (string-append
                                              (symbol->string #{id 23804}#)
                                              " ")))))
                                  (begin
                                    (let ((#{update 23794}#
                                            (cons (vector-ref #{id 23742}# 1)
                                                  (vector-ref
                                                    #{ribcage 23534}#
                                                    1))))
                                      (vector-set!
                                        #{ribcage 23534}#
                                        1
                                        #{update 23794}#))
                                    (let ((#{update 23796}#
                                            (cons (car (vector-ref
                                                         #{id 23742}#
                                                         2))
                                                  (vector-ref
                                                    #{ribcage 23534}#
                                                    2))))
                                      (vector-set!
                                        #{ribcage 23534}#
                                        2
                                        #{update 23796}#))
                                    (let ((#{update 23798}#
                                            (cons #{label 23743}#
                                                  (vector-ref
                                                    #{ribcage 23534}#
                                                    3))))
                                      (vector-set!
                                        #{ribcage 23534}#
                                        3
                                        #{update 23798}#))
                                    (#{parse 23536}#
                                      (cdr #{body 23549}#)
                                      (cons #{id 23742}# #{ids 23550}#)
                                      (cons #{label 23743}# #{labels 23551}#)
                                      (cons #{id 23742}# #{var-ids 23552}#)
                                      (cons #{var 23744}# #{vars 23553}#)
                                      (cons (cons #{er 23557}#
                                                  (#{wrap 4338}#
                                                    #{e 23735}#
                                                    #{w 23736}#
                                                    #{mod 23738}#))
                                            #{vals 23554}#)
                                      (cons (cons 'lexical #{var 23744}#)
                                            #{bindings 23555}#)))))
                              (if (eqv? #{type 23733}# 'define-syntax-form)
                                (let ((#{id 23832}#
                                        (#{wrap 4338}#
                                          #{value 23734}#
                                          #{w 23736}#
                                          #{mod 23738}#))
                                      (#{label 23833}#
                                        (symbol->string (gensym "i"))))
                                  (begin
                                    (let ((#{update 23883}#
                                            (cons (vector-ref #{id 23832}# 1)
                                                  (vector-ref
                                                    #{ribcage 23534}#
                                                    1))))
                                      (vector-set!
                                        #{ribcage 23534}#
                                        1
                                        #{update 23883}#))
                                    (let ((#{update 23885}#
                                            (cons (car (vector-ref
                                                         #{id 23832}#
                                                         2))
                                                  (vector-ref
                                                    #{ribcage 23534}#
                                                    2))))
                                      (vector-set!
                                        #{ribcage 23534}#
                                        2
                                        #{update 23885}#))
                                    (let ((#{update 23887}#
                                            (cons #{label 23833}#
                                                  (vector-ref
                                                    #{ribcage 23534}#
                                                    3))))
                                      (vector-set!
                                        #{ribcage 23534}#
                                        3
                                        #{update 23887}#))
                                    (#{parse 23536}#
                                      (cdr #{body 23549}#)
                                      (cons #{id 23832}# #{ids 23550}#)
                                      (cons #{label 23833}# #{labels 23551}#)
                                      #{var-ids 23552}#
                                      #{vars 23553}#
                                      #{vals 23554}#
                                      (cons (cons 'macro
                                                  (cons #{er 23557}#
                                                        (#{wrap 4338}#
                                                          #{e 23735}#
                                                          #{w 23736}#
                                                          #{mod 23738}#)))
                                            #{bindings 23555}#))))
                                (if (eqv? #{type 23733}# 'begin-form)
                                  (let ((#{tmp 23895}#
                                          ($sc-dispatch
                                            #{e 23735}#
                                            '(_ . each-any))))
                                    (if #{tmp 23895}#
                                      (@apply
                                        (lambda (#{e1 23899}#)
                                          (#{parse 23536}#
                                            (letrec*
                                              ((#{f 23900}#
                                                 (lambda (#{forms 23963}#)
                                                   (if (null? #{forms 23963}#)
                                                     (cdr #{body 23549}#)
                                                     (cons (cons #{er 23557}#
                                                                 (#{wrap 4338}#
                                                                   (car #{forms 23963}#)
                                                                   #{w 23736}#
                                                                   #{mod 23738}#))
                                                           (#{f 23900}#
                                                             (cdr #{forms 23963}#)))))))
                                              (#{f 23900}# #{e1 23899}#))
                                            #{ids 23550}#
                                            #{labels 23551}#
                                            #{var-ids 23552}#
                                            #{vars 23553}#
                                            #{vals 23554}#
                                            #{bindings 23555}#))
                                        #{tmp 23895}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 23735}#)))
                                  (if (eqv? #{type 23733}# 'local-syntax-form)
                                    (#{expand-local-syntax 4350}#
                                      #{value 23734}#
                                      #{e 23735}#
                                      #{er 23557}#
                                      #{w 23736}#
                                      #{s 23737}#
                                      #{mod 23738}#
                                      (lambda (#{forms 23977}#
                                               #{er 23978}#
                                               #{w 23979}#
                                               #{s 23980}#
                                               #{mod 23981}#)
                                        (#{parse 23536}#
                                          (letrec*
                                            ((#{f 23982}#
                                               (lambda (#{forms 24045}#)
                                                 (if (null? #{forms 24045}#)
                                                   (cdr #{body 23549}#)
                                                   (cons (cons #{er 23978}#
                                                               (#{wrap 4338}#
                                                                 (car #{forms 24045}#)
                                                                 #{w 23979}#
                                                                 #{mod 23981}#))
                                                         (#{f 23982}#
                                                           (cdr #{forms 24045}#)))))))
                                            (#{f 23982}# #{forms 23977}#))
                                          #{ids 23550}#
                                          #{labels 23551}#
                                          #{var-ids 23552}#
                                          #{vars 23553}#
                                          #{vals 23554}#
                                          #{bindings 23555}#)))
                                    (if (null? #{ids 23550}#)
                                      (#{build-sequence 4294}#
                                        #f
                                        (map (lambda (#{x 24115}#)
                                               (#{expand 4345}#
                                                 (cdr #{x 24115}#)
                                                 (car #{x 24115}#)
                                                 '(())
                                                 #{mod 23738}#))
                                             (cons (cons #{er 23557}#
                                                         (#{wrap 4338}#
                                                           (begin
                                                             (if (if (pair? #{e 23735}#)
                                                                   #{s 23737}#
                                                                   #f)
                                                               (set-source-properties!
                                                                 #{e 23735}#
                                                                 #{s 23737}#))
                                                             #{e 23735}#)
                                                           #{w 23736}#
                                                           #{mod 23738}#))
                                                   (cdr #{body 23549}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 4335}#
                                                   #{ids 23550}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 23529}#))
                                        (letrec*
                                          ((#{loop 24277}#
                                             (lambda (#{bs 24280}#
                                                      #{er-cache 24281}#
                                                      #{r-cache 24282}#)
                                               (if (not (null? #{bs 24280}#))
                                                 (let ((#{b 24283}#
                                                         (car #{bs 24280}#)))
                                                   (if (eq? (car #{b 24283}#)
                                                            'macro)
                                                     (let ((#{er 24285}#
                                                             (car (cdr #{b 24283}#))))
                                                       (let ((#{r-cache 24286}#
                                                               (if (eq? #{er 24285}#
                                                                        #{er-cache 24281}#)
                                                                 #{r-cache 24282}#
                                                                 (#{macros-only-env 4309}#
                                                                   #{er 24285}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 24283}#
                                                             (#{eval-local-transformer 4351}#
                                                               (#{expand 4345}#
                                                                 (cdr (cdr #{b 24283}#))
                                                                 #{r-cache 24286}#
                                                                 '(())
                                                                 #{mod 23738}#)
                                                               #{mod 23738}#))
                                                           (#{loop 24277}#
                                                             (cdr #{bs 24280}#)
                                                             #{er 24285}#
                                                             #{r-cache 24286}#))))
                                                     (#{loop 24277}#
                                                       (cdr #{bs 24280}#)
                                                       #{er-cache 24281}#
                                                       #{r-cache 24282}#)))))))
                                          (#{loop 24277}#
                                            #{bindings 23555}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 23533}#
                                          (#{extend-env 4307}#
                                            #{labels 23551}#
                                            #{bindings 23555}#
                                            (cdr #{r 23533}#)))
                                        (#{build-letrec 4297}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 23552}#))
                                          (reverse #{vars 23553}#)
                                          (map (lambda (#{x 24639}#)
                                                 (#{expand 4345}#
                                                   (cdr #{x 24639}#)
                                                   (car #{x 24639}#)
                                                   '(())
                                                   #{mod 23738}#))
                                               (reverse #{vals 23554}#))
                                          (#{build-sequence 4294}#
                                            #f
                                            (map (lambda (#{x 24769}#)
                                                   (#{expand 4345}#
                                                     (cdr #{x 24769}#)
                                                     (car #{x 24769}#)
                                                     '(())
                                                     #{mod 23738}#))
                                                 (cons (cons #{er 23557}#
                                                             (#{wrap 4338}#
                                                               (begin
                                                                 (if (if (pair? #{e 23735}#)
                                                                       #{s 23737}#
                                                                       #f)
                                                                   (set-source-properties!
                                                                     #{e 23735}#
                                                                     #{s 23737}#))
                                                                 #{e 23735}#)
                                                               #{w 23736}#
                                                               #{mod 23738}#))
                                                       (cdr #{body 23549}#))))))))))))))))))
               (#{parse 23536}#
                 (map (lambda (#{x 23539}#)
                        (cons #{r 23533}#
                              (#{wrap 4338}#
                                #{x 23539}#
                                #{w 23535}#
                                #{mod 23532}#)))
                      #{body 23528}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{expand-local-syntax 4350}#
     (lambda (#{rec? 24854}#
              #{e 24855}#
              #{r 24856}#
              #{w 24857}#
              #{s 24858}#
              #{mod 24859}#
              #{k 24860}#)
       (let ((#{tmp 24862}#
               ($sc-dispatch
                 #{e 24855}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 24862}#
           (@apply
             (lambda (#{id 24866}#
                      #{val 24867}#
                      #{e1 24868}#
                      #{e2 24869}#)
               (if (not (#{valid-bound-ids? 4335}# #{id 24866}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 24855}#)
                 (let ((#{labels 24959}#
                         (#{gen-labels 4316}# #{id 24866}#)))
                   (let ((#{new-w 24960}#
                           (#{make-binding-wrap 4327}#
                             #{id 24866}#
                             #{labels 24959}#
                             #{w 24857}#)))
                     (#{k 24860}#
                       (cons #{e1 24868}# #{e2 24869}#)
                       (#{extend-env 4307}#
                         #{labels 24959}#
                         (let ((#{trans-r 24998}#
                                 (#{macros-only-env 4309}# #{r 24856}#)))
                           (begin
                             (if #{rec? 24854}# (if #f #f))
                             (map (lambda (#{x 24999}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 4351}#
                                            (#{expand 4345}#
                                              #{x 24999}#
                                              #{trans-r 24998}#
                                              (if #{rec? 24854}#
                                                #{new-w 24960}#
                                                #{w 24857}#)
                                              #{mod 24859}#)
                                            #{mod 24859}#)))
                                  #{val 24867}#)))
                         #{r 24856}#)
                       #{new-w 24960}#
                       #{s 24858}#
                       #{mod 24859}#)))))
             #{tmp 24862}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (#{wrap 4338}#
               (begin
                 (if (if (pair? #{e 24855}#) #{s 24858}# #f)
                   (set-source-properties! #{e 24855}# #{s 24858}#))
                 #{e 24855}#)
               #{w 24857}#
               #{mod 24859}#))))))
   (#{eval-local-transformer 4351}#
     (lambda (#{expanded 25300}# #{mod 25301}#)
       (let ((#{p 25302}# (primitive-eval #{expanded 25300}#)))
         (if (procedure? #{p 25302}#)
           #{p 25302}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 25302}#)))))
   (#{ellipsis? 4353}#
     (lambda (#{x 5159}#)
       (if (if (if (vector? #{x 5159}#)
                 (if (= (vector-length #{x 5159}#) 4)
                   (eq? (vector-ref #{x 5159}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 5159}# 1))
             #f)
         (if (eq? (if (if (vector? #{x 5159}#)
                        (if (= (vector-length #{x 5159}#) 4)
                          (eq? (vector-ref #{x 5159}# 0) 'syntax-object)
                          #f)
                        #f)
                    (vector-ref #{x 5159}# 1)
                    #{x 5159}#)
                  (if (if (= (vector-length
                               '#(syntax-object
                                  ...
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i2230"))
                                   #(ribcage
                                     (lambda-var-list
                                       gen-var
                                       strip
                                       expand-lambda-case
                                       lambda*-formals
                                       expand-simple-lambda
                                       lambda-formals
                                       ellipsis?
                                       expand-void
                                       eval-local-transformer
                                       expand-local-syntax
                                       expand-body
                                       expand-macro
                                       expand-application
                                       expand-expr
                                       expand
                                       syntax-type
                                       expand-when-list
                                       expand-install-global
                                       expand-top-sequence
                                       expand-sequence
                                       source-wrap
                                       wrap
                                       bound-id-member?
                                       distinct-bound-ids?
                                       valid-bound-ids?
                                       bound-id=?
                                       free-id=?
                                       id-var-name
                                       same-marks?
                                       join-marks
                                       join-wraps
                                       smart-append
                                       make-binding-wrap
                                       extend-ribcage!
                                       make-empty-ribcage
                                       new-mark
                                       anti-mark
                                       the-anti-mark
                                       top-marked?
                                       top-wrap
                                       empty-wrap
                                       set-ribcage-labels!
                                       set-ribcage-marks!
                                       set-ribcage-symnames!
                                       ribcage-labels
                                       ribcage-marks
                                       ribcage-symnames
                                       ribcage?
                                       make-ribcage
                                       gen-labels
                                       gen-label
                                       make-rename
                                       rename-marks
                                       rename-new
                                       rename-old
                                       subst-rename?
                                       wrap-subst
                                       wrap-marks
                                       make-wrap
                                       id-sym-name&marks
                                       id-sym-name
                                       id?
                                       nonsymbol-id?
                                       global-extend
                                       lookup
                                       macros-only-env
                                       extend-var-env
                                       extend-env
                                       null-env
                                       binding-value
                                       binding-type
                                       make-binding
                                       arg-check
                                       source-annotation
                                       no-source
                                       set-syntax-object-module!
                                       set-syntax-object-wrap!
                                       set-syntax-object-expression!
                                       syntax-object-module
                                       syntax-object-wrap
                                       syntax-object-expression
                                       syntax-object?
                                       make-syntax-object
                                       build-lexical-var
                                       build-letrec
                                       build-named-let
                                       build-let
                                       build-sequence
                                       build-data
                                       build-primref
                                       build-lambda-case
                                       build-case-lambda
                                       build-simple-lambda
                                       build-global-definition
                                       build-global-assignment
                                       build-global-reference
                                       analyze-variable
                                       build-lexical-assignment
                                       build-lexical-reference
                                       build-dynlet
                                       build-conditional
                                       build-application
                                       build-void
                                       maybe-name-value!
                                       decorate-source
                                       get-global-definition-hook
                                       put-global-definition-hook
                                       gensym-hook
                                       local-eval-hook
                                       top-level-eval-hook
                                       fx<
                                       fx=
                                       fx-
                                       fx+
                                       set-lambda-meta!
                                       lambda-meta
                                       lambda?
                                       make-dynlet
                                       make-letrec
                                       make-let
                                       make-lambda-case
                                       make-lambda
                                       make-sequence
                                       make-application
                                       make-conditional
                                       make-toplevel-define
                                       make-toplevel-set
                                       make-toplevel-ref
                                       make-module-set
                                       make-module-ref
                                       make-lexical-set
                                       make-lexical-ref
                                       make-primitive-ref
                                       make-const
                                       make-void)
                                     ((top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top))
                                     ("i467"
                                      "i465"
                                      "i463"
                                      "i461"
                                      "i459"
                                      "i457"
                                      "i455"
                                      "i453"
                                      "i451"
                                      "i449"
                                      "i447"
                                      "i445"
                                      "i443"
                                      "i441"
                                      "i439"
                                      "i437"
                                      "i435"
                                      "i433"
                                      "i431"
                                      "i429"
                                      "i427"
                                      "i425"
                                      "i423"
                                      "i421"
                                      "i419"
                                      "i417"
                                      "i415"
                                      "i413"
                                      "i411"
                                      "i409"
                                      "i407"
                                      "i405"
                                      "i403"
                                      "i401"
                                      "i399"
                                      "i398"
                                      "i396"
                                      "i393"
                                      "i392"
                                      "i391"
                                      "i389"
                                      "i388"
                                      "i386"
                                      "i384"
                                      "i382"
                                      "i380"
                                      "i378"
                                      "i376"
                                      "i374"
                                      "i372"
                                      "i369"
                                      "i367"
                                      "i366"
                                      "i364"
                                      "i362"
                                      "i360"
                                      "i358"
                                      "i357"
                                      "i356"
                                      "i355"
                                      "i353"
                                      "i352"
                                      "i349"
                                      "i347"
                                      "i345"
                                      "i343"
                                      "i341"
                                      "i339"
                                      "i337"
                                      "i336"
                                      "i335"
                                      "i333"
                                      "i331"
                                      "i330"
                                      "i327"
                                      "i326"
                                      "i324"
                                      "i322"
                                      "i320"
                                      "i318"
                                      "i316"
                                      "i314"
                                      "i312"
                                      "i310"
                                      "i308"
                                      "i305"
                                      "i303"
                                      "i301"
                                      "i299"
                                      "i297"
                                      "i295"
                                      "i293"
                                      "i291"
                                      "i289"
                                      "i287"
                                      "i285"
                                      "i283"
                                      "i281"
                                      "i279"
                                      "i277"
                                      "i275"
                                      "i273"
                                      "i271"
                                      "i269"
                                      "i267"
                                      "i265"
                                      "i263"
                                      "i261"
                                      "i260"
                                      "i257"
                                      "i255"
                                      "i254"
                                      "i253"
                                      "i252"
                                      "i251"
                                      "i249"
                                      "i247"
                                      "i245"
                                      "i242"
                                      "i240"
                                      "i238"
                                      "i236"
                                      "i234"
                                      "i232"
                                      "i230"
                                      "i228"
                                      "i226"
                                      "i224"
                                      "i222"
                                      "i220"
                                      "i218"
                                      "i216"
                                      "i214"
                                      "i212"
                                      "i210"
                                      "i208"))
                                   #(ribcage
                                     (define-structure
                                       define-expansion-accessors
                                       define-expansion-constructors)
                                     ((top) (top) (top))
                                     ("i46" "i45" "i44")))
                                  (hygiene guile)))
                             4)
                        #t
                        #f)
                    '...
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i2230"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            expand-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            gensym-hook
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("i467"
                           "i465"
                           "i463"
                           "i461"
                           "i459"
                           "i457"
                           "i455"
                           "i453"
                           "i451"
                           "i449"
                           "i447"
                           "i445"
                           "i443"
                           "i441"
                           "i439"
                           "i437"
                           "i435"
                           "i433"
                           "i431"
                           "i429"
                           "i427"
                           "i425"
                           "i423"
                           "i421"
                           "i419"
                           "i417"
                           "i415"
                           "i413"
                           "i411"
                           "i409"
                           "i407"
                           "i405"
                           "i403"
                           "i401"
                           "i399"
                           "i398"
                           "i396"
                           "i393"
                           "i392"
                           "i391"
                           "i389"
                           "i388"
                           "i386"
                           "i384"
                           "i382"
                           "i380"
                           "i378"
                           "i376"
                           "i374"
                           "i372"
                           "i369"
                           "i367"
                           "i366"
                           "i364"
                           "i362"
                           "i360"
                           "i358"
                           "i357"
                           "i356"
                           "i355"
                           "i353"
                           "i352"
                           "i349"
                           "i347"
                           "i345"
                           "i343"
                           "i341"
                           "i339"
                           "i337"
                           "i336"
                           "i335"
                           "i333"
                           "i331"
                           "i330"
                           "i327"
                           "i326"
                           "i324"
                           "i322"
                           "i320"
                           "i318"
                           "i316"
                           "i314"
                           "i312"
                           "i310"
                           "i308"
                           "i305"
                           "i303"
                           "i301"
                           "i299"
                           "i297"
                           "i295"
                           "i293"
                           "i291"
                           "i289"
                           "i287"
                           "i285"
                           "i283"
                           "i281"
                           "i279"
                           "i277"
                           "i275"
                           "i273"
                           "i271"
                           "i269"
                           "i267"
                           "i265"
                           "i263"
                           "i261"
                           "i260"
                           "i257"
                           "i255"
                           "i254"
                           "i253"
                           "i252"
                           "i251"
                           "i249"
                           "i247"
                           "i245"
                           "i242"
                           "i240"
                           "i238"
                           "i236"
                           "i234"
                           "i232"
                           "i230"
                           "i228"
                           "i226"
                           "i224"
                           "i222"
                           "i220"
                           "i218"
                           "i216"
                           "i214"
                           "i212"
                           "i210"
                           "i208"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("i46" "i45" "i44")))
                       (hygiene guile))))
           (eq? (#{id-var-name 4332}# #{x 5159}# '(()))
                (#{id-var-name 4332}#
                  '#(syntax-object
                     ...
                     ((top)
                      #(ribcage () () ())
                      #(ribcage () () ())
                      #(ribcage #(x) #((top)) #("i2230"))
                      #(ribcage
                        (lambda-var-list
                          gen-var
                          strip
                          expand-lambda-case
                          lambda*-formals
                          expand-simple-lambda
                          lambda-formals
                          ellipsis?
                          expand-void
                          eval-local-transformer
                          expand-local-syntax
                          expand-body
                          expand-macro
                          expand-application
                          expand-expr
                          expand
                          syntax-type
                          expand-when-list
                          expand-install-global
                          expand-top-sequence
                          expand-sequence
                          source-wrap
                          wrap
                          bound-id-member?
                          distinct-bound-ids?
                          valid-bound-ids?
                          bound-id=?
                          free-id=?
                          id-var-name
                          same-marks?
                          join-marks
                          join-wraps
                          smart-append
                          make-binding-wrap
                          extend-ribcage!
                          make-empty-ribcage
                          new-mark
                          anti-mark
                          the-anti-mark
                          top-marked?
                          top-wrap
                          empty-wrap
                          set-ribcage-labels!
                          set-ribcage-marks!
                          set-ribcage-symnames!
                          ribcage-labels
                          ribcage-marks
                          ribcage-symnames
                          ribcage?
                          make-ribcage
                          gen-labels
                          gen-label
                          make-rename
                          rename-marks
                          rename-new
                          rename-old
                          subst-rename?
                          wrap-subst
                          wrap-marks
                          make-wrap
                          id-sym-name&marks
                          id-sym-name
                          id?
                          nonsymbol-id?
                          global-extend
                          lookup
                          macros-only-env
                          extend-var-env
                          extend-env
                          null-env
                          binding-value
                          binding-type
                          make-binding
                          arg-check
                          source-annotation
                          no-source
                          set-syntax-object-module!
                          set-syntax-object-wrap!
                          set-syntax-object-expression!
                          syntax-object-module
                          syntax-object-wrap
                          syntax-object-expression
                          syntax-object?
                          make-syntax-object
                          build-lexical-var
                          build-letrec
                          build-named-let
                          build-let
                          build-sequence
                          build-data
                          build-primref
                          build-lambda-case
                          build-case-lambda
                          build-simple-lambda
                          build-global-definition
                          build-global-assignment
                          build-global-reference
                          analyze-variable
                          build-lexical-assignment
                          build-lexical-reference
                          build-dynlet
                          build-conditional
                          build-application
                          build-void
                          maybe-name-value!
                          decorate-source
                          get-global-definition-hook
                          put-global-definition-hook
                          gensym-hook
                          local-eval-hook
                          top-level-eval-hook
                          fx<
                          fx=
                          fx-
                          fx+
                          set-lambda-meta!
                          lambda-meta
                          lambda?
                          make-dynlet
                          make-letrec
                          make-let
                          make-lambda-case
                          make-lambda
                          make-sequence
                          make-application
                          make-conditional
                          make-toplevel-define
                          make-toplevel-set
                          make-toplevel-ref
                          make-module-set
                          make-module-ref
                          make-lexical-set
                          make-lexical-ref
                          make-primitive-ref
                          make-const
                          make-void)
                        ((top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top))
                        ("i467"
                         "i465"
                         "i463"
                         "i461"
                         "i459"
                         "i457"
                         "i455"
                         "i453"
                         "i451"
                         "i449"
                         "i447"
                         "i445"
                         "i443"
                         "i441"
                         "i439"
                         "i437"
                         "i435"
                         "i433"
                         "i431"
                         "i429"
                         "i427"
                         "i425"
                         "i423"
                         "i421"
                         "i419"
                         "i417"
                         "i415"
                         "i413"
                         "i411"
                         "i409"
                         "i407"
                         "i405"
                         "i403"
                         "i401"
                         "i399"
                         "i398"
                         "i396"
                         "i393"
                         "i392"
                         "i391"
                         "i389"
                         "i388"
                         "i386"
                         "i384"
                         "i382"
                         "i380"
                         "i378"
                         "i376"
                         "i374"
                         "i372"
                         "i369"
                         "i367"
                         "i366"
                         "i364"
                         "i362"
                         "i360"
                         "i358"
                         "i357"
                         "i356"
                         "i355"
                         "i353"
                         "i352"
                         "i349"
                         "i347"
                         "i345"
                         "i343"
                         "i341"
                         "i339"
                         "i337"
                         "i336"
                         "i335"
                         "i333"
                         "i331"
                         "i330"
                         "i327"
                         "i326"
                         "i324"
                         "i322"
                         "i320"
                         "i318"
                         "i316"
                         "i314"
                         "i312"
                         "i310"
                         "i308"
                         "i305"
                         "i303"
                         "i301"
                         "i299"
                         "i297"
                         "i295"
                         "i293"
                         "i291"
                         "i289"
                         "i287"
                         "i285"
                         "i283"
                         "i281"
                         "i279"
                         "i277"
                         "i275"
                         "i273"
                         "i271"
                         "i269"
                         "i267"
                         "i265"
                         "i263"
                         "i261"
                         "i260"
                         "i257"
                         "i255"
                         "i254"
                         "i253"
                         "i252"
                         "i251"
                         "i249"
                         "i247"
                         "i245"
                         "i242"
                         "i240"
                         "i238"
                         "i236"
                         "i234"
                         "i232"
                         "i230"
                         "i228"
                         "i226"
                         "i224"
                         "i222"
                         "i220"
                         "i218"
                         "i216"
                         "i214"
                         "i212"
                         "i210"
                         "i208"))
                      #(ribcage
                        (define-structure
                          define-expansion-accessors
                          define-expansion-constructors)
                        ((top) (top) (top))
                        ("i46" "i45" "i44")))
                     (hygiene guile))
                  '(())))
           #f)
         #f)))
   (#{lambda-formals 4354}#
     (lambda (#{orig-args 25307}#)
       (letrec*
         ((#{req 25308}#
            (lambda (#{args 25312}# #{rreq 25313}#)
              (let ((#{tmp 25315}# ($sc-dispatch #{args 25312}# '())))
                (if #{tmp 25315}#
                  (@apply
                    (lambda ()
                      (#{check 25309}# (reverse #{rreq 25313}#) #f))
                    #{tmp 25315}#)
                  (let ((#{tmp 25442}#
                          ($sc-dispatch #{args 25312}# '(any . any))))
                    (if (if #{tmp 25442}#
                          (@apply
                            (lambda (#{a 25446}# #{b 25447}#)
                              (if (symbol? #{a 25446}#)
                                #t
                                (if (if (vector? #{a 25446}#)
                                      (if (= (vector-length #{a 25446}#) 4)
                                        (eq? (vector-ref #{a 25446}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 25446}# 1))
                                  #f)))
                            #{tmp 25442}#)
                          #f)
                      (@apply
                        (lambda (#{a 25474}# #{b 25475}#)
                          (#{req 25308}#
                            #{b 25475}#
                            (cons #{a 25474}# #{rreq 25313}#)))
                        #{tmp 25442}#)
                      (let ((#{tmp 25476}# (list #{args 25312}#)))
                        (if (@apply
                              (lambda (#{r 25478}#)
                                (if (symbol? #{r 25478}#)
                                  #t
                                  (if (if (vector? #{r 25478}#)
                                        (if (= (vector-length #{r 25478}#) 4)
                                          (eq? (vector-ref #{r 25478}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{r 25478}# 1))
                                    #f)))
                              #{tmp 25476}#)
                          (@apply
                            (lambda (#{r 25508}#)
                              (#{check 25309}#
                                (reverse #{rreq 25313}#)
                                #{r 25508}#))
                            #{tmp 25476}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 25307}#
                            #{args 25312}#)))))))))
          (#{check 25309}#
            (lambda (#{req 25643}# #{rest 25644}#)
              (if (#{distinct-bound-ids? 4336}#
                    (if #{rest 25644}#
                      (cons #{rest 25644}# #{req 25643}#)
                      #{req 25643}#))
                (values #{req 25643}# #f #{rest 25644}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 25307}#)))))
         (#{req 25308}# #{orig-args 25307}# '()))))
   (#{expand-simple-lambda 4355}#
     (lambda (#{e 25764}#
              #{r 25765}#
              #{w 25766}#
              #{s 25767}#
              #{mod 25768}#
              #{req 25769}#
              #{rest 25770}#
              #{meta 25771}#
              #{body 25772}#)
       (let ((#{ids 25773}#
               (if #{rest 25770}#
                 (append #{req 25769}# (list #{rest 25770}#))
                 #{req 25769}#)))
         (let ((#{vars 25774}#
                 (map #{gen-var 4359}# #{ids 25773}#)))
           (let ((#{labels 25775}#
                   (#{gen-labels 4316}# #{ids 25773}#)))
             (#{build-simple-lambda 4289}#
               #{s 25767}#
               (map syntax->datum #{req 25769}#)
               (if #{rest 25770}#
                 (syntax->datum #{rest 25770}#)
                 #f)
               #{vars 25774}#
               #{meta 25771}#
               (#{expand-body 4349}#
                 #{body 25772}#
                 (#{wrap 4338}#
                   (begin
                     (if (if (pair? #{e 25764}#) #{s 25767}# #f)
                       (set-source-properties! #{e 25764}# #{s 25767}#))
                     #{e 25764}#)
                   #{w 25766}#
                   #{mod 25768}#)
                 (#{extend-var-env 4308}#
                   #{labels 25775}#
                   #{vars 25774}#
                   #{r 25765}#)
                 (#{make-binding-wrap 4327}#
                   #{ids 25773}#
                   #{labels 25775}#
                   #{w 25766}#)
                 #{mod 25768}#)))))))
   (#{lambda*-formals 4356}#
     (lambda (#{orig-args 26075}#)
       (letrec*
         ((#{req 26076}#
            (lambda (#{args 26083}# #{rreq 26084}#)
              (let ((#{tmp 26086}# ($sc-dispatch #{args 26083}# '())))
                (if #{tmp 26086}#
                  (@apply
                    (lambda ()
                      (#{check 26080}#
                        (reverse #{rreq 26084}#)
                        '()
                        #f
                        '()))
                    #{tmp 26086}#)
                  (let ((#{tmp 26092}#
                          ($sc-dispatch #{args 26083}# '(any . any))))
                    (if (if #{tmp 26092}#
                          (@apply
                            (lambda (#{a 26096}# #{b 26097}#)
                              (if (symbol? #{a 26096}#)
                                #t
                                (if (if (vector? #{a 26096}#)
                                      (if (= (vector-length #{a 26096}#) 4)
                                        (eq? (vector-ref #{a 26096}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 26096}# 1))
                                  #f)))
                            #{tmp 26092}#)
                          #f)
                      (@apply
                        (lambda (#{a 26124}# #{b 26125}#)
                          (#{req 26076}#
                            #{b 26125}#
                            (cons #{a 26124}# #{rreq 26084}#)))
                        #{tmp 26092}#)
                      (let ((#{tmp 26126}#
                              ($sc-dispatch #{args 26083}# '(any . any))))
                        (if (if #{tmp 26126}#
                              (@apply
                                (lambda (#{a 26130}# #{b 26131}#)
                                  (eq? (syntax->datum #{a 26130}#) #:optional))
                                #{tmp 26126}#)
                              #f)
                          (@apply
                            (lambda (#{a 26132}# #{b 26133}#)
                              (#{opt 26077}#
                                #{b 26133}#
                                (reverse #{rreq 26084}#)
                                '()))
                            #{tmp 26126}#)
                          (let ((#{tmp 26136}#
                                  ($sc-dispatch #{args 26083}# '(any . any))))
                            (if (if #{tmp 26136}#
                                  (@apply
                                    (lambda (#{a 26140}# #{b 26141}#)
                                      (eq? (syntax->datum #{a 26140}#) #:key))
                                    #{tmp 26136}#)
                                  #f)
                              (@apply
                                (lambda (#{a 26142}# #{b 26143}#)
                                  (#{key 26078}#
                                    #{b 26143}#
                                    (reverse #{rreq 26084}#)
                                    '()
                                    '()))
                                #{tmp 26136}#)
                              (let ((#{tmp 26146}#
                                      ($sc-dispatch
                                        #{args 26083}#
                                        '(any any))))
                                (if (if #{tmp 26146}#
                                      (@apply
                                        (lambda (#{a 26150}# #{b 26151}#)
                                          (eq? (syntax->datum #{a 26150}#)
                                               #:rest))
                                        #{tmp 26146}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 26152}# #{b 26153}#)
                                      (#{rest 26079}#
                                        #{b 26153}#
                                        (reverse #{rreq 26084}#)
                                        '()
                                        '()))
                                    #{tmp 26146}#)
                                  (let ((#{tmp 26156}# (list #{args 26083}#)))
                                    (if (@apply
                                          (lambda (#{r 26158}#)
                                            (if (symbol? #{r 26158}#)
                                              #t
                                              (if (if (vector? #{r 26158}#)
                                                    (if (= (vector-length
                                                             #{r 26158}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 26158}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 26158}# 1))
                                                #f)))
                                          #{tmp 26156}#)
                                      (@apply
                                        (lambda (#{r 26188}#)
                                          (#{rest 26079}#
                                            #{r 26188}#
                                            (reverse #{rreq 26084}#)
                                            '()
                                            '()))
                                        #{tmp 26156}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 26075}#
                                        #{args 26083}#)))))))))))))))
          (#{opt 26077}#
            (lambda (#{args 26207}# #{req 26208}# #{ropt 26209}#)
              (let ((#{tmp 26211}# ($sc-dispatch #{args 26207}# '())))
                (if #{tmp 26211}#
                  (@apply
                    (lambda ()
                      (#{check 26080}#
                        #{req 26208}#
                        (reverse #{ropt 26209}#)
                        #f
                        '()))
                    #{tmp 26211}#)
                  (let ((#{tmp 26217}#
                          ($sc-dispatch #{args 26207}# '(any . any))))
                    (if (if #{tmp 26217}#
                          (@apply
                            (lambda (#{a 26221}# #{b 26222}#)
                              (if (symbol? #{a 26221}#)
                                #t
                                (if (if (vector? #{a 26221}#)
                                      (if (= (vector-length #{a 26221}#) 4)
                                        (eq? (vector-ref #{a 26221}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 26221}# 1))
                                  #f)))
                            #{tmp 26217}#)
                          #f)
                      (@apply
                        (lambda (#{a 26249}# #{b 26250}#)
                          (#{opt 26077}#
                            #{b 26250}#
                            #{req 26208}#
                            (cons (cons #{a 26249}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i2369" "i2370"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i2359" "i2360" "i2361"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i2305"
                                                "i2303"
                                                "i2301"
                                                "i2299"
                                                "i2297"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i2296"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 expand-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i398"
                                                "i396"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i389"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i372"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i356"
                                                "i355"
                                                "i353"
                                                "i352"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i336"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i330"
                                                "i327"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i310"
                                                "i308"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i260"
                                                "i257"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i252"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))))
                                  #{ropt 26209}#)))
                        #{tmp 26217}#)
                      (let ((#{tmp 26251}#
                              ($sc-dispatch
                                #{args 26207}#
                                '((any any) . any))))
                        (if (if #{tmp 26251}#
                              (@apply
                                (lambda (#{a 26255}#
                                         #{init 26256}#
                                         #{b 26257}#)
                                  (if (symbol? #{a 26255}#)
                                    #t
                                    (if (if (vector? #{a 26255}#)
                                          (if (= (vector-length #{a 26255}#) 4)
                                            (eq? (vector-ref #{a 26255}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 26255}# 1))
                                      #f)))
                                #{tmp 26251}#)
                              #f)
                          (@apply
                            (lambda (#{a 26284}# #{init 26285}# #{b 26286}#)
                              (#{opt 26077}#
                                #{b 26286}#
                                #{req 26208}#
                                (cons (list #{a 26284}# #{init 26285}#)
                                      #{ropt 26209}#)))
                            #{tmp 26251}#)
                          (let ((#{tmp 26287}#
                                  ($sc-dispatch #{args 26207}# '(any . any))))
                            (if (if #{tmp 26287}#
                                  (@apply
                                    (lambda (#{a 26291}# #{b 26292}#)
                                      (eq? (syntax->datum #{a 26291}#) #:key))
                                    #{tmp 26287}#)
                                  #f)
                              (@apply
                                (lambda (#{a 26293}# #{b 26294}#)
                                  (#{key 26078}#
                                    #{b 26294}#
                                    #{req 26208}#
                                    (reverse #{ropt 26209}#)
                                    '()))
                                #{tmp 26287}#)
                              (let ((#{tmp 26297}#
                                      ($sc-dispatch
                                        #{args 26207}#
                                        '(any any))))
                                (if (if #{tmp 26297}#
                                      (@apply
                                        (lambda (#{a 26301}# #{b 26302}#)
                                          (eq? (syntax->datum #{a 26301}#)
                                               #:rest))
                                        #{tmp 26297}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 26303}# #{b 26304}#)
                                      (#{rest 26079}#
                                        #{b 26304}#
                                        #{req 26208}#
                                        (reverse #{ropt 26209}#)
                                        '()))
                                    #{tmp 26297}#)
                                  (let ((#{tmp 26307}# (list #{args 26207}#)))
                                    (if (@apply
                                          (lambda (#{r 26309}#)
                                            (if (symbol? #{r 26309}#)
                                              #t
                                              (if (if (vector? #{r 26309}#)
                                                    (if (= (vector-length
                                                             #{r 26309}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 26309}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 26309}# 1))
                                                #f)))
                                          #{tmp 26307}#)
                                      (@apply
                                        (lambda (#{r 26339}#)
                                          (#{rest 26079}#
                                            #{r 26339}#
                                            #{req 26208}#
                                            (reverse #{ropt 26209}#)
                                            '()))
                                        #{tmp 26307}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 26075}#
                                        #{args 26207}#)))))))))))))))
          (#{key 26078}#
            (lambda (#{args 26358}#
                     #{req 26359}#
                     #{opt 26360}#
                     #{rkey 26361}#)
              (let ((#{tmp 26363}# ($sc-dispatch #{args 26358}# '())))
                (if #{tmp 26363}#
                  (@apply
                    (lambda ()
                      (#{check 26080}#
                        #{req 26359}#
                        #{opt 26360}#
                        #f
                        (cons #f (reverse #{rkey 26361}#))))
                    #{tmp 26363}#)
                  (let ((#{tmp 26369}#
                          ($sc-dispatch #{args 26358}# '(any . any))))
                    (if (if #{tmp 26369}#
                          (@apply
                            (lambda (#{a 26373}# #{b 26374}#)
                              (if (symbol? #{a 26373}#)
                                #t
                                (if (if (vector? #{a 26373}#)
                                      (if (= (vector-length #{a 26373}#) 4)
                                        (eq? (vector-ref #{a 26373}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 26373}# 1))
                                  #f)))
                            #{tmp 26369}#)
                          #f)
                      (@apply
                        (lambda (#{a 26401}# #{b 26402}#)
                          (let ((#{tmp 26403}#
                                  (symbol->keyword
                                    (syntax->datum #{a 26401}#))))
                            (#{key 26078}#
                              #{b 26402}#
                              #{req 26359}#
                              #{opt 26360}#
                              (cons (cons #{tmp 26403}#
                                          (cons #{a 26401}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i2432"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2426" "i2427"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i2415"
                                                         "i2416"
                                                         "i2417"
                                                         "i2418"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2305"
                                                        "i2303"
                                                        "i2301"
                                                        "i2299"
                                                        "i2297"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2296"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         expand-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i399"
                                                        "i398"
                                                        "i396"
                                                        "i393"
                                                        "i392"
                                                        "i391"
                                                        "i389"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i372"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i358"
                                                        "i357"
                                                        "i356"
                                                        "i355"
                                                        "i353"
                                                        "i352"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i336"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i330"
                                                        "i327"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i310"
                                                        "i308"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i260"
                                                        "i257"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i252"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile)))))
                                    #{rkey 26361}#))))
                        #{tmp 26369}#)
                      (let ((#{tmp 26406}#
                              ($sc-dispatch
                                #{args 26358}#
                                '((any any) . any))))
                        (if (if #{tmp 26406}#
                              (@apply
                                (lambda (#{a 26410}#
                                         #{init 26411}#
                                         #{b 26412}#)
                                  (if (symbol? #{a 26410}#)
                                    #t
                                    (if (if (vector? #{a 26410}#)
                                          (if (= (vector-length #{a 26410}#) 4)
                                            (eq? (vector-ref #{a 26410}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 26410}# 1))
                                      #f)))
                                #{tmp 26406}#)
                              #f)
                          (@apply
                            (lambda (#{a 26439}# #{init 26440}# #{b 26441}#)
                              (let ((#{tmp 26442}#
                                      (symbol->keyword
                                        (syntax->datum #{a 26439}#))))
                                (#{key 26078}#
                                  #{b 26441}#
                                  #{req 26359}#
                                  #{opt 26360}#
                                  (cons (list #{tmp 26442}#
                                              #{a 26439}#
                                              #{init 26440}#)
                                        #{rkey 26361}#))))
                            #{tmp 26406}#)
                          (let ((#{tmp 26445}#
                                  ($sc-dispatch
                                    #{args 26358}#
                                    '((any any any) . any))))
                            (if (if #{tmp 26445}#
                                  (@apply
                                    (lambda (#{a 26449}#
                                             #{init 26450}#
                                             #{k 26451}#
                                             #{b 26452}#)
                                      (if (if (symbol? #{a 26449}#)
                                            #t
                                            (if (if (vector? #{a 26449}#)
                                                  (if (= (vector-length
                                                           #{a 26449}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{a 26449}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{a 26449}# 1))
                                              #f))
                                        (keyword? (syntax->datum #{k 26451}#))
                                        #f))
                                    #{tmp 26445}#)
                                  #f)
                              (@apply
                                (lambda (#{a 26479}#
                                         #{init 26480}#
                                         #{k 26481}#
                                         #{b 26482}#)
                                  (#{key 26078}#
                                    #{b 26482}#
                                    #{req 26359}#
                                    #{opt 26360}#
                                    (cons (list #{k 26481}#
                                                #{a 26479}#
                                                #{init 26480}#)
                                          #{rkey 26361}#)))
                                #{tmp 26445}#)
                              (let ((#{tmp 26483}#
                                      ($sc-dispatch #{args 26358}# '(any))))
                                (if (if #{tmp 26483}#
                                      (@apply
                                        (lambda (#{aok 26487}#)
                                          (eq? (syntax->datum #{aok 26487}#)
                                               #:allow-other-keys))
                                        #{tmp 26483}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 26488}#)
                                      (#{check 26080}#
                                        #{req 26359}#
                                        #{opt 26360}#
                                        #f
                                        (cons #t (reverse #{rkey 26361}#))))
                                    #{tmp 26483}#)
                                  (let ((#{tmp 26491}#
                                          ($sc-dispatch
                                            #{args 26358}#
                                            '(any any any))))
                                    (if (if #{tmp 26491}#
                                          (@apply
                                            (lambda (#{aok 26495}#
                                                     #{a 26496}#
                                                     #{b 26497}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 26495}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum
                                                       #{a 26496}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 26491}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 26498}#
                                                 #{a 26499}#
                                                 #{b 26500}#)
                                          (#{rest 26079}#
                                            #{b 26500}#
                                            #{req 26359}#
                                            #{opt 26360}#
                                            (cons #t
                                                  (reverse #{rkey 26361}#))))
                                        #{tmp 26491}#)
                                      (let ((#{tmp 26503}#
                                              ($sc-dispatch
                                                #{args 26358}#
                                                '(any . any))))
                                        (if (if #{tmp 26503}#
                                              (@apply
                                                (lambda (#{aok 26507}#
                                                         #{r 26508}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 26507}#)
                                                           #:allow-other-keys)
                                                    (if (symbol? #{r 26508}#)
                                                      #t
                                                      (if (if (vector?
                                                                #{r 26508}#)
                                                            (if (= (vector-length
                                                                     #{r 26508}#)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     #{r 26508}#
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (symbol?
                                                          (vector-ref
                                                            #{r 26508}#
                                                            1))
                                                        #f))
                                                    #f))
                                                #{tmp 26503}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 26535}# #{r 26536}#)
                                              (#{rest 26079}#
                                                #{r 26536}#
                                                #{req 26359}#
                                                #{opt 26360}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 26361}#))))
                                            #{tmp 26503}#)
                                          (let ((#{tmp 26539}#
                                                  ($sc-dispatch
                                                    #{args 26358}#
                                                    '(any any))))
                                            (if (if #{tmp 26539}#
                                                  (@apply
                                                    (lambda (#{a 26543}#
                                                             #{b 26544}#)
                                                      (eq? (syntax->datum
                                                             #{a 26543}#)
                                                           #:rest))
                                                    #{tmp 26539}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 26545}#
                                                         #{b 26546}#)
                                                  (#{rest 26079}#
                                                    #{b 26546}#
                                                    #{req 26359}#
                                                    #{opt 26360}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 26361}#))))
                                                #{tmp 26539}#)
                                              (let ((#{tmp 26549}#
                                                      (list #{args 26358}#)))
                                                (if (@apply
                                                      (lambda (#{r 26551}#)
                                                        (if (symbol?
                                                              #{r 26551}#)
                                                          #t
                                                          (if (if (vector?
                                                                    #{r 26551}#)
                                                                (if (= (vector-length
                                                                         #{r 26551}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{r 26551}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (symbol?
                                                              (vector-ref
                                                                #{r 26551}#
                                                                1))
                                                            #f)))
                                                      #{tmp 26549}#)
                                                  (@apply
                                                    (lambda (#{r 26581}#)
                                                      (#{rest 26079}#
                                                        #{r 26581}#
                                                        #{req 26359}#
                                                        #{opt 26360}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 26361}#))))
                                                    #{tmp 26549}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 26075}#
                                                    #{args 26358}#)))))))))))))))))))))
          (#{rest 26079}#
            (lambda (#{args 26609}#
                     #{req 26610}#
                     #{opt 26611}#
                     #{kw 26612}#)
              (let ((#{tmp 26614}# (list #{args 26609}#)))
                (if (@apply
                      (lambda (#{r 26616}#)
                        (if (symbol? #{r 26616}#)
                          #t
                          (if (if (vector? #{r 26616}#)
                                (if (= (vector-length #{r 26616}#) 4)
                                  (eq? (vector-ref #{r 26616}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{r 26616}# 1))
                            #f)))
                      #{tmp 26614}#)
                  (@apply
                    (lambda (#{r 26646}#)
                      (#{check 26080}#
                        #{req 26610}#
                        #{opt 26611}#
                        #{r 26646}#
                        #{kw 26612}#))
                    #{tmp 26614}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 26075}#
                    #{args 26609}#)))))
          (#{check 26080}#
            (lambda (#{req 26650}#
                     #{opt 26651}#
                     #{rest 26652}#
                     #{kw 26653}#)
              (if (#{distinct-bound-ids? 4336}#
                    (append
                      #{req 26650}#
                      (map car #{opt 26651}#)
                      (if #{rest 26652}# (list #{rest 26652}#) '())
                      (if (pair? #{kw 26653}#)
                        (map cadr (cdr #{kw 26653}#))
                        '())))
                (values
                  #{req 26650}#
                  #{opt 26651}#
                  #{rest 26652}#
                  #{kw 26653}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 26075}#)))))
         (#{req 26076}# #{orig-args 26075}# '()))))
   (#{expand-lambda-case 4357}#
     (lambda (#{e 26773}#
              #{r 26774}#
              #{w 26775}#
              #{s 26776}#
              #{mod 26777}#
              #{get-formals 26778}#
              #{clauses 26779}#)
       (letrec*
         ((#{parse-req 26780}#
            (lambda (#{req 26914}#
                     #{opt 26915}#
                     #{rest 26916}#
                     #{kw 26917}#
                     #{body 26918}#)
              (let ((#{vars 26919}#
                      (map #{gen-var 4359}# #{req 26914}#))
                    (#{labels 26920}#
                      (#{gen-labels 4316}# #{req 26914}#)))
                (let ((#{r* 26921}#
                        (#{extend-var-env 4308}#
                          #{labels 26920}#
                          #{vars 26919}#
                          #{r 26774}#))
                      (#{w* 26922}#
                        (#{make-binding-wrap 4327}#
                          #{req 26914}#
                          #{labels 26920}#
                          #{w 26775}#)))
                  (#{parse-opt 26781}#
                    (map syntax->datum #{req 26914}#)
                    #{opt 26915}#
                    #{rest 26916}#
                    #{kw 26917}#
                    #{body 26918}#
                    (reverse #{vars 26919}#)
                    #{r* 26921}#
                    #{w* 26922}#
                    '()
                    '())))))
          (#{parse-opt 26781}#
            (lambda (#{req 27138}#
                     #{opt 27139}#
                     #{rest 27140}#
                     #{kw 27141}#
                     #{body 27142}#
                     #{vars 27143}#
                     #{r* 27144}#
                     #{w* 27145}#
                     #{out 27146}#
                     #{inits 27147}#)
              (if (pair? #{opt 27139}#)
                (let ((#{tmp 27148}# (car #{opt 27139}#)))
                  (let ((#{tmp 27149}#
                          ($sc-dispatch #{tmp 27148}# '(any any))))
                    (if #{tmp 27149}#
                      (@apply
                        (lambda (#{id 27151}# #{i 27152}#)
                          (let ((#{v 27153}#
                                  (let ((#{id 27161}#
                                          (if (if (vector? #{id 27151}#)
                                                (if (= (vector-length
                                                         #{id 27151}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 27151}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 27151}# 1)
                                            #{id 27151}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 27161}#)
                                        " ")))))
                            (let ((#{l 27154}#
                                    (#{gen-labels 4316}# (list #{v 27153}#))))
                              (let ((#{r** 27155}#
                                      (#{extend-var-env 4308}#
                                        #{l 27154}#
                                        (list #{v 27153}#)
                                        #{r* 27144}#)))
                                (let ((#{w** 27156}#
                                        (#{make-binding-wrap 4327}#
                                          (list #{id 27151}#)
                                          #{l 27154}#
                                          #{w* 27145}#)))
                                  (#{parse-opt 26781}#
                                    #{req 27138}#
                                    (cdr #{opt 27139}#)
                                    #{rest 27140}#
                                    #{kw 27141}#
                                    #{body 27142}#
                                    (cons #{v 27153}# #{vars 27143}#)
                                    #{r** 27155}#
                                    #{w** 27156}#
                                    (cons (syntax->datum #{id 27151}#)
                                          #{out 27146}#)
                                    (cons (#{expand 4345}#
                                            #{i 27152}#
                                            #{r* 27144}#
                                            #{w* 27145}#
                                            #{mod 26777}#)
                                          #{inits 27147}#)))))))
                        #{tmp 27149}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 27148}#))))
                (if #{rest 27140}#
                  (let ((#{v 27433}#
                          (let ((#{id 27443}#
                                  (if (if (vector? #{rest 27140}#)
                                        (if (= (vector-length #{rest 27140}#)
                                               4)
                                          (eq? (vector-ref #{rest 27140}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{rest 27140}# 1)
                                    #{rest 27140}#)))
                            (gensym
                              (string-append
                                (symbol->string #{id 27443}#)
                                " ")))))
                    (let ((#{l 27434}#
                            (#{gen-labels 4316}# (list #{v 27433}#))))
                      (let ((#{r* 27435}#
                              (#{extend-var-env 4308}#
                                #{l 27434}#
                                (list #{v 27433}#)
                                #{r* 27144}#)))
                        (let ((#{w* 27436}#
                                (#{make-binding-wrap 4327}#
                                  (list #{rest 27140}#)
                                  #{l 27434}#
                                  #{w* 27145}#)))
                          (#{parse-kw 26782}#
                            #{req 27138}#
                            (if (pair? #{out 27146}#)
                              (reverse #{out 27146}#)
                              #f)
                            (syntax->datum #{rest 27140}#)
                            (if (pair? #{kw 27141}#)
                              (cdr #{kw 27141}#)
                              #{kw 27141}#)
                            #{body 27142}#
                            (cons #{v 27433}# #{vars 27143}#)
                            #{r* 27435}#
                            #{w* 27436}#
                            (if (pair? #{kw 27141}#) (car #{kw 27141}#) #f)
                            '()
                            #{inits 27147}#)))))
                  (#{parse-kw 26782}#
                    #{req 27138}#
                    (if (pair? #{out 27146}#)
                      (reverse #{out 27146}#)
                      #f)
                    #f
                    (if (pair? #{kw 27141}#)
                      (cdr #{kw 27141}#)
                      #{kw 27141}#)
                    #{body 27142}#
                    #{vars 27143}#
                    #{r* 27144}#
                    #{w* 27145}#
                    (if (pair? #{kw 27141}#) (car #{kw 27141}#) #f)
                    '()
                    #{inits 27147}#)))))
          (#{parse-kw 26782}#
            (lambda (#{req 27643}#
                     #{opt 27644}#
                     #{rest 27645}#
                     #{kw 27646}#
                     #{body 27647}#
                     #{vars 27648}#
                     #{r* 27649}#
                     #{w* 27650}#
                     #{aok 27651}#
                     #{out 27652}#
                     #{inits 27653}#)
              (if (pair? #{kw 27646}#)
                (let ((#{tmp 27654}# (car #{kw 27646}#)))
                  (let ((#{tmp 27655}#
                          ($sc-dispatch #{tmp 27654}# '(any any any))))
                    (if #{tmp 27655}#
                      (@apply
                        (lambda (#{k 27657}# #{id 27658}# #{i 27659}#)
                          (let ((#{v 27660}#
                                  (let ((#{id 27668}#
                                          (if (if (vector? #{id 27658}#)
                                                (if (= (vector-length
                                                         #{id 27658}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 27658}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 27658}# 1)
                                            #{id 27658}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 27668}#)
                                        " ")))))
                            (let ((#{l 27661}#
                                    (#{gen-labels 4316}# (list #{v 27660}#))))
                              (let ((#{r** 27662}#
                                      (#{extend-var-env 4308}#
                                        #{l 27661}#
                                        (list #{v 27660}#)
                                        #{r* 27649}#)))
                                (let ((#{w** 27663}#
                                        (#{make-binding-wrap 4327}#
                                          (list #{id 27658}#)
                                          #{l 27661}#
                                          #{w* 27650}#)))
                                  (#{parse-kw 26782}#
                                    #{req 27643}#
                                    #{opt 27644}#
                                    #{rest 27645}#
                                    (cdr #{kw 27646}#)
                                    #{body 27647}#
                                    (cons #{v 27660}# #{vars 27648}#)
                                    #{r** 27662}#
                                    #{w** 27663}#
                                    #{aok 27651}#
                                    (cons (list (syntax->datum #{k 27657}#)
                                                (syntax->datum #{id 27658}#)
                                                #{v 27660}#)
                                          #{out 27652}#)
                                    (cons (#{expand 4345}#
                                            #{i 27659}#
                                            #{r* 27649}#
                                            #{w* 27650}#
                                            #{mod 26777}#)
                                          #{inits 27653}#)))))))
                        #{tmp 27655}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 27654}#))))
                (#{parse-body 26783}#
                  #{req 27643}#
                  #{opt 27644}#
                  #{rest 27645}#
                  (if (if #{aok 27651}#
                        #{aok 27651}#
                        (pair? #{out 27652}#))
                    (cons #{aok 27651}# (reverse #{out 27652}#))
                    #f)
                  #{body 27647}#
                  (reverse #{vars 27648}#)
                  #{r* 27649}#
                  #{w* 27650}#
                  (reverse #{inits 27653}#)
                  '()))))
          (#{parse-body 26783}#
            (lambda (#{req 27949}#
                     #{opt 27950}#
                     #{rest 27951}#
                     #{kw 27952}#
                     #{body 27953}#
                     #{vars 27954}#
                     #{r* 27955}#
                     #{w* 27956}#
                     #{inits 27957}#
                     #{meta 27958}#)
              (let ((#{tmp 27960}#
                      ($sc-dispatch
                        #{body 27953}#
                        '(any any . each-any))))
                (if (if #{tmp 27960}#
                      (@apply
                        (lambda (#{docstring 27964}# #{e1 27965}# #{e2 27966}#)
                          (string? (syntax->datum #{docstring 27964}#)))
                        #{tmp 27960}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 27967}# #{e1 27968}# #{e2 27969}#)
                      (#{parse-body 26783}#
                        #{req 27949}#
                        #{opt 27950}#
                        #{rest 27951}#
                        #{kw 27952}#
                        (cons #{e1 27968}# #{e2 27969}#)
                        #{vars 27954}#
                        #{r* 27955}#
                        #{w* 27956}#
                        #{inits 27957}#
                        (append
                          #{meta 27958}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 27967}#))))))
                    #{tmp 27960}#)
                  (let ((#{tmp 27970}#
                          ($sc-dispatch
                            #{body 27953}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 27970}#
                      (@apply
                        (lambda (#{k 27974}#
                                 #{v 27975}#
                                 #{e1 27976}#
                                 #{e2 27977}#)
                          (#{parse-body 26783}#
                            #{req 27949}#
                            #{opt 27950}#
                            #{rest 27951}#
                            #{kw 27952}#
                            (cons #{e1 27976}# #{e2 27977}#)
                            #{vars 27954}#
                            #{r* 27955}#
                            #{w* 27956}#
                            #{inits 27957}#
                            (append
                              #{meta 27958}#
                              (syntax->datum
                                (map cons #{k 27974}# #{v 27975}#)))))
                        #{tmp 27970}#)
                      (let ((#{tmp 27978}#
                              ($sc-dispatch #{body 27953}# '(any . each-any))))
                        (if #{tmp 27978}#
                          (@apply
                            (lambda (#{e1 27982}# #{e2 27983}#)
                              (values
                                #{meta 27958}#
                                #{req 27949}#
                                #{opt 27950}#
                                #{rest 27951}#
                                #{kw 27952}#
                                #{inits 27957}#
                                #{vars 27954}#
                                (#{expand-body 4349}#
                                  (cons #{e1 27982}# #{e2 27983}#)
                                  (#{wrap 4338}#
                                    (begin
                                      (if (if (pair? #{e 26773}#)
                                            #{s 26776}#
                                            #f)
                                        (set-source-properties!
                                          #{e 26773}#
                                          #{s 26776}#))
                                      #{e 26773}#)
                                    #{w 26775}#
                                    #{mod 26777}#)
                                  #{r* 27955}#
                                  #{w* 27956}#
                                  #{mod 26777}#)))
                            #{tmp 27978}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 27953}#))))))))))
         (let ((#{tmp 26785}#
                 ($sc-dispatch #{clauses 26779}# '())))
           (if #{tmp 26785}#
             (@apply
               (lambda () (values '() #f))
               #{tmp 26785}#)
             (let ((#{tmp 26790}#
                     ($sc-dispatch
                       #{clauses 26779}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 26790}#
                 (@apply
                   (lambda (#{args 26794}#
                            #{e1 26795}#
                            #{e2 26796}#
                            #{args* 26797}#
                            #{e1* 26798}#
                            #{e2* 26799}#)
                     (call-with-values
                       (lambda ()
                         (#{get-formals 26778}# #{args 26794}#))
                       (lambda (#{req 26800}#
                                #{opt 26801}#
                                #{rest 26802}#
                                #{kw 26803}#)
                         (call-with-values
                           (lambda ()
                             (#{parse-req 26780}#
                               #{req 26800}#
                               #{opt 26801}#
                               #{rest 26802}#
                               #{kw 26803}#
                               (cons #{e1 26795}# #{e2 26796}#)))
                           (lambda (#{meta 26870}#
                                    #{req 26871}#
                                    #{opt 26872}#
                                    #{rest 26873}#
                                    #{kw 26874}#
                                    #{inits 26875}#
                                    #{vars 26876}#
                                    #{body 26877}#)
                             (call-with-values
                               (lambda ()
                                 (#{expand-lambda-case 4357}#
                                   #{e 26773}#
                                   #{r 26774}#
                                   #{w 26775}#
                                   #{s 26776}#
                                   #{mod 26777}#
                                   #{get-formals 26778}#
                                   (map (lambda (#{tmp 2775 26878}#
                                                 #{tmp 2774 26879}#
                                                 #{tmp 2773 26880}#)
                                          (cons #{tmp 2773 26880}#
                                                (cons #{tmp 2774 26879}#
                                                      #{tmp 2775 26878}#)))
                                        #{e2* 26799}#
                                        #{e1* 26798}#
                                        #{args* 26797}#)))
                               (lambda (#{meta* 26881}# #{else* 26882}#)
                                 (values
                                   (append #{meta 26870}# #{meta* 26881}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #{s 26776}#
                                     #{req 26871}#
                                     #{opt 26872}#
                                     #{rest 26873}#
                                     #{kw 26874}#
                                     #{inits 26875}#
                                     #{vars 26876}#
                                     #{body 26877}#
                                     #{else* 26882}#)))))))))
                   #{tmp 26790}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 26779}#))))))))
   (#{strip 4358}#
     (lambda (#{x 28020}# #{w 28021}#)
       (if (memq 'top (car #{w 28021}#))
         #{x 28020}#
         (letrec*
           ((#{f 28022}#
              (lambda (#{x 28025}#)
                (if (if (vector? #{x 28025}#)
                      (if (= (vector-length #{x 28025}#) 4)
                        (eq? (vector-ref #{x 28025}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{strip 4358}#
                    (vector-ref #{x 28025}# 1)
                    (vector-ref #{x 28025}# 2))
                  (if (pair? #{x 28025}#)
                    (let ((#{a 28044}# (#{f 28022}# (car #{x 28025}#)))
                          (#{d 28045}# (#{f 28022}# (cdr #{x 28025}#))))
                      (if (if (eq? #{a 28044}# (car #{x 28025}#))
                            (eq? #{d 28045}# (cdr #{x 28025}#))
                            #f)
                        #{x 28025}#
                        (cons #{a 28044}# #{d 28045}#)))
                    (if (vector? #{x 28025}#)
                      (let ((#{old 28048}# (vector->list #{x 28025}#)))
                        (let ((#{new 28049}# (map #{f 28022}# #{old 28048}#)))
                          (letrec*
                            ((#{lp 28050}#
                               (lambda (#{l1 28126}# #{l2 28127}#)
                                 (if (null? #{l1 28126}#)
                                   #{x 28025}#
                                   (if (eq? (car #{l1 28126}#)
                                            (car #{l2 28127}#))
                                     (#{lp 28050}#
                                       (cdr #{l1 28126}#)
                                       (cdr #{l2 28127}#))
                                     (list->vector #{new 28049}#))))))
                            (#{lp 28050}# #{old 28048}# #{new 28049}#))))
                      #{x 28025}#))))))
           (#{f 28022}# #{x 28020}#)))))
   (#{gen-var 4359}#
     (lambda (#{id 26926}#)
       (let ((#{id 26927}#
               (if (if (vector? #{id 26926}#)
                     (if (= (vector-length #{id 26926}#) 4)
                       (eq? (vector-ref #{id 26926}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{id 26926}# 1)
                 #{id 26926}#)))
         (gensym
           (string-append (symbol->string #{id 26927}#) " "))))))
  (begin
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 4311}#
      'core
      'fluid-let-syntax
      (lambda (#{e 4480}#
               #{r 4481}#
               #{w 4482}#
               #{s 4483}#
               #{mod 4484}#)
        (let ((#{tmp 4486}#
                ($sc-dispatch
                  #{e 4480}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 4486}#
                (@apply
                  (lambda (#{var 4490}#
                           #{val 4491}#
                           #{e1 4492}#
                           #{e2 4493}#)
                    (#{valid-bound-ids? 4335}# #{var 4490}#))
                  #{tmp 4486}#)
                #f)
            (@apply
              (lambda (#{var 4571}#
                       #{val 4572}#
                       #{e1 4573}#
                       #{e2 4574}#)
                (let ((#{names 4575}#
                        (map (lambda (#{x 4765}#)
                               (#{id-var-name 4332}# #{x 4765}# #{w 4482}#))
                             #{var 4571}#)))
                  (begin
                    (for-each
                      (lambda (#{id 4576}# #{n 4577}#)
                        (let ((#{atom-key 4578}#
                                (car (let ((#{t 4702}#
                                             (assq #{n 4577}# #{r 4481}#)))
                                       (if #{t 4702}#
                                         (cdr #{t 4702}#)
                                         (if (symbol? #{n 4577}#)
                                           (let ((#{t 4707}#
                                                   (begin
                                                     (if (if (not #{mod 4484}#)
                                                           (current-module)
                                                           #f)
                                                       (warn "module system is booted, we should have a module"
                                                             #{n 4577}#))
                                                     (let ((#{v 4744}#
                                                             (module-variable
                                                               (if #{mod 4484}#
                                                                 (resolve-module
                                                                   (cdr #{mod 4484}#))
                                                                 (current-module))
                                                               #{n 4577}#)))
                                                       (if #{v 4744}#
                                                         (if (variable-bound?
                                                               #{v 4744}#)
                                                           (let ((#{val 4753}#
                                                                   (variable-ref
                                                                     #{v 4744}#)))
                                                             (if (macro?
                                                                   #{val 4753}#)
                                                               (if (macro-type
                                                                     #{val 4753}#)
                                                                 (cons (macro-type
                                                                         #{val 4753}#)
                                                                       (macro-binding
                                                                         #{val 4753}#))
                                                                 #f)
                                                               #f))
                                                           #f)
                                                         #f)))))
                                             (if #{t 4707}#
                                               #{t 4707}#
                                               '(global)))
                                           '(displaced-lexical)))))))
                          (if (let ((#{t 4611}# #{atom-key 4578}#))
                                (eqv? #{t 4611}# 'displaced-lexical))
                            (syntax-violation
                              'fluid-let-syntax
                              "identifier out of context"
                              #{e 4480}#
                              (#{wrap 4338}#
                                (begin
                                  (if (if (pair? #{id 4576}#) #{s 4483}# #f)
                                    (set-source-properties!
                                      #{id 4576}#
                                      #{s 4483}#))
                                  #{id 4576}#)
                                #{w 4482}#
                                #{mod 4484}#)))))
                      #{var 4571}#
                      #{names 4575}#)
                    (#{expand-body 4349}#
                      (cons #{e1 4573}# #{e2 4574}#)
                      (#{wrap 4338}#
                        (begin
                          (if (if (pair? #{e 4480}#) #{s 4483}# #f)
                            (set-source-properties! #{e 4480}# #{s 4483}#))
                          #{e 4480}#)
                        #{w 4482}#
                        #{mod 4484}#)
                      (#{extend-env 4307}#
                        #{names 4575}#
                        (let ((#{trans-r 4851}#
                                (#{macros-only-env 4309}# #{r 4481}#)))
                          (map (lambda (#{x 4852}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 4351}#
                                         (#{expand 4345}#
                                           #{x 4852}#
                                           #{trans-r 4851}#
                                           #{w 4482}#
                                           #{mod 4484}#)
                                         #{mod 4484}#)))
                               #{val 4572}#))
                        #{r 4481}#)
                      #{w 4482}#
                      #{mod 4484}#))))
              #{tmp 4486}#)
            (syntax-violation
              'fluid-let-syntax
              "bad syntax"
              (#{wrap 4338}#
                (begin
                  (if (if (pair? #{e 4480}#) #{s 4483}# #f)
                    (set-source-properties! #{e 4480}# #{s 4483}#))
                  #{e 4480}#)
                #{w 4482}#
                #{mod 4484}#))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 5066}#
                 #{r 5067}#
                 #{w 5068}#
                 #{s 5069}#
                 #{mod 5070}#)
          (let ((#{tmp 5072}# ($sc-dispatch #{e 5066}# '(_ any))))
            (if #{tmp 5072}#
              (@apply
                (lambda (#{e 5075}#)
                  (let ((#{exp 5079}#
                          (#{strip 4358}# #{e 5075}# #{w 5068}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 5069}#
                      #{exp 5079}#)))
                #{tmp 5072}#)
              (syntax-violation
                'quote
                "bad syntax"
                (#{wrap 4338}#
                  (begin
                    (if (if (pair? #{e 5066}#) #{s 5069}# #f)
                      (set-source-properties! #{e 5066}# #{s 5069}#))
                    #{e 5066}#)
                  #{w 5068}#
                  #{mod 5070}#)))))))
    (#{global-extend 4311}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 5306}#
           (lambda (#{src 5408}#
                    #{e 5409}#
                    #{r 5410}#
                    #{maps 5411}#
                    #{ellipsis? 5412}#
                    #{mod 5413}#)
             (if (if (symbol? #{e 5409}#)
                   #t
                   (if (if (vector? #{e 5409}#)
                         (if (= (vector-length #{e 5409}#) 4)
                           (eq? (vector-ref #{e 5409}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 5409}# 1))
                     #f))
               (let ((#{label 5440}#
                       (#{id-var-name 4332}# #{e 5409}# '(()))))
                 (let ((#{b 5441}#
                         (let ((#{t 5578}# (assq #{label 5440}# #{r 5410}#)))
                           (if #{t 5578}#
                             (cdr #{t 5578}#)
                             (if (symbol? #{label 5440}#)
                               (let ((#{t 5583}#
                                       (begin
                                         (if (if (not #{mod 5413}#)
                                               (current-module)
                                               #f)
                                           (warn "module system is booted, we should have a module"
                                                 #{label 5440}#))
                                         (let ((#{v 5620}#
                                                 (module-variable
                                                   (if #{mod 5413}#
                                                     (resolve-module
                                                       (cdr #{mod 5413}#))
                                                     (current-module))
                                                   #{label 5440}#)))
                                           (if #{v 5620}#
                                             (if (variable-bound? #{v 5620}#)
                                               (let ((#{val 5629}#
                                                       (variable-ref
                                                         #{v 5620}#)))
                                                 (if (macro? #{val 5629}#)
                                                   (if (macro-type
                                                         #{val 5629}#)
                                                     (cons (macro-type
                                                             #{val 5629}#)
                                                           (macro-binding
                                                             #{val 5629}#))
                                                     #f)
                                                   #f))
                                               #f)
                                             #f)))))
                                 (if #{t 5583}# #{t 5583}# '(global)))
                               '(displaced-lexical))))))
                   (if (eq? (car #{b 5441}#) 'syntax)
                     (call-with-values
                       (lambda ()
                         (let ((#{var.lev 5474}# (cdr #{b 5441}#)))
                           (#{gen-ref 5307}#
                             #{src 5408}#
                             (car #{var.lev 5474}#)
                             (cdr #{var.lev 5474}#)
                             #{maps 5411}#)))
                       (lambda (#{var 5570}# #{maps 5571}#)
                         (values (list 'ref #{var 5570}#) #{maps 5571}#)))
                     (if (#{ellipsis? 5412}# #{e 5409}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 5408}#)
                       (values (list 'quote #{e 5409}#) #{maps 5411}#)))))
               (let ((#{tmp 5641}#
                       ($sc-dispatch #{e 5409}# '(any any))))
                 (if (if #{tmp 5641}#
                       (@apply
                         (lambda (#{dots 5645}# #{e 5646}#)
                           (#{ellipsis? 5412}# #{dots 5645}#))
                         #{tmp 5641}#)
                       #f)
                   (@apply
                     (lambda (#{dots 5647}# #{e 5648}#)
                       (#{gen-syntax 5306}#
                         #{src 5408}#
                         #{e 5648}#
                         #{r 5410}#
                         #{maps 5411}#
                         (lambda (#{x 5649}#) #f)
                         #{mod 5413}#))
                     #{tmp 5641}#)
                   (let ((#{tmp 5650}#
                           ($sc-dispatch #{e 5409}# '(any any . any))))
                     (if (if #{tmp 5650}#
                           (@apply
                             (lambda (#{x 5654}# #{dots 5655}# #{y 5656}#)
                               (#{ellipsis? 5412}# #{dots 5655}#))
                             #{tmp 5650}#)
                           #f)
                       (@apply
                         (lambda (#{x 5657}# #{dots 5658}# #{y 5659}#)
                           (letrec*
                             ((#{f 5660}#
                                (lambda (#{y 5668}# #{k 5669}#)
                                  (let ((#{tmp 5671}#
                                          ($sc-dispatch
                                            #{y 5668}#
                                            '(any . any))))
                                    (if (if #{tmp 5671}#
                                          (@apply
                                            (lambda (#{dots 5675}# #{y 5676}#)
                                              (#{ellipsis? 5412}#
                                                #{dots 5675}#))
                                            #{tmp 5671}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 5677}# #{y 5678}#)
                                          (#{f 5660}#
                                            #{y 5678}#
                                            (lambda (#{maps 5679}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 5669}#
                                                    (cons '() #{maps 5679}#)))
                                                (lambda (#{x 5680}#
                                                         #{maps 5681}#)
                                                  (if (null? (car #{maps 5681}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 5408}#)
                                                    (values
                                                      (let ((#{map-env 5685}#
                                                              (car #{maps 5681}#)))
                                                        (list 'apply
                                                              '(primitive
                                                                 append)
                                                              (#{gen-map 5309}#
                                                                #{x 5680}#
                                                                #{map-env 5685}#)))
                                                      (cdr #{maps 5681}#))))))))
                                        #{tmp 5671}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 5306}#
                                            #{src 5408}#
                                            #{y 5668}#
                                            #{r 5410}#
                                            #{maps 5411}#
                                            #{ellipsis? 5412}#
                                            #{mod 5413}#))
                                        (lambda (#{y 5688}# #{maps 5689}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 5669}# #{maps 5689}#))
                                            (lambda (#{x 5690}# #{maps 5691}#)
                                              (values
                                                (if (equal? #{y 5688}# ''())
                                                  #{x 5690}#
                                                  (list 'append
                                                        #{x 5690}#
                                                        #{y 5688}#))
                                                #{maps 5691}#))))))))))
                             (#{f 5660}#
                               #{y 5659}#
                               (lambda (#{maps 5663}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 5306}#
                                       #{src 5408}#
                                       #{x 5657}#
                                       #{r 5410}#
                                       (cons '() #{maps 5663}#)
                                       #{ellipsis? 5412}#
                                       #{mod 5413}#))
                                   (lambda (#{x 5664}# #{maps 5665}#)
                                     (if (null? (car #{maps 5665}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 5408}#)
                                       (values
                                         (#{gen-map 5309}#
                                           #{x 5664}#
                                           (car #{maps 5665}#))
                                         (cdr #{maps 5665}#)))))))))
                         #{tmp 5650}#)
                       (let ((#{tmp 5707}#
                               ($sc-dispatch #{e 5409}# '(any . any))))
                         (if #{tmp 5707}#
                           (@apply
                             (lambda (#{x 5711}# #{y 5712}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 5306}#
                                     #{src 5408}#
                                     #{x 5711}#
                                     #{r 5410}#
                                     #{maps 5411}#
                                     #{ellipsis? 5412}#
                                     #{mod 5413}#))
                                 (lambda (#{x 5713}# #{maps 5714}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5306}#
                                         #{src 5408}#
                                         #{y 5712}#
                                         #{r 5410}#
                                         #{maps 5714}#
                                         #{ellipsis? 5412}#
                                         #{mod 5413}#))
                                     (lambda (#{y 5715}# #{maps 5716}#)
                                       (values
                                         (let ((#{atom-key 5721}#
                                                 (car #{y 5715}#)))
                                           (if (eqv? #{atom-key 5721}# 'quote)
                                             (if (eq? (car #{x 5713}#) 'quote)
                                               (list 'quote
                                                     (cons (car (cdr #{x 5713}#))
                                                           (car (cdr #{y 5715}#))))
                                               (if (eq? (car (cdr #{y 5715}#))
                                                        '())
                                                 (list 'list #{x 5713}#)
                                                 (list 'cons
                                                       #{x 5713}#
                                                       #{y 5715}#)))
                                             (if (eqv? #{atom-key 5721}# 'list)
                                               (cons 'list
                                                     (cons #{x 5713}#
                                                           (cdr #{y 5715}#)))
                                               (list 'cons
                                                     #{x 5713}#
                                                     #{y 5715}#))))
                                         #{maps 5716}#))))))
                             #{tmp 5707}#)
                           (let ((#{tmp 5750}#
                                   ($sc-dispatch
                                     #{e 5409}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 5750}#
                               (@apply
                                 (lambda (#{e1 5754}# #{e2 5755}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5306}#
                                         #{src 5408}#
                                         (cons #{e1 5754}# #{e2 5755}#)
                                         #{r 5410}#
                                         #{maps 5411}#
                                         #{ellipsis? 5412}#
                                         #{mod 5413}#))
                                     (lambda (#{e 5756}# #{maps 5757}#)
                                       (values
                                         (if (eq? (car #{e 5756}#) 'list)
                                           (cons 'vector (cdr #{e 5756}#))
                                           (if (eq? (car #{e 5756}#) 'quote)
                                             (list 'quote
                                                   (list->vector
                                                     (car (cdr #{e 5756}#))))
                                             (list 'list->vector #{e 5756}#)))
                                         #{maps 5757}#))))
                                 #{tmp 5750}#)
                               (values
                                 (list 'quote #{e 5409}#)
                                 #{maps 5411}#))))))))))))
         (#{gen-ref 5307}#
           (lambda (#{src 5784}#
                    #{var 5785}#
                    #{level 5786}#
                    #{maps 5787}#)
             (if (= #{level 5786}# 0)
               (values #{var 5785}# #{maps 5787}#)
               (if (null? #{maps 5787}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 5784}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 5307}#
                       #{src 5784}#
                       #{var 5785}#
                       (#{1-}# #{level 5786}#)
                       (cdr #{maps 5787}#)))
                   (lambda (#{outer-var 5788}# #{outer-maps 5789}#)
                     (let ((#{b 5790}#
                             (assq #{outer-var 5788}# (car #{maps 5787}#))))
                       (if #{b 5790}#
                         (values (cdr #{b 5790}#) #{maps 5787}#)
                         (let ((#{inner-var 5792}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 5792}#
                             (cons (cons (cons #{outer-var 5788}#
                                               #{inner-var 5792}#)
                                         (car #{maps 5787}#))
                                   #{outer-maps 5789}#)))))))))))
         (#{gen-map 5309}#
           (lambda (#{e 5806}# #{map-env 5807}#)
             (let ((#{formals 5808}# (map cdr #{map-env 5807}#))
                   (#{actuals 5809}#
                     (map (lambda (#{x 5811}#)
                            (list 'ref (car #{x 5811}#)))
                          #{map-env 5807}#)))
               (if (eq? (car #{e 5806}#) 'ref)
                 (car #{actuals 5809}#)
                 (if (and-map
                       (lambda (#{x 5812}#)
                         (if (eq? (car #{x 5812}#) 'ref)
                           (memq (car (cdr #{x 5812}#)) #{formals 5808}#)
                           #f))
                       (cdr #{e 5806}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 5806}#))
                               (map (let ((#{r 5814}#
                                            (map cons
                                                 #{formals 5808}#
                                                 #{actuals 5809}#)))
                                      (lambda (#{x 5815}#)
                                        (cdr (assq (car (cdr #{x 5815}#))
                                                   #{r 5814}#))))
                                    (cdr #{e 5806}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 5808}# #{e 5806}#)
                               #{actuals 5809}#)))))))
         (#{regen 5313}#
           (lambda (#{x 5817}#)
             (let ((#{atom-key 5818}# (car #{x 5817}#)))
               (if (eqv? #{atom-key 5818}# 'ref)
                 (let ((#{name 5828}# (car (cdr #{x 5817}#)))
                       (#{var 5829}# (car (cdr #{x 5817}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 5828}#
                     #{var 5829}#))
                 (if (eqv? #{atom-key 5818}# 'primitive)
                   (let ((#{name 5841}# (car (cdr #{x 5817}#))))
                     (if (equal? (module-name (current-module)) '(guile))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 7)
                         #f
                         #{name 5841}#)
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 5)
                         #f
                         '(guile)
                         #{name 5841}#
                         #f)))
                   (if (eqv? #{atom-key 5818}# 'quote)
                     (let ((#{exp 5859}# (car (cdr #{x 5817}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 5859}#))
                     (if (eqv? #{atom-key 5818}# 'lambda)
                       (if (list? (car (cdr #{x 5817}#)))
                         (let ((#{req 5870}# (car (cdr #{x 5817}#)))
                               (#{vars 5872}# (car (cdr #{x 5817}#)))
                               (#{exp 5874}#
                                 (#{regen 5313}#
                                   (car (cdr (cdr #{x 5817}#))))))
                           (let ((#{body 5879}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     #{req 5870}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 5872}#
                                     #{exp 5874}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 13)
                               #f
                               '()
                               #{body 5879}#)))
                         (error "how did we get here" #{x 5817}#))
                       (let ((#{fun-exp 5895}#
                               (let ((#{name 5904}# (car #{x 5817}#)))
                                 (if (equal?
                                       (module-name (current-module))
                                       '(guile))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 7)
                                     #f
                                     #{name 5904}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 5)
                                     #f
                                     '(guile)
                                     #{name 5904}#
                                     #f))))
                             (#{arg-exps 5896}#
                               (map #{regen 5313}# (cdr #{x 5817}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 5895}#
                           #{arg-exps 5896}#))))))))))
        (lambda (#{e 5314}#
                 #{r 5315}#
                 #{w 5316}#
                 #{s 5317}#
                 #{mod 5318}#)
          (let ((#{e 5319}#
                  (#{wrap 4338}#
                    (begin
                      (if (if (pair? #{e 5314}#) #{s 5317}# #f)
                        (set-source-properties! #{e 5314}# #{s 5317}#))
                      #{e 5314}#)
                    #{w 5316}#
                    #{mod 5318}#)))
            (let ((#{tmp 5321}# ($sc-dispatch #{e 5319}# '(_ any))))
              (if #{tmp 5321}#
                (@apply
                  (lambda (#{x 5346}#)
                    (call-with-values
                      (lambda ()
                        (#{gen-syntax 5306}#
                          #{e 5319}#
                          #{x 5346}#
                          #{r 5315}#
                          '()
                          #{ellipsis? 4353}#
                          #{mod 5318}#))
                      (lambda (#{e 5400}# #{maps 5401}#)
                        (#{regen 5313}# #{e 5400}#))))
                  #{tmp 5321}#)
                (syntax-violation
                  'syntax
                  "bad `syntax' form"
                  #{e 5319}#)))))))
    (#{global-extend 4311}#
      'core
      'lambda
      (lambda (#{e 6099}#
               #{r 6100}#
               #{w 6101}#
               #{s 6102}#
               #{mod 6103}#)
        (let ((#{tmp 6105}#
                ($sc-dispatch #{e 6099}# '(_ any any . each-any))))
          (if #{tmp 6105}#
            (@apply
              (lambda (#{args 6109}# #{e1 6110}# #{e2 6111}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 4354}# #{args 6109}#))
                  (lambda (#{req 6114}#
                           #{opt 6115}#
                           #{rest 6116}#
                           #{kw 6117}#)
                    (letrec*
                      ((#{lp 6118}#
                         (lambda (#{body 6121}# #{meta 6122}#)
                           (let ((#{tmp 6124}#
                                   ($sc-dispatch
                                     #{body 6121}#
                                     '(any any . each-any))))
                             (if (if #{tmp 6124}#
                                   (@apply
                                     (lambda (#{docstring 6128}#
                                              #{e1 6129}#
                                              #{e2 6130}#)
                                       (string?
                                         (syntax->datum #{docstring 6128}#)))
                                     #{tmp 6124}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 6131}#
                                          #{e1 6132}#
                                          #{e2 6133}#)
                                   (#{lp 6118}#
                                     (cons #{e1 6132}# #{e2 6133}#)
                                     (append
                                       #{meta 6122}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 6131}#))))))
                                 #{tmp 6124}#)
                               (let ((#{tmp 6134}#
                                       ($sc-dispatch
                                         #{body 6121}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 6134}#
                                   (@apply
                                     (lambda (#{k 6138}#
                                              #{v 6139}#
                                              #{e1 6140}#
                                              #{e2 6141}#)
                                       (#{lp 6118}#
                                         (cons #{e1 6140}# #{e2 6141}#)
                                         (append
                                           #{meta 6122}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 6138}#
                                                  #{v 6139}#)))))
                                     #{tmp 6134}#)
                                   (#{expand-simple-lambda 4355}#
                                     #{e 6099}#
                                     #{r 6100}#
                                     #{w 6101}#
                                     #{s 6102}#
                                     #{mod 6103}#
                                     #{req 6114}#
                                     #{rest 6116}#
                                     #{meta 6122}#
                                     #{body 6121}#))))))))
                      (#{lp 6118}# (cons #{e1 6110}# #{e2 6111}#) '())))))
              #{tmp 6105}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 6099}#)))))
    (#{global-extend 4311}#
      'core
      'lambda*
      (lambda (#{e 6433}#
               #{r 6434}#
               #{w 6435}#
               #{s 6436}#
               #{mod 6437}#)
        (let ((#{tmp 6439}#
                ($sc-dispatch #{e 6433}# '(_ any any . each-any))))
          (if #{tmp 6439}#
            (@apply
              (lambda (#{args 6443}# #{e1 6444}# #{e2 6445}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4357}#
                      #{e 6433}#
                      #{r 6434}#
                      #{w 6435}#
                      #{s 6436}#
                      #{mod 6437}#
                      #{lambda*-formals 4356}#
                      (list (cons #{args 6443}#
                                  (cons #{e1 6444}# #{e2 6445}#)))))
                  (lambda (#{meta 6448}# #{lcase 6449}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6436}#
                      #{meta 6448}#
                      #{lcase 6449}#))))
              #{tmp 6439}#)
            (syntax-violation
              'lambda
              "bad lambda*"
              #{e 6433}#)))))
    (#{global-extend 4311}#
      'core
      'case-lambda
      (lambda (#{e 6623}#
               #{r 6624}#
               #{w 6625}#
               #{s 6626}#
               #{mod 6627}#)
        (let ((#{tmp 6629}#
                ($sc-dispatch
                  #{e 6623}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 6629}#
            (@apply
              (lambda (#{args 6633}#
                       #{e1 6634}#
                       #{e2 6635}#
                       #{args* 6636}#
                       #{e1* 6637}#
                       #{e2* 6638}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4357}#
                      #{e 6623}#
                      #{r 6624}#
                      #{w 6625}#
                      #{s 6626}#
                      #{mod 6627}#
                      #{lambda-formals 4354}#
                      (cons (cons #{args 6633}#
                                  (cons #{e1 6634}# #{e2 6635}#))
                            (map (lambda (#{tmp 3274 6641}#
                                          #{tmp 3273 6642}#
                                          #{tmp 3272 6643}#)
                                   (cons #{tmp 3272 6643}#
                                         (cons #{tmp 3273 6642}#
                                               #{tmp 3274 6641}#)))
                                 #{e2* 6638}#
                                 #{e1* 6637}#
                                 #{args* 6636}#))))
                  (lambda (#{meta 6644}# #{lcase 6645}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6626}#
                      #{meta 6644}#
                      #{lcase 6645}#))))
              #{tmp 6629}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda"
              #{e 6623}#)))))
    (#{global-extend 4311}#
      'core
      'case-lambda*
      (lambda (#{e 6808}#
               #{r 6809}#
               #{w 6810}#
               #{s 6811}#
               #{mod 6812}#)
        (let ((#{tmp 6814}#
                ($sc-dispatch
                  #{e 6808}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 6814}#
            (@apply
              (lambda (#{args 6818}#
                       #{e1 6819}#
                       #{e2 6820}#
                       #{args* 6821}#
                       #{e1* 6822}#
                       #{e2* 6823}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4357}#
                      #{e 6808}#
                      #{r 6809}#
                      #{w 6810}#
                      #{s 6811}#
                      #{mod 6812}#
                      #{lambda*-formals 4356}#
                      (cons (cons #{args 6818}#
                                  (cons #{e1 6819}# #{e2 6820}#))
                            (map (lambda (#{tmp 3309 6826}#
                                          #{tmp 3308 6827}#
                                          #{tmp 3307 6828}#)
                                   (cons #{tmp 3307 6828}#
                                         (cons #{tmp 3308 6827}#
                                               #{tmp 3309 6826}#)))
                                 #{e2* 6823}#
                                 #{e1* 6822}#
                                 #{args* 6821}#))))
                  (lambda (#{meta 6829}# #{lcase 6830}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6811}#
                      #{meta 6829}#
                      #{lcase 6830}#))))
              #{tmp 6814}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda*"
              #{e 6808}#)))))
    (#{global-extend 4311}#
      'core
      'let
      (letrec*
        ((#{expand-let 7022}#
           (lambda (#{e 7171}#
                    #{r 7172}#
                    #{w 7173}#
                    #{s 7174}#
                    #{mod 7175}#
                    #{constructor 7176}#
                    #{ids 7177}#
                    #{vals 7178}#
                    #{exps 7179}#)
             (if (not (#{valid-bound-ids? 4335}# #{ids 7177}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 7171}#)
               (let ((#{labels 7257}#
                       (#{gen-labels 4316}# #{ids 7177}#))
                     (#{new-vars 7258}#
                       (map #{gen-var 4359}# #{ids 7177}#)))
                 (let ((#{nw 7259}#
                         (#{make-binding-wrap 4327}#
                           #{ids 7177}#
                           #{labels 7257}#
                           #{w 7173}#))
                       (#{nr 7260}#
                         (#{extend-var-env 4308}#
                           #{labels 7257}#
                           #{new-vars 7258}#
                           #{r 7172}#)))
                   (#{constructor 7176}#
                     #{s 7174}#
                     (map syntax->datum #{ids 7177}#)
                     #{new-vars 7258}#
                     (map (lambda (#{x 7277}#)
                            (#{expand 4345}#
                              #{x 7277}#
                              #{r 7172}#
                              #{w 7173}#
                              #{mod 7175}#))
                          #{vals 7178}#)
                     (#{expand-body 4349}#
                       #{exps 7179}#
                       (#{source-wrap 4339}#
                         #{e 7171}#
                         #{nw 7259}#
                         #{s 7174}#
                         #{mod 7175}#)
                       #{nr 7260}#
                       #{nw 7259}#
                       #{mod 7175}#))))))))
        (lambda (#{e 7023}#
                 #{r 7024}#
                 #{w 7025}#
                 #{s 7026}#
                 #{mod 7027}#)
          (let ((#{tmp 7029}#
                  ($sc-dispatch
                    #{e 7023}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 7029}#
                  (@apply
                    (lambda (#{id 7033}#
                             #{val 7034}#
                             #{e1 7035}#
                             #{e2 7036}#)
                      (and-map #{id? 4313}# #{id 7033}#))
                    #{tmp 7029}#)
                  #f)
              (@apply
                (lambda (#{id 7052}#
                         #{val 7053}#
                         #{e1 7054}#
                         #{e2 7055}#)
                  (#{expand-let 7022}#
                    #{e 7023}#
                    #{r 7024}#
                    #{w 7025}#
                    #{s 7026}#
                    #{mod 7027}#
                    #{build-let 4295}#
                    #{id 7052}#
                    #{val 7053}#
                    (cons #{e1 7054}# #{e2 7055}#)))
                #{tmp 7029}#)
              (let ((#{tmp 7085}#
                      ($sc-dispatch
                        #{e 7023}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 7085}#
                      (@apply
                        (lambda (#{f 7089}#
                                 #{id 7090}#
                                 #{val 7091}#
                                 #{e1 7092}#
                                 #{e2 7093}#)
                          (if (if (symbol? #{f 7089}#)
                                #t
                                (if (if (vector? #{f 7089}#)
                                      (if (= (vector-length #{f 7089}#) 4)
                                        (eq? (vector-ref #{f 7089}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 7089}# 1))
                                  #f))
                            (and-map #{id? 4313}# #{id 7090}#)
                            #f))
                        #{tmp 7085}#)
                      #f)
                  (@apply
                    (lambda (#{f 7135}#
                             #{id 7136}#
                             #{val 7137}#
                             #{e1 7138}#
                             #{e2 7139}#)
                      (#{expand-let 7022}#
                        #{e 7023}#
                        #{r 7024}#
                        #{w 7025}#
                        #{s 7026}#
                        #{mod 7027}#
                        #{build-named-let 4296}#
                        (cons #{f 7135}# #{id 7136}#)
                        #{val 7137}#
                        (cons #{e1 7138}# #{e2 7139}#)))
                    #{tmp 7085}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (#{wrap 4338}#
                      (begin
                        (if (if (pair? #{e 7023}#) #{s 7026}# #f)
                          (set-source-properties! #{e 7023}# #{s 7026}#))
                        #{e 7023}#)
                      #{w 7025}#
                      #{mod 7027}#)))))))))
    (#{global-extend 4311}#
      'core
      'letrec
      (lambda (#{e 7726}#
               #{r 7727}#
               #{w 7728}#
               #{s 7729}#
               #{mod 7730}#)
        (let ((#{tmp 7732}#
                ($sc-dispatch
                  #{e 7726}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 7732}#
                (@apply
                  (lambda (#{id 7736}#
                           #{val 7737}#
                           #{e1 7738}#
                           #{e2 7739}#)
                    (and-map #{id? 4313}# #{id 7736}#))
                  #{tmp 7732}#)
                #f)
            (@apply
              (lambda (#{id 7755}#
                       #{val 7756}#
                       #{e1 7757}#
                       #{e2 7758}#)
                (if (not (#{valid-bound-ids? 4335}# #{id 7755}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 7726}#)
                  (let ((#{labels 7848}#
                          (#{gen-labels 4316}# #{id 7755}#))
                        (#{new-vars 7849}#
                          (map #{gen-var 4359}# #{id 7755}#)))
                    (let ((#{w 7850}#
                            (#{make-binding-wrap 4327}#
                              #{id 7755}#
                              #{labels 7848}#
                              #{w 7728}#))
                          (#{r 7851}#
                            (#{extend-var-env 4308}#
                              #{labels 7848}#
                              #{new-vars 7849}#
                              #{r 7727}#)))
                      (#{build-letrec 4297}#
                        #{s 7729}#
                        #f
                        (map syntax->datum #{id 7755}#)
                        #{new-vars 7849}#
                        (map (lambda (#{x 7938}#)
                               (#{expand 4345}#
                                 #{x 7938}#
                                 #{r 7851}#
                                 #{w 7850}#
                                 #{mod 7730}#))
                             #{val 7756}#)
                        (#{expand-body 4349}#
                          (cons #{e1 7757}# #{e2 7758}#)
                          (#{wrap 4338}#
                            (begin
                              (if (if (pair? #{e 7726}#) #{s 7729}# #f)
                                (set-source-properties! #{e 7726}# #{s 7729}#))
                              #{e 7726}#)
                            #{w 7850}#
                            #{mod 7730}#)
                          #{r 7851}#
                          #{w 7850}#
                          #{mod 7730}#))))))
              #{tmp 7732}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (#{wrap 4338}#
                (begin
                  (if (if (pair? #{e 7726}#) #{s 7729}# #f)
                    (set-source-properties! #{e 7726}# #{s 7729}#))
                  #{e 7726}#)
                #{w 7728}#
                #{mod 7730}#))))))
    (#{global-extend 4311}#
      'core
      'letrec*
      (lambda (#{e 8355}#
               #{r 8356}#
               #{w 8357}#
               #{s 8358}#
               #{mod 8359}#)
        (let ((#{tmp 8361}#
                ($sc-dispatch
                  #{e 8355}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 8361}#
                (@apply
                  (lambda (#{id 8365}#
                           #{val 8366}#
                           #{e1 8367}#
                           #{e2 8368}#)
                    (and-map #{id? 4313}# #{id 8365}#))
                  #{tmp 8361}#)
                #f)
            (@apply
              (lambda (#{id 8384}#
                       #{val 8385}#
                       #{e1 8386}#
                       #{e2 8387}#)
                (if (not (#{valid-bound-ids? 4335}# #{id 8384}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 8355}#)
                  (let ((#{labels 8477}#
                          (#{gen-labels 4316}# #{id 8384}#))
                        (#{new-vars 8478}#
                          (map #{gen-var 4359}# #{id 8384}#)))
                    (let ((#{w 8479}#
                            (#{make-binding-wrap 4327}#
                              #{id 8384}#
                              #{labels 8477}#
                              #{w 8357}#))
                          (#{r 8480}#
                            (#{extend-var-env 4308}#
                              #{labels 8477}#
                              #{new-vars 8478}#
                              #{r 8356}#)))
                      (#{build-letrec 4297}#
                        #{s 8358}#
                        #t
                        (map syntax->datum #{id 8384}#)
                        #{new-vars 8478}#
                        (map (lambda (#{x 8567}#)
                               (#{expand 4345}#
                                 #{x 8567}#
                                 #{r 8480}#
                                 #{w 8479}#
                                 #{mod 8359}#))
                             #{val 8385}#)
                        (#{expand-body 4349}#
                          (cons #{e1 8386}# #{e2 8387}#)
                          (#{wrap 4338}#
                            (begin
                              (if (if (pair? #{e 8355}#) #{s 8358}# #f)
                                (set-source-properties! #{e 8355}# #{s 8358}#))
                              #{e 8355}#)
                            #{w 8479}#
                            #{mod 8359}#)
                          #{r 8480}#
                          #{w 8479}#
                          #{mod 8359}#))))))
              #{tmp 8361}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (#{wrap 4338}#
                (begin
                  (if (if (pair? #{e 8355}#) #{s 8358}# #f)
                    (set-source-properties! #{e 8355}# #{s 8358}#))
                  #{e 8355}#)
                #{w 8357}#
                #{mod 8359}#))))))
    (#{global-extend 4311}#
      'core
      'set!
      (lambda (#{e 9038}#
               #{r 9039}#
               #{w 9040}#
               #{s 9041}#
               #{mod 9042}#)
        (let ((#{tmp 9044}#
                ($sc-dispatch #{e 9038}# '(_ any any))))
          (if (if #{tmp 9044}#
                (@apply
                  (lambda (#{id 9048}# #{val 9049}#)
                    (if (symbol? #{id 9048}#)
                      #t
                      (if (if (vector? #{id 9048}#)
                            (if (= (vector-length #{id 9048}#) 4)
                              (eq? (vector-ref #{id 9048}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 9048}# 1))
                        #f)))
                  #{tmp 9044}#)
                #f)
            (@apply
              (lambda (#{id 9076}# #{val 9077}#)
                (let ((#{n 9078}#
                        (#{id-var-name 4332}# #{id 9076}# #{w 9040}#))
                      (#{id-mod 9079}#
                        (if (if (vector? #{id 9076}#)
                              (if (= (vector-length #{id 9076}#) 4)
                                (eq? (vector-ref #{id 9076}# 0) 'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{id 9076}# 3)
                          #{mod 9042}#)))
                  (let ((#{b 9080}#
                          (let ((#{t 9767}# (assq #{n 9078}# #{r 9039}#)))
                            (if #{t 9767}#
                              (cdr #{t 9767}#)
                              (if (symbol? #{n 9078}#)
                                (let ((#{t 9772}#
                                        (begin
                                          (if (if (not #{id-mod 9079}#)
                                                (current-module)
                                                #f)
                                            (warn "module system is booted, we should have a module"
                                                  #{n 9078}#))
                                          (let ((#{v 9809}#
                                                  (module-variable
                                                    (if #{id-mod 9079}#
                                                      (resolve-module
                                                        (cdr #{id-mod 9079}#))
                                                      (current-module))
                                                    #{n 9078}#)))
                                            (if #{v 9809}#
                                              (if (variable-bound? #{v 9809}#)
                                                (let ((#{val 9818}#
                                                        (variable-ref
                                                          #{v 9809}#)))
                                                  (if (macro? #{val 9818}#)
                                                    (if (macro-type
                                                          #{val 9818}#)
                                                      (cons (macro-type
                                                              #{val 9818}#)
                                                            (macro-binding
                                                              #{val 9818}#))
                                                      #f)
                                                    #f))
                                                #f)
                                              #f)))))
                                  (if #{t 9772}# #{t 9772}# '(global)))
                                '(displaced-lexical))))))
                    (let ((#{atom-key 9081}# (car #{b 9080}#)))
                      (if (let ((#{t 9118}# #{atom-key 9081}#))
                            (eqv? #{t 9118}# 'lexical))
                        (#{build-lexical-assignment 4284}#
                          #{s 9041}#
                          (syntax->datum #{id 9076}#)
                          (cdr #{b 9080}#)
                          (#{expand 4345}#
                            #{val 9077}#
                            #{r 9039}#
                            #{w 9040}#
                            #{mod 9042}#))
                        (if (let ((#{t 9403}# #{atom-key 9081}#))
                              (eqv? #{t 9403}# 'global))
                          (#{build-global-assignment 4287}#
                            #{s 9041}#
                            #{n 9078}#
                            (#{expand 4345}#
                              #{val 9077}#
                              #{r 9039}#
                              #{w 9040}#
                              #{mod 9042}#)
                            #{id-mod 9079}#)
                          (if (let ((#{t 9658}# #{atom-key 9081}#))
                                (eqv? #{t 9658}# 'macro))
                            (let ((#{p 9721}# (cdr #{b 9080}#)))
                              (if (procedure-property
                                    #{p 9721}#
                                    'variable-transformer)
                                (#{expand 4345}#
                                  (#{expand-macro 4348}#
                                    #{p 9721}#
                                    #{e 9038}#
                                    #{r 9039}#
                                    #{w 9040}#
                                    #{s 9041}#
                                    #f
                                    #{mod 9042}#)
                                  #{r 9039}#
                                  '(())
                                  #{mod 9042}#)
                                (syntax-violation
                                  'set!
                                  "not a variable transformer"
                                  (#{wrap 4338}#
                                    #{e 9038}#
                                    #{w 9040}#
                                    #{mod 9042}#)
                                  (#{wrap 4338}#
                                    #{id 9076}#
                                    #{w 9040}#
                                    #{id-mod 9079}#))))
                            (if (eqv? #{atom-key 9081}# 'displaced-lexical)
                              (syntax-violation
                                'set!
                                "identifier out of context"
                                (#{wrap 4338}#
                                  #{id 9076}#
                                  #{w 9040}#
                                  #{mod 9042}#))
                              (syntax-violation
                                'set!
                                "bad set!"
                                (#{wrap 4338}#
                                  (begin
                                    (if (if (pair? #{e 9038}#) #{s 9041}# #f)
                                      (set-source-properties!
                                        #{e 9038}#
                                        #{s 9041}#))
                                    #{e 9038}#)
                                  #{w 9040}#
                                  #{mod 9042}#))))))))))
              #{tmp 9044}#)
            (let ((#{tmp 9919}#
                    ($sc-dispatch
                      #{e 9038}#
                      '(_ (any . each-any) any))))
              (if #{tmp 9919}#
                (@apply
                  (lambda (#{head 9923}# #{tail 9924}# #{val 9925}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 4344}#
                          #{head 9923}#
                          #{r 9039}#
                          '(())
                          #f
                          #f
                          #{mod 9042}#
                          #t))
                      (lambda (#{type 9928}#
                               #{value 9929}#
                               #{ee 9930}#
                               #{ww 9931}#
                               #{ss 9932}#
                               #{modmod 9933}#)
                        (if (eqv? #{type 9928}# 'module-ref)
                          (let ((#{val 9937}#
                                  (#{expand 4345}#
                                    #{val 9925}#
                                    #{r 9039}#
                                    #{w 9040}#
                                    #{mod 9042}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 9929}#
                                  (cons #{head 9923}# #{tail 9924}#)
                                  #{r 9039}#
                                  #{w 9040}#))
                              (lambda (#{e 9938}#
                                       #{r 9939}#
                                       #{w 9940}#
                                       #{s* 9941}#
                                       #{mod 9942}#)
                                (let ((#{tmp 9944}# (list #{e 9938}#)))
                                  (if (@apply
                                        (lambda (#{e 9946}#)
                                          (if (symbol? #{e 9946}#)
                                            #t
                                            (if (if (vector? #{e 9946}#)
                                                  (if (= (vector-length
                                                           #{e 9946}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{e 9946}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{e 9946}# 1))
                                              #f)))
                                        #{tmp 9944}#)
                                    (@apply
                                      (lambda (#{e 9976}#)
                                        (#{build-global-assignment 4287}#
                                          #{s 9041}#
                                          (syntax->datum #{e 9976}#)
                                          #{val 9937}#
                                          #{mod 9942}#))
                                      #{tmp 9944}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 9938}#))))))
                          (#{build-application 4280}#
                            #{s 9041}#
                            (#{expand 4345}#
                              (list '#(syntax-object
                                       setter
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(type value ee ww ss modmod)
                                          #((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                          #("i3555"
                                            "i3556"
                                            "i3557"
                                            "i3558"
                                            "i3559"
                                            "i3560"))
                                        #(ribcage
                                          #(head tail val)
                                          #((top) (top) (top))
                                          #("i3541" "i3542" "i3543"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w s mod)
                                          #((top) (top) (top) (top) (top))
                                          #("i3505"
                                            "i3506"
                                            "i3507"
                                            "i3508"
                                            "i3509"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-application
                                            expand-expr
                                            expand
                                            syntax-type
                                            expand-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i467"
                                           "i465"
                                           "i463"
                                           "i461"
                                           "i459"
                                           "i457"
                                           "i455"
                                           "i453"
                                           "i451"
                                           "i449"
                                           "i447"
                                           "i445"
                                           "i443"
                                           "i441"
                                           "i439"
                                           "i437"
                                           "i435"
                                           "i433"
                                           "i431"
                                           "i429"
                                           "i427"
                                           "i425"
                                           "i423"
                                           "i421"
                                           "i419"
                                           "i417"
                                           "i415"
                                           "i413"
                                           "i411"
                                           "i409"
                                           "i407"
                                           "i405"
                                           "i403"
                                           "i401"
                                           "i399"
                                           "i398"
                                           "i396"
                                           "i393"
                                           "i392"
                                           "i391"
                                           "i389"
                                           "i388"
                                           "i386"
                                           "i384"
                                           "i382"
                                           "i380"
                                           "i378"
                                           "i376"
                                           "i374"
                                           "i372"
                                           "i369"
                                           "i367"
                                           "i366"
                                           "i364"
                                           "i362"
                                           "i360"
                                           "i358"
                                           "i357"
                                           "i356"
                                           "i355"
                                           "i353"
                                           "i352"
                                           "i349"
                                           "i347"
                                           "i345"
                                           "i343"
                                           "i341"
                                           "i339"
                                           "i337"
                                           "i336"
                                           "i335"
                                           "i333"
                                           "i331"
                                           "i330"
                                           "i327"
                                           "i326"
                                           "i324"
                                           "i322"
                                           "i320"
                                           "i318"
                                           "i316"
                                           "i314"
                                           "i312"
                                           "i310"
                                           "i308"
                                           "i305"
                                           "i303"
                                           "i301"
                                           "i299"
                                           "i297"
                                           "i295"
                                           "i293"
                                           "i291"
                                           "i289"
                                           "i287"
                                           "i285"
                                           "i283"
                                           "i281"
                                           "i279"
                                           "i277"
                                           "i275"
                                           "i273"
                                           "i271"
                                           "i269"
                                           "i267"
                                           "i265"
                                           "i263"
                                           "i261"
                                           "i260"
                                           "i257"
                                           "i255"
                                           "i254"
                                           "i253"
                                           "i252"
                                           "i251"
                                           "i249"
                                           "i247"
                                           "i245"
                                           "i242"
                                           "i240"
                                           "i238"
                                           "i236"
                                           "i234"
                                           "i232"
                                           "i230"
                                           "i228"
                                           "i226"
                                           "i224"
                                           "i222"
                                           "i220"
                                           "i218"
                                           "i216"
                                           "i214"
                                           "i212"
                                           "i210"
                                           "i208"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("i46" "i45" "i44")))
                                       (hygiene guile))
                                    #{head 9923}#)
                              #{r 9039}#
                              #{w 9040}#
                              #{mod 9042}#)
                            (map (lambda (#{e 10277}#)
                                   (#{expand 4345}#
                                     #{e 10277}#
                                     #{r 9039}#
                                     #{w 9040}#
                                     #{mod 9042}#))
                                 (append
                                   #{tail 9924}#
                                   (list #{val 9925}#))))))))
                  #{tmp 9919}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (#{wrap 4338}#
                    (begin
                      (if (if (pair? #{e 9038}#) #{s 9041}# #f)
                        (set-source-properties! #{e 9038}# #{s 9041}#))
                      #{e 9038}#)
                    #{w 9040}#
                    #{mod 9042}#))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 10391}# #{r 10392}# #{w 10393}#)
          (let ((#{tmp 10395}#
                  ($sc-dispatch #{e 10391}# '(_ each-any any))))
            (if (if #{tmp 10395}#
                  (@apply
                    (lambda (#{mod 10398}# #{id 10399}#)
                      (if (and-map #{id? 4313}# #{mod 10398}#)
                        (if (symbol? #{id 10399}#)
                          #t
                          (if (if (vector? #{id 10399}#)
                                (if (= (vector-length #{id 10399}#) 4)
                                  (eq? (vector-ref #{id 10399}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 10399}# 1))
                            #f))
                        #f))
                    #{tmp 10395}#)
                  #f)
              (@apply
                (lambda (#{mod 10439}# #{id 10440}#)
                  (values
                    (syntax->datum #{id 10440}#)
                    #{r 10392}#
                    #{w 10393}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i3602" "i3603"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i3590" "i3591" "i3592"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    expand-lambda-case
                                    lambda*-formals
                                    expand-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    expand-void
                                    eval-local-transformer
                                    expand-local-syntax
                                    expand-body
                                    expand-macro
                                    expand-application
                                    expand-expr
                                    expand
                                    syntax-type
                                    expand-when-list
                                    expand-install-global
                                    expand-top-sequence
                                    expand-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    lookup
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-application
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-sequence
                                    make-application
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i467"
                                   "i465"
                                   "i463"
                                   "i461"
                                   "i459"
                                   "i457"
                                   "i455"
                                   "i453"
                                   "i451"
                                   "i449"
                                   "i447"
                                   "i445"
                                   "i443"
                                   "i441"
                                   "i439"
                                   "i437"
                                   "i435"
                                   "i433"
                                   "i431"
                                   "i429"
                                   "i427"
                                   "i425"
                                   "i423"
                                   "i421"
                                   "i419"
                                   "i417"
                                   "i415"
                                   "i413"
                                   "i411"
                                   "i409"
                                   "i407"
                                   "i405"
                                   "i403"
                                   "i401"
                                   "i399"
                                   "i398"
                                   "i396"
                                   "i393"
                                   "i392"
                                   "i391"
                                   "i389"
                                   "i388"
                                   "i386"
                                   "i384"
                                   "i382"
                                   "i380"
                                   "i378"
                                   "i376"
                                   "i374"
                                   "i372"
                                   "i369"
                                   "i367"
                                   "i366"
                                   "i364"
                                   "i362"
                                   "i360"
                                   "i358"
                                   "i357"
                                   "i356"
                                   "i355"
                                   "i353"
                                   "i352"
                                   "i349"
                                   "i347"
                                   "i345"
                                   "i343"
                                   "i341"
                                   "i339"
                                   "i337"
                                   "i336"
                                   "i335"
                                   "i333"
                                   "i331"
                                   "i330"
                                   "i327"
                                   "i326"
                                   "i324"
                                   "i322"
                                   "i320"
                                   "i318"
                                   "i316"
                                   "i314"
                                   "i312"
                                   "i310"
                                   "i308"
                                   "i305"
                                   "i303"
                                   "i301"
                                   "i299"
                                   "i297"
                                   "i295"
                                   "i293"
                                   "i291"
                                   "i289"
                                   "i287"
                                   "i285"
                                   "i283"
                                   "i281"
                                   "i279"
                                   "i277"
                                   "i275"
                                   "i273"
                                   "i271"
                                   "i269"
                                   "i267"
                                   "i265"
                                   "i263"
                                   "i261"
                                   "i260"
                                   "i257"
                                   "i255"
                                   "i254"
                                   "i253"
                                   "i252"
                                   "i251"
                                   "i249"
                                   "i247"
                                   "i245"
                                   "i242"
                                   "i240"
                                   "i238"
                                   "i236"
                                   "i234"
                                   "i232"
                                   "i230"
                                   "i228"
                                   "i226"
                                   "i224"
                                   "i222"
                                   "i220"
                                   "i218"
                                   "i216"
                                   "i214"
                                   "i212"
                                   "i210"
                                   "i208"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i46" "i45" "i44")))
                               (hygiene guile))
                            #{mod 10439}#))))
                #{tmp 10395}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 10391}#))))))
    (#{global-extend 4311}#
      'module-ref
      '@@
      (lambda (#{e 10537}# #{r 10538}# #{w 10539}#)
        (letrec*
          ((#{remodulate 10540}#
             (lambda (#{x 10746}# #{mod 10747}#)
               (if (pair? #{x 10746}#)
                 (cons (#{remodulate 10540}#
                         (car #{x 10746}#)
                         #{mod 10747}#)
                       (#{remodulate 10540}#
                         (cdr #{x 10746}#)
                         #{mod 10747}#))
                 (if (if (vector? #{x 10746}#)
                       (if (= (vector-length #{x 10746}#) 4)
                         (eq? (vector-ref #{x 10746}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 10761}#
                           (#{remodulate 10540}#
                             (vector-ref #{x 10746}# 1)
                             #{mod 10747}#))
                         (#{wrap 10762}# (vector-ref #{x 10746}# 2)))
                     (vector
                       'syntax-object
                       #{expression 10761}#
                       #{wrap 10762}#
                       #{mod 10747}#))
                   (if (vector? #{x 10746}#)
                     (let ((#{n 10770}# (vector-length #{x 10746}#)))
                       (let ((#{v 10771}# (make-vector #{n 10770}#)))
                         (letrec*
                           ((#{loop 10772}#
                              (lambda (#{i 10819}#)
                                (if (= #{i 10819}# #{n 10770}#)
                                  #{v 10771}#
                                  (begin
                                    (vector-set!
                                      #{v 10771}#
                                      #{i 10819}#
                                      (#{remodulate 10540}#
                                        (vector-ref #{x 10746}# #{i 10819}#)
                                        #{mod 10747}#))
                                    (#{loop 10772}# (#{1+}# #{i 10819}#)))))))
                           (#{loop 10772}# 0))))
                     #{x 10746}#))))))
          (let ((#{tmp 10542}#
                  ($sc-dispatch #{e 10537}# '(_ each-any any))))
            (if (if #{tmp 10542}#
                  (@apply
                    (lambda (#{mod 10546}# #{exp 10547}#)
                      (and-map #{id? 4313}# #{mod 10546}#))
                    #{tmp 10542}#)
                  #f)
              (@apply
                (lambda (#{mod 10563}# #{exp 10564}#)
                  (let ((#{mod 10565}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i3646" "i3647"))
                                      #(ribcage (remodulate) ((top)) ("i3613"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i3610" "i3611" "i3612"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          expand-lambda-case
                                          lambda*-formals
                                          expand-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          expand-void
                                          eval-local-transformer
                                          expand-local-syntax
                                          expand-body
                                          expand-macro
                                          expand-application
                                          expand-expr
                                          expand
                                          syntax-type
                                          expand-when-list
                                          expand-install-global
                                          expand-top-sequence
                                          expand-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          lookup
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-application
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-sequence
                                          make-application
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i467"
                                         "i465"
                                         "i463"
                                         "i461"
                                         "i459"
                                         "i457"
                                         "i455"
                                         "i453"
                                         "i451"
                                         "i449"
                                         "i447"
                                         "i445"
                                         "i443"
                                         "i441"
                                         "i439"
                                         "i437"
                                         "i435"
                                         "i433"
                                         "i431"
                                         "i429"
                                         "i427"
                                         "i425"
                                         "i423"
                                         "i421"
                                         "i419"
                                         "i417"
                                         "i415"
                                         "i413"
                                         "i411"
                                         "i409"
                                         "i407"
                                         "i405"
                                         "i403"
                                         "i401"
                                         "i399"
                                         "i398"
                                         "i396"
                                         "i393"
                                         "i392"
                                         "i391"
                                         "i389"
                                         "i388"
                                         "i386"
                                         "i384"
                                         "i382"
                                         "i380"
                                         "i378"
                                         "i376"
                                         "i374"
                                         "i372"
                                         "i369"
                                         "i367"
                                         "i366"
                                         "i364"
                                         "i362"
                                         "i360"
                                         "i358"
                                         "i357"
                                         "i356"
                                         "i355"
                                         "i353"
                                         "i352"
                                         "i349"
                                         "i347"
                                         "i345"
                                         "i343"
                                         "i341"
                                         "i339"
                                         "i337"
                                         "i336"
                                         "i335"
                                         "i333"
                                         "i331"
                                         "i330"
                                         "i327"
                                         "i326"
                                         "i324"
                                         "i322"
                                         "i320"
                                         "i318"
                                         "i316"
                                         "i314"
                                         "i312"
                                         "i310"
                                         "i308"
                                         "i305"
                                         "i303"
                                         "i301"
                                         "i299"
                                         "i297"
                                         "i295"
                                         "i293"
                                         "i291"
                                         "i289"
                                         "i287"
                                         "i285"
                                         "i283"
                                         "i281"
                                         "i279"
                                         "i277"
                                         "i275"
                                         "i273"
                                         "i271"
                                         "i269"
                                         "i267"
                                         "i265"
                                         "i263"
                                         "i261"
                                         "i260"
                                         "i257"
                                         "i255"
                                         "i254"
                                         "i253"
                                         "i252"
                                         "i251"
                                         "i249"
                                         "i247"
                                         "i245"
                                         "i242"
                                         "i240"
                                         "i238"
                                         "i236"
                                         "i234"
                                         "i232"
                                         "i230"
                                         "i228"
                                         "i226"
                                         "i224"
                                         "i222"
                                         "i220"
                                         "i218"
                                         "i216"
                                         "i214"
                                         "i212"
                                         "i210"
                                         "i208"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i46" "i45" "i44")))
                                     (hygiene guile))
                                  #{mod 10563}#))))
                    (values
                      (#{remodulate 10540}#
                        #{exp 10564}#
                        #{mod 10565}#)
                      #{r 10538}#
                      #{w 10539}#
                      (#{source-annotation 4306}# #{exp 10564}#)
                      #{mod 10565}#)))
                #{tmp 10542}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 10537}#))))))
    (#{global-extend 4311}#
      'core
      'if
      (lambda (#{e 10925}#
               #{r 10926}#
               #{w 10927}#
               #{s 10928}#
               #{mod 10929}#)
        (let ((#{tmp 10931}#
                ($sc-dispatch #{e 10925}# '(_ any any))))
          (if #{tmp 10931}#
            (@apply
              (lambda (#{test 10935}# #{then 10936}#)
                (#{build-conditional 4281}#
                  #{s 10928}#
                  (#{expand 4345}#
                    #{test 10935}#
                    #{r 10926}#
                    #{w 10927}#
                    #{mod 10929}#)
                  (#{expand 4345}#
                    #{then 10936}#
                    #{r 10926}#
                    #{w 10927}#
                    #{mod 10929}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 10931}#)
            (let ((#{tmp 11176}#
                    ($sc-dispatch #{e 10925}# '(_ any any any))))
              (if #{tmp 11176}#
                (@apply
                  (lambda (#{test 11180}# #{then 11181}# #{else 11182}#)
                    (#{build-conditional 4281}#
                      #{s 10928}#
                      (#{expand 4345}#
                        #{test 11180}#
                        #{r 10926}#
                        #{w 10927}#
                        #{mod 10929}#)
                      (#{expand 4345}#
                        #{then 11181}#
                        #{r 10926}#
                        #{w 10927}#
                        #{mod 10929}#)
                      (#{expand 4345}#
                        #{else 11182}#
                        #{r 10926}#
                        #{w 10927}#
                        #{mod 10929}#)))
                  #{tmp 11176}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 10925}#)))))))
    (#{global-extend 4311}#
      'core
      'with-fluids
      (lambda (#{e 11606}#
               #{r 11607}#
               #{w 11608}#
               #{s 11609}#
               #{mod 11610}#)
        (let ((#{tmp 11612}#
                ($sc-dispatch
                  #{e 11606}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 11612}#
            (@apply
              (lambda (#{fluid 11616}#
                       #{val 11617}#
                       #{b 11618}#
                       #{b* 11619}#)
                (#{build-dynlet 4282}#
                  #{s 11609}#
                  (map (lambda (#{x 11705}#)
                         (#{expand 4345}#
                           #{x 11705}#
                           #{r 11607}#
                           #{w 11608}#
                           #{mod 11610}#))
                       #{fluid 11616}#)
                  (map (lambda (#{x 11780}#)
                         (#{expand 4345}#
                           #{x 11780}#
                           #{r 11607}#
                           #{w 11608}#
                           #{mod 11610}#))
                       #{val 11617}#)
                  (#{expand-body 4349}#
                    (cons #{b 11618}# #{b* 11619}#)
                    (#{wrap 4338}#
                      (begin
                        (if (if (pair? #{e 11606}#) #{s 11609}# #f)
                          (set-source-properties! #{e 11606}# #{s 11609}#))
                        #{e 11606}#)
                      #{w 11608}#
                      #{mod 11610}#)
                    #{r 11607}#
                    #{w 11608}#
                    #{mod 11610}#)))
              #{tmp 11612}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 11606}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 4311}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 12154}#
           (lambda (#{pattern 13777}# #{keys 13778}#)
             (letrec*
               ((#{cvt* 13779}#
                  (lambda (#{p* 14405}# #{n 14406}# #{ids 14407}#)
                    (if (not (pair? #{p* 14405}#))
                      (#{cvt 13781}#
                        #{p* 14405}#
                        #{n 14406}#
                        #{ids 14407}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 13779}#
                            (cdr #{p* 14405}#)
                            #{n 14406}#
                            #{ids 14407}#))
                        (lambda (#{y 14410}# #{ids 14411}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 13781}#
                                (car #{p* 14405}#)
                                #{n 14406}#
                                #{ids 14411}#))
                            (lambda (#{x 14414}# #{ids 14415}#)
                              (values
                                (cons #{x 14414}# #{y 14410}#)
                                #{ids 14415}#))))))))
                (#{v-reverse 13780}#
                  (lambda (#{x 14416}#)
                    (letrec*
                      ((#{loop 14417}#
                         (lambda (#{r 14494}# #{x 14495}#)
                           (if (not (pair? #{x 14495}#))
                             (values #{r 14494}# #{x 14495}#)
                             (#{loop 14417}#
                               (cons (car #{x 14495}#) #{r 14494}#)
                               (cdr #{x 14495}#))))))
                      (#{loop 14417}# '() #{x 14416}#))))
                (#{cvt 13781}#
                  (lambda (#{p 13784}# #{n 13785}# #{ids 13786}#)
                    (if (if (symbol? #{p 13784}#)
                          #t
                          (if (if (vector? #{p 13784}#)
                                (if (= (vector-length #{p 13784}#) 4)
                                  (eq? (vector-ref #{p 13784}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 13784}# 1))
                            #f))
                      (if (#{bound-id-member? 4337}#
                            #{p 13784}#
                            #{keys 13778}#)
                        (values
                          (vector 'free-id #{p 13784}#)
                          #{ids 13786}#)
                        (if (if (eq? (if (if (vector? #{p 13784}#)
                                           (if (= (vector-length #{p 13784}#)
                                                  4)
                                             (eq? (vector-ref #{p 13784}# 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (vector-ref #{p 13784}# 1)
                                       #{p 13784}#)
                                     (if (if (= (vector-length
                                                  '#(syntax-object
                                                     _
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(p n ids)
                                                        #((top) (top) (top))
                                                        #("i3747"
                                                          "i3748"
                                                          "i3749"))
                                                      #(ribcage
                                                        (cvt v-reverse cvt*)
                                                        ((top) (top) (top))
                                                        ("i3720"
                                                         "i3718"
                                                         "i3716"))
                                                      #(ribcage
                                                        #(pattern keys)
                                                        #((top) (top))
                                                        #("i3714" "i3715"))
                                                      #(ribcage
                                                        (gen-syntax-case
                                                          gen-clause
                                                          build-dispatch-call
                                                          convert-pattern)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i3710"
                                                         "i3708"
                                                         "i3706"
                                                         "i3704"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          expand-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i467"
                                                         "i465"
                                                         "i463"
                                                         "i461"
                                                         "i459"
                                                         "i457"
                                                         "i455"
                                                         "i453"
                                                         "i451"
                                                         "i449"
                                                         "i447"
                                                         "i445"
                                                         "i443"
                                                         "i441"
                                                         "i439"
                                                         "i437"
                                                         "i435"
                                                         "i433"
                                                         "i431"
                                                         "i429"
                                                         "i427"
                                                         "i425"
                                                         "i423"
                                                         "i421"
                                                         "i419"
                                                         "i417"
                                                         "i415"
                                                         "i413"
                                                         "i411"
                                                         "i409"
                                                         "i407"
                                                         "i405"
                                                         "i403"
                                                         "i401"
                                                         "i399"
                                                         "i398"
                                                         "i396"
                                                         "i393"
                                                         "i392"
                                                         "i391"
                                                         "i389"
                                                         "i388"
                                                         "i386"
                                                         "i384"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i372"
                                                         "i369"
                                                         "i367"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i357"
                                                         "i356"
                                                         "i355"
                                                         "i353"
                                                         "i352"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i336"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i330"
                                                         "i327"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i283"
                                                         "i281"
                                                         "i279"
                                                         "i277"
                                                         "i275"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i260"
                                                         "i257"
                                                         "i255"
                                                         "i254"
                                                         "i253"
                                                         "i252"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i242"
                                                         "i240"
                                                         "i238"
                                                         "i236"
                                                         "i234"
                                                         "i232"
                                                         "i230"
                                                         "i228"
                                                         "i226"
                                                         "i224"
                                                         "i222"
                                                         "i220"
                                                         "i218"
                                                         "i216"
                                                         "i214"
                                                         "i212"
                                                         "i210"
                                                         "i208"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i46" "i45" "i44")))
                                                     (hygiene guile)))
                                                4)
                                           #t
                                           #f)
                                       '_
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("i3747" "i3748" "i3749"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("i3720" "i3718" "i3716"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("i3714" "i3715"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3710" "i3708" "i3706" "i3704"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               expand-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))))
                              (eq? (#{id-var-name 4332}# #{p 13784}# '(()))
                                   (#{id-var-name 4332}#
                                     '#(syntax-object
                                        _
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p n ids)
                                           #((top) (top) (top))
                                           #("i3747" "i3748" "i3749"))
                                         #(ribcage
                                           (cvt v-reverse cvt*)
                                           ((top) (top) (top))
                                           ("i3720" "i3718" "i3716"))
                                         #(ribcage
                                           #(pattern keys)
                                           #((top) (top))
                                           #("i3714" "i3715"))
                                         #(ribcage
                                           (gen-syntax-case
                                             gen-clause
                                             build-dispatch-call
                                             convert-pattern)
                                           ((top) (top) (top) (top))
                                           ("i3710" "i3708" "i3706" "i3704"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             expand-lambda-case
                                             lambda*-formals
                                             expand-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             expand-void
                                             eval-local-transformer
                                             expand-local-syntax
                                             expand-body
                                             expand-macro
                                             expand-application
                                             expand-expr
                                             expand
                                             syntax-type
                                             expand-when-list
                                             expand-install-global
                                             expand-top-sequence
                                             expand-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             maybe-name-value!
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             set-lambda-meta!
                                             lambda-meta
                                             lambda?
                                             make-dynlet
                                             make-letrec
                                             make-let
                                             make-lambda-case
                                             make-lambda
                                             make-sequence
                                             make-application
                                             make-conditional
                                             make-toplevel-define
                                             make-toplevel-set
                                             make-toplevel-ref
                                             make-module-set
                                             make-module-ref
                                             make-lexical-set
                                             make-lexical-ref
                                             make-primitive-ref
                                             make-const
                                             make-void)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i467"
                                            "i465"
                                            "i463"
                                            "i461"
                                            "i459"
                                            "i457"
                                            "i455"
                                            "i453"
                                            "i451"
                                            "i449"
                                            "i447"
                                            "i445"
                                            "i443"
                                            "i441"
                                            "i439"
                                            "i437"
                                            "i435"
                                            "i433"
                                            "i431"
                                            "i429"
                                            "i427"
                                            "i425"
                                            "i423"
                                            "i421"
                                            "i419"
                                            "i417"
                                            "i415"
                                            "i413"
                                            "i411"
                                            "i409"
                                            "i407"
                                            "i405"
                                            "i403"
                                            "i401"
                                            "i399"
                                            "i398"
                                            "i396"
                                            "i393"
                                            "i392"
                                            "i391"
                                            "i389"
                                            "i388"
                                            "i386"
                                            "i384"
                                            "i382"
                                            "i380"
                                            "i378"
                                            "i376"
                                            "i374"
                                            "i372"
                                            "i369"
                                            "i367"
                                            "i366"
                                            "i364"
                                            "i362"
                                            "i360"
                                            "i358"
                                            "i357"
                                            "i356"
                                            "i355"
                                            "i353"
                                            "i352"
                                            "i349"
                                            "i347"
                                            "i345"
                                            "i343"
                                            "i341"
                                            "i339"
                                            "i337"
                                            "i336"
                                            "i335"
                                            "i333"
                                            "i331"
                                            "i330"
                                            "i327"
                                            "i326"
                                            "i324"
                                            "i322"
                                            "i320"
                                            "i318"
                                            "i316"
                                            "i314"
                                            "i312"
                                            "i310"
                                            "i308"
                                            "i305"
                                            "i303"
                                            "i301"
                                            "i299"
                                            "i297"
                                            "i295"
                                            "i293"
                                            "i291"
                                            "i289"
                                            "i287"
                                            "i285"
                                            "i283"
                                            "i281"
                                            "i279"
                                            "i277"
                                            "i275"
                                            "i273"
                                            "i271"
                                            "i269"
                                            "i267"
                                            "i265"
                                            "i263"
                                            "i261"
                                            "i260"
                                            "i257"
                                            "i255"
                                            "i254"
                                            "i253"
                                            "i252"
                                            "i251"
                                            "i249"
                                            "i247"
                                            "i245"
                                            "i242"
                                            "i240"
                                            "i238"
                                            "i236"
                                            "i234"
                                            "i232"
                                            "i230"
                                            "i228"
                                            "i226"
                                            "i224"
                                            "i222"
                                            "i220"
                                            "i218"
                                            "i216"
                                            "i214"
                                            "i212"
                                            "i210"
                                            "i208"))
                                         #(ribcage
                                           (define-structure
                                             define-expansion-accessors
                                             define-expansion-constructors)
                                           ((top) (top) (top))
                                           ("i46" "i45" "i44")))
                                        (hygiene guile))
                                     '(())))
                              #f)
                          (values '_ #{ids 13786}#)
                          (values
                            'any
                            (cons (cons #{p 13784}# #{n 13785}#)
                                  #{ids 13786}#))))
                      (let ((#{tmp 14108}#
                              ($sc-dispatch #{p 13784}# '(any any))))
                        (if (if #{tmp 14108}#
                              (@apply
                                (lambda (#{x 14112}# #{dots 14113}#)
                                  (if (if (if (vector? #{dots 14113}#)
                                            (if (= (vector-length
                                                     #{dots 14113}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{dots 14113}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 14113}# 1))
                                        #f)
                                    (if (eq? (if (if (vector? #{dots 14113}#)
                                                   (if (= (vector-length
                                                            #{dots 14113}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{dots 14113}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{dots 14113}# 1)
                                               #{dots 14113}#)
                                             (if (if (= (vector-length
                                                          '#(syntax-object
                                                             ...
                                                             ((top)
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(x)
                                                                #((top))
                                                                #("i2230"))
                                                              #(ribcage
                                                                (lambda-var-list
                                                                  gen-var
                                                                  strip
                                                                  expand-lambda-case
                                                                  lambda*-formals
                                                                  expand-simple-lambda
                                                                  lambda-formals
                                                                  ellipsis?
                                                                  expand-void
                                                                  eval-local-transformer
                                                                  expand-local-syntax
                                                                  expand-body
                                                                  expand-macro
                                                                  expand-application
                                                                  expand-expr
                                                                  expand
                                                                  syntax-type
                                                                  expand-when-list
                                                                  expand-install-global
                                                                  expand-top-sequence
                                                                  expand-sequence
                                                                  source-wrap
                                                                  wrap
                                                                  bound-id-member?
                                                                  distinct-bound-ids?
                                                                  valid-bound-ids?
                                                                  bound-id=?
                                                                  free-id=?
                                                                  id-var-name
                                                                  same-marks?
                                                                  join-marks
                                                                  join-wraps
                                                                  smart-append
                                                                  make-binding-wrap
                                                                  extend-ribcage!
                                                                  make-empty-ribcage
                                                                  new-mark
                                                                  anti-mark
                                                                  the-anti-mark
                                                                  top-marked?
                                                                  top-wrap
                                                                  empty-wrap
                                                                  set-ribcage-labels!
                                                                  set-ribcage-marks!
                                                                  set-ribcage-symnames!
                                                                  ribcage-labels
                                                                  ribcage-marks
                                                                  ribcage-symnames
                                                                  ribcage?
                                                                  make-ribcage
                                                                  gen-labels
                                                                  gen-label
                                                                  make-rename
                                                                  rename-marks
                                                                  rename-new
                                                                  rename-old
                                                                  subst-rename?
                                                                  wrap-subst
                                                                  wrap-marks
                                                                  make-wrap
                                                                  id-sym-name&marks
                                                                  id-sym-name
                                                                  id?
                                                                  nonsymbol-id?
                                                                  global-extend
                                                                  lookup
                                                                  macros-only-env
                                                                  extend-var-env
                                                                  extend-env
                                                                  null-env
                                                                  binding-value
                                                                  binding-type
                                                                  make-binding
                                                                  arg-check
                                                                  source-annotation
                                                                  no-source
                                                                  set-syntax-object-module!
                                                                  set-syntax-object-wrap!
                                                                  set-syntax-object-expression!
                                                                  syntax-object-module
                                                                  syntax-object-wrap
                                                                  syntax-object-expression
                                                                  syntax-object?
                                                                  make-syntax-object
                                                                  build-lexical-var
                                                                  build-letrec
                                                                  build-named-let
                                                                  build-let
                                                                  build-sequence
                                                                  build-data
                                                                  build-primref
                                                                  build-lambda-case
                                                                  build-case-lambda
                                                                  build-simple-lambda
                                                                  build-global-definition
                                                                  build-global-assignment
                                                                  build-global-reference
                                                                  analyze-variable
                                                                  build-lexical-assignment
                                                                  build-lexical-reference
                                                                  build-dynlet
                                                                  build-conditional
                                                                  build-application
                                                                  build-void
                                                                  maybe-name-value!
                                                                  decorate-source
                                                                  get-global-definition-hook
                                                                  put-global-definition-hook
                                                                  gensym-hook
                                                                  local-eval-hook
                                                                  top-level-eval-hook
                                                                  fx<
                                                                  fx=
                                                                  fx-
                                                                  fx+
                                                                  set-lambda-meta!
                                                                  lambda-meta
                                                                  lambda?
                                                                  make-dynlet
                                                                  make-letrec
                                                                  make-let
                                                                  make-lambda-case
                                                                  make-lambda
                                                                  make-sequence
                                                                  make-application
                                                                  make-conditional
                                                                  make-toplevel-define
                                                                  make-toplevel-set
                                                                  make-toplevel-ref
                                                                  make-module-set
                                                                  make-module-ref
                                                                  make-lexical-set
                                                                  make-lexical-ref
                                                                  make-primitive-ref
                                                                  make-const
                                                                  make-void)
                                                                ((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                                ("i467"
                                                                 "i465"
                                                                 "i463"
                                                                 "i461"
                                                                 "i459"
                                                                 "i457"
                                                                 "i455"
                                                                 "i453"
                                                                 "i451"
                                                                 "i449"
                                                                 "i447"
                                                                 "i445"
                                                                 "i443"
                                                                 "i441"
                                                                 "i439"
                                                                 "i437"
                                                                 "i435"
                                                                 "i433"
                                                                 "i431"
                                                                 "i429"
                                                                 "i427"
                                                                 "i425"
                                                                 "i423"
                                                                 "i421"
                                                                 "i419"
                                                                 "i417"
                                                                 "i415"
                                                                 "i413"
                                                                 "i411"
                                                                 "i409"
                                                                 "i407"
                                                                 "i405"
                                                                 "i403"
                                                                 "i401"
                                                                 "i399"
                                                                 "i398"
                                                                 "i396"
                                                                 "i393"
                                                                 "i392"
                                                                 "i391"
                                                                 "i389"
                                                                 "i388"
                                                                 "i386"
                                                                 "i384"
                                                                 "i382"
                                                                 "i380"
                                                                 "i378"
                                                                 "i376"
                                                                 "i374"
                                                                 "i372"
                                                                 "i369"
                                                                 "i367"
                                                                 "i366"
                                                                 "i364"
                                                                 "i362"
                                                                 "i360"
                                                                 "i358"
                                                                 "i357"
                                                                 "i356"
                                                                 "i355"
                                                                 "i353"
                                                                 "i352"
                                                                 "i349"
                                                                 "i347"
                                                                 "i345"
                                                                 "i343"
                                                                 "i341"
                                                                 "i339"
                                                                 "i337"
                                                                 "i336"
                                                                 "i335"
                                                                 "i333"
                                                                 "i331"
                                                                 "i330"
                                                                 "i327"
                                                                 "i326"
                                                                 "i324"
                                                                 "i322"
                                                                 "i320"
                                                                 "i318"
                                                                 "i316"
                                                                 "i314"
                                                                 "i312"
                                                                 "i310"
                                                                 "i308"
                                                                 "i305"
                                                                 "i303"
                                                                 "i301"
                                                                 "i299"
                                                                 "i297"
                                                                 "i295"
                                                                 "i293"
                                                                 "i291"
                                                                 "i289"
                                                                 "i287"
                                                                 "i285"
                                                                 "i283"
                                                                 "i281"
                                                                 "i279"
                                                                 "i277"
                                                                 "i275"
                                                                 "i273"
                                                                 "i271"
                                                                 "i269"
                                                                 "i267"
                                                                 "i265"
                                                                 "i263"
                                                                 "i261"
                                                                 "i260"
                                                                 "i257"
                                                                 "i255"
                                                                 "i254"
                                                                 "i253"
                                                                 "i252"
                                                                 "i251"
                                                                 "i249"
                                                                 "i247"
                                                                 "i245"
                                                                 "i242"
                                                                 "i240"
                                                                 "i238"
                                                                 "i236"
                                                                 "i234"
                                                                 "i232"
                                                                 "i230"
                                                                 "i228"
                                                                 "i226"
                                                                 "i224"
                                                                 "i222"
                                                                 "i220"
                                                                 "i218"
                                                                 "i216"
                                                                 "i214"
                                                                 "i212"
                                                                 "i210"
                                                                 "i208"))
                                                              #(ribcage
                                                                (define-structure
                                                                  define-expansion-accessors
                                                                  define-expansion-constructors)
                                                                ((top)
                                                                 (top)
                                                                 (top))
                                                                ("i46"
                                                                 "i45"
                                                                 "i44")))
                                                             (hygiene guile)))
                                                        4)
                                                   #t
                                                   #f)
                                               '...
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i2230"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       expand-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i467"
                                                      "i465"
                                                      "i463"
                                                      "i461"
                                                      "i459"
                                                      "i457"
                                                      "i455"
                                                      "i453"
                                                      "i451"
                                                      "i449"
                                                      "i447"
                                                      "i445"
                                                      "i443"
                                                      "i441"
                                                      "i439"
                                                      "i437"
                                                      "i435"
                                                      "i433"
                                                      "i431"
                                                      "i429"
                                                      "i427"
                                                      "i425"
                                                      "i423"
                                                      "i421"
                                                      "i419"
                                                      "i417"
                                                      "i415"
                                                      "i413"
                                                      "i411"
                                                      "i409"
                                                      "i407"
                                                      "i405"
                                                      "i403"
                                                      "i401"
                                                      "i399"
                                                      "i398"
                                                      "i396"
                                                      "i393"
                                                      "i392"
                                                      "i391"
                                                      "i389"
                                                      "i388"
                                                      "i386"
                                                      "i384"
                                                      "i382"
                                                      "i380"
                                                      "i378"
                                                      "i376"
                                                      "i374"
                                                      "i372"
                                                      "i369"
                                                      "i367"
                                                      "i366"
                                                      "i364"
                                                      "i362"
                                                      "i360"
                                                      "i358"
                                                      "i357"
                                                      "i356"
                                                      "i355"
                                                      "i353"
                                                      "i352"
                                                      "i349"
                                                      "i347"
                                                      "i345"
                                                      "i343"
                                                      "i341"
                                                      "i339"
                                                      "i337"
                                                      "i336"
                                                      "i335"
                                                      "i333"
                                                      "i331"
                                                      "i330"
                                                      "i327"
                                                      "i326"
                                                      "i324"
                                                      "i322"
                                                      "i320"
                                                      "i318"
                                                      "i316"
                                                      "i314"
                                                      "i312"
                                                      "i310"
                                                      "i308"
                                                      "i305"
                                                      "i303"
                                                      "i301"
                                                      "i299"
                                                      "i297"
                                                      "i295"
                                                      "i293"
                                                      "i291"
                                                      "i289"
                                                      "i287"
                                                      "i285"
                                                      "i283"
                                                      "i281"
                                                      "i279"
                                                      "i277"
                                                      "i275"
                                                      "i273"
                                                      "i271"
                                                      "i269"
                                                      "i267"
                                                      "i265"
                                                      "i263"
                                                      "i261"
                                                      "i260"
                                                      "i257"
                                                      "i255"
                                                      "i254"
                                                      "i253"
                                                      "i252"
                                                      "i251"
                                                      "i249"
                                                      "i247"
                                                      "i245"
                                                      "i242"
                                                      "i240"
                                                      "i238"
                                                      "i236"
                                                      "i234"
                                                      "i232"
                                                      "i230"
                                                      "i228"
                                                      "i226"
                                                      "i224"
                                                      "i222"
                                                      "i220"
                                                      "i218"
                                                      "i216"
                                                      "i214"
                                                      "i212"
                                                      "i210"
                                                      "i208"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("i46" "i45" "i44")))
                                                  (hygiene guile))))
                                      (eq? (#{id-var-name 4332}#
                                             #{dots 14113}#
                                             '(()))
                                           (#{id-var-name 4332}#
                                             '#(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i2230"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     expand-lambda-case
                                                     lambda*-formals
                                                     expand-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     expand-void
                                                     eval-local-transformer
                                                     expand-local-syntax
                                                     expand-body
                                                     expand-macro
                                                     expand-application
                                                     expand-expr
                                                     expand
                                                     syntax-type
                                                     expand-when-list
                                                     expand-install-global
                                                     expand-top-sequence
                                                     expand-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     maybe-name-value!
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i467"
                                                    "i465"
                                                    "i463"
                                                    "i461"
                                                    "i459"
                                                    "i457"
                                                    "i455"
                                                    "i453"
                                                    "i451"
                                                    "i449"
                                                    "i447"
                                                    "i445"
                                                    "i443"
                                                    "i441"
                                                    "i439"
                                                    "i437"
                                                    "i435"
                                                    "i433"
                                                    "i431"
                                                    "i429"
                                                    "i427"
                                                    "i425"
                                                    "i423"
                                                    "i421"
                                                    "i419"
                                                    "i417"
                                                    "i415"
                                                    "i413"
                                                    "i411"
                                                    "i409"
                                                    "i407"
                                                    "i405"
                                                    "i403"
                                                    "i401"
                                                    "i399"
                                                    "i398"
                                                    "i396"
                                                    "i393"
                                                    "i392"
                                                    "i391"
                                                    "i389"
                                                    "i388"
                                                    "i386"
                                                    "i384"
                                                    "i382"
                                                    "i380"
                                                    "i378"
                                                    "i376"
                                                    "i374"
                                                    "i372"
                                                    "i369"
                                                    "i367"
                                                    "i366"
                                                    "i364"
                                                    "i362"
                                                    "i360"
                                                    "i358"
                                                    "i357"
                                                    "i356"
                                                    "i355"
                                                    "i353"
                                                    "i352"
                                                    "i349"
                                                    "i347"
                                                    "i345"
                                                    "i343"
                                                    "i341"
                                                    "i339"
                                                    "i337"
                                                    "i336"
                                                    "i335"
                                                    "i333"
                                                    "i331"
                                                    "i330"
                                                    "i327"
                                                    "i326"
                                                    "i324"
                                                    "i322"
                                                    "i320"
                                                    "i318"
                                                    "i316"
                                                    "i314"
                                                    "i312"
                                                    "i310"
                                                    "i308"
                                                    "i305"
                                                    "i303"
                                                    "i301"
                                                    "i299"
                                                    "i297"
                                                    "i295"
                                                    "i293"
                                                    "i291"
                                                    "i289"
                                                    "i287"
                                                    "i285"
                                                    "i283"
                                                    "i281"
                                                    "i279"
                                                    "i277"
                                                    "i275"
                                                    "i273"
                                                    "i271"
                                                    "i269"
                                                    "i267"
                                                    "i265"
                                                    "i263"
                                                    "i261"
                                                    "i260"
                                                    "i257"
                                                    "i255"
                                                    "i254"
                                                    "i253"
                                                    "i252"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i242"
                                                    "i240"
                                                    "i238"
                                                    "i236"
                                                    "i234"
                                                    "i232"
                                                    "i230"
                                                    "i228"
                                                    "i226"
                                                    "i224"
                                                    "i222"
                                                    "i220"
                                                    "i218"
                                                    "i216"
                                                    "i214"
                                                    "i212"
                                                    "i210"
                                                    "i208"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors)
                                                   ((top) (top) (top))
                                                   ("i46" "i45" "i44")))
                                                (hygiene guile))
                                             '(())))
                                      #f)
                                    #f))
                                #{tmp 14108}#)
                              #f)
                          (@apply
                            (lambda (#{x 14213}# #{dots 14214}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 13781}#
                                    #{x 14213}#
                                    (#{1+}# #{n 13785}#)
                                    #{ids 13786}#))
                                (lambda (#{p 14215}# #{ids 14216}#)
                                  (values
                                    (if (eq? #{p 14215}# 'any)
                                      'each-any
                                      (vector 'each #{p 14215}#))
                                    #{ids 14216}#))))
                            #{tmp 14108}#)
                          (let ((#{tmp 14217}#
                                  ($sc-dispatch #{p 13784}# '(any any . any))))
                            (if (if #{tmp 14217}#
                                  (@apply
                                    (lambda (#{x 14221}#
                                             #{dots 14222}#
                                             #{ys 14223}#)
                                      (if (if (if (vector? #{dots 14222}#)
                                                (if (= (vector-length
                                                         #{dots 14222}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 14222}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 14222}# 1))
                                            #f)
                                        (if (eq? (if (if (vector?
                                                           #{dots 14222}#)
                                                       (if (= (vector-length
                                                                #{dots 14222}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{dots 14222}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref
                                                     #{dots 14222}#
                                                     1)
                                                   #{dots 14222}#)
                                                 (if (if (= (vector-length
                                                              '#(syntax-object
                                                                 ...
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i2230"))
                                                                  #(ribcage
                                                                    (lambda-var-list
                                                                      gen-var
                                                                      strip
                                                                      expand-lambda-case
                                                                      lambda*-formals
                                                                      expand-simple-lambda
                                                                      lambda-formals
                                                                      ellipsis?
                                                                      expand-void
                                                                      eval-local-transformer
                                                                      expand-local-syntax
                                                                      expand-body
                                                                      expand-macro
                                                                      expand-application
                                                                      expand-expr
                                                                      expand
                                                                      syntax-type
                                                                      expand-when-list
                                                                      expand-install-global
                                                                      expand-top-sequence
                                                                      expand-sequence
                                                                      source-wrap
                                                                      wrap
                                                                      bound-id-member?
                                                                      distinct-bound-ids?
                                                                      valid-bound-ids?
                                                                      bound-id=?
                                                                      free-id=?
                                                                      id-var-name
                                                                      same-marks?
                                                                      join-marks
                                                                      join-wraps
                                                                      smart-append
                                                                      make-binding-wrap
                                                                      extend-ribcage!
                                                                      make-empty-ribcage
                                                                      new-mark
                                                                      anti-mark
                                                                      the-anti-mark
                                                                      top-marked?
                                                                      top-wrap
                                                                      empty-wrap
                                                                      set-ribcage-labels!
                                                                      set-ribcage-marks!
                                                                      set-ribcage-symnames!
                                                                      ribcage-labels
                                                                      ribcage-marks
                                                                      ribcage-symnames
                                                                      ribcage?
                                                                      make-ribcage
                                                                      gen-labels
                                                                      gen-label
                                                                      make-rename
                                                                      rename-marks
                                                                      rename-new
                                                                      rename-old
                                                                      subst-rename?
                                                                      wrap-subst
                                                                      wrap-marks
                                                                      make-wrap
                                                                      id-sym-name&marks
                                                                      id-sym-name
                                                                      id?
                                                                      nonsymbol-id?
                                                                      global-extend
                                                                      lookup
                                                                      macros-only-env
                                                                      extend-var-env
                                                                      extend-env
                                                                      null-env
                                                                      binding-value
                                                                      binding-type
                                                                      make-binding
                                                                      arg-check
                                                                      source-annotation
                                                                      no-source
                                                                      set-syntax-object-module!
                                                                      set-syntax-object-wrap!
                                                                      set-syntax-object-expression!
                                                                      syntax-object-module
                                                                      syntax-object-wrap
                                                                      syntax-object-expression
                                                                      syntax-object?
                                                                      make-syntax-object
                                                                      build-lexical-var
                                                                      build-letrec
                                                                      build-named-let
                                                                      build-let
                                                                      build-sequence
                                                                      build-data
                                                                      build-primref
                                                                      build-lambda-case
                                                                      build-case-lambda
                                                                      build-simple-lambda
                                                                      build-global-definition
                                                                      build-global-assignment
                                                                      build-global-reference
                                                                      analyze-variable
                                                                      build-lexical-assignment
                                                                      build-lexical-reference
                                                                      build-dynlet
                                                                      build-conditional
                                                                      build-application
                                                                      build-void
                                                                      maybe-name-value!
                                                                      decorate-source
                                                                      get-global-definition-hook
                                                                      put-global-definition-hook
                                                                      gensym-hook
                                                                      local-eval-hook
                                                                      top-level-eval-hook
                                                                      fx<
                                                                      fx=
                                                                      fx-
                                                                      fx+
                                                                      set-lambda-meta!
                                                                      lambda-meta
                                                                      lambda?
                                                                      make-dynlet
                                                                      make-letrec
                                                                      make-let
                                                                      make-lambda-case
                                                                      make-lambda
                                                                      make-sequence
                                                                      make-application
                                                                      make-conditional
                                                                      make-toplevel-define
                                                                      make-toplevel-set
                                                                      make-toplevel-ref
                                                                      make-module-set
                                                                      make-module-ref
                                                                      make-lexical-set
                                                                      make-lexical-ref
                                                                      make-primitive-ref
                                                                      make-const
                                                                      make-void)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i467"
                                                                     "i465"
                                                                     "i463"
                                                                     "i461"
                                                                     "i459"
                                                                     "i457"
                                                                     "i455"
                                                                     "i453"
                                                                     "i451"
                                                                     "i449"
                                                                     "i447"
                                                                     "i445"
                                                                     "i443"
                                                                     "i441"
                                                                     "i439"
                                                                     "i437"
                                                                     "i435"
                                                                     "i433"
                                                                     "i431"
                                                                     "i429"
                                                                     "i427"
                                                                     "i425"
                                                                     "i423"
                                                                     "i421"
                                                                     "i419"
                                                                     "i417"
                                                                     "i415"
                                                                     "i413"
                                                                     "i411"
                                                                     "i409"
                                                                     "i407"
                                                                     "i405"
                                                                     "i403"
                                                                     "i401"
                                                                     "i399"
                                                                     "i398"
                                                                     "i396"
                                                                     "i393"
                                                                     "i392"
                                                                     "i391"
                                                                     "i389"
                                                                     "i388"
                                                                     "i386"
                                                                     "i384"
                                                                     "i382"
                                                                     "i380"
                                                                     "i378"
                                                                     "i376"
                                                                     "i374"
                                                                     "i372"
                                                                     "i369"
                                                                     "i367"
                                                                     "i366"
                                                                     "i364"
                                                                     "i362"
                                                                     "i360"
                                                                     "i358"
                                                                     "i357"
                                                                     "i356"
                                                                     "i355"
                                                                     "i353"
                                                                     "i352"
                                                                     "i349"
                                                                     "i347"
                                                                     "i345"
                                                                     "i343"
                                                                     "i341"
                                                                     "i339"
                                                                     "i337"
                                                                     "i336"
                                                                     "i335"
                                                                     "i333"
                                                                     "i331"
                                                                     "i330"
                                                                     "i327"
                                                                     "i326"
                                                                     "i324"
                                                                     "i322"
                                                                     "i320"
                                                                     "i318"
                                                                     "i316"
                                                                     "i314"
                                                                     "i312"
                                                                     "i310"
                                                                     "i308"
                                                                     "i305"
                                                                     "i303"
                                                                     "i301"
                                                                     "i299"
                                                                     "i297"
                                                                     "i295"
                                                                     "i293"
                                                                     "i291"
                                                                     "i289"
                                                                     "i287"
                                                                     "i285"
                                                                     "i283"
                                                                     "i281"
                                                                     "i279"
                                                                     "i277"
                                                                     "i275"
                                                                     "i273"
                                                                     "i271"
                                                                     "i269"
                                                                     "i267"
                                                                     "i265"
                                                                     "i263"
                                                                     "i261"
                                                                     "i260"
                                                                     "i257"
                                                                     "i255"
                                                                     "i254"
                                                                     "i253"
                                                                     "i252"
                                                                     "i251"
                                                                     "i249"
                                                                     "i247"
                                                                     "i245"
                                                                     "i242"
                                                                     "i240"
                                                                     "i238"
                                                                     "i236"
                                                                     "i234"
                                                                     "i232"
                                                                     "i230"
                                                                     "i228"
                                                                     "i226"
                                                                     "i224"
                                                                     "i222"
                                                                     "i220"
                                                                     "i218"
                                                                     "i216"
                                                                     "i214"
                                                                     "i212"
                                                                     "i210"
                                                                     "i208"))
                                                                  #(ribcage
                                                                    (define-structure
                                                                      define-expansion-accessors
                                                                      define-expansion-constructors)
                                                                    ((top)
                                                                     (top)
                                                                     (top))
                                                                    ("i46"
                                                                     "i45"
                                                                     "i44")))
                                                                 (hygiene
                                                                   guile)))
                                                            4)
                                                       #t
                                                       #f)
                                                   '...
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i2230"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           expand-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i467"
                                                          "i465"
                                                          "i463"
                                                          "i461"
                                                          "i459"
                                                          "i457"
                                                          "i455"
                                                          "i453"
                                                          "i451"
                                                          "i449"
                                                          "i447"
                                                          "i445"
                                                          "i443"
                                                          "i441"
                                                          "i439"
                                                          "i437"
                                                          "i435"
                                                          "i433"
                                                          "i431"
                                                          "i429"
                                                          "i427"
                                                          "i425"
                                                          "i423"
                                                          "i421"
                                                          "i419"
                                                          "i417"
                                                          "i415"
                                                          "i413"
                                                          "i411"
                                                          "i409"
                                                          "i407"
                                                          "i405"
                                                          "i403"
                                                          "i401"
                                                          "i399"
                                                          "i398"
                                                          "i396"
                                                          "i393"
                                                          "i392"
                                                          "i391"
                                                          "i389"
                                                          "i388"
                                                          "i386"
                                                          "i384"
                                                          "i382"
                                                          "i380"
                                                          "i378"
                                                          "i376"
                                                          "i374"
                                                          "i372"
                                                          "i369"
                                                          "i367"
                                                          "i366"
                                                          "i364"
                                                          "i362"
                                                          "i360"
                                                          "i358"
                                                          "i357"
                                                          "i356"
                                                          "i355"
                                                          "i353"
                                                          "i352"
                                                          "i349"
                                                          "i347"
                                                          "i345"
                                                          "i343"
                                                          "i341"
                                                          "i339"
                                                          "i337"
                                                          "i336"
                                                          "i335"
                                                          "i333"
                                                          "i331"
                                                          "i330"
                                                          "i327"
                                                          "i326"
                                                          "i324"
                                                          "i322"
                                                          "i320"
                                                          "i318"
                                                          "i316"
                                                          "i314"
                                                          "i312"
                                                          "i310"
                                                          "i308"
                                                          "i305"
                                                          "i303"
                                                          "i301"
                                                          "i299"
                                                          "i297"
                                                          "i295"
                                                          "i293"
                                                          "i291"
                                                          "i289"
                                                          "i287"
                                                          "i285"
                                                          "i283"
                                                          "i281"
                                                          "i279"
                                                          "i277"
                                                          "i275"
                                                          "i273"
                                                          "i271"
                                                          "i269"
                                                          "i267"
                                                          "i265"
                                                          "i263"
                                                          "i261"
                                                          "i260"
                                                          "i257"
                                                          "i255"
                                                          "i254"
                                                          "i253"
                                                          "i252"
                                                          "i251"
                                                          "i249"
                                                          "i247"
                                                          "i245"
                                                          "i242"
                                                          "i240"
                                                          "i238"
                                                          "i236"
                                                          "i234"
                                                          "i232"
                                                          "i230"
                                                          "i228"
                                                          "i226"
                                                          "i224"
                                                          "i222"
                                                          "i220"
                                                          "i218"
                                                          "i216"
                                                          "i214"
                                                          "i212"
                                                          "i210"
                                                          "i208"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("i46" "i45" "i44")))
                                                      (hygiene guile))))
                                          (eq? (#{id-var-name 4332}#
                                                 #{dots 14222}#
                                                 '(()))
                                               (#{id-var-name 4332}#
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i2230"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         expand-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i399"
                                                        "i398"
                                                        "i396"
                                                        "i393"
                                                        "i392"
                                                        "i391"
                                                        "i389"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i372"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i358"
                                                        "i357"
                                                        "i356"
                                                        "i355"
                                                        "i353"
                                                        "i352"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i336"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i330"
                                                        "i327"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i310"
                                                        "i308"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i260"
                                                        "i257"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i252"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile))
                                                 '(())))
                                          #f)
                                        #f))
                                    #{tmp 14217}#)
                                  #f)
                              (@apply
                                (lambda (#{x 14323}#
                                         #{dots 14324}#
                                         #{ys 14325}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 13779}#
                                        #{ys 14325}#
                                        #{n 13785}#
                                        #{ids 13786}#))
                                    (lambda (#{ys 14328}# #{ids 14329}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 13781}#
                                            #{x 14323}#
                                            (#{1+}# #{n 13785}#)
                                            #{ids 14329}#))
                                        (lambda (#{x 14330}# #{ids 14331}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 13780}#
                                                #{ys 14328}#))
                                            (lambda (#{ys 14364}# #{e 14365}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 14330}#
                                                  #{ys 14364}#
                                                  #{e 14365}#)
                                                #{ids 14331}#))))))))
                                #{tmp 14217}#)
                              (let ((#{tmp 14366}#
                                      ($sc-dispatch #{p 13784}# '(any . any))))
                                (if #{tmp 14366}#
                                  (@apply
                                    (lambda (#{x 14370}# #{y 14371}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 13781}#
                                            #{y 14371}#
                                            #{n 13785}#
                                            #{ids 13786}#))
                                        (lambda (#{y 14372}# #{ids 14373}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 13781}#
                                                #{x 14370}#
                                                #{n 13785}#
                                                #{ids 14373}#))
                                            (lambda (#{x 14374}# #{ids 14375}#)
                                              (values
                                                (cons #{x 14374}# #{y 14372}#)
                                                #{ids 14375}#))))))
                                    #{tmp 14366}#)
                                  (let ((#{tmp 14376}#
                                          ($sc-dispatch #{p 13784}# '())))
                                    (if #{tmp 14376}#
                                      (@apply
                                        (lambda () (values '() #{ids 13786}#))
                                        #{tmp 14376}#)
                                      (let ((#{tmp 14380}#
                                              ($sc-dispatch
                                                #{p 13784}#
                                                '#(vector each-any))))
                                        (if #{tmp 14380}#
                                          (@apply
                                            (lambda (#{x 14384}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 13781}#
                                                    #{x 14384}#
                                                    #{n 13785}#
                                                    #{ids 13786}#))
                                                (lambda (#{p 14385}#
                                                         #{ids 14386}#)
                                                  (values
                                                    (vector
                                                      'vector
                                                      #{p 14385}#)
                                                    #{ids 14386}#))))
                                            #{tmp 14380}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 4358}#
                                                #{p 13784}#
                                                '(())))
                                            #{ids 13786}#)))))))))))))))
               (#{cvt 13781}# #{pattern 13777}# 0 '()))))
         (#{build-dispatch-call 12155}#
           (lambda (#{pvars 14496}#
                    #{exp 14497}#
                    #{y 14498}#
                    #{r 14499}#
                    #{mod 14500}#)
             (let ((#{ids 14501}# (map car #{pvars 14496}#)))
               (begin
                 (map cdr #{pvars 14496}#)
                 (let ((#{labels 14503}#
                         (#{gen-labels 4316}# #{ids 14501}#))
                       (#{new-vars 14504}#
                         (map #{gen-var 4359}# #{ids 14501}#)))
                   (#{build-application 4280}#
                     #f
                     (if (equal? (module-name (current-module)) '(guile))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 7)
                         #f
                         'apply)
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 5)
                         #f
                         '(guile)
                         'apply
                         #f))
                     (list (#{build-simple-lambda 4289}#
                             #f
                             (map syntax->datum #{ids 14501}#)
                             #f
                             #{new-vars 14504}#
                             '()
                             (#{expand 4345}#
                               #{exp 14497}#
                               (#{extend-env 4307}#
                                 #{labels 14503}#
                                 (map (lambda (#{var 14829}# #{level 14830}#)
                                        (cons 'syntax
                                              (cons #{var 14829}#
                                                    #{level 14830}#)))
                                      #{new-vars 14504}#
                                      (map cdr #{pvars 14496}#))
                                 #{r 14499}#)
                               (#{make-binding-wrap 4327}#
                                 #{ids 14501}#
                                 #{labels 14503}#
                                 '(()))
                               #{mod 14500}#))
                           #{y 14498}#)))))))
         (#{gen-clause 12156}#
           (lambda (#{x 13138}#
                    #{keys 13139}#
                    #{clauses 13140}#
                    #{r 13141}#
                    #{pat 13142}#
                    #{fender 13143}#
                    #{exp 13144}#
                    #{mod 13145}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 12154}#
                   #{pat 13142}#
                   #{keys 13139}#))
               (lambda (#{p 13300}# #{pvars 13301}#)
                 (if (not (#{distinct-bound-ids? 4336}#
                            (map car #{pvars 13301}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 13142}#)
                   (if (not (and-map
                              (lambda (#{x 13421}#)
                                (not (let ((#{x 13425}# (car #{x 13421}#)))
                                       (if (if (if (vector? #{x 13425}#)
                                                 (if (= (vector-length
                                                          #{x 13425}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 13425}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 13425}# 1))
                                             #f)
                                         (if (eq? (if (if (vector? #{x 13425}#)
                                                        (if (= (vector-length
                                                                 #{x 13425}#)
                                                               4)
                                                          (eq? (vector-ref
                                                                 #{x 13425}#
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref #{x 13425}# 1)
                                                    #{x 13425}#)
                                                  (if (if (= (vector-length
                                                               '#(syntax-object
                                                                  ...
                                                                  ((top)
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(x)
                                                                     #((top))
                                                                     #("i2230"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       expand-lambda-case
                                                                       lambda*-formals
                                                                       expand-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       expand-void
                                                                       eval-local-transformer
                                                                       expand-local-syntax
                                                                       expand-body
                                                                       expand-macro
                                                                       expand-application
                                                                       expand-expr
                                                                       expand
                                                                       syntax-type
                                                                       expand-when-list
                                                                       expand-install-global
                                                                       expand-top-sequence
                                                                       expand-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-application
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-sequence
                                                                       make-application
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i401"
                                                                      "i399"
                                                                      "i398"
                                                                      "i396"
                                                                      "i393"
                                                                      "i392"
                                                                      "i391"
                                                                      "i389"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i374"
                                                                      "i372"
                                                                      "i369"
                                                                      "i367"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i360"
                                                                      "i358"
                                                                      "i357"
                                                                      "i356"
                                                                      "i355"
                                                                      "i353"
                                                                      "i352"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i339"
                                                                      "i337"
                                                                      "i336"
                                                                      "i335"
                                                                      "i333"
                                                                      "i331"
                                                                      "i330"
                                                                      "i327"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i310"
                                                                      "i308"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i261"
                                                                      "i260"
                                                                      "i257"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i252"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i245"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile)))
                                                             4)
                                                        #t
                                                        #f)
                                                    '...
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i2230"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            expand-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i467"
                                                           "i465"
                                                           "i463"
                                                           "i461"
                                                           "i459"
                                                           "i457"
                                                           "i455"
                                                           "i453"
                                                           "i451"
                                                           "i449"
                                                           "i447"
                                                           "i445"
                                                           "i443"
                                                           "i441"
                                                           "i439"
                                                           "i437"
                                                           "i435"
                                                           "i433"
                                                           "i431"
                                                           "i429"
                                                           "i427"
                                                           "i425"
                                                           "i423"
                                                           "i421"
                                                           "i419"
                                                           "i417"
                                                           "i415"
                                                           "i413"
                                                           "i411"
                                                           "i409"
                                                           "i407"
                                                           "i405"
                                                           "i403"
                                                           "i401"
                                                           "i399"
                                                           "i398"
                                                           "i396"
                                                           "i393"
                                                           "i392"
                                                           "i391"
                                                           "i389"
                                                           "i388"
                                                           "i386"
                                                           "i384"
                                                           "i382"
                                                           "i380"
                                                           "i378"
                                                           "i376"
                                                           "i374"
                                                           "i372"
                                                           "i369"
                                                           "i367"
                                                           "i366"
                                                           "i364"
                                                           "i362"
                                                           "i360"
                                                           "i358"
                                                           "i357"
                                                           "i356"
                                                           "i355"
                                                           "i353"
                                                           "i352"
                                                           "i349"
                                                           "i347"
                                                           "i345"
                                                           "i343"
                                                           "i341"
                                                           "i339"
                                                           "i337"
                                                           "i336"
                                                           "i335"
                                                           "i333"
                                                           "i331"
                                                           "i330"
                                                           "i327"
                                                           "i326"
                                                           "i324"
                                                           "i322"
                                                           "i320"
                                                           "i318"
                                                           "i316"
                                                           "i314"
                                                           "i312"
                                                           "i310"
                                                           "i308"
                                                           "i305"
                                                           "i303"
                                                           "i301"
                                                           "i299"
                                                           "i297"
                                                           "i295"
                                                           "i293"
                                                           "i291"
                                                           "i289"
                                                           "i287"
                                                           "i285"
                                                           "i283"
                                                           "i281"
                                                           "i279"
                                                           "i277"
                                                           "i275"
                                                           "i273"
                                                           "i271"
                                                           "i269"
                                                           "i267"
                                                           "i265"
                                                           "i263"
                                                           "i261"
                                                           "i260"
                                                           "i257"
                                                           "i255"
                                                           "i254"
                                                           "i253"
                                                           "i252"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i242"
                                                           "i240"
                                                           "i238"
                                                           "i236"
                                                           "i234"
                                                           "i232"
                                                           "i230"
                                                           "i228"
                                                           "i226"
                                                           "i224"
                                                           "i222"
                                                           "i220"
                                                           "i218"
                                                           "i216"
                                                           "i214"
                                                           "i212"
                                                           "i210"
                                                           "i208"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("i46" "i45" "i44")))
                                                       (hygiene guile))))
                                           (eq? (#{id-var-name 4332}#
                                                  #{x 13425}#
                                                  '(()))
                                                (#{id-var-name 4332}#
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i2230"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          expand-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i467"
                                                         "i465"
                                                         "i463"
                                                         "i461"
                                                         "i459"
                                                         "i457"
                                                         "i455"
                                                         "i453"
                                                         "i451"
                                                         "i449"
                                                         "i447"
                                                         "i445"
                                                         "i443"
                                                         "i441"
                                                         "i439"
                                                         "i437"
                                                         "i435"
                                                         "i433"
                                                         "i431"
                                                         "i429"
                                                         "i427"
                                                         "i425"
                                                         "i423"
                                                         "i421"
                                                         "i419"
                                                         "i417"
                                                         "i415"
                                                         "i413"
                                                         "i411"
                                                         "i409"
                                                         "i407"
                                                         "i405"
                                                         "i403"
                                                         "i401"
                                                         "i399"
                                                         "i398"
                                                         "i396"
                                                         "i393"
                                                         "i392"
                                                         "i391"
                                                         "i389"
                                                         "i388"
                                                         "i386"
                                                         "i384"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i372"
                                                         "i369"
                                                         "i367"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i357"
                                                         "i356"
                                                         "i355"
                                                         "i353"
                                                         "i352"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i336"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i330"
                                                         "i327"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i283"
                                                         "i281"
                                                         "i279"
                                                         "i277"
                                                         "i275"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i260"
                                                         "i257"
                                                         "i255"
                                                         "i254"
                                                         "i253"
                                                         "i252"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i242"
                                                         "i240"
                                                         "i238"
                                                         "i236"
                                                         "i234"
                                                         "i232"
                                                         "i230"
                                                         "i228"
                                                         "i226"
                                                         "i224"
                                                         "i222"
                                                         "i220"
                                                         "i218"
                                                         "i216"
                                                         "i214"
                                                         "i212"
                                                         "i210"
                                                         "i208"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i46" "i45" "i44")))
                                                     (hygiene guile))
                                                  '(())))
                                           #f)
                                         #f))))
                              #{pvars 13301}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 13142}#)
                     (let ((#{y 13501}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (#{build-application 4280}#
                         #f
                         (let ((#{req 13651}# (list 'tmp))
                               (#{vars 13653}# (list #{y 13501}#))
                               (#{exp 13655}#
                                 (let ((#{y 13672}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 3)
                                           #f
                                           'tmp
                                           #{y 13501}#)))
                                   (let ((#{test-exp 13676}#
                                           (let ((#{tmp 13685}#
                                                   ($sc-dispatch
                                                     #{fender 13143}#
                                                     '#(atom #t))))
                                             (if #{tmp 13685}#
                                               (@apply
                                                 (lambda () #{y 13672}#)
                                                 #{tmp 13685}#)
                                               (let ((#{then-exp 13703}#
                                                       (#{build-dispatch-call 12155}#
                                                         #{pvars 13301}#
                                                         #{fender 13143}#
                                                         #{y 13672}#
                                                         #{r 13141}#
                                                         #{mod 13145}#))
                                                     (#{else-exp 13704}#
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           1)
                                                         #f
                                                         #f)))
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     10)
                                                   #f
                                                   #{y 13672}#
                                                   #{then-exp 13703}#
                                                   #{else-exp 13704}#)))))
                                         (#{then-exp 13677}#
                                           (#{build-dispatch-call 12155}#
                                             #{pvars 13301}#
                                             #{exp 13144}#
                                             #{y 13672}#
                                             #{r 13141}#
                                             #{mod 13145}#))
                                         (#{else-exp 13678}#
                                           (#{gen-syntax-case 12157}#
                                             #{x 13138}#
                                             #{keys 13139}#
                                             #{clauses 13140}#
                                             #{r 13141}#
                                             #{mod 13145}#)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 10)
                                       #f
                                       #{test-exp 13676}#
                                       #{then-exp 13677}#
                                       #{else-exp 13678}#)))))
                           (let ((#{body 13660}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     #{req 13651}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 13653}#
                                     #{exp 13655}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 13)
                               #f
                               '()
                               #{body 13660}#)))
                         (list (if (eq? #{p 13300}# 'any)
                                 (let ((#{fun-exp 13726}#
                                         (if (equal?
                                               (module-name (current-module))
                                               '(guile))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 7)
                                             #f
                                             'list)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 5)
                                             #f
                                             '(guile)
                                             'list
                                             #f)))
                                       (#{arg-exps 13727}# (list #{x 13138}#)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 11)
                                     #f
                                     #{fun-exp 13726}#
                                     #{arg-exps 13727}#))
                                 (let ((#{fun-exp 13750}#
                                         (if (equal?
                                               (module-name (current-module))
                                               '(guile))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 7)
                                             #f
                                             '$sc-dispatch)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 5)
                                             #f
                                             '(guile)
                                             '$sc-dispatch
                                             #f)))
                                       (#{arg-exps 13751}#
                                         (list #{x 13138}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   1)
                                                 #f
                                                 #{p 13300}#))))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 11)
                                     #f
                                     #{fun-exp 13750}#
                                     #{arg-exps 13751}#))))))))))))
         (#{gen-syntax-case 12157}#
           (lambda (#{x 12566}#
                    #{keys 12567}#
                    #{clauses 12568}#
                    #{r 12569}#
                    #{mod 12570}#)
             (if (null? #{clauses 12568}#)
               (let ((#{fun-exp 12575}#
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'syntax-violation)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'syntax-violation
                           #f)))
                     (#{arg-exps 12576}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 12566}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 11)
                   #f
                   #{fun-exp 12575}#
                   #{arg-exps 12576}#))
               (let ((#{tmp 12609}# (car #{clauses 12568}#)))
                 (let ((#{tmp 12610}#
                         ($sc-dispatch #{tmp 12609}# '(any any))))
                   (if #{tmp 12610}#
                     (@apply
                       (lambda (#{pat 12612}# #{exp 12613}#)
                         (if (if (if (symbol? #{pat 12612}#)
                                   #t
                                   (if (if (vector? #{pat 12612}#)
                                         (if (= (vector-length #{pat 12612}#)
                                                4)
                                           (eq? (vector-ref #{pat 12612}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 12612}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 12640}#)
                                   (not (if (eq? (if (if (vector?
                                                           #{pat 12612}#)
                                                       (if (= (vector-length
                                                                #{pat 12612}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{pat 12612}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref #{pat 12612}# 1)
                                                   #{pat 12612}#)
                                                 (if (if (vector? #{x 12640}#)
                                                       (if (= (vector-length
                                                                #{x 12640}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{x 12640}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref #{x 12640}# 1)
                                                   #{x 12640}#))
                                          (eq? (#{id-var-name 4332}#
                                                 #{pat 12612}#
                                                 '(()))
                                               (#{id-var-name 4332}#
                                                 #{x 12640}#
                                                 '(())))
                                          #f)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i3911" "i3912"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i3900"
                                               "i3901"
                                               "i3902"
                                               "i3903"
                                               "i3904"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3710" "i3708" "i3706" "i3704"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               expand-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))
                                       #{keys 12567}#))
                               #f)
                           (if (if (eq? (if (if (= (vector-length
                                                     '#(syntax-object
                                                        pad
                                                        ((top)
                                                         #(ribcage
                                                           #(pat exp)
                                                           #((top) (top))
                                                           #("i3911" "i3912"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x
                                                             keys
                                                             clauses
                                                             r
                                                             mod)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i3900"
                                                             "i3901"
                                                             "i3902"
                                                             "i3903"
                                                             "i3904"))
                                                         #(ribcage
                                                           (gen-syntax-case
                                                             gen-clause
                                                             build-dispatch-call
                                                             convert-pattern)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i3710"
                                                            "i3708"
                                                            "i3706"
                                                            "i3704"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             expand-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i467"
                                                            "i465"
                                                            "i463"
                                                            "i461"
                                                            "i459"
                                                            "i457"
                                                            "i455"
                                                            "i453"
                                                            "i451"
                                                            "i449"
                                                            "i447"
                                                            "i445"
                                                            "i443"
                                                            "i441"
                                                            "i439"
                                                            "i437"
                                                            "i435"
                                                            "i433"
                                                            "i431"
                                                            "i429"
                                                            "i427"
                                                            "i425"
                                                            "i423"
                                                            "i421"
                                                            "i419"
                                                            "i417"
                                                            "i415"
                                                            "i413"
                                                            "i411"
                                                            "i409"
                                                            "i407"
                                                            "i405"
                                                            "i403"
                                                            "i401"
                                                            "i399"
                                                            "i398"
                                                            "i396"
                                                            "i393"
                                                            "i392"
                                                            "i391"
                                                            "i389"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i382"
                                                            "i380"
                                                            "i378"
                                                            "i376"
                                                            "i374"
                                                            "i372"
                                                            "i369"
                                                            "i367"
                                                            "i366"
                                                            "i364"
                                                            "i362"
                                                            "i360"
                                                            "i358"
                                                            "i357"
                                                            "i356"
                                                            "i355"
                                                            "i353"
                                                            "i352"
                                                            "i349"
                                                            "i347"
                                                            "i345"
                                                            "i343"
                                                            "i341"
                                                            "i339"
                                                            "i337"
                                                            "i336"
                                                            "i335"
                                                            "i333"
                                                            "i331"
                                                            "i330"
                                                            "i327"
                                                            "i326"
                                                            "i324"
                                                            "i322"
                                                            "i320"
                                                            "i318"
                                                            "i316"
                                                            "i314"
                                                            "i312"
                                                            "i310"
                                                            "i308"
                                                            "i305"
                                                            "i303"
                                                            "i301"
                                                            "i299"
                                                            "i297"
                                                            "i295"
                                                            "i293"
                                                            "i291"
                                                            "i289"
                                                            "i287"
                                                            "i285"
                                                            "i283"
                                                            "i281"
                                                            "i279"
                                                            "i277"
                                                            "i275"
                                                            "i273"
                                                            "i271"
                                                            "i269"
                                                            "i267"
                                                            "i265"
                                                            "i263"
                                                            "i261"
                                                            "i260"
                                                            "i257"
                                                            "i255"
                                                            "i254"
                                                            "i253"
                                                            "i252"
                                                            "i251"
                                                            "i249"
                                                            "i247"
                                                            "i245"
                                                            "i242"
                                                            "i240"
                                                            "i238"
                                                            "i236"
                                                            "i234"
                                                            "i232"
                                                            "i230"
                                                            "i228"
                                                            "i226"
                                                            "i224"
                                                            "i222"
                                                            "i220"
                                                            "i218"
                                                            "i216"
                                                            "i214"
                                                            "i212"
                                                            "i210"
                                                            "i208"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i46"
                                                            "i45"
                                                            "i44")))
                                                        (hygiene guile)))
                                                   4)
                                              #t
                                              #f)
                                          'pad
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i3911" "i3912"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3900"
                                                  "i3901"
                                                  "i3902"
                                                  "i3903"
                                                  "i3904"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i3710"
                                                 "i3708"
                                                 "i3706"
                                                 "i3704"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  expand-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile)))
                                        (if (if (= (vector-length
                                                     '#(syntax-object
                                                        _
                                                        ((top)
                                                         #(ribcage
                                                           #(pat exp)
                                                           #((top) (top))
                                                           #("i3911" "i3912"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x
                                                             keys
                                                             clauses
                                                             r
                                                             mod)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i3900"
                                                             "i3901"
                                                             "i3902"
                                                             "i3903"
                                                             "i3904"))
                                                         #(ribcage
                                                           (gen-syntax-case
                                                             gen-clause
                                                             build-dispatch-call
                                                             convert-pattern)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i3710"
                                                            "i3708"
                                                            "i3706"
                                                            "i3704"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             expand-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i467"
                                                            "i465"
                                                            "i463"
                                                            "i461"
                                                            "i459"
                                                            "i457"
                                                            "i455"
                                                            "i453"
                                                            "i451"
                                                            "i449"
                                                            "i447"
                                                            "i445"
                                                            "i443"
                                                            "i441"
                                                            "i439"
                                                            "i437"
                                                            "i435"
                                                            "i433"
                                                            "i431"
                                                            "i429"
                                                            "i427"
                                                            "i425"
                                                            "i423"
                                                            "i421"
                                                            "i419"
                                                            "i417"
                                                            "i415"
                                                            "i413"
                                                            "i411"
                                                            "i409"
                                                            "i407"
                                                            "i405"
                                                            "i403"
                                                            "i401"
                                                            "i399"
                                                            "i398"
                                                            "i396"
                                                            "i393"
                                                            "i392"
                                                            "i391"
                                                            "i389"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i382"
                                                            "i380"
                                                            "i378"
                                                            "i376"
                                                            "i374"
                                                            "i372"
                                                            "i369"
                                                            "i367"
                                                            "i366"
                                                            "i364"
                                                            "i362"
                                                            "i360"
                                                            "i358"
                                                            "i357"
                                                            "i356"
                                                            "i355"
                                                            "i353"
                                                            "i352"
                                                            "i349"
                                                            "i347"
                                                            "i345"
                                                            "i343"
                                                            "i341"
                                                            "i339"
                                                            "i337"
                                                            "i336"
                                                            "i335"
                                                            "i333"
                                                            "i331"
                                                            "i330"
                                                            "i327"
                                                            "i326"
                                                            "i324"
                                                            "i322"
                                                            "i320"
                                                            "i318"
                                                            "i316"
                                                            "i314"
                                                            "i312"
                                                            "i310"
                                                            "i308"
                                                            "i305"
                                                            "i303"
                                                            "i301"
                                                            "i299"
                                                            "i297"
                                                            "i295"
                                                            "i293"
                                                            "i291"
                                                            "i289"
                                                            "i287"
                                                            "i285"
                                                            "i283"
                                                            "i281"
                                                            "i279"
                                                            "i277"
                                                            "i275"
                                                            "i273"
                                                            "i271"
                                                            "i269"
                                                            "i267"
                                                            "i265"
                                                            "i263"
                                                            "i261"
                                                            "i260"
                                                            "i257"
                                                            "i255"
                                                            "i254"
                                                            "i253"
                                                            "i252"
                                                            "i251"
                                                            "i249"
                                                            "i247"
                                                            "i245"
                                                            "i242"
                                                            "i240"
                                                            "i238"
                                                            "i236"
                                                            "i234"
                                                            "i232"
                                                            "i230"
                                                            "i228"
                                                            "i226"
                                                            "i224"
                                                            "i222"
                                                            "i220"
                                                            "i218"
                                                            "i216"
                                                            "i214"
                                                            "i212"
                                                            "i210"
                                                            "i208"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i46"
                                                            "i45"
                                                            "i44")))
                                                        (hygiene guile)))
                                                   4)
                                              #t
                                              #f)
                                          '_
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i3911" "i3912"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3900"
                                                  "i3901"
                                                  "i3902"
                                                  "i3903"
                                                  "i3904"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i3710"
                                                 "i3708"
                                                 "i3706"
                                                 "i3704"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  expand-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile))))
                                 (eq? (#{id-var-name 4332}#
                                        '#(syntax-object
                                           pad
                                           ((top)
                                            #(ribcage
                                              #(pat exp)
                                              #((top) (top))
                                              #("i3911" "i3912"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x keys clauses r mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i3900"
                                                "i3901"
                                                "i3902"
                                                "i3903"
                                                "i3904"))
                                            #(ribcage
                                              (gen-syntax-case
                                                gen-clause
                                                build-dispatch-call
                                                convert-pattern)
                                              ((top) (top) (top) (top))
                                              ("i3710"
                                               "i3708"
                                               "i3706"
                                               "i3704"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                expand-lambda-case
                                                lambda*-formals
                                                expand-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                expand-void
                                                eval-local-transformer
                                                expand-local-syntax
                                                expand-body
                                                expand-macro
                                                expand-application
                                                expand-expr
                                                expand
                                                syntax-type
                                                expand-when-list
                                                expand-install-global
                                                expand-top-sequence
                                                expand-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i467"
                                               "i465"
                                               "i463"
                                               "i461"
                                               "i459"
                                               "i457"
                                               "i455"
                                               "i453"
                                               "i451"
                                               "i449"
                                               "i447"
                                               "i445"
                                               "i443"
                                               "i441"
                                               "i439"
                                               "i437"
                                               "i435"
                                               "i433"
                                               "i431"
                                               "i429"
                                               "i427"
                                               "i425"
                                               "i423"
                                               "i421"
                                               "i419"
                                               "i417"
                                               "i415"
                                               "i413"
                                               "i411"
                                               "i409"
                                               "i407"
                                               "i405"
                                               "i403"
                                               "i401"
                                               "i399"
                                               "i398"
                                               "i396"
                                               "i393"
                                               "i392"
                                               "i391"
                                               "i389"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i382"
                                               "i380"
                                               "i378"
                                               "i376"
                                               "i374"
                                               "i372"
                                               "i369"
                                               "i367"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i360"
                                               "i358"
                                               "i357"
                                               "i356"
                                               "i355"
                                               "i353"
                                               "i352"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i336"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i330"
                                               "i327"
                                               "i326"
                                               "i324"
                                               "i322"
                                               "i320"
                                               "i318"
                                               "i316"
                                               "i314"
                                               "i312"
                                               "i310"
                                               "i308"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i293"
                                               "i291"
                                               "i289"
                                               "i287"
                                               "i285"
                                               "i283"
                                               "i281"
                                               "i279"
                                               "i277"
                                               "i275"
                                               "i273"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i260"
                                               "i257"
                                               "i255"
                                               "i254"
                                               "i253"
                                               "i252"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i242"
                                               "i240"
                                               "i238"
                                               "i236"
                                               "i234"
                                               "i232"
                                               "i230"
                                               "i228"
                                               "i226"
                                               "i224"
                                               "i222"
                                               "i220"
                                               "i218"
                                               "i216"
                                               "i214"
                                               "i212"
                                               "i210"
                                               "i208"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i46" "i45" "i44")))
                                           (hygiene guile))
                                        '(()))
                                      (#{id-var-name 4332}#
                                        '#(syntax-object
                                           _
                                           ((top)
                                            #(ribcage
                                              #(pat exp)
                                              #((top) (top))
                                              #("i3911" "i3912"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x keys clauses r mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i3900"
                                                "i3901"
                                                "i3902"
                                                "i3903"
                                                "i3904"))
                                            #(ribcage
                                              (gen-syntax-case
                                                gen-clause
                                                build-dispatch-call
                                                convert-pattern)
                                              ((top) (top) (top) (top))
                                              ("i3710"
                                               "i3708"
                                               "i3706"
                                               "i3704"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                expand-lambda-case
                                                lambda*-formals
                                                expand-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                expand-void
                                                eval-local-transformer
                                                expand-local-syntax
                                                expand-body
                                                expand-macro
                                                expand-application
                                                expand-expr
                                                expand
                                                syntax-type
                                                expand-when-list
                                                expand-install-global
                                                expand-top-sequence
                                                expand-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i467"
                                               "i465"
                                               "i463"
                                               "i461"
                                               "i459"
                                               "i457"
                                               "i455"
                                               "i453"
                                               "i451"
                                               "i449"
                                               "i447"
                                               "i445"
                                               "i443"
                                               "i441"
                                               "i439"
                                               "i437"
                                               "i435"
                                               "i433"
                                               "i431"
                                               "i429"
                                               "i427"
                                               "i425"
                                               "i423"
                                               "i421"
                                               "i419"
                                               "i417"
                                               "i415"
                                               "i413"
                                               "i411"
                                               "i409"
                                               "i407"
                                               "i405"
                                               "i403"
                                               "i401"
                                               "i399"
                                               "i398"
                                               "i396"
                                               "i393"
                                               "i392"
                                               "i391"
                                               "i389"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i382"
                                               "i380"
                                               "i378"
                                               "i376"
                                               "i374"
                                               "i372"
                                               "i369"
                                               "i367"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i360"
                                               "i358"
                                               "i357"
                                               "i356"
                                               "i355"
                                               "i353"
                                               "i352"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i336"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i330"
                                               "i327"
                                               "i326"
                                               "i324"
                                               "i322"
                                               "i320"
                                               "i318"
                                               "i316"
                                               "i314"
                                               "i312"
                                               "i310"
                                               "i308"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i293"
                                               "i291"
                                               "i289"
                                               "i287"
                                               "i285"
                                               "i283"
                                               "i281"
                                               "i279"
                                               "i277"
                                               "i275"
                                               "i273"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i260"
                                               "i257"
                                               "i255"
                                               "i254"
                                               "i253"
                                               "i252"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i242"
                                               "i240"
                                               "i238"
                                               "i236"
                                               "i234"
                                               "i232"
                                               "i230"
                                               "i228"
                                               "i226"
                                               "i224"
                                               "i222"
                                               "i220"
                                               "i218"
                                               "i216"
                                               "i214"
                                               "i212"
                                               "i210"
                                               "i208"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i46" "i45" "i44")))
                                           (hygiene guile))
                                        '(())))
                                 #f)
                             (#{expand 4345}#
                               #{exp 12613}#
                               #{r 12569}#
                               '(())
                               #{mod 12570}#)
                             (let ((#{labels 12821}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 12822}#
                                     (let ((#{id 12860}#
                                             (if (if (vector? #{pat 12612}#)
                                                   (if (= (vector-length
                                                            #{pat 12612}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 12612}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 12612}# 1)
                                               #{pat 12612}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 12860}#)
                                           " ")))))
                               (#{build-application 4280}#
                                 #f
                                 (#{build-simple-lambda 4289}#
                                   #f
                                   (list (syntax->datum #{pat 12612}#))
                                   #f
                                   (list #{var 12822}#)
                                   '()
                                   (#{expand 4345}#
                                     #{exp 12613}#
                                     (#{extend-env 4307}#
                                       #{labels 12821}#
                                       (list (cons 'syntax
                                                   (cons #{var 12822}# 0)))
                                       #{r 12569}#)
                                     (#{make-binding-wrap 4327}#
                                       (list #{pat 12612}#)
                                       #{labels 12821}#
                                       '(()))
                                     #{mod 12570}#))
                                 (list #{x 12566}#))))
                           (#{gen-clause 12156}#
                             #{x 12566}#
                             #{keys 12567}#
                             (cdr #{clauses 12568}#)
                             #{r 12569}#
                             #{pat 12612}#
                             #t
                             #{exp 12613}#
                             #{mod 12570}#)))
                       #{tmp 12610}#)
                     (let ((#{tmp 13130}#
                             ($sc-dispatch #{tmp 12609}# '(any any any))))
                       (if #{tmp 13130}#
                         (@apply
                           (lambda (#{pat 13132}#
                                    #{fender 13133}#
                                    #{exp 13134}#)
                             (#{gen-clause 12156}#
                               #{x 12566}#
                               #{keys 12567}#
                               (cdr #{clauses 12568}#)
                               #{r 12569}#
                               #{pat 13132}#
                               #{fender 13133}#
                               #{exp 13134}#
                               #{mod 12570}#))
                           #{tmp 13130}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 12568}#)))))))))))
        (lambda (#{e 12158}#
                 #{r 12159}#
                 #{w 12160}#
                 #{s 12161}#
                 #{mod 12162}#)
          (let ((#{e 12163}#
                  (#{wrap 4338}#
                    (begin
                      (if (if (pair? #{e 12158}#) #{s 12161}# #f)
                        (set-source-properties! #{e 12158}# #{s 12161}#))
                      #{e 12158}#)
                    #{w 12160}#
                    #{mod 12162}#)))
            (let ((#{tmp 12165}#
                    ($sc-dispatch
                      #{e 12163}#
                      '(_ any each-any . each-any))))
              (if #{tmp 12165}#
                (@apply
                  (lambda (#{val 12190}# #{key 12191}# #{m 12192}#)
                    (if (and-map
                          (lambda (#{x 12193}#)
                            (if (if (symbol? #{x 12193}#)
                                  #t
                                  (if (if (vector? #{x 12193}#)
                                        (if (= (vector-length #{x 12193}#) 4)
                                          (eq? (vector-ref #{x 12193}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{x 12193}# 1))
                                    #f))
                              (not (if (if (if (vector? #{x 12193}#)
                                             (if (= (vector-length #{x 12193}#)
                                                    4)
                                               (eq? (vector-ref #{x 12193}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (symbol? (vector-ref #{x 12193}# 1))
                                         #f)
                                     (if (eq? (if (if (vector? #{x 12193}#)
                                                    (if (= (vector-length
                                                             #{x 12193}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{x 12193}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (vector-ref #{x 12193}# 1)
                                                #{x 12193}#)
                                              (if (if (= (vector-length
                                                           '#(syntax-object
                                                              ...
                                                              ((top)
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i2230"))
                                                               #(ribcage
                                                                 (lambda-var-list
                                                                   gen-var
                                                                   strip
                                                                   expand-lambda-case
                                                                   lambda*-formals
                                                                   expand-simple-lambda
                                                                   lambda-formals
                                                                   ellipsis?
                                                                   expand-void
                                                                   eval-local-transformer
                                                                   expand-local-syntax
                                                                   expand-body
                                                                   expand-macro
                                                                   expand-application
                                                                   expand-expr
                                                                   expand
                                                                   syntax-type
                                                                   expand-when-list
                                                                   expand-install-global
                                                                   expand-top-sequence
                                                                   expand-sequence
                                                                   source-wrap
                                                                   wrap
                                                                   bound-id-member?
                                                                   distinct-bound-ids?
                                                                   valid-bound-ids?
                                                                   bound-id=?
                                                                   free-id=?
                                                                   id-var-name
                                                                   same-marks?
                                                                   join-marks
                                                                   join-wraps
                                                                   smart-append
                                                                   make-binding-wrap
                                                                   extend-ribcage!
                                                                   make-empty-ribcage
                                                                   new-mark
                                                                   anti-mark
                                                                   the-anti-mark
                                                                   top-marked?
                                                                   top-wrap
                                                                   empty-wrap
                                                                   set-ribcage-labels!
                                                                   set-ribcage-marks!
                                                                   set-ribcage-symnames!
                                                                   ribcage-labels
                                                                   ribcage-marks
                                                                   ribcage-symnames
                                                                   ribcage?
                                                                   make-ribcage
                                                                   gen-labels
                                                                   gen-label
                                                                   make-rename
                                                                   rename-marks
                                                                   rename-new
                                                                   rename-old
                                                                   subst-rename?
                                                                   wrap-subst
                                                                   wrap-marks
                                                                   make-wrap
                                                                   id-sym-name&marks
                                                                   id-sym-name
                                                                   id?
                                                                   nonsymbol-id?
                                                                   global-extend
                                                                   lookup
                                                                   macros-only-env
                                                                   extend-var-env
                                                                   extend-env
                                                                   null-env
                                                                   binding-value
                                                                   binding-type
                                                                   make-binding
                                                                   arg-check
                                                                   source-annotation
                                                                   no-source
                                                                   set-syntax-object-module!
                                                                   set-syntax-object-wrap!
                                                                   set-syntax-object-expression!
                                                                   syntax-object-module
                                                                   syntax-object-wrap
                                                                   syntax-object-expression
                                                                   syntax-object?
                                                                   make-syntax-object
                                                                   build-lexical-var
                                                                   build-letrec
                                                                   build-named-let
                                                                   build-let
                                                                   build-sequence
                                                                   build-data
                                                                   build-primref
                                                                   build-lambda-case
                                                                   build-case-lambda
                                                                   build-simple-lambda
                                                                   build-global-definition
                                                                   build-global-assignment
                                                                   build-global-reference
                                                                   analyze-variable
                                                                   build-lexical-assignment
                                                                   build-lexical-reference
                                                                   build-dynlet
                                                                   build-conditional
                                                                   build-application
                                                                   build-void
                                                                   maybe-name-value!
                                                                   decorate-source
                                                                   get-global-definition-hook
                                                                   put-global-definition-hook
                                                                   gensym-hook
                                                                   local-eval-hook
                                                                   top-level-eval-hook
                                                                   fx<
                                                                   fx=
                                                                   fx-
                                                                   fx+
                                                                   set-lambda-meta!
                                                                   lambda-meta
                                                                   lambda?
                                                                   make-dynlet
                                                                   make-letrec
                                                                   make-let
                                                                   make-lambda-case
                                                                   make-lambda
                                                                   make-sequence
                                                                   make-application
                                                                   make-conditional
                                                                   make-toplevel-define
                                                                   make-toplevel-set
                                                                   make-toplevel-ref
                                                                   make-module-set
                                                                   make-module-ref
                                                                   make-lexical-set
                                                                   make-lexical-ref
                                                                   make-primitive-ref
                                                                   make-const
                                                                   make-void)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i467"
                                                                  "i465"
                                                                  "i463"
                                                                  "i461"
                                                                  "i459"
                                                                  "i457"
                                                                  "i455"
                                                                  "i453"
                                                                  "i451"
                                                                  "i449"
                                                                  "i447"
                                                                  "i445"
                                                                  "i443"
                                                                  "i441"
                                                                  "i439"
                                                                  "i437"
                                                                  "i435"
                                                                  "i433"
                                                                  "i431"
                                                                  "i429"
                                                                  "i427"
                                                                  "i425"
                                                                  "i423"
                                                                  "i421"
                                                                  "i419"
                                                                  "i417"
                                                                  "i415"
                                                                  "i413"
                                                                  "i411"
                                                                  "i409"
                                                                  "i407"
                                                                  "i405"
                                                                  "i403"
                                                                  "i401"
                                                                  "i399"
                                                                  "i398"
                                                                  "i396"
                                                                  "i393"
                                                                  "i392"
                                                                  "i391"
                                                                  "i389"
                                                                  "i388"
                                                                  "i386"
                                                                  "i384"
                                                                  "i382"
                                                                  "i380"
                                                                  "i378"
                                                                  "i376"
                                                                  "i374"
                                                                  "i372"
                                                                  "i369"
                                                                  "i367"
                                                                  "i366"
                                                                  "i364"
                                                                  "i362"
                                                                  "i360"
                                                                  "i358"
                                                                  "i357"
                                                                  "i356"
                                                                  "i355"
                                                                  "i353"
                                                                  "i352"
                                                                  "i349"
                                                                  "i347"
                                                                  "i345"
                                                                  "i343"
                                                                  "i341"
                                                                  "i339"
                                                                  "i337"
                                                                  "i336"
                                                                  "i335"
                                                                  "i333"
                                                                  "i331"
                                                                  "i330"
                                                                  "i327"
                                                                  "i326"
                                                                  "i324"
                                                                  "i322"
                                                                  "i320"
                                                                  "i318"
                                                                  "i316"
                                                                  "i314"
                                                                  "i312"
                                                                  "i310"
                                                                  "i308"
                                                                  "i305"
                                                                  "i303"
                                                                  "i301"
                                                                  "i299"
                                                                  "i297"
                                                                  "i295"
                                                                  "i293"
                                                                  "i291"
                                                                  "i289"
                                                                  "i287"
                                                                  "i285"
                                                                  "i283"
                                                                  "i281"
                                                                  "i279"
                                                                  "i277"
                                                                  "i275"
                                                                  "i273"
                                                                  "i271"
                                                                  "i269"
                                                                  "i267"
                                                                  "i265"
                                                                  "i263"
                                                                  "i261"
                                                                  "i260"
                                                                  "i257"
                                                                  "i255"
                                                                  "i254"
                                                                  "i253"
                                                                  "i252"
                                                                  "i251"
                                                                  "i249"
                                                                  "i247"
                                                                  "i245"
                                                                  "i242"
                                                                  "i240"
                                                                  "i238"
                                                                  "i236"
                                                                  "i234"
                                                                  "i232"
                                                                  "i230"
                                                                  "i228"
                                                                  "i226"
                                                                  "i224"
                                                                  "i222"
                                                                  "i220"
                                                                  "i218"
                                                                  "i216"
                                                                  "i214"
                                                                  "i212"
                                                                  "i210"
                                                                  "i208"))
                                                               #(ribcage
                                                                 (define-structure
                                                                   define-expansion-accessors
                                                                   define-expansion-constructors)
                                                                 ((top)
                                                                  (top)
                                                                  (top))
                                                                 ("i46"
                                                                  "i45"
                                                                  "i44")))
                                                              (hygiene guile)))
                                                         4)
                                                    #t
                                                    #f)
                                                '...
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i2230"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        expand-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i467"
                                                       "i465"
                                                       "i463"
                                                       "i461"
                                                       "i459"
                                                       "i457"
                                                       "i455"
                                                       "i453"
                                                       "i451"
                                                       "i449"
                                                       "i447"
                                                       "i445"
                                                       "i443"
                                                       "i441"
                                                       "i439"
                                                       "i437"
                                                       "i435"
                                                       "i433"
                                                       "i431"
                                                       "i429"
                                                       "i427"
                                                       "i425"
                                                       "i423"
                                                       "i421"
                                                       "i419"
                                                       "i417"
                                                       "i415"
                                                       "i413"
                                                       "i411"
                                                       "i409"
                                                       "i407"
                                                       "i405"
                                                       "i403"
                                                       "i401"
                                                       "i399"
                                                       "i398"
                                                       "i396"
                                                       "i393"
                                                       "i392"
                                                       "i391"
                                                       "i389"
                                                       "i388"
                                                       "i386"
                                                       "i384"
                                                       "i382"
                                                       "i380"
                                                       "i378"
                                                       "i376"
                                                       "i374"
                                                       "i372"
                                                       "i369"
                                                       "i367"
                                                       "i366"
                                                       "i364"
                                                       "i362"
                                                       "i360"
                                                       "i358"
                                                       "i357"
                                                       "i356"
                                                       "i355"
                                                       "i353"
                                                       "i352"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i336"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i330"
                                                       "i327"
                                                       "i326"
                                                       "i324"
                                                       "i322"
                                                       "i320"
                                                       "i318"
                                                       "i316"
                                                       "i314"
                                                       "i312"
                                                       "i310"
                                                       "i308"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i293"
                                                       "i291"
                                                       "i289"
                                                       "i287"
                                                       "i285"
                                                       "i283"
                                                       "i281"
                                                       "i279"
                                                       "i277"
                                                       "i275"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i260"
                                                       "i257"
                                                       "i255"
                                                       "i254"
                                                       "i253"
                                                       "i252"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i242"
                                                       "i240"
                                                       "i238"
                                                       "i236"
                                                       "i234"
                                                       "i232"
                                                       "i230"
                                                       "i228"
                                                       "i226"
                                                       "i224"
                                                       "i222"
                                                       "i220"
                                                       "i218"
                                                       "i216"
                                                       "i214"
                                                       "i212"
                                                       "i210"
                                                       "i208"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("i46" "i45" "i44")))
                                                   (hygiene guile))))
                                       (eq? (#{id-var-name 4332}#
                                              #{x 12193}#
                                              '(()))
                                            (#{id-var-name 4332}#
                                              '#(syntax-object
                                                 ...
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i2230"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      expand-lambda-case
                                                      lambda*-formals
                                                      expand-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      expand-void
                                                      eval-local-transformer
                                                      expand-local-syntax
                                                      expand-body
                                                      expand-macro
                                                      expand-application
                                                      expand-expr
                                                      expand
                                                      syntax-type
                                                      expand-when-list
                                                      expand-install-global
                                                      expand-top-sequence
                                                      expand-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      maybe-name-value!
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i467"
                                                     "i465"
                                                     "i463"
                                                     "i461"
                                                     "i459"
                                                     "i457"
                                                     "i455"
                                                     "i453"
                                                     "i451"
                                                     "i449"
                                                     "i447"
                                                     "i445"
                                                     "i443"
                                                     "i441"
                                                     "i439"
                                                     "i437"
                                                     "i435"
                                                     "i433"
                                                     "i431"
                                                     "i429"
                                                     "i427"
                                                     "i425"
                                                     "i423"
                                                     "i421"
                                                     "i419"
                                                     "i417"
                                                     "i415"
                                                     "i413"
                                                     "i411"
                                                     "i409"
                                                     "i407"
                                                     "i405"
                                                     "i403"
                                                     "i401"
                                                     "i399"
                                                     "i398"
                                                     "i396"
                                                     "i393"
                                                     "i392"
                                                     "i391"
                                                     "i389"
                                                     "i388"
                                                     "i386"
                                                     "i384"
                                                     "i382"
                                                     "i380"
                                                     "i378"
                                                     "i376"
                                                     "i374"
                                                     "i372"
                                                     "i369"
                                                     "i367"
                                                     "i366"
                                                     "i364"
                                                     "i362"
                                                     "i360"
                                                     "i358"
                                                     "i357"
                                                     "i356"
                                                     "i355"
                                                     "i353"
                                                     "i352"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i336"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i330"
                                                     "i327"
                                                     "i326"
                                                     "i324"
                                                     "i322"
                                                     "i320"
                                                     "i318"
                                                     "i316"
                                                     "i314"
                                                     "i312"
                                                     "i310"
                                                     "i308"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i293"
                                                     "i291"
                                                     "i289"
                                                     "i287"
                                                     "i285"
                                                     "i283"
                                                     "i281"
                                                     "i279"
                                                     "i277"
                                                     "i275"
                                                     "i273"
                                                     "i271"
                                                     "i269"
                                                     "i267"
                                                     "i265"
                                                     "i263"
                                                     "i261"
                                                     "i260"
                                                     "i257"
                                                     "i255"
                                                     "i254"
                                                     "i253"
                                                     "i252"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i242"
                                                     "i240"
                                                     "i238"
                                                     "i236"
                                                     "i234"
                                                     "i232"
                                                     "i230"
                                                     "i228"
                                                     "i226"
                                                     "i224"
                                                     "i222"
                                                     "i220"
                                                     "i218"
                                                     "i216"
                                                     "i214"
                                                     "i212"
                                                     "i210"
                                                     "i208"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors)
                                                    ((top) (top) (top))
                                                    ("i46" "i45" "i44")))
                                                 (hygiene guile))
                                              '(())))
                                       #f)
                                     #f))
                              #f))
                          #{key 12191}#)
                      (let ((#{x 12319}#
                              (gensym
                                (string-append (symbol->string 'tmp) " "))))
                        (#{build-application 4280}#
                          #{s 12161}#
                          (let ((#{req 12454}# (list 'tmp))
                                (#{vars 12456}# (list #{x 12319}#))
                                (#{exp 12458}#
                                  (#{gen-syntax-case 12157}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 3)
                                      #f
                                      'tmp
                                      #{x 12319}#)
                                    #{key 12191}#
                                    #{m 12192}#
                                    #{r 12159}#
                                    #{mod 12162}#)))
                            (let ((#{body 12463}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 14)
                                      #f
                                      #{req 12454}#
                                      #f
                                      #f
                                      #f
                                      '()
                                      #{vars 12456}#
                                      #{exp 12458}#
                                      #f)))
                              (make-struct/no-tail
                                (vector-ref %expanded-vtables 13)
                                #f
                                '()
                                #{body 12463}#)))
                          (list (#{expand 4345}#
                                  #{val 12190}#
                                  #{r 12159}#
                                  '(())
                                  #{mod 12162}#))))
                      (syntax-violation
                        'syntax-case
                        "invalid literals list"
                        #{e 12163}#)))
                  #{tmp 12165}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 12163}#)))))))
    (set! macroexpand
      (lambda*
        (#{x 14921}#
          #:optional
          (#{m 14922}# 'e)
          (#{esew 14923}# '(eval)))
        (#{expand-top-sequence 4341}#
          (list #{x 14921}#)
          '()
          '((top))
          #f
          #{m 14922}#
          #{esew 14923}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 14926}#)
        (if (if (vector? #{x 14926}#)
              (if (= (vector-length #{x 14926}#) 4)
                (eq? (vector-ref #{x 14926}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 14926}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 14951}# #{datum 14952}#)
        (let ((#{wrap 14957}# (vector-ref #{id 14951}# 2))
              (#{module 14958}# (vector-ref #{id 14951}# 3)))
          (vector
            'syntax-object
            #{datum 14952}#
            #{wrap 14957}#
            #{module 14958}#))))
    (set! syntax->datum
      (lambda (#{x 14965}#)
        (#{strip 4358}# #{x 14965}# '(()))))
    (set! syntax-source
      (lambda (#{x 14968}#)
        (#{source-annotation 4306}# #{x 14968}#)))
    (set! generate-temporaries
      (lambda (#{ls 15140}#)
        (begin
          (if (not (list? #{ls 15140}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 15140}#))
          (let ((#{mod 15148}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 15149}#)
                   (#{wrap 4338}# (gensym) '((top)) #{mod 15148}#))
                 #{ls 15140}#)))))
    (set! free-identifier=?
      (lambda (#{x 15153}# #{y 15154}#)
        (begin
          (if (not (if (if (vector? #{x 15153}#)
                         (if (= (vector-length #{x 15153}#) 4)
                           (eq? (vector-ref #{x 15153}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 15153}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 15153}#))
          (if (not (if (if (vector? #{y 15154}#)
                         (if (= (vector-length #{y 15154}#) 4)
                           (eq? (vector-ref #{y 15154}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 15154}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 15154}#))
          (if (eq? (if (if (vector? #{x 15153}#)
                         (if (= (vector-length #{x 15153}#) 4)
                           (eq? (vector-ref #{x 15153}# 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref #{x 15153}# 1)
                     #{x 15153}#)
                   (if (if (vector? #{y 15154}#)
                         (if (= (vector-length #{y 15154}#) 4)
                           (eq? (vector-ref #{y 15154}# 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref #{y 15154}# 1)
                     #{y 15154}#))
            (eq? (#{id-var-name 4332}# #{x 15153}# '(()))
                 (#{id-var-name 4332}# #{y 15154}# '(())))
            #f))))
    (set! bound-identifier=?
      (lambda (#{x 15304}# #{y 15305}#)
        (begin
          (if (not (if (if (vector? #{x 15304}#)
                         (if (= (vector-length #{x 15304}#) 4)
                           (eq? (vector-ref #{x 15304}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 15304}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 15304}#))
          (if (not (if (if (vector? #{y 15305}#)
                         (if (= (vector-length #{y 15305}#) 4)
                           (eq? (vector-ref #{y 15305}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 15305}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 15305}#))
          (if (if (if (vector? #{x 15304}#)
                    (if (= (vector-length #{x 15304}#) 4)
                      (eq? (vector-ref #{x 15304}# 0) 'syntax-object)
                      #f)
                    #f)
                (if (vector? #{y 15305}#)
                  (if (= (vector-length #{y 15305}#) 4)
                    (eq? (vector-ref #{y 15305}# 0) 'syntax-object)
                    #f)
                  #f)
                #f)
            (if (eq? (vector-ref #{x 15304}# 1)
                     (vector-ref #{y 15305}# 1))
              (#{same-marks? 4331}#
                (car (vector-ref #{x 15304}# 2))
                (car (vector-ref #{y 15305}# 2)))
              #f)
            (eq? #{x 15304}# #{y 15305}#)))))
    (set! syntax-violation
      (lambda*
        (#{who 15438}#
          #{message 15439}#
          #{form 15440}#
          #:optional
          (#{subform 15441}# #f))
        (begin
          (if (not (if (not #{who 15438}#)
                     (not #{who 15438}#)
                     (let ((#{t 15459}# (string? #{who 15438}#)))
                       (if #{t 15459}#
                         #{t 15459}#
                         (symbol? #{who 15438}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 15438}#))
          (if (not (string? #{message 15439}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 15439}#))
          (throw 'syntax-error
                 #{who 15438}#
                 #{message 15439}#
                 (#{source-annotation 4306}#
                   (if #{form 15440}#
                     #{form 15440}#
                     #{subform 15441}#))
                 (#{strip 4358}# #{form 15440}# '(()))
                 (if #{subform 15441}#
                   (#{strip 4358}# #{subform 15441}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 15682}#
         (lambda (#{e 16305}#
                  #{p 16306}#
                  #{w 16307}#
                  #{mod 16308}#)
           (if (pair? #{e 16305}#)
             (let ((#{first 16309}#
                     (#{match 15688}#
                       (car #{e 16305}#)
                       #{p 16306}#
                       #{w 16307}#
                       '()
                       #{mod 16308}#)))
               (if #{first 16309}#
                 (let ((#{rest 16312}#
                         (#{match-each 15682}#
                           (cdr #{e 16305}#)
                           #{p 16306}#
                           #{w 16307}#
                           #{mod 16308}#)))
                   (if #{rest 16312}#
                     (cons #{first 16309}# #{rest 16312}#)
                     #f))
                 #f))
             (if (null? #{e 16305}#)
               '()
               (if (if (vector? #{e 16305}#)
                     (if (= (vector-length #{e 16305}#) 4)
                       (eq? (vector-ref #{e 16305}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 15682}#
                   (vector-ref #{e 16305}# 1)
                   #{p 16306}#
                   (#{join-wraps 4329}#
                     #{w 16307}#
                     (vector-ref #{e 16305}# 2))
                   (vector-ref #{e 16305}# 3))
                 #f)))))
       (#{match-each-any 15684}#
         (lambda (#{e 16340}# #{w 16341}# #{mod 16342}#)
           (if (pair? #{e 16340}#)
             (let ((#{l 16343}#
                     (#{match-each-any 15684}#
                       (cdr #{e 16340}#)
                       #{w 16341}#
                       #{mod 16342}#)))
               (if #{l 16343}#
                 (cons (#{wrap 4338}#
                         (car #{e 16340}#)
                         #{w 16341}#
                         #{mod 16342}#)
                       #{l 16343}#)
                 #f))
             (if (null? #{e 16340}#)
               '()
               (if (if (vector? #{e 16340}#)
                     (if (= (vector-length #{e 16340}#) 4)
                       (eq? (vector-ref #{e 16340}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 15684}#
                   (vector-ref #{e 16340}# 1)
                   (#{join-wraps 4329}#
                     #{w 16341}#
                     (vector-ref #{e 16340}# 2))
                   #{mod 16342}#)
                 #f)))))
       (#{match-empty 15685}#
         (lambda (#{p 16367}# #{r 16368}#)
           (if (null? #{p 16367}#)
             #{r 16368}#
             (if (eq? #{p 16367}# '_)
               #{r 16368}#
               (if (eq? #{p 16367}# 'any)
                 (cons '() #{r 16368}#)
                 (if (pair? #{p 16367}#)
                   (#{match-empty 15685}#
                     (car #{p 16367}#)
                     (#{match-empty 15685}#
                       (cdr #{p 16367}#)
                       #{r 16368}#))
                   (if (eq? #{p 16367}# 'each-any)
                     (cons '() #{r 16368}#)
                     (let ((#{atom-key 16369}# (vector-ref #{p 16367}# 0)))
                       (if (eqv? #{atom-key 16369}# 'each)
                         (#{match-empty 15685}#
                           (vector-ref #{p 16367}# 1)
                           #{r 16368}#)
                         (if (eqv? #{atom-key 16369}# 'each+)
                           (#{match-empty 15685}#
                             (vector-ref #{p 16367}# 1)
                             (#{match-empty 15685}#
                               (reverse (vector-ref #{p 16367}# 2))
                               (#{match-empty 15685}#
                                 (vector-ref #{p 16367}# 3)
                                 #{r 16368}#)))
                           (if (if (eqv? #{atom-key 16369}# 'free-id)
                                 #t
                                 (eqv? #{atom-key 16369}# 'atom))
                             #{r 16368}#
                             (if (eqv? #{atom-key 16369}# 'vector)
                               (#{match-empty 15685}#
                                 (vector-ref #{p 16367}# 1)
                                 #{r 16368}#)))))))))))))
       (#{combine 15686}#
         (lambda (#{r* 16388}# #{r 16389}#)
           (if (null? (car #{r* 16388}#))
             #{r 16389}#
             (cons (map car #{r* 16388}#)
                   (#{combine 15686}#
                     (map cdr #{r* 16388}#)
                     #{r 16389}#)))))
       (#{match* 15687}#
         (lambda (#{e 15717}#
                  #{p 15718}#
                  #{w 15719}#
                  #{r 15720}#
                  #{mod 15721}#)
           (if (null? #{p 15718}#)
             (if (null? #{e 15717}#) #{r 15720}# #f)
             (if (pair? #{p 15718}#)
               (if (pair? #{e 15717}#)
                 (#{match 15688}#
                   (car #{e 15717}#)
                   (car #{p 15718}#)
                   #{w 15719}#
                   (#{match 15688}#
                     (cdr #{e 15717}#)
                     (cdr #{p 15718}#)
                     #{w 15719}#
                     #{r 15720}#
                     #{mod 15721}#)
                   #{mod 15721}#)
                 #f)
               (if (eq? #{p 15718}# 'each-any)
                 (let ((#{l 15726}#
                         (#{match-each-any 15684}#
                           #{e 15717}#
                           #{w 15719}#
                           #{mod 15721}#)))
                   (if #{l 15726}#
                     (cons #{l 15726}# #{r 15720}#)
                     #f))
                 (let ((#{atom-key 15731}# (vector-ref #{p 15718}# 0)))
                   (if (eqv? #{atom-key 15731}# 'each)
                     (if (null? #{e 15717}#)
                       (#{match-empty 15685}#
                         (vector-ref #{p 15718}# 1)
                         #{r 15720}#)
                       (let ((#{l 15738}#
                               (#{match-each 15682}#
                                 #{e 15717}#
                                 (vector-ref #{p 15718}# 1)
                                 #{w 15719}#
                                 #{mod 15721}#)))
                         (if #{l 15738}#
                           (letrec*
                             ((#{collect 15741}#
                                (lambda (#{l 15794}#)
                                  (if (null? (car #{l 15794}#))
                                    #{r 15720}#
                                    (cons (map car #{l 15794}#)
                                          (#{collect 15741}#
                                            (map cdr #{l 15794}#)))))))
                             (#{collect 15741}# #{l 15738}#))
                           #f)))
                     (if (eqv? #{atom-key 15731}# 'each+)
                       (call-with-values
                         (lambda ()
                           (let ((#{x-pat 15803}# (vector-ref #{p 15718}# 1))
                                 (#{y-pat 15804}# (vector-ref #{p 15718}# 2))
                                 (#{z-pat 15805}# (vector-ref #{p 15718}# 3)))
                             (letrec*
                               ((#{f 15809}#
                                  (lambda (#{e 15811}# #{w 15812}#)
                                    (if (pair? #{e 15811}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{f 15809}#
                                            (cdr #{e 15811}#)
                                            #{w 15812}#))
                                        (lambda (#{xr* 15813}#
                                                 #{y-pat 15814}#
                                                 #{r 15815}#)
                                          (if #{r 15815}#
                                            (if (null? #{y-pat 15814}#)
                                              (let ((#{xr 15816}#
                                                      (#{match 15688}#
                                                        (car #{e 15811}#)
                                                        #{x-pat 15803}#
                                                        #{w 15812}#
                                                        '()
                                                        #{mod 15721}#)))
                                                (if #{xr 15816}#
                                                  (values
                                                    (cons #{xr 15816}#
                                                          #{xr* 15813}#)
                                                    #{y-pat 15814}#
                                                    #{r 15815}#)
                                                  (values #f #f #f)))
                                              (values
                                                '()
                                                (cdr #{y-pat 15814}#)
                                                (#{match 15688}#
                                                  (car #{e 15811}#)
                                                  (car #{y-pat 15814}#)
                                                  #{w 15812}#
                                                  #{r 15815}#
                                                  #{mod 15721}#)))
                                            (values #f #f #f))))
                                      (if (if (vector? #{e 15811}#)
                                            (if (= (vector-length #{e 15811}#)
                                                   4)
                                              (eq? (vector-ref #{e 15811}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (#{f 15809}#
                                          (vector-ref #{e 15811}# 1)
                                          (#{join-wraps 4329}#
                                            #{w 15812}#
                                            #{e 15811}#))
                                        (values
                                          '()
                                          #{y-pat 15804}#
                                          (#{match 15688}#
                                            #{e 15811}#
                                            #{z-pat 15805}#
                                            #{w 15812}#
                                            #{r 15720}#
                                            #{mod 15721}#)))))))
                               (#{f 15809}# #{e 15717}# #{w 15719}#))))
                         (lambda (#{xr* 15844}# #{y-pat 15845}# #{r 15846}#)
                           (if #{r 15846}#
                             (if (null? #{y-pat 15845}#)
                               (if (null? #{xr* 15844}#)
                                 (#{match-empty 15685}#
                                   (vector-ref #{p 15718}# 1)
                                   #{r 15846}#)
                                 (#{combine 15686}# #{xr* 15844}# #{r 15846}#))
                               #f)
                             #f)))
                       (if (eqv? #{atom-key 15731}# 'free-id)
                         (if (if (symbol? #{e 15717}#)
                               #t
                               (if (if (vector? #{e 15717}#)
                                     (if (= (vector-length #{e 15717}#) 4)
                                       (eq? (vector-ref #{e 15717}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 15717}# 1))
                                 #f))
                           (if (let ((#{i 16209}#
                                       (#{wrap 4338}#
                                         #{e 15717}#
                                         #{w 15719}#
                                         #{mod 15721}#))
                                     (#{j 16210}# (vector-ref #{p 15718}# 1)))
                                 (if (eq? (if (if (vector? #{i 16209}#)
                                                (if (= (vector-length
                                                         #{i 16209}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{i 16209}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{i 16209}# 1)
                                            #{i 16209}#)
                                          (if (if (vector? #{j 16210}#)
                                                (if (= (vector-length
                                                         #{j 16210}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{j 16210}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{j 16210}# 1)
                                            #{j 16210}#))
                                   (eq? (#{id-var-name 4332}#
                                          #{i 16209}#
                                          '(()))
                                        (#{id-var-name 4332}#
                                          #{j 16210}#
                                          '(())))
                                   #f))
                             #{r 15720}#
                             #f)
                           #f)
                         (if (eqv? #{atom-key 15731}# 'atom)
                           (if (equal?
                                 (vector-ref #{p 15718}# 1)
                                 (#{strip 4358}# #{e 15717}# #{w 15719}#))
                             #{r 15720}#
                             #f)
                           (if (eqv? #{atom-key 15731}# 'vector)
                             (if (vector? #{e 15717}#)
                               (#{match 15688}#
                                 (vector->list #{e 15717}#)
                                 (vector-ref #{p 15718}# 1)
                                 #{w 15719}#
                                 #{r 15720}#
                                 #{mod 15721}#)
                               #f))))))))))))
       (#{match 15688}#
         (lambda (#{e 16270}#
                  #{p 16271}#
                  #{w 16272}#
                  #{r 16273}#
                  #{mod 16274}#)
           (if (not #{r 16273}#)
             #f
             (if (eq? #{p 16271}# '_)
               #{r 16273}#
               (if (eq? #{p 16271}# 'any)
                 (cons (#{wrap 4338}#
                         #{e 16270}#
                         #{w 16272}#
                         #{mod 16274}#)
                       #{r 16273}#)
                 (if (if (vector? #{e 16270}#)
                       (if (= (vector-length #{e 16270}#) 4)
                         (eq? (vector-ref #{e 16270}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 15687}#
                     (vector-ref #{e 16270}# 1)
                     #{p 16271}#
                     (#{join-wraps 4329}#
                       #{w 16272}#
                       (vector-ref #{e 16270}# 2))
                     #{r 16273}#
                     (vector-ref #{e 16270}# 3))
                   (#{match* 15687}#
                     #{e 16270}#
                     #{p 16271}#
                     #{w 16272}#
                     #{r 16273}#
                     #{mod 16274}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 15689}# #{p 15690}#)
          (if (eq? #{p 15690}# 'any)
            (list #{e 15689}#)
            (if (eq? #{p 15690}# '_)
              '()
              (if (if (vector? #{e 15689}#)
                    (if (= (vector-length #{e 15689}#) 4)
                      (eq? (vector-ref #{e 15689}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 15687}#
                  (vector-ref #{e 15689}# 1)
                  #{p 15690}#
                  (vector-ref #{e 15689}# 2)
                  '()
                  (vector-ref #{e 15689}# 3))
                (#{match* 15687}#
                  #{e 15689}#
                  #{p 15690}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 28533}#)
      (let ((#{tmp 28535}#
              ($sc-dispatch #{x 28533}# '(_ () any . each-any))))
        (if #{tmp 28535}#
          (@apply
            (lambda (#{e1 28539}# #{e2 28540}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i28506" "i28507"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28503")))
                       (hygiene guile))
                    (cons '() (cons #{e1 28539}# #{e2 28540}#))))
            #{tmp 28535}#)
          (let ((#{tmp 28541}#
                  ($sc-dispatch
                    #{x 28533}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 28541}#
              (@apply
                (lambda (#{out 28545}#
                         #{in 28546}#
                         #{e1 28547}#
                         #{e2 28548}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i28512" "i28513" "i28514" "i28515"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28503")))
                           (hygiene guile))
                        #{in 28546}#
                        '()
                        (list #{out 28545}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i28512"
                                            "i28513"
                                            "i28514"
                                            "i28515"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i28503")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 28547}# #{e2 28548}#))))))
                #{tmp 28541}#)
              (let ((#{tmp 28549}#
                      ($sc-dispatch
                        #{x 28533}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 28549}#
                  (@apply
                    (lambda (#{out 28553}#
                             #{in 28554}#
                             #{e1 28555}#
                             #{e2 28556}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i28522" "i28523" "i28524" "i28525"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i28503")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i28522" "i28523" "i28524" "i28525"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i28503")))
                                     (hygiene guile))
                                  #{in 28554}#)
                            '()
                            (list #{out 28553}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i28522"
                                                "i28523"
                                                "i28524"
                                                "i28525"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i28503")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 28555}#
                                                    #{e2 28556}#))))))
                    #{tmp 28549}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 28533}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 28610}#)
      (let ((#{tmp 28612}#
              ($sc-dispatch
                #{x 28610}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 28612}#
          (@apply
            (lambda (#{k 28616}#
                     #{keyword 28617}#
                     #{pattern 28618}#
                     #{template 28619}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i28573" "i28574" "i28575" "i28576"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28570")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i28573" "i28574" "i28575" "i28576"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i28570")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i28573" "i28574" "i28575" "i28576"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i28570")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i28573" "i28574" "i28575" "i28576"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i28570")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i28573" "i28574" "i28575" "i28576"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i28570")))
                               (hygiene guile))
                            #{pattern 28618}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i28573" "i28574" "i28575" "i28576"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i28570")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i28573" "i28574" "i28575" "i28576"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i28570")))
                                   (hygiene guile))
                                (cons #{k 28616}#
                                      (map (lambda (#{tmp 28584 28620}#
                                                    #{tmp 28583 28621}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i28573"
                                                                 "i28574"
                                                                 "i28575"
                                                                 "i28576"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i28570")))
                                                            (hygiene guile))
                                                         #{tmp 28583 28621}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i28573"
                                                                 "i28574"
                                                                 "i28575"
                                                                 "i28576"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i28570")))
                                                            (hygiene guile))
                                                         #{tmp 28584 28620}#)))
                                           #{template 28619}#
                                           #{pattern 28618}#))))))
            #{tmp 28612}#)
          (let ((#{tmp 28622}#
                  ($sc-dispatch
                    #{x 28610}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 28622}#
                  (@apply
                    (lambda (#{k 28626}#
                             #{docstring 28627}#
                             #{keyword 28628}#
                             #{pattern 28629}#
                             #{template 28630}#)
                      (string? (syntax->datum #{docstring 28627}#)))
                    #{tmp 28622}#)
                  #f)
              (@apply
                (lambda (#{k 28631}#
                         #{docstring 28632}#
                         #{keyword 28633}#
                         #{pattern 28634}#
                         #{template 28635}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i28596" "i28597" "i28598" "i28599" "i28600"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28570")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i28596" "i28597" "i28598" "i28599" "i28600"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i28570")))
                            (hygiene guile)))
                        #{docstring 28632}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i28596"
                                   "i28597"
                                   "i28598"
                                   "i28599"
                                   "i28600"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i28570")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i28596"
                                   "i28597"
                                   "i28598"
                                   "i28599"
                                   "i28600"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i28570")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i28596"
                                        "i28597"
                                        "i28598"
                                        "i28599"
                                        "i28600"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i28570")))
                                   (hygiene guile))
                                #{pattern 28634}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i28596"
                                      "i28597"
                                      "i28598"
                                      "i28599"
                                      "i28600"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i28570")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i28596"
                                            "i28597"
                                            "i28598"
                                            "i28599"
                                            "i28600"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i28570")))
                                       (hygiene guile))
                                    (cons #{k 28631}#
                                          (map (lambda (#{tmp 28609 28636}#
                                                        #{tmp 28608 28637}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28596"
                                                                     "i28597"
                                                                     "i28598"
                                                                     "i28599"
                                                                     "i28600"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i28570")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 28608 28637}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28596"
                                                                     "i28597"
                                                                     "i28598"
                                                                     "i28599"
                                                                     "i28600"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i28570")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 28609 28636}#)))
                                               #{template 28635}#
                                               #{pattern 28634}#))))))
                #{tmp 28622}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 28610}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 28674}#)
      (let ((#{tmp 28676}#
              ($sc-dispatch #{x 28674}# '(_ (any . any) any))))
        (if #{tmp 28676}#
          (@apply
            (lambda (#{name 28680}#
                     #{pattern 28681}#
                     #{template 28682}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i28651" "i28652" "i28653"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28648")))
                       (hygiene guile))
                    #{name 28680}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i28651" "i28652" "i28653"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i28648")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i28651" "i28652" "i28653"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i28648")))
                                         (hygiene guile))
                                      #{pattern 28681}#)
                                #{template 28682}#))))
            #{tmp 28676}#)
          (let ((#{tmp 28683}#
                  ($sc-dispatch
                    #{x 28674}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 28683}#
                  (@apply
                    (lambda (#{name 28687}#
                             #{pattern 28688}#
                             #{docstring 28689}#
                             #{template 28690}#)
                      (string? (syntax->datum #{docstring 28689}#)))
                    #{tmp 28683}#)
                  #f)
              (@apply
                (lambda (#{name 28691}#
                         #{pattern 28692}#
                         #{docstring 28693}#
                         #{template 28694}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i28666" "i28667" "i28668" "i28669"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28648")))
                           (hygiene guile))
                        #{name 28691}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i28666" "i28667" "i28668" "i28669"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i28648")))
                                 (hygiene guile))
                              '()
                              #{docstring 28693}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i28666"
                                                  "i28667"
                                                  "i28668"
                                                  "i28669"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i28648")))
                                             (hygiene guile))
                                          #{pattern 28692}#)
                                    #{template 28694}#))))
                #{tmp 28683}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 28674}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 28743}#)
      (let ((#{tmp 28745}#
              ($sc-dispatch
                #{x 28743}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 28745}#
              (@apply
                (lambda (#{let* 28749}#
                         #{x 28750}#
                         #{v 28751}#
                         #{e1 28752}#
                         #{e2 28753}#)
                  (and-map identifier? #{x 28750}#))
                #{tmp 28745}#)
              #f)
          (@apply
            (lambda (#{let* 28754}#
                     #{x 28755}#
                     #{v 28756}#
                     #{e1 28757}#
                     #{e2 28758}#)
              (letrec*
                ((#{f 28759}#
                   (lambda (#{bindings 28762}#)
                     (if (null? #{bindings 28762}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i28729" "i28730"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i28719"
                                     "i28720"
                                     "i28721"
                                     "i28722"
                                     "i28723"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i28705")))
                                (hygiene guile))
                             (cons '() (cons #{e1 28757}# #{e2 28758}#)))
                       (let ((#{tmp 28763}#
                               (list (#{f 28759}# (cdr #{bindings 28762}#))
                                     (car #{bindings 28762}#))))
                         (let ((#{tmp 28764}#
                                 ($sc-dispatch #{tmp 28763}# '(any any))))
                           (if #{tmp 28764}#
                             (@apply
                               (lambda (#{body 28766}# #{binding 28767}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i28739" "i28740"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i28729" "i28730"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i28719"
                                               "i28720"
                                               "i28721"
                                               "i28722"
                                               "i28723"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("i28705")))
                                          (hygiene guile))
                                       (list #{binding 28767}#)
                                       #{body 28766}#))
                               #{tmp 28764}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 28763}#))))))))
                (#{f 28759}# (map list #{x 28755}# #{v 28756}#))))
            #{tmp 28745}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 28743}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 28825}#)
      (let ((#{tmp 28827}#
              ($sc-dispatch
                #{orig-x 28825}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 28827}#
          (@apply
            (lambda (#{var 28831}#
                     #{init 28832}#
                     #{step 28833}#
                     #{e0 28834}#
                     #{e1 28835}#
                     #{c 28836}#)
              (let ((#{tmp 28837}#
                      (map (lambda (#{v 28840}# #{s 28841}#)
                             (let ((#{tmp 28843}#
                                     ($sc-dispatch #{s 28841}# '())))
                               (if #{tmp 28843}#
                                 (@apply (lambda () #{v 28840}#) #{tmp 28843}#)
                                 (let ((#{tmp 28846}#
                                         ($sc-dispatch #{s 28841}# '(any))))
                                   (if #{tmp 28846}#
                                     (@apply
                                       (lambda (#{e 28849}#) #{e 28849}#)
                                       #{tmp 28846}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 28825}#
                                       #{s 28841}#))))))
                           #{var 28831}#
                           #{step 28833}#)))
                (let ((#{tmp 28838}#
                        ($sc-dispatch #{tmp 28837}# 'each-any)))
                  (if #{tmp 28838}#
                    (@apply
                      (lambda (#{step 28855}#)
                        (let ((#{tmp 28857}# ($sc-dispatch #{e1 28835}# '())))
                          (if #{tmp 28857}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i28793"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i28778"
                                              "i28779"
                                              "i28780"
                                              "i28781"
                                              "i28782"
                                              "i28783"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i28775")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i28793"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i28778"
                                              "i28779"
                                              "i28780"
                                              "i28781"
                                              "i28782"
                                              "i28783"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i28775")))
                                         (hygiene guile))
                                      (map list #{var 28831}# #{init 28832}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i28793"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i28778"
                                                    "i28779"
                                                    "i28780"
                                                    "i28781"
                                                    "i28782"
                                                    "i28783"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i28775")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i28793"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i28778"
                                                          "i28779"
                                                          "i28780"
                                                          "i28781"
                                                          "i28782"
                                                          "i28783"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i28775")))
                                                     (hygiene guile))
                                                  #{e0 28834}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i28793"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i28778"
                                                          "i28779"
                                                          "i28780"
                                                          "i28781"
                                                          "i28782"
                                                          "i28783"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i28775")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 28836}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i28793"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i28778"
                                                                        "i28779"
                                                                        "i28780"
                                                                        "i28781"
                                                                        "i28782"
                                                                        "i28783"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i28775")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 28855}#)))))))
                              #{tmp 28857}#)
                            (let ((#{tmp 28861}#
                                    ($sc-dispatch
                                      #{e1 28835}#
                                      '(any . each-any))))
                              (if #{tmp 28861}#
                                (@apply
                                  (lambda (#{e1 28865}# #{e2 28866}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i28802" "i28803"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i28793"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i28778"
                                                  "i28779"
                                                  "i28780"
                                                  "i28781"
                                                  "i28782"
                                                  "i28783"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i28775")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i28802" "i28803"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i28793"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i28778"
                                                  "i28779"
                                                  "i28780"
                                                  "i28781"
                                                  "i28782"
                                                  "i28783"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i28775")))
                                             (hygiene guile))
                                          (map list
                                               #{var 28831}#
                                               #{init 28832}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i28802" "i28803"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i28793"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i28778"
                                                        "i28779"
                                                        "i28780"
                                                        "i28781"
                                                        "i28782"
                                                        "i28783"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i28775")))
                                                   (hygiene guile))
                                                #{e0 28834}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i28802"
                                                              "i28803"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i28793"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i28778"
                                                              "i28779"
                                                              "i28780"
                                                              "i28781"
                                                              "i28782"
                                                              "i28783"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i28775")))
                                                         (hygiene guile))
                                                      (cons #{e1 28865}#
                                                            #{e2 28866}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i28802"
                                                              "i28803"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i28793"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i28778"
                                                              "i28779"
                                                              "i28780"
                                                              "i28781"
                                                              "i28782"
                                                              "i28783"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i28775")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 28836}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i28802"
                                                                            "i28803"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i28793"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i28778"
                                                                            "i28779"
                                                                            "i28780"
                                                                            "i28781"
                                                                            "i28782"
                                                                            "i28783"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i28775")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 28855}#)))))))
                                  #{tmp 28861}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 28835}#))))))
                      #{tmp 28838}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 28837}#)))))
            #{tmp 28827}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 28825}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 29152}#
         (lambda (#{p 29176}# #{lev 29177}#)
           (let ((#{tmp 29179}#
                   ($sc-dispatch
                     #{p 29176}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i28898" "i28899"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i28894"
                               "i28892"
                               "i28890"
                               "i28888"
                               "i28886"
                               "i28884"
                               "i28882")))
                           (hygiene guile)))
                       any))))
             (if #{tmp 29179}#
               (@apply
                 (lambda (#{p 29183}#)
                   (if (= #{lev 29177}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i28902"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i28898" "i28899"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i28894"
                                  "i28892"
                                  "i28890"
                                  "i28888"
                                  "i28886"
                                  "i28884"
                                  "i28882")))
                              (hygiene guile))
                           #{p 29183}#)
                     (#{quasicons 29154}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i28902"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i28898" "i28899"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i28894"
                               "i28892"
                               "i28890"
                               "i28888"
                               "i28886"
                               "i28884"
                               "i28882")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i28902"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i28898" "i28899"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i28894"
                               "i28892"
                               "i28890"
                               "i28888"
                               "i28886"
                               "i28884"
                               "i28882")))
                           (hygiene guile)))
                       (#{quasi 29152}#
                         (list #{p 29183}#)
                         (#{1-}# #{lev 29177}#)))))
                 #{tmp 29179}#)
               (let ((#{tmp 29186}#
                       ($sc-dispatch
                         #{p 29176}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i28898" "i28899"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i28894"
                                   "i28892"
                                   "i28890"
                                   "i28888"
                                   "i28886"
                                   "i28884"
                                   "i28882")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 29186}#
                   (@apply
                     (lambda (#{p 29190}#)
                       (#{quasicons 29154}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i28905"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i28898" "i28899"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i28894"
                                 "i28892"
                                 "i28890"
                                 "i28888"
                                 "i28886"
                                 "i28884"
                                 "i28882")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i28905"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i28898" "i28899"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i28894"
                                 "i28892"
                                 "i28890"
                                 "i28888"
                                 "i28886"
                                 "i28884"
                                 "i28882")))
                             (hygiene guile)))
                         (#{quasi 29152}#
                           (list #{p 29190}#)
                           (#{1+}# #{lev 29177}#))))
                     #{tmp 29186}#)
                   (let ((#{tmp 29193}#
                           ($sc-dispatch #{p 29176}# '(any . any))))
                     (if #{tmp 29193}#
                       (@apply
                         (lambda (#{p 29197}# #{q 29198}#)
                           (let ((#{tmp 29200}#
                                   ($sc-dispatch
                                     #{p 29197}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i28908" "i28909"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i28898" "i28899"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i28894"
                                               "i28892"
                                               "i28890"
                                               "i28888"
                                               "i28886"
                                               "i28884"
                                               "i28882")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 29200}#
                               (@apply
                                 (lambda (#{p 29204}#)
                                   (if (= #{lev 29177}# 0)
                                     (#{quasilist* 29156}#
                                       (map (lambda (#{tmp 28916 29240}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i28914"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i28908" "i28909"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i28898" "i28899"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i28894"
                                                           "i28892"
                                                           "i28890"
                                                           "i28888"
                                                           "i28886"
                                                           "i28884"
                                                           "i28882")))
                                                       (hygiene guile))
                                                    #{tmp 28916 29240}#))
                                            #{p 29204}#)
                                       (#{quasi 29152}#
                                         #{q 29198}#
                                         #{lev 29177}#))
                                     (#{quasicons 29154}#
                                       (#{quasicons 29154}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i28914"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i28908" "i28909"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i28898" "i28899"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i28894"
                                                 "i28892"
                                                 "i28890"
                                                 "i28888"
                                                 "i28886"
                                                 "i28884"
                                                 "i28882")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i28914"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i28908" "i28909"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i28898" "i28899"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i28894"
                                                 "i28892"
                                                 "i28890"
                                                 "i28888"
                                                 "i28886"
                                                 "i28884"
                                                 "i28882")))
                                             (hygiene guile)))
                                         (#{quasi 29152}#
                                           #{p 29204}#
                                           (#{1-}# #{lev 29177}#)))
                                       (#{quasi 29152}#
                                         #{q 29198}#
                                         #{lev 29177}#))))
                                 #{tmp 29200}#)
                               (let ((#{tmp 29245}#
                                       ($sc-dispatch
                                         #{p 29197}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i28908" "i28909"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i28898" "i28899"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i28894"
                                                   "i28892"
                                                   "i28890"
                                                   "i28888"
                                                   "i28886"
                                                   "i28884"
                                                   "i28882")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 29245}#
                                   (@apply
                                     (lambda (#{p 29249}#)
                                       (if (= #{lev 29177}# 0)
                                         (#{quasiappend 29155}#
                                           (map (lambda (#{tmp 28921 29252}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i28919"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i28908"
                                                                "i28909"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i28898"
                                                                "i28899"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i28894"
                                                               "i28892"
                                                               "i28890"
                                                               "i28888"
                                                               "i28886"
                                                               "i28884"
                                                               "i28882")))
                                                           (hygiene guile))
                                                        #{tmp 28921 29252}#))
                                                #{p 29249}#)
                                           (#{quasi 29152}#
                                             #{q 29198}#
                                             #{lev 29177}#))
                                         (#{quasicons 29154}#
                                           (#{quasicons 29154}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i28919"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i28908" "i28909"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i28898" "i28899"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i28894"
                                                     "i28892"
                                                     "i28890"
                                                     "i28888"
                                                     "i28886"
                                                     "i28884"
                                                     "i28882")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i28919"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i28908" "i28909"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i28898" "i28899"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i28894"
                                                     "i28892"
                                                     "i28890"
                                                     "i28888"
                                                     "i28886"
                                                     "i28884"
                                                     "i28882")))
                                                 (hygiene guile)))
                                             (#{quasi 29152}#
                                               #{p 29249}#
                                               (#{1-}# #{lev 29177}#)))
                                           (#{quasi 29152}#
                                             #{q 29198}#
                                             #{lev 29177}#))))
                                     #{tmp 29245}#)
                                   (#{quasicons 29154}#
                                     (#{quasi 29152}#
                                       #{p 29197}#
                                       #{lev 29177}#)
                                     (#{quasi 29152}#
                                       #{q 29198}#
                                       #{lev 29177}#)))))))
                         #{tmp 29193}#)
                       (let ((#{tmp 29266}#
                               ($sc-dispatch #{p 29176}# '#(vector each-any))))
                         (if #{tmp 29266}#
                           (@apply
                             (lambda (#{x 29270}#)
                               (let ((#{x 29273}#
                                       (#{vquasi 29153}#
                                         #{x 29270}#
                                         #{lev 29177}#)))
                                 (let ((#{tmp 29275}#
                                         ($sc-dispatch
                                           #{x 29273}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 29275}#
                                     (@apply
                                       (lambda (#{x 29279}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29026"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29023"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i28894"
                                                      "i28892"
                                                      "i28890"
                                                      "i28888"
                                                      "i28886"
                                                      "i28884"
                                                      "i28882")))
                                                  (hygiene guile))
                                               (list->vector #{x 29279}#)))
                                       #{tmp 29275}#)
                                     (letrec*
                                       ((#{f 29281}#
                                          (lambda (#{y 29293}# #{k 29294}#)
                                            (let ((#{tmp 29296}#
                                                    ($sc-dispatch
                                                      #{y 29293}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 29296}#
                                                (@apply
                                                  (lambda (#{y 29299}#)
                                                    (#{k 29294}#
                                                      (map (lambda (#{tmp 29051 29300}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i29049"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i29031"
                                                                           "i29032"
                                                                           "i29033"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i29029"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i29023"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i28894"
                                                                          "i28892"
                                                                          "i28890"
                                                                          "i28888"
                                                                          "i28886"
                                                                          "i28884"
                                                                          "i28882")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 29051 29300}#))
                                                           #{y 29299}#)))
                                                  #{tmp 29296}#)
                                                (let ((#{tmp 29301}#
                                                        ($sc-dispatch
                                                          #{y 29293}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 29301}#
                                                    (@apply
                                                      (lambda (#{y 29304}#)
                                                        (#{k 29294}#
                                                          #{y 29304}#))
                                                      #{tmp 29301}#)
                                                    (let ((#{tmp 29305}#
                                                            ($sc-dispatch
                                                              #{y 29293}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 29305}#
                                                        (@apply
                                                          (lambda (#{y 29308}#
                                                                   #{z 29309}#)
                                                            (#{f 29281}#
                                                              #{z 29309}#
                                                              (lambda (#{ls 29310}#)
                                                                (#{k 29294}#
                                                                  (append
                                                                    #{y 29308}#
                                                                    #{ls 29310}#)))))
                                                          #{tmp 29305}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g29066}#)
                                                                    #((m29067
                                                                        top))
                                                                    #("i29070"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i29064"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i29031"
                                                                      "i29032"
                                                                      "i29033"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i29029"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i29023"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i28894"
                                                                     "i28892"
                                                                     "i28890"
                                                                     "i28888"
                                                                     "i28886"
                                                                     "i28884"
                                                                     "i28882")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 29273}#))))))))))
                                       (#{f 29281}#
                                         #{x 29273}#
                                         (lambda (#{ls 29283}#)
                                           (let ((#{tmp 29285}#
                                                   ($sc-dispatch
                                                     #{ls 29283}#
                                                     'each-any)))
                                             (if #{tmp 29285}#
                                               (@apply
                                                 (lambda (#{ g29039 29288}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g29039}#)
                                                               #((m29040 top))
                                                               #("i29044"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i29038"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i29029"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i29023"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i28894"
                                                                "i28892"
                                                                "i28890"
                                                                "i28888"
                                                                "i28886"
                                                                "i28884"
                                                                "i28882")))
                                                            (hygiene guile))
                                                         #{ g29039 29288}#))
                                                 #{tmp 29285}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 29283}#))))))))))
                             #{tmp 29266}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i28929"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i28898" "i28899"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i28894"
                                        "i28892"
                                        "i28890"
                                        "i28888"
                                        "i28886"
                                        "i28884"
                                        "i28882")))
                                    (hygiene guile))
                                 #{p 29176}#)))))))))))
       (#{vquasi 29153}#
         (lambda (#{p 29338}# #{lev 29339}#)
           (let ((#{tmp 29341}#
                   ($sc-dispatch #{p 29338}# '(any . any))))
             (if #{tmp 29341}#
               (@apply
                 (lambda (#{p 29345}# #{q 29346}#)
                   (let ((#{tmp 29348}#
                           ($sc-dispatch
                             #{p 29345}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i28937" "i28938"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i28933" "i28934"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i28894"
                                       "i28892"
                                       "i28890"
                                       "i28888"
                                       "i28886"
                                       "i28884"
                                       "i28882")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 29348}#
                       (@apply
                         (lambda (#{p 29352}#)
                           (if (= #{lev 29339}# 0)
                             (#{quasilist* 29156}#
                               (map (lambda (#{tmp 28945 29388}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i28943"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i28937" "i28938"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i28933" "i28934"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i28894"
                                                   "i28892"
                                                   "i28890"
                                                   "i28888"
                                                   "i28886"
                                                   "i28884"
                                                   "i28882")))
                                               (hygiene guile))
                                            #{tmp 28945 29388}#))
                                    #{p 29352}#)
                               (#{vquasi 29153}# #{q 29346}# #{lev 29339}#))
                             (#{quasicons 29154}#
                               (#{quasicons 29154}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i28943"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i28937" "i28938"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i28933" "i28934"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i28894"
                                         "i28892"
                                         "i28890"
                                         "i28888"
                                         "i28886"
                                         "i28884"
                                         "i28882")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i28943"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i28937" "i28938"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i28933" "i28934"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i28894"
                                         "i28892"
                                         "i28890"
                                         "i28888"
                                         "i28886"
                                         "i28884"
                                         "i28882")))
                                     (hygiene guile)))
                                 (#{quasi 29152}#
                                   #{p 29352}#
                                   (#{1-}# #{lev 29339}#)))
                               (#{vquasi 29153}# #{q 29346}# #{lev 29339}#))))
                         #{tmp 29348}#)
                       (let ((#{tmp 29395}#
                               ($sc-dispatch
                                 #{p 29345}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i28937" "i28938"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i28933" "i28934"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i28894"
                                           "i28892"
                                           "i28890"
                                           "i28888"
                                           "i28886"
                                           "i28884"
                                           "i28882")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 29395}#
                           (@apply
                             (lambda (#{p 29399}#)
                               (if (= #{lev 29339}# 0)
                                 (#{quasiappend 29155}#
                                   (map (lambda (#{tmp 28950 29402}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i28948"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i28937" "i28938"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i28933" "i28934"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i28894"
                                                       "i28892"
                                                       "i28890"
                                                       "i28888"
                                                       "i28886"
                                                       "i28884"
                                                       "i28882")))
                                                   (hygiene guile))
                                                #{tmp 28950 29402}#))
                                        #{p 29399}#)
                                   (#{vquasi 29153}#
                                     #{q 29346}#
                                     #{lev 29339}#))
                                 (#{quasicons 29154}#
                                   (#{quasicons 29154}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i28948"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i28937" "i28938"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i28933" "i28934"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i28894"
                                             "i28892"
                                             "i28890"
                                             "i28888"
                                             "i28886"
                                             "i28884"
                                             "i28882")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i28948"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i28937" "i28938"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i28933" "i28934"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i28894"
                                             "i28892"
                                             "i28890"
                                             "i28888"
                                             "i28886"
                                             "i28884"
                                             "i28882")))
                                         (hygiene guile)))
                                     (#{quasi 29152}#
                                       #{p 29399}#
                                       (#{1-}# #{lev 29339}#)))
                                   (#{vquasi 29153}#
                                     #{q 29346}#
                                     #{lev 29339}#))))
                             #{tmp 29395}#)
                           (#{quasicons 29154}#
                             (#{quasi 29152}# #{p 29345}# #{lev 29339}#)
                             (#{vquasi 29153}# #{q 29346}# #{lev 29339}#)))))))
                 #{tmp 29341}#)
               (let ((#{tmp 29420}# ($sc-dispatch #{p 29338}# '())))
                 (if #{tmp 29420}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i28933" "i28934"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i28894"
                               "i28892"
                               "i28890"
                               "i28888"
                               "i28886"
                               "i28884"
                               "i28882")))
                           (hygiene guile))
                         ()))
                     #{tmp 29420}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 29338}#)))))))
       (#{quasicons 29154}#
         (lambda (#{x 29433}# #{y 29434}#)
           (let ((#{tmp 29435}# (list #{x 29433}# #{y 29434}#)))
             (let ((#{tmp 29436}#
                     ($sc-dispatch #{tmp 29435}# '(any any))))
               (if #{tmp 29436}#
                 (@apply
                   (lambda (#{x 29438}# #{y 29439}#)
                     (let ((#{tmp 29441}#
                             ($sc-dispatch
                               #{y 29439}#
                               '(#(atom "quote") any))))
                       (if #{tmp 29441}#
                         (@apply
                           (lambda (#{dy 29445}#)
                             (let ((#{tmp 29447}#
                                     ($sc-dispatch
                                       #{x 29438}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 29447}#
                                 (@apply
                                   (lambda (#{dx 29451}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i28972"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i28968"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i28962" "i28963"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i28957" "i28958"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i28894"
                                                  "i28892"
                                                  "i28890"
                                                  "i28888"
                                                  "i28886"
                                                  "i28884"
                                                  "i28882")))
                                              (hygiene guile))
                                           (cons #{dx 29451}# #{dy 29445}#)))
                                   #{tmp 29447}#)
                                 (if (null? #{dy 29445}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i28974"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i28968"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i28962" "i28963"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i28957" "i28958"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i28894"
                                                "i28892"
                                                "i28890"
                                                "i28888"
                                                "i28886"
                                                "i28884"
                                                "i28882")))
                                            (hygiene guile))
                                         #{x 29438}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i28974"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i28968"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i28962" "i28963"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i28957" "i28958"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i28894"
                                                "i28892"
                                                "i28890"
                                                "i28888"
                                                "i28886"
                                                "i28884"
                                                "i28882")))
                                            (hygiene guile))
                                         #{x 29438}#
                                         #{y 29439}#)))))
                           #{tmp 29441}#)
                         (let ((#{tmp 29456}#
                                 ($sc-dispatch
                                   #{y 29439}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 29456}#
                             (@apply
                               (lambda (#{stuff 29460}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i28977"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i28962" "i28963"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i28957" "i28958"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i28894"
                                              "i28892"
                                              "i28890"
                                              "i28888"
                                              "i28886"
                                              "i28884"
                                              "i28882")))
                                          (hygiene guile))
                                       (cons #{x 29438}# #{stuff 29460}#)))
                               #{tmp 29456}#)
                             (let ((#{tmp 29461}#
                                     ($sc-dispatch
                                       #{y 29439}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 29461}#
                                 (@apply
                                   (lambda (#{stuff 29465}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i28980"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i28962" "i28963"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i28957" "i28958"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i28894"
                                                  "i28892"
                                                  "i28890"
                                                  "i28888"
                                                  "i28886"
                                                  "i28884"
                                                  "i28882")))
                                              (hygiene guile))
                                           (cons #{x 29438}# #{stuff 29465}#)))
                                   #{tmp 29461}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i28982"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i28962" "i28963"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i28957" "i28958"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i28894"
                                              "i28892"
                                              "i28890"
                                              "i28888"
                                              "i28886"
                                              "i28884"
                                              "i28882")))
                                          (hygiene guile))
                                       #{x 29438}#
                                       #{y 29439}#))))))))
                   #{tmp 29436}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 29435}#))))))
       (#{quasiappend 29155}#
         (lambda (#{x 29476}# #{y 29477}#)
           (let ((#{tmp 29479}#
                   ($sc-dispatch #{y 29477}# '(#(atom "quote") ()))))
             (if #{tmp 29479}#
               (@apply
                 (lambda ()
                   (if (null? #{x 29476}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i28986" "i28987"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i28894"
                             "i28892"
                             "i28890"
                             "i28888"
                             "i28886"
                             "i28884"
                             "i28882")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 29476}#))
                       (car #{x 29476}#)
                       (let ((#{tmp 29484}#
                               ($sc-dispatch #{x 29476}# 'each-any)))
                         (if #{tmp 29484}#
                           (@apply
                             (lambda (#{p 29488}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i28998"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i28986" "i28987"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i28894"
                                            "i28892"
                                            "i28890"
                                            "i28888"
                                            "i28886"
                                            "i28884"
                                            "i28882")))
                                        (hygiene guile))
                                     #{p 29488}#))
                             #{tmp 29484}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 29476}#))))))
                 #{tmp 29479}#)
               (if (null? #{x 29476}#)
                 #{y 29477}#
                 (let ((#{tmp 29496}# (list #{x 29476}# #{y 29477}#)))
                   (let ((#{tmp 29497}#
                           ($sc-dispatch #{tmp 29496}# '(each-any any))))
                     (if #{tmp 29497}#
                       (@apply
                         (lambda (#{p 29499}# #{y 29500}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i29009" "i29010"))
                                     #(ribcage #(_) #((top)) #("i29001"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i28986" "i28987"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i28894"
                                        "i28892"
                                        "i28890"
                                        "i28888"
                                        "i28886"
                                        "i28884"
                                        "i28882")))
                                    (hygiene guile))
                                 (append #{p 29499}# (list #{y 29500}#))))
                         #{tmp 29497}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 29496}#)))))))))
       (#{quasilist* 29156}#
         (lambda (#{x 29504}# #{y 29505}#)
           (letrec*
             ((#{f 29506}#
                (lambda (#{x 29595}#)
                  (if (null? #{x 29595}#)
                    #{y 29505}#
                    (#{quasicons 29154}#
                      (car #{x 29595}#)
                      (#{f 29506}# (cdr #{x 29595}#)))))))
             (#{f 29506}# #{x 29504}#))))
       (#{emit 29158}#
         (lambda (#{x 29598}#)
           (let ((#{tmp 29600}#
                   ($sc-dispatch #{x 29598}# '(#(atom "quote") any))))
             (if #{tmp 29600}#
               (@apply
                 (lambda (#{x 29604}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i29076"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i29073"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i28894"
                                "i28892"
                                "i28890"
                                "i28888"
                                "i28886"
                                "i28884"
                                "i28882")))
                            (hygiene guile))
                         #{x 29604}#))
                 #{tmp 29600}#)
               (let ((#{tmp 29605}#
                       ($sc-dispatch
                         #{x 29598}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 29605}#
                   (@apply
                     (lambda (#{x 29609}#)
                       (let ((#{tmp 29610}# (map #{emit 29158}# #{x 29609}#)))
                         (let ((#{tmp 29611}#
                                 ($sc-dispatch #{tmp 29610}# 'each-any)))
                           (if #{tmp 29611}#
                             (@apply
                               (lambda (#{ g29081 29613}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g29081}#)
                                             #((m29082 top))
                                             #("i29086"))
                                           #(ribcage #(x) #((top)) #("i29079"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i29073"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i28894"
                                              "i28892"
                                              "i28890"
                                              "i28888"
                                              "i28886"
                                              "i28884"
                                              "i28882")))
                                          (hygiene guile))
                                       #{ g29081 29613}#))
                               #{tmp 29611}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 29610}#)))))
                     #{tmp 29605}#)
                   (let ((#{tmp 29614}#
                           ($sc-dispatch
                             #{x 29598}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 29614}#
                       (@apply
                         (lambda (#{x 29618}# #{y 29619}#)
                           (letrec*
                             ((#{f 29620}#
                                (lambda (#{x* 29623}#)
                                  (if (null? #{x* 29623}#)
                                    (#{emit 29158}# #{y 29619}#)
                                    (let ((#{tmp 29624}#
                                            (list (#{emit 29158}#
                                                    (car #{x* 29623}#))
                                                  (#{f 29620}#
                                                    (cdr #{x* 29623}#)))))
                                      (let ((#{tmp 29625}#
                                              ($sc-dispatch
                                                #{tmp 29624}#
                                                '(any any))))
                                        (if #{tmp 29625}#
                                          (@apply
                                            (lambda (#{ g29101 29627}#
                                                     #{ g29100 29628}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g29101}#
                                                            #{ g29100}#)
                                                          #((m29102 top)
                                                            (m29102 top))
                                                          #("i29106" "i29107"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i29095" "i29096"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i29091" "i29092"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i29073"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i28894"
                                                           "i28892"
                                                           "i28890"
                                                           "i28888"
                                                           "i28886"
                                                           "i28884"
                                                           "i28882")))
                                                       (hygiene guile))
                                                    #{ g29101 29627}#
                                                    #{ g29100 29628}#))
                                            #{tmp 29625}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 29624}#))))))))
                             (#{f 29620}# #{x 29618}#)))
                         #{tmp 29614}#)
                       (let ((#{tmp 29629}#
                               ($sc-dispatch
                                 #{x 29598}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 29629}#
                           (@apply
                             (lambda (#{x 29633}#)
                               (let ((#{tmp 29634}#
                                       (map #{emit 29158}# #{x 29633}#)))
                                 (let ((#{tmp 29635}#
                                         ($sc-dispatch
                                           #{tmp 29634}#
                                           'each-any)))
                                   (if #{tmp 29635}#
                                     (@apply
                                       (lambda (#{ g29113 29637}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g29113}#)
                                                     #((m29114 top))
                                                     #("i29118"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29111"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29073"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i28894"
                                                      "i28892"
                                                      "i28890"
                                                      "i28888"
                                                      "i28886"
                                                      "i28884"
                                                      "i28882")))
                                                  (hygiene guile))
                                               #{ g29113 29637}#))
                                       #{tmp 29635}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 29634}#)))))
                             #{tmp 29629}#)
                           (let ((#{tmp 29638}#
                                   ($sc-dispatch
                                     #{x 29598}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 29638}#
                               (@apply
                                 (lambda (#{x 29642}#)
                                   (let ((#{tmp 29643}#
                                           (map #{emit 29158}# #{x 29642}#)))
                                     (let ((#{tmp 29644}#
                                             ($sc-dispatch
                                               #{tmp 29643}#
                                               'each-any)))
                                       (if #{tmp 29644}#
                                         (@apply
                                           (lambda (#{ g29125 29646}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g29125}#)
                                                         #((m29126 top))
                                                         #("i29130"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i29123"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i29073"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i28894"
                                                          "i28892"
                                                          "i28890"
                                                          "i28888"
                                                          "i28886"
                                                          "i28884"
                                                          "i28882")))
                                                      (hygiene guile))
                                                   #{ g29125 29646}#))
                                           #{tmp 29644}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 29643}#)))))
                                 #{tmp 29638}#)
                               (let ((#{tmp 29647}#
                                       ($sc-dispatch
                                         #{x 29598}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 29647}#
                                   (@apply
                                     (lambda (#{x 29651}#)
                                       (let ((#{tmp 29652}#
                                               (#{emit 29158}# #{x 29651}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g29137}#)
                                                     #((m29138 top))
                                                     #("i29141"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29135"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29073"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i28894"
                                                      "i28892"
                                                      "i28890"
                                                      "i28888"
                                                      "i28886"
                                                      "i28884"
                                                      "i28882")))
                                                  (hygiene guile))
                                               #{tmp 29652}#)))
                                     #{tmp 29647}#)
                                   (let ((#{tmp 29655}#
                                           ($sc-dispatch
                                             #{x 29598}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 29655}#
                                       (@apply
                                         (lambda (#{x 29659}#) #{x 29659}#)
                                         #{tmp 29655}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 29598}#))))))))))))))))))
      (lambda (#{x 29159}#)
        (let ((#{tmp 29161}#
                ($sc-dispatch #{x 29159}# '(_ any))))
          (if #{tmp 29161}#
            (@apply
              (lambda (#{e 29165}#)
                (#{emit 29158}# (#{quasi 29152}# #{e 29165}# 0)))
              #{tmp 29161}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 29159}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 29714}#)
      (letrec*
        ((#{read-file 29715}#
           (lambda (#{fn 29826}# #{k 29827}#)
             (let ((#{p 29828}# (open-input-file #{fn 29826}#)))
               (letrec*
                 ((#{f 29829}#
                    (lambda (#{x 29883}# #{result 29884}#)
                      (if (eof-object? #{x 29883}#)
                        (begin
                          (close-input-port #{p 29828}#)
                          (reverse #{result 29884}#))
                        (#{f 29829}#
                          (read #{p 29828}#)
                          (cons (datum->syntax #{k 29827}# #{x 29883}#)
                                #{result 29884}#))))))
                 (#{f 29829}# (read #{p 29828}#) '()))))))
        (let ((#{tmp 29717}#
                ($sc-dispatch #{x 29714}# '(any any))))
          (if #{tmp 29717}#
            (@apply
              (lambda (#{k 29721}# #{filename 29722}#)
                (let ((#{fn 29723}# (syntax->datum #{filename 29722}#)))
                  (let ((#{tmp 29724}#
                          (#{read-file 29715}#
                            #{fn 29723}#
                            #{filename 29722}#)))
                    (let ((#{tmp 29725}#
                            ($sc-dispatch #{tmp 29724}# 'each-any)))
                      (if #{tmp 29725}#
                        (@apply
                          (lambda (#{exp 29743}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i29711"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i29706"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i29702" "i29703"))
                                      #(ribcage (read-file) ((top)) ("i29686"))
                                      #(ribcage #(x) #((top)) #("i29685")))
                                     (hygiene guile))
                                  #{exp 29743}#))
                          #{tmp 29725}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 29724}#))))))
              #{tmp 29717}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 29714}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 29903}#)
      (let ((#{tmp 29905}#
              ($sc-dispatch #{x 29903}# '(any any))))
        (if #{tmp 29905}#
          (@apply
            (lambda (#{k 29909}# #{filename 29910}#)
              (let ((#{fn 29911}# (syntax->datum #{filename 29910}#)))
                (let ((#{tmp 29912}#
                        (datum->syntax
                          #{filename 29910}#
                          (let ((#{t 29915}# (%search-load-path #{fn 29911}#)))
                            (if #{t 29915}#
                              #{t 29915}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 29903}#
                                #{filename 29910}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i29897"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i29893"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i29889" "i29890"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29886")))
                           (hygiene guile))
                        #{tmp 29912}#))))
            #{tmp 29905}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 29903}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 29924}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 29924}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 29927}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 29927}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 29983}#)
      (let ((#{tmp 29985}#
              ($sc-dispatch
                #{x 29983}#
                '(_ any any . each-any))))
        (if #{tmp 29985}#
          (@apply
            (lambda (#{e 29989}# #{m1 29990}# #{m2 29991}#)
              (let ((#{tmp 29992}#
                      (letrec*
                        ((#{f 30038}#
                           (lambda (#{clause 30041}# #{clauses 30042}#)
                             (if (null? #{clauses 30042}#)
                               (let ((#{tmp 30044}#
                                       ($sc-dispatch
                                         #{clause 30041}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i29942"
                                                    "i29943"
                                                    "i29944"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i29932"
                                                    "i29933"
                                                    "i29934"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i29929")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 30044}#
                                   (@apply
                                     (lambda (#{e1 30048}# #{e2 30049}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i29951" "i29952"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i29942"
                                                     "i29943"
                                                     "i29944"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i29932"
                                                     "i29933"
                                                     "i29934"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i29929")))
                                                (hygiene guile))
                                             (cons #{e1 30048}# #{e2 30049}#)))
                                     #{tmp 30044}#)
                                   (let ((#{tmp 30050}#
                                           ($sc-dispatch
                                             #{clause 30041}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 30050}#
                                       (@apply
                                         (lambda (#{k 30054}#
                                                  #{e1 30055}#
                                                  #{e2 30056}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i29957"
                                                         "i29958"
                                                         "i29959"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i29942"
                                                         "i29943"
                                                         "i29944"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i29932"
                                                         "i29933"
                                                         "i29934"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i29929")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29957"
                                                               "i29958"
                                                               "i29959"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29942"
                                                               "i29943"
                                                               "i29944"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29932"
                                                               "i29933"
                                                               "i29934"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29929")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29957"
                                                               "i29958"
                                                               "i29959"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29942"
                                                               "i29943"
                                                               "i29944"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29932"
                                                               "i29933"
                                                               "i29934"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29929")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i29957"
                                                                     "i29958"
                                                                     "i29959"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i29942"
                                                                     "i29943"
                                                                     "i29944"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i29932"
                                                                     "i29933"
                                                                     "i29934"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i29929")))
                                                                (hygiene
                                                                  guile))
                                                             #{k 30054}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29957"
                                                               "i29958"
                                                               "i29959"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29942"
                                                               "i29943"
                                                               "i29944"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29932"
                                                               "i29933"
                                                               "i29934"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29929")))
                                                          (hygiene guile))
                                                       (cons #{e1 30055}#
                                                             #{e2 30056}#))))
                                         #{tmp 30050}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 29983}#
                                         #{clause 30041}#)))))
                               (let ((#{tmp 30064}#
                                       (#{f 30038}#
                                         (car #{clauses 30042}#)
                                         (cdr #{clauses 30042}#))))
                                 (let ((#{tmp 30067}#
                                         ($sc-dispatch
                                           #{clause 30041}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 30067}#
                                     (@apply
                                       (lambda (#{k 30071}#
                                                #{e1 30072}#
                                                #{e2 30073}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i29973"
                                                       "i29974"
                                                       "i29975"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i29969"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i29942"
                                                       "i29943"
                                                       "i29944"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i29932"
                                                       "i29933"
                                                       "i29934"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29929")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i29973"
                                                             "i29974"
                                                             "i29975"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i29969"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i29942"
                                                             "i29943"
                                                             "i29944"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i29932"
                                                             "i29933"
                                                             "i29934"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i29929")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i29973"
                                                             "i29974"
                                                             "i29975"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i29969"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i29942"
                                                             "i29943"
                                                             "i29944"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i29932"
                                                             "i29933"
                                                             "i29934"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i29929")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i29973"
                                                                   "i29974"
                                                                   "i29975"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i29969"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i29942"
                                                                   "i29943"
                                                                   "i29944"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i29932"
                                                                   "i29933"
                                                                   "i29934"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i29929")))
                                                              (hygiene guile))
                                                           #{k 30071}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i29973"
                                                             "i29974"
                                                             "i29975"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i29969"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i29942"
                                                             "i29943"
                                                             "i29944"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i29932"
                                                             "i29933"
                                                             "i29934"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i29929")))
                                                        (hygiene guile))
                                                     (cons #{e1 30072}#
                                                           #{e2 30073}#))
                                               #{tmp 30064}#))
                                       #{tmp 30067}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 29983}#
                                       #{clause 30041}#))))))))
                        (#{f 30038}# #{m1 29990}# #{m2 29991}#))))
                (let ((#{body 29993}# #{tmp 29992}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i29940"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i29932" "i29933" "i29934"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29929")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i29940"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i29932" "i29933" "i29934"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i29929")))
                                       (hygiene guile))
                                    #{e 29989}#))
                        #{body 29993}#))))
            #{tmp 29985}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 29983}#))))))

(define make-variable-transformer
  (lambda (#{proc 30091}#)
    (if (procedure? #{proc 30091}#)
      (letrec*
        ((#{trans 30092}#
           (lambda (#{x 30098}#)
             (#{proc 30091}# #{x 30098}#))))
        (begin
          (set-procedure-property!
            #{trans 30092}#
            'variable-transformer
            #t)
          #{trans 30092}#))
      (error "variable transformer not a procedure"
             #{proc 30091}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 30130}#)
      (let ((#{tmp 30132}#
              ($sc-dispatch #{x 30130}# '(_ any))))
        (if #{tmp 30132}#
          (@apply
            (lambda (#{e 30136}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i30105"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i30102")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i30105"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i30102")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i30105"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i30102")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i30105"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i30102")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i30105"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i30102")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i30105"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i30102")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i30105"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i30102")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i30105"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30102")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i30105"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i30102")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i30105"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i30102")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i30105"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i30102")))
                                         (hygiene guile))
                                      #{e 30136}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i30105"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30102")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i30105"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30102")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i30105"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30102")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i30105"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i30102")))
                                         (hygiene guile))
                                      (cons #{e 30136}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i30105"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i30102")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i30105"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i30102")))
                                                (hygiene guile)))))))))
            #{tmp 30132}#)
          (let ((#{tmp 30137}#
                  ($sc-dispatch
                    #{x 30130}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i30102")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 30137}#
                  (@apply
                    (lambda (#{id 30141}#
                             #{exp1 30142}#
                             #{var 30143}#
                             #{val 30144}#
                             #{exp2 30145}#)
                      (if (identifier? #{id 30141}#)
                        (identifier? #{var 30143}#)
                        #f))
                    #{tmp 30137}#)
                  #f)
              (@apply
                (lambda (#{id 30146}#
                         #{exp1 30147}#
                         #{var 30148}#
                         #{val 30149}#
                         #{exp2 30150}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i30120" "i30121" "i30122" "i30123" "i30124"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30102")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i30120"
                                      "i30121"
                                      "i30122"
                                      "i30123"
                                      "i30124"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i30102")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i30120"
                                       "i30121"
                                       "i30122"
                                       "i30123"
                                       "i30124"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i30102")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i30120"
                                         "i30121"
                                         "i30122"
                                         "i30123"
                                         "i30124"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30102")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i30120"
                                         "i30121"
                                         "i30122"
                                         "i30123"
                                         "i30124"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30102")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i30120"
                                            "i30121"
                                            "i30122"
                                            "i30123"
                                            "i30124"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i30102")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i30120"
                                            "i30121"
                                            "i30122"
                                            "i30123"
                                            "i30124"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i30102")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i30120"
                                             "i30121"
                                             "i30122"
                                             "i30123"
                                             "i30124"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i30102")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30120"
                                                        "i30121"
                                                        "i30122"
                                                        "i30123"
                                                        "i30124"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30102")))
                                                   (hygiene guile))
                                                #{var 30148}#
                                                #{val 30149}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30120"
                                                        "i30121"
                                                        "i30122"
                                                        "i30123"
                                                        "i30124"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30102")))
                                                   (hygiene guile))
                                                #{exp2 30150}#))
                                    (list (cons #{id 30146}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i30120"
                                                         "i30121"
                                                         "i30122"
                                                         "i30123"
                                                         "i30124"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i30102")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i30120"
                                                         "i30121"
                                                         "i30122"
                                                         "i30123"
                                                         "i30124"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i30102")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30120"
                                                        "i30121"
                                                        "i30122"
                                                        "i30123"
                                                        "i30124"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30102")))
                                                   (hygiene guile))
                                                (cons #{exp1 30147}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i30120"
                                                               "i30121"
                                                               "i30122"
                                                               "i30123"
                                                               "i30124"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i30102")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i30120"
                                                               "i30121"
                                                               "i30122"
                                                               "i30123"
                                                               "i30124"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i30102")))
                                                          (hygiene guile))))))
                                    (list #{id 30146}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30120"
                                                        "i30121"
                                                        "i30122"
                                                        "i30123"
                                                        "i30124"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30102")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i30120"
                                                              "i30121"
                                                              "i30122"
                                                              "i30123"
                                                              "i30124"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i30102")))
                                                         (hygiene guile))
                                                      #{id 30146}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30120"
                                                        "i30121"
                                                        "i30122"
                                                        "i30123"
                                                        "i30124"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30102")))
                                                   (hygiene guile))
                                                #{exp1 30147}#))))))
                #{tmp 30137}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 30130}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 30182}#)
      (let ((#{tmp 30184}#
              ($sc-dispatch
                #{x 30182}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 30184}#
          (@apply
            (lambda (#{id 30188}#
                     #{args 30189}#
                     #{b0 30190}#
                     #{b1 30191}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i30164" "i30165" "i30166" "i30167"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i30161")))
                       (hygiene guile))
                    #{id 30188}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i30164" "i30165" "i30166" "i30167"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i30161")))
                             (hygiene guile))
                          (cons #{args 30189}#
                                (cons #{b0 30190}# #{b1 30191}#)))))
            #{tmp 30184}#)
          (let ((#{tmp 30192}#
                  ($sc-dispatch #{x 30182}# '(_ any any))))
            (if (if #{tmp 30192}#
                  (@apply
                    (lambda (#{id 30196}# #{val 30197}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i30174" "i30175"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30161")))
                           (hygiene guile))))
                    #{tmp 30192}#)
                  #f)
              (@apply
                (lambda (#{id 30198}# #{val 30199}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i30178" "i30179"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30161")))
                           (hygiene guile))
                        #{id 30198}#
                        #{val 30199}#))
                #{tmp 30192}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 30182}#))))))))

