(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(let ((session-id-6510 (if #f #f))
      (transformer-environment-6571 (if #f #f)))
  (letrec*
    ((top-level-eval-hook-6508
       (lambda (x-29318 mod-29319)
         (primitive-eval x-29318)))
     (get-global-definition-hook-6512
       (lambda (symbol-17709 module-17710)
         (begin
           (if (if (not module-17710) (current-module) #f)
             (warn "module system is booted, we should have a module"
                   symbol-17709))
           (let ((v-17711
                   (module-variable
                     (if module-17710
                       (resolve-module (cdr module-17710))
                       (current-module))
                     symbol-17709)))
             (if v-17711
               (if (variable-bound? v-17711)
                 (let ((val-17713 (variable-ref v-17711)))
                   (if (macro? val-17713)
                     (if (macro-type val-17713)
                       (cons (macro-type val-17713)
                             (macro-binding val-17713))
                       #f)
                     #f))
                 #f)
               #f)))))
     (maybe-name-value!-6514
       (lambda (name-17990 val-17991)
         (if (if (struct? val-17991)
               (eq? (struct-vtable val-17991)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((meta-17998 (struct-ref val-17991 1)))
             (if (not (assq 'name meta-17998))
               (let ((v-18003
                       (cons (cons 'name name-17990) meta-17998)))
                 (struct-set! val-17991 1 v-18003)))))))
     (build-application-6516
       (lambda (source-17715 fun-exp-17716 arg-exps-17717)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 11)
           source-17715
           fun-exp-17716
           arg-exps-17717)))
     (build-conditional-6517
       (lambda (source-17723
                test-exp-17724
                then-exp-17725
                else-exp-17726)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 10)
           source-17723
           test-exp-17724
           then-exp-17725
           else-exp-17726)))
     (build-dynlet-6518
       (lambda (source-17733 fluids-17734 vals-17735 body-17736)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 17)
           source-17733
           fluids-17734
           vals-17735
           body-17736)))
     (build-lexical-reference-6519
       (lambda (type-29320 source-29321 name-29322 var-29323)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           source-29321
           name-29322
           var-29323)))
     (build-lexical-assignment-6520
       (lambda (source-17743 name-17744 var-17745 exp-17746)
         (begin
           (if (if (struct? exp-17746)
                 (eq? (struct-vtable exp-17746)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((meta-17762 (struct-ref exp-17746 1)))
               (if (not (assq 'name meta-17762))
                 (let ((v-17769
                         (cons (cons 'name name-17744) meta-17762)))
                   (struct-set! exp-17746 1 v-17769)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 4)
             source-17743
             name-17744
             var-17745
             exp-17746))))
     (analyze-variable-6521
       (lambda (mod-29329
                var-29330
                modref-cont-29331
                bare-cont-29332)
         (if (not mod-29329)
           (bare-cont-29332 var-29330)
           (let ((kind-29333 (car mod-29329))
                 (mod-29334 (cdr mod-29329)))
             (if (eqv? kind-29333 'public)
               (modref-cont-29331 mod-29334 var-29330 #t)
               (if (eqv? kind-29333 'private)
                 (if (not (equal? mod-29334 (module-name (current-module))))
                   (modref-cont-29331 mod-29334 var-29330 #f)
                   (bare-cont-29332 var-29330))
                 (if (eqv? kind-29333 'bare)
                   (bare-cont-29332 var-29330)
                   (if (eqv? kind-29333 'hygiene)
                     (if (if (not (equal?
                                    mod-29334
                                    (module-name (current-module))))
                           (module-variable
                             (resolve-module mod-29334)
                             var-29330)
                           #f)
                       (modref-cont-29331 mod-29334 var-29330 #f)
                       (bare-cont-29332 var-29330))
                     (syntax-violation
                       #f
                       "bad module kind"
                       var-29330
                       mod-29334)))))))))
     (build-global-reference-6522
       (lambda (source-29349 var-29350 mod-29351)
         (analyze-variable-6521
           mod-29351
           var-29350
           (lambda (mod-29354 var-29355 public?-29356)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               source-29349
               mod-29354
               var-29355
               public?-29356))
           (lambda (var-29364)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               source-29349
               var-29364)))))
     (build-global-assignment-6523
       (lambda (source-17778 var-17779 exp-17780 mod-17781)
         (begin
           (if (if (struct? exp-17780)
                 (eq? (struct-vtable exp-17780)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((meta-17797 (struct-ref exp-17780 1)))
               (if (not (assq 'name meta-17797))
                 (let ((v-17804
                         (cons (cons 'name var-17779) meta-17797)))
                   (struct-set! exp-17780 1 v-17804)))))
           (analyze-variable-6521
             mod-17781
             var-17779
             (lambda (mod-17809 var-17810 public?-17811)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 6)
                 source-17778
                 mod-17809
                 var-17810
                 public?-17811
                 exp-17780))
             (lambda (var-17819)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 8)
                 source-17778
                 var-17819
                 exp-17780))))))
     (build-global-definition-6524
       (lambda (source-29370 var-29371 exp-29372)
         (begin
           (if (if (struct? exp-29372)
                 (eq? (struct-vtable exp-29372)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((meta-29388 (struct-ref exp-29372 1)))
               (if (not (assq 'name meta-29388))
                 (let ((v-29395
                         (cons (cons 'name var-29371) meta-29388)))
                   (struct-set! exp-29372 1 v-29395)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             source-29370
             var-29371
             exp-29372))))
     (build-simple-lambda-6525
       (lambda (src-17825
                req-17826
                rest-17827
                vars-17828
                meta-17829
                exp-17830)
         (let ((body-17836
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 14)
                   src-17825
                   req-17826
                   #f
                   rest-17827
                   #f
                   '()
                   vars-17828
                   exp-17830
                   #f)))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             src-17825
             meta-17829
             body-17836))))
     (build-sequence-6530
       (lambda (src-29403 exps-29404)
         (if (null? (cdr exps-29404))
           (car exps-29404)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 12)
             src-29403
             exps-29404))))
     (build-let-6531
       (lambda (src-17848
                ids-17849
                vars-17850
                val-exps-17851
                body-exp-17852)
         (begin
           (for-each
             maybe-name-value!-6514
             ids-17849
             val-exps-17851)
           (if (null? vars-17850)
             body-exp-17852
             (make-struct/no-tail
               (vector-ref %expanded-vtables 15)
               src-17848
               ids-17849
               vars-17850
               val-exps-17851
               body-exp-17852)))))
     (build-named-let-6532
       (lambda (src-17876
                ids-17877
                vars-17878
                val-exps-17879
                body-exp-17880)
         (let ((f-17881 (car vars-17878))
               (f-name-17882 (car ids-17877))
               (vars-17883 (cdr vars-17878))
               (ids-17884 (cdr ids-17877)))
           (let ((proc-17885
                   (let ((body-17905
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 14)
                             src-17876
                             ids-17884
                             #f
                             #f
                             #f
                             '()
                             vars-17883
                             body-exp-17880
                             #f)))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 13)
                       src-17876
                       '()
                       body-17905))))
             (begin
               (if (if (struct? proc-17885)
                     (eq? (struct-vtable proc-17885)
                          (vector-ref %expanded-vtables 13))
                     #f)
                 (let ((meta-17929 (struct-ref proc-17885 1)))
                   (if (not (assq 'name meta-17929))
                     (let ((v-17936
                             (cons (cons 'name f-name-17882) meta-17929)))
                       (struct-set! proc-17885 1 v-17936)))))
               (for-each
                 maybe-name-value!-6514
                 ids-17884
                 val-exps-17879)
               (let ((names-17960 (list f-name-17882))
                     (gensyms-17961 (list f-17881))
                     (vals-17962 (list proc-17885))
                     (body-17963
                       (let ((fun-exp-17967
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 3)
                                 src-17876
                                 f-name-17882
                                 f-17881)))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           src-17876
                           fun-exp-17967
                           val-exps-17879))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 16)
                   src-17876
                   #f
                   names-17960
                   gensyms-17961
                   vals-17962
                   body-17963)))))))
     (build-letrec-6533
       (lambda (src-17983
                in-order?-17984
                ids-17985
                vars-17986
                val-exps-17987
                body-exp-17988)
         (if (null? vars-17986)
           body-exp-17988
           (begin
             (for-each
               maybe-name-value!-6514
               ids-17985
               val-exps-17987)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 16)
               src-17983
               in-order?-17984
               ids-17985
               vars-17986
               val-exps-17987
               body-exp-17988)))))
     (source-annotation-6542
       (lambda (x-18014)
         (if (if (vector? x-18014)
               (if (= (vector-length x-18014) 4)
                 (eq? (vector-ref x-18014 0) 'syntax-object)
                 #f)
               #f)
           (source-annotation-6542 (vector-ref x-18014 1))
           (if (pair? x-18014)
             (let ((props-18029 (source-properties x-18014)))
               (if (pair? props-18029) props-18029 #f))
             #f))))
     (extend-env-6543
       (lambda (labels-18031 bindings-18032 r-18033)
         (if (null? labels-18031)
           r-18033
           (extend-env-6543
             (cdr labels-18031)
             (cdr bindings-18032)
             (cons (cons (car labels-18031) (car bindings-18032))
                   r-18033)))))
     (extend-var-env-6544
       (lambda (labels-18034 vars-18035 r-18036)
         (if (null? labels-18034)
           r-18036
           (extend-var-env-6544
             (cdr labels-18034)
             (cdr vars-18035)
             (cons (cons (car labels-18034)
                         (cons 'lexical (car vars-18035)))
                   r-18036)))))
     (macros-only-env-6545
       (lambda (r-18037)
         (if (null? r-18037)
           '()
           (let ((a-18038 (car r-18037)))
             (if (eq? (car (cdr a-18038)) 'macro)
               (cons a-18038
                     (macros-only-env-6545 (cdr r-18037)))
               (macros-only-env-6545 (cdr r-18037)))))))
     (global-extend-6547
       (lambda (type-18040 sym-18041 val-18042)
         (module-define!
           (current-module)
           sym-18041
           (make-syntax-transformer
             sym-18041
             type-18040
             val-18042))))
     (id?-6549
       (lambda (x-11853)
         (if (symbol? x-11853)
           #t
           (if (if (vector? x-11853)
                 (if (= (vector-length x-11853) 4)
                   (eq? (vector-ref x-11853 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref x-11853 1))
             #f))))
     (gen-labels-6552
       (lambda (ls-18052)
         (if (null? ls-18052)
           '()
           (cons (string-append
                   "l-"
                   (session-id-6510)
                   (symbol->string (gensym "-")))
                 (gen-labels-6552 (cdr ls-18052))))))
     (make-binding-wrap-6563
       (lambda (ids-18056 labels-18057 w-18058)
         (if (null? ids-18056)
           w-18058
           (cons (car w-18058)
                 (cons (let ((labelvec-18059 (list->vector labels-18057)))
                         (let ((n-18060 (vector-length labelvec-18059)))
                           (let ((symnamevec-18061 (make-vector n-18060))
                                 (marksvec-18062 (make-vector n-18060)))
                             (begin
                               (letrec*
                                 ((f-18063
                                    (lambda (ids-18066 i-18067)
                                      (if (not (null? ids-18066))
                                        (call-with-values
                                          (lambda ()
                                            (let ((x-18070 (car ids-18066)))
                                              (if (if (vector? x-18070)
                                                    (if (= (vector-length
                                                             x-18070)
                                                           4)
                                                      (eq? (vector-ref
                                                             x-18070
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (values
                                                  (vector-ref x-18070 1)
                                                  (let ((m1-18086
                                                          (car w-18058))
                                                        (m2-18087
                                                          (car (vector-ref
                                                                 x-18070
                                                                 2))))
                                                    (if (null? m2-18087)
                                                      m1-18086
                                                      (append
                                                        m1-18086
                                                        m2-18087))))
                                                (values
                                                  x-18070
                                                  (car w-18058)))))
                                          (lambda (symname-18107 marks-18108)
                                            (begin
                                              (vector-set!
                                                symnamevec-18061
                                                i-18067
                                                symname-18107)
                                              (vector-set!
                                                marksvec-18062
                                                i-18067
                                                marks-18108)
                                              (f-18063
                                                (cdr ids-18066)
                                                (#{1+}# i-18067)))))))))
                                 (f-18063 ids-18056 0))
                               (vector
                                 'ribcage
                                 symnamevec-18061
                                 marksvec-18062
                                 labelvec-18059)))))
                       (cdr w-18058))))))
     (join-wraps-6565
       (lambda (w1-18117 w2-18118)
         (let ((m1-18119 (car w1-18117))
               (s1-18120 (cdr w1-18117)))
           (if (null? m1-18119)
             (if (null? s1-18120)
               w2-18118
               (cons (car w2-18118)
                     (let ((m2-18127 (cdr w2-18118)))
                       (if (null? m2-18127)
                         s1-18120
                         (append s1-18120 m2-18127)))))
             (cons (let ((m2-18136 (car w2-18118)))
                     (if (null? m2-18136)
                       m1-18119
                       (append m1-18119 m2-18136)))
                   (let ((m2-18145 (cdr w2-18118)))
                     (if (null? m2-18145)
                       s1-18120
                       (append s1-18120 m2-18145))))))))
     (same-marks?-6567
       (lambda (x-18150 y-18151)
         (if (eq? x-18150 y-18151)
           (eq? x-18150 y-18151)
           (if (not (null? x-18150))
             (if (not (null? y-18151))
               (if (eq? (car x-18150) (car y-18151))
                 (same-marks?-6567 (cdr x-18150) (cdr y-18151))
                 #f)
               #f)
             #f))))
     (id-var-name-6568
       (lambda (id-18159 w-18160)
         (letrec*
           ((search-18161
              (lambda (sym-18222 subst-18223 marks-18224)
                (if (null? subst-18223)
                  (values #f marks-18224)
                  (let ((fst-18225 (car subst-18223)))
                    (if (eq? fst-18225 'shift)
                      (search-18161
                        sym-18222
                        (cdr subst-18223)
                        (cdr marks-18224))
                      (let ((symnames-18227 (vector-ref fst-18225 1)))
                        (if (vector? symnames-18227)
                          (let ((n-18239 (vector-length symnames-18227)))
                            (letrec*
                              ((f-18240
                                 (lambda (i-18242)
                                   (if (= i-18242 n-18239)
                                     (search-18161
                                       sym-18222
                                       (cdr subst-18223)
                                       marks-18224)
                                     (if (if (eq? (vector-ref
                                                    symnames-18227
                                                    i-18242)
                                                  sym-18222)
                                           (same-marks?-6567
                                             marks-18224
                                             (vector-ref
                                               (vector-ref fst-18225 2)
                                               i-18242))
                                           #f)
                                       (values
                                         (vector-ref
                                           (vector-ref fst-18225 3)
                                           i-18242)
                                         marks-18224)
                                       (f-18240 (#{1+}# i-18242)))))))
                              (f-18240 0)))
                          (letrec*
                            ((f-18275
                               (lambda (symnames-18277 i-18278)
                                 (if (null? symnames-18277)
                                   (search-18161
                                     sym-18222
                                     (cdr subst-18223)
                                     marks-18224)
                                   (if (if (eq? (car symnames-18277) sym-18222)
                                         (same-marks?-6567
                                           marks-18224
                                           (list-ref
                                             (vector-ref fst-18225 2)
                                             i-18278))
                                         #f)
                                     (values
                                       (list-ref
                                         (vector-ref fst-18225 3)
                                         i-18278)
                                       marks-18224)
                                     (f-18275
                                       (cdr symnames-18277)
                                       (#{1+}# i-18278)))))))
                            (f-18275 symnames-18227 0))))))))))
           (if (symbol? id-18159)
             (let ((t-18164
                     (search-18161
                       id-18159
                       (cdr w-18160)
                       (car w-18160))))
               (if t-18164 t-18164 id-18159))
             (if (if (vector? id-18159)
                   (if (= (vector-length id-18159) 4)
                     (eq? (vector-ref id-18159 0) 'syntax-object)
                     #f)
                   #f)
               (let ((id-18179 (vector-ref id-18159 1))
                     (w1-18180 (vector-ref id-18159 2)))
                 (let ((marks-18181
                         (let ((m1-18191 (car w-18160))
                               (m2-18192 (car w1-18180)))
                           (if (null? m2-18192)
                             m1-18191
                             (append m1-18191 m2-18192)))))
                   (call-with-values
                     (lambda ()
                       (search-18161 id-18179 (cdr w-18160) marks-18181))
                     (lambda (new-id-18208 marks-18209)
                       (if new-id-18208
                         new-id-18208
                         (let ((t-18217
                                 (search-18161
                                   id-18179
                                   (cdr w1-18180)
                                   marks-18209)))
                           (if t-18217 t-18217 id-18179)))))))
               (syntax-violation
                 'id-var-name
                 "invalid id"
                 id-18159))))))
     (locally-bound-identifiers-6569
       (lambda (w-18300 mod-18301)
         (letrec*
           ((scan-18302
              (lambda (subst-18307 results-18308)
                (if (null? subst-18307)
                  results-18308
                  (let ((fst-18309 (car subst-18307)))
                    (if (eq? fst-18309 'shift)
                      (scan-18302 (cdr subst-18307) results-18308)
                      (let ((symnames-18311 (vector-ref fst-18309 1))
                            (marks-18312 (vector-ref fst-18309 2)))
                        (if (vector? symnames-18311)
                          (scan-vector-rib-18304
                            subst-18307
                            symnames-18311
                            marks-18312
                            results-18308)
                          (scan-list-rib-18303
                            subst-18307
                            symnames-18311
                            marks-18312
                            results-18308))))))))
            (scan-list-rib-18303
              (lambda (subst-18410
                       symnames-18411
                       marks-18412
                       results-18413)
                (letrec*
                  ((f-18414
                     (lambda (symnames-18514 marks-18515 results-18516)
                       (if (null? symnames-18514)
                         (scan-18302 (cdr subst-18410) results-18516)
                         (f-18414
                           (cdr symnames-18514)
                           (cdr marks-18515)
                           (cons (wrap-6578
                                   (car symnames-18514)
                                   (let ((w-18524
                                           (cons (car marks-18515)
                                                 subst-18410)))
                                     (cons (cons #f (car w-18524))
                                           (cons 'shift (cdr w-18524))))
                                   mod-18301)
                                 results-18516))))))
                  (f-18414
                    symnames-18411
                    marks-18412
                    results-18413))))
            (scan-vector-rib-18304
              (lambda (subst-18525
                       symnames-18526
                       marks-18527
                       results-18528)
                (let ((n-18529 (vector-length symnames-18526)))
                  (letrec*
                    ((f-18530
                       (lambda (i-18613 results-18614)
                         (if (= i-18613 n-18529)
                           (scan-18302 (cdr subst-18525) results-18614)
                           (f-18530
                             (#{1+}# i-18613)
                             (cons (wrap-6578
                                     (vector-ref symnames-18526 i-18613)
                                     (let ((w-18622
                                             (cons (vector-ref
                                                     marks-18527
                                                     i-18613)
                                                   subst-18525)))
                                       (cons (cons #f (car w-18622))
                                             (cons 'shift (cdr w-18622))))
                                     mod-18301)
                                   results-18614))))))
                    (f-18530 0 results-18528))))))
           (scan-18302 (cdr w-18300) '()))))
     (valid-bound-ids?-6575
       (lambda (ids-18623)
         (if (letrec*
               ((all-ids?-18624
                  (lambda (ids-18786)
                    (if (null? ids-18786)
                      (null? ids-18786)
                      (if (let ((x-18797 (car ids-18786)))
                            (if (symbol? x-18797)
                              #t
                              (if (if (vector? x-18797)
                                    (if (= (vector-length x-18797) 4)
                                      (eq? (vector-ref x-18797 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (symbol? (vector-ref x-18797 1))
                                #f)))
                        (all-ids?-18624 (cdr ids-18786))
                        #f)))))
               (all-ids?-18624 ids-18623))
           (distinct-bound-ids?-6576 ids-18623)
           #f)))
     (distinct-bound-ids?-6576
       (lambda (ids-18925)
         (letrec*
           ((distinct?-18926
              (lambda (ids-19038)
                (if (null? ids-19038)
                  (null? ids-19038)
                  (if (not (bound-id-member?-6577
                             (car ids-19038)
                             (cdr ids-19038)))
                    (distinct?-18926 (cdr ids-19038))
                    #f)))))
           (distinct?-18926 ids-18925))))
     (bound-id-member?-6577
       (lambda (x-19248 list-19249)
         (if (not (null? list-19249))
           (let ((t-19250
                   (let ((j-19331 (car list-19249)))
                     (if (if (if (vector? x-19248)
                               (if (= (vector-length x-19248) 4)
                                 (eq? (vector-ref x-19248 0) 'syntax-object)
                                 #f)
                               #f)
                           (if (vector? j-19331)
                             (if (= (vector-length j-19331) 4)
                               (eq? (vector-ref j-19331 0) 'syntax-object)
                               #f)
                             #f)
                           #f)
                       (if (eq? (vector-ref x-19248 1)
                                (vector-ref j-19331 1))
                         (same-marks?-6567
                           (car (vector-ref x-19248 2))
                           (car (vector-ref j-19331 2)))
                         #f)
                       (eq? x-19248 j-19331)))))
             (if t-19250
               t-19250
               (bound-id-member?-6577 x-19248 (cdr list-19249))))
           #f)))
     (wrap-6578
       (lambda (x-19375 w-19376 defmod-19377)
         (if (if (null? (car w-19376))
               (null? (cdr w-19376))
               #f)
           x-19375
           (if (if (vector? x-19375)
                 (if (= (vector-length x-19375) 4)
                   (eq? (vector-ref x-19375 0) 'syntax-object)
                   #f)
                 #f)
             (let ((expression-19391 (vector-ref x-19375 1))
                   (wrap-19392
                     (join-wraps-6565 w-19376 (vector-ref x-19375 2)))
                   (module-19393 (vector-ref x-19375 3)))
               (vector
                 'syntax-object
                 expression-19391
                 wrap-19392
                 module-19393))
             (if (null? x-19375)
               x-19375
               (vector
                 'syntax-object
                 x-19375
                 w-19376
                 defmod-19377))))))
     (source-wrap-6579
       (lambda (x-19410 w-19411 s-19412 defmod-19413)
         (wrap-6578
           (begin
             (if (if (pair? x-19410) s-19412 #f)
               (set-source-properties! x-19410 s-19412))
             x-19410)
           w-19411
           defmod-19413)))
     (expand-sequence-6580
       (lambda (body-29409 r-29410 w-29411 s-29412 mod-29413)
         (build-sequence-6530
           s-29412
           (letrec*
             ((dobody-29493
                (lambda (body-29833 r-29834 w-29835 mod-29836)
                  (if (null? body-29833)
                    '()
                    (let ((first-29837
                            (let ((e-29841 (car body-29833)))
                              (call-with-values
                                (lambda ()
                                  (syntax-type-6584
                                    e-29841
                                    r-29834
                                    w-29835
                                    (source-annotation-6542 e-29841)
                                    #f
                                    mod-29836
                                    #f))
                                (lambda (type-29848
                                         value-29849
                                         form-29850
                                         e-29851
                                         w-29852
                                         s-29853
                                         mod-29854)
                                  (expand-expr-6586
                                    type-29848
                                    value-29849
                                    form-29850
                                    e-29851
                                    r-29834
                                    w-29852
                                    s-29853
                                    mod-29854))))))
                      (cons first-29837
                            (dobody-29493
                              (cdr body-29833)
                              r-29834
                              w-29835
                              mod-29836)))))))
             (dobody-29493
               body-29409
               r-29410
               w-29411
               mod-29413)))))
     (expand-top-sequence-6581
       (lambda (body-19431
                r-19432
                w-19433
                s-19434
                m-19435
                esew-19436
                mod-19437)
         (letrec*
           ((scan-19438
              (lambda (body-19569
                       r-19570
                       w-19571
                       s-19572
                       m-19573
                       esew-19574
                       mod-19575
                       exps-19576)
                (if (null? body-19569)
                  exps-19576
                  (call-with-values
                    (lambda ()
                      (call-with-values
                        (lambda ()
                          (let ((e-19577 (car body-19569)))
                            (syntax-type-6584
                              e-19577
                              r-19570
                              w-19571
                              (let ((t-19581 (source-annotation-6542 e-19577)))
                                (if t-19581 t-19581 s-19572))
                              #f
                              mod-19575
                              #f)))
                        (lambda (type-19816
                                 value-19817
                                 form-19818
                                 e-19819
                                 w-19820
                                 s-19821
                                 mod-19822)
                          (if (eqv? type-19816 'begin-form)
                            (let ((tmp-19827 ($sc-dispatch e-19819 '(_))))
                              (if tmp-19827
                                (@apply (lambda () exps-19576) tmp-19827)
                                (let ((tmp-19831
                                        ($sc-dispatch
                                          e-19819
                                          '(_ any . each-any))))
                                  (if tmp-19831
                                    (@apply
                                      (lambda (e1-19835 e2-19836)
                                        (scan-19438
                                          (cons e1-19835 e2-19836)
                                          r-19570
                                          w-19820
                                          s-19821
                                          m-19573
                                          esew-19574
                                          mod-19822
                                          exps-19576))
                                      tmp-19831)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      e-19819)))))
                            (if (eqv? type-19816 'local-syntax-form)
                              (expand-local-syntax-6590
                                value-19817
                                e-19819
                                r-19570
                                w-19820
                                s-19821
                                mod-19822
                                (lambda (body-19851
                                         r-19852
                                         w-19853
                                         s-19854
                                         mod-19855)
                                  (scan-19438
                                    body-19851
                                    r-19852
                                    w-19853
                                    s-19854
                                    m-19573
                                    esew-19574
                                    mod-19855
                                    exps-19576)))
                              (if (eqv? type-19816 'eval-when-form)
                                (let ((tmp-19860
                                        ($sc-dispatch
                                          e-19819
                                          '(_ each-any any . each-any))))
                                  (if tmp-19860
                                    (@apply
                                      (lambda (x-19864 e1-19865 e2-19866)
                                        (let ((when-list-19867
                                                (parse-when-list-6583
                                                  e-19819
                                                  x-19864))
                                              (body-19868
                                                (cons e1-19865 e2-19866)))
                                          (if (eq? m-19573 'e)
                                            (if (memq 'eval when-list-19867)
                                              (scan-19438
                                                body-19868
                                                r-19570
                                                w-19820
                                                s-19821
                                                (if (memq 'expand
                                                          when-list-19867)
                                                  'c&e
                                                  'e)
                                                '(eval)
                                                mod-19822
                                                exps-19576)
                                              (begin
                                                (if (memq 'expand
                                                          when-list-19867)
                                                  (let ((x-19945
                                                          (expand-top-sequence-6581
                                                            body-19868
                                                            r-19570
                                                            w-19820
                                                            s-19821
                                                            'e
                                                            '(eval)
                                                            mod-19822)))
                                                    (primitive-eval x-19945)))
                                                exps-19576))
                                            (if (memq 'load when-list-19867)
                                              (if (let ((t-19971
                                                          (memq 'compile
                                                                when-list-19867)))
                                                    (if t-19971
                                                      t-19971
                                                      (let ((t-20020
                                                              (memq 'expand
                                                                    when-list-19867)))
                                                        (if t-20020
                                                          t-20020
                                                          (if (eq? m-19573
                                                                   'c&e)
                                                            (memq 'eval
                                                                  when-list-19867)
                                                            #f)))))
                                                (scan-19438
                                                  body-19868
                                                  r-19570
                                                  w-19820
                                                  s-19821
                                                  'c&e
                                                  '(compile load)
                                                  mod-19822
                                                  exps-19576)
                                                (if (if (eq? m-19573 'c)
                                                      #t
                                                      (eq? m-19573 'c&e))
                                                  (scan-19438
                                                    body-19868
                                                    r-19570
                                                    w-19820
                                                    s-19821
                                                    'c
                                                    '(load)
                                                    mod-19822
                                                    exps-19576)
                                                  exps-19576))
                                              (if (let ((t-20149
                                                          (memq 'compile
                                                                when-list-19867)))
                                                    (if t-20149
                                                      t-20149
                                                      (let ((t-20198
                                                              (memq 'expand
                                                                    when-list-19867)))
                                                        (if t-20198
                                                          t-20198
                                                          (if (eq? m-19573
                                                                   'c&e)
                                                            (memq 'eval
                                                                  when-list-19867)
                                                            #f)))))
                                                (begin
                                                  (let ((x-20322
                                                          (expand-top-sequence-6581
                                                            body-19868
                                                            r-19570
                                                            w-19820
                                                            s-19821
                                                            'e
                                                            '(eval)
                                                            mod-19822)))
                                                    (primitive-eval x-20322))
                                                  exps-19576)
                                                exps-19576)))))
                                      tmp-19860)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      e-19819)))
                                (if (if (eqv? type-19816 'define-syntax-form)
                                      #t
                                      (eqv? type-19816
                                            'define-syntax-parameter-form))
                                  (let ((n-20368
                                          (id-var-name-6568
                                            value-19817
                                            w-19820))
                                        (r-20369
                                          (macros-only-env-6545 r-19570)))
                                    (if (eqv? m-19573 'c)
                                      (if (memq 'compile esew-19574)
                                        (let ((e-20373
                                                (expand-install-global-6582
                                                  n-20368
                                                  (expand-6585
                                                    e-19819
                                                    r-20369
                                                    w-19820
                                                    mod-19822))))
                                          (begin
                                            (top-level-eval-hook-6508
                                              e-20373
                                              mod-19822)
                                            (if (memq 'load esew-19574)
                                              (cons e-20373 exps-19576)
                                              exps-19576)))
                                        (if (memq 'load esew-19574)
                                          (cons (expand-install-global-6582
                                                  n-20368
                                                  (expand-6585
                                                    e-19819
                                                    r-20369
                                                    w-19820
                                                    mod-19822))
                                                exps-19576)
                                          exps-19576))
                                      (if (eqv? m-19573 'c&e)
                                        (let ((e-21015
                                                (expand-install-global-6582
                                                  n-20368
                                                  (expand-6585
                                                    e-19819
                                                    r-20369
                                                    w-19820
                                                    mod-19822))))
                                          (begin
                                            (top-level-eval-hook-6508
                                              e-21015
                                              mod-19822)
                                            (cons e-21015 exps-19576)))
                                        (begin
                                          (if (memq 'eval esew-19574)
                                            (top-level-eval-hook-6508
                                              (expand-install-global-6582
                                                n-20368
                                                (expand-6585
                                                  e-19819
                                                  r-20369
                                                  w-19820
                                                  mod-19822))
                                              mod-19822))
                                          exps-19576))))
                                  (if (eqv? type-19816 'define-form)
                                    (let ((n-21689
                                            (id-var-name-6568
                                              value-19817
                                              w-19820)))
                                      (let ((type-21690
                                              (car (let ((t-21697
                                                           (assq n-21689
                                                                 r-19570)))
                                                     (if t-21697
                                                       (cdr t-21697)
                                                       (if (symbol? n-21689)
                                                         (let ((t-21703
                                                                 (get-global-definition-hook-6512
                                                                   n-21689
                                                                   mod-19822)))
                                                           (if t-21703
                                                             t-21703
                                                             '(global)))
                                                         '(displaced-lexical)))))))
                                        (if (if (eqv? type-21690 'global)
                                              #t
                                              (if (eqv? type-21690 'core)
                                                #t
                                                (if (eqv? type-21690 'macro)
                                                  #t
                                                  (eqv? type-21690
                                                        'module-ref))))
                                          (begin
                                            (if (if (if (eq? m-19573 'c)
                                                      #t
                                                      (eq? m-19573 'c&e))
                                                  (if (not (module-local-variable
                                                             (current-module)
                                                             n-21689))
                                                    (current-module)
                                                    #f)
                                                  #f)
                                              (let ((old-21734
                                                      (module-variable
                                                        (current-module)
                                                        n-21689)))
                                                (if (if (variable? old-21734)
                                                      (variable-bound?
                                                        old-21734)
                                                      #f)
                                                  (module-define!
                                                    (current-module)
                                                    n-21689
                                                    (variable-ref old-21734))
                                                  (module-add!
                                                    (current-module)
                                                    n-21689
                                                    (make-undefined-variable)))))
                                            (cons (if (eq? m-19573 'c&e)
                                                    (let ((x-22175
                                                            (build-global-definition-6524
                                                              s-19821
                                                              n-21689
                                                              (expand-6585
                                                                e-19819
                                                                r-19570
                                                                w-19820
                                                                mod-19822))))
                                                      (begin
                                                        (top-level-eval-hook-6508
                                                          x-22175
                                                          mod-19822)
                                                        x-22175))
                                                    (lambda ()
                                                      (build-global-definition-6524
                                                        s-19821
                                                        n-21689
                                                        (expand-6585
                                                          e-19819
                                                          r-19570
                                                          w-19820
                                                          mod-19822))))
                                                  exps-19576))
                                          (if (eqv? type-21690
                                                    'displaced-lexical)
                                            (syntax-violation
                                              #f
                                              "identifier out of context"
                                              (wrap-6578
                                                (begin
                                                  (if (if (pair? form-19818)
                                                        s-19821
                                                        #f)
                                                    (set-source-properties!
                                                      form-19818
                                                      s-19821))
                                                  form-19818)
                                                w-19820
                                                mod-19822)
                                              (wrap-6578
                                                value-19817
                                                w-19820
                                                mod-19822))
                                            (syntax-violation
                                              #f
                                              "cannot define keyword at top level"
                                              (wrap-6578
                                                (begin
                                                  (if (if (pair? form-19818)
                                                        s-19821
                                                        #f)
                                                    (set-source-properties!
                                                      form-19818
                                                      s-19821))
                                                  form-19818)
                                                w-19820
                                                mod-19822)
                                              (wrap-6578
                                                value-19817
                                                w-19820
                                                mod-19822))))))
                                    (cons (if (eq? m-19573 'c&e)
                                            (let ((x-22674
                                                    (expand-expr-6586
                                                      type-19816
                                                      value-19817
                                                      form-19818
                                                      e-19819
                                                      r-19570
                                                      w-19820
                                                      s-19821
                                                      mod-19822)))
                                              (begin
                                                (primitive-eval x-22674)
                                                x-22674))
                                            (lambda ()
                                              (expand-expr-6586
                                                type-19816
                                                value-19817
                                                form-19818
                                                e-19819
                                                r-19570
                                                w-19820
                                                s-19821
                                                mod-19822)))
                                          exps-19576)))))))))
                    (lambda (exps-22679)
                      (scan-19438
                        (cdr body-19569)
                        r-19570
                        w-19571
                        s-19572
                        m-19573
                        esew-19574
                        mod-19575
                        exps-22679)))))))
           (call-with-values
             (lambda ()
               (scan-19438
                 body-19431
                 r-19432
                 w-19433
                 s-19434
                 m-19435
                 esew-19436
                 mod-19437
                 '()))
             (lambda (exps-19441)
               (if (null? exps-19441)
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 0)
                   s-19434)
                 (build-sequence-6530
                   s-19434
                   (letrec*
                     ((lp-19481
                        (lambda (in-19565 out-19566)
                          (if (null? in-19565)
                            out-19566
                            (let ((e-19567 (car in-19565)))
                              (lp-19481
                                (cdr in-19565)
                                (cons (if (procedure? e-19567)
                                        (e-19567)
                                        e-19567)
                                      out-19566)))))))
                     (lp-19481 exps-19441 '())))))))))
     (expand-install-global-6582
       (lambda (name-22680 e-22681)
         (let ((exp-22687
                 (let ((fun-exp-22697
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'make-syntax-transformer)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'make-syntax-transformer
                             #f)))
                       (arg-exps-22698
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 name-22680)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'macro)
                               e-22681)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     fun-exp-22697
                     arg-exps-22698))))
           (begin
             (if (if (struct? exp-22687)
                   (eq? (struct-vtable exp-22687)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((meta-22739 (struct-ref exp-22687 1)))
                 (if (not (assq 'name meta-22739))
                   (let ((v-22746
                           (cons (cons 'name name-22680) meta-22739)))
                     (struct-set! exp-22687 1 v-22746)))))
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #f
               name-22680
               exp-22687)))))
     (parse-when-list-6583
       (lambda (e-22757 when-list-22758)
         (let ((result-22759 (strip-6598 when-list-22758 '(()))))
           (letrec*
             ((lp-22760
                (lambda (l-22814)
                  (if (null? l-22814)
                    result-22759
                    (if (let ((t-22816 (car l-22814)))
                          (if (eq? t-22816 'compile)
                            #t
                            (if (eq? t-22816 'load)
                              #t
                              (if (eq? t-22816 'eval)
                                #t
                                (eq? t-22816 'expand)))))
                      (lp-22760 (cdr l-22814))
                      (syntax-violation
                        'eval-when
                        "invalid situation"
                        e-22757
                        (car l-22814)))))))
             (lp-22760 result-22759)))))
     (syntax-type-6584
       (lambda (e-22818
                r-22819
                w-22820
                s-22821
                rib-22822
                mod-22823
                for-car?-22824)
         (if (symbol? e-22818)
           (let ((n-22825 (id-var-name-6568 e-22818 w-22820)))
             (let ((b-22826
                     (let ((t-22834 (assq n-22825 r-22819)))
                       (if t-22834
                         (cdr t-22834)
                         (if (symbol? n-22825)
                           (let ((t-22840
                                   (get-global-definition-hook-6512
                                     n-22825
                                     mod-22823)))
                             (if t-22840 t-22840 '(global)))
                           '(displaced-lexical))))))
               (let ((type-22827 (car b-22826)))
                 (if (eqv? type-22827 'lexical)
                   (values
                     type-22827
                     (cdr b-22826)
                     e-22818
                     e-22818
                     w-22820
                     s-22821
                     mod-22823)
                   (if (eqv? type-22827 'global)
                     (values
                       type-22827
                       n-22825
                       e-22818
                       e-22818
                       w-22820
                       s-22821
                       mod-22823)
                     (if (eqv? type-22827 'macro)
                       (if for-car?-22824
                         (values
                           type-22827
                           (cdr b-22826)
                           e-22818
                           e-22818
                           w-22820
                           s-22821
                           mod-22823)
                         (syntax-type-6584
                           (expand-macro-6588
                             (cdr b-22826)
                             e-22818
                             r-22819
                             w-22820
                             s-22821
                             rib-22822
                             mod-22823)
                           r-22819
                           '(())
                           s-22821
                           rib-22822
                           mod-22823
                           #f))
                       (values
                         type-22827
                         (cdr b-22826)
                         e-22818
                         e-22818
                         w-22820
                         s-22821
                         mod-22823)))))))
           (if (pair? e-22818)
             (let ((first-22860 (car e-22818)))
               (call-with-values
                 (lambda ()
                   (syntax-type-6584
                     first-22860
                     r-22819
                     w-22820
                     s-22821
                     rib-22822
                     mod-22823
                     #t))
                 (lambda (ftype-22862
                          fval-22863
                          fform-22864
                          fe-22865
                          fw-22866
                          fs-22867
                          fmod-22868)
                   (if (eqv? ftype-22862 'lexical)
                     (values
                       'lexical-call
                       fval-22863
                       e-22818
                       e-22818
                       w-22820
                       s-22821
                       mod-22823)
                     (if (eqv? ftype-22862 'global)
                       (values
                         'global-call
                         (vector
                           'syntax-object
                           fval-22863
                           w-22820
                           fmod-22868)
                         e-22818
                         e-22818
                         w-22820
                         s-22821
                         mod-22823)
                       (if (eqv? ftype-22862 'macro)
                         (syntax-type-6584
                           (expand-macro-6588
                             fval-22863
                             e-22818
                             r-22819
                             w-22820
                             s-22821
                             rib-22822
                             mod-22823)
                           r-22819
                           '(())
                           s-22821
                           rib-22822
                           mod-22823
                           for-car?-22824)
                         (if (eqv? ftype-22862 'module-ref)
                           (call-with-values
                             (lambda () (fval-22863 e-22818 r-22819 w-22820))
                             (lambda (e-22889
                                      r-22890
                                      w-22891
                                      s-22892
                                      mod-22893)
                               (syntax-type-6584
                                 e-22889
                                 r-22890
                                 w-22891
                                 s-22892
                                 rib-22822
                                 mod-22893
                                 for-car?-22824)))
                           (if (eqv? ftype-22862 'core)
                             (values
                               'core-form
                               fval-22863
                               e-22818
                               e-22818
                               w-22820
                               s-22821
                               mod-22823)
                             (if (eqv? ftype-22862 'local-syntax)
                               (values
                                 'local-syntax-form
                                 fval-22863
                                 e-22818
                                 e-22818
                                 w-22820
                                 s-22821
                                 mod-22823)
                               (if (eqv? ftype-22862 'begin)
                                 (values
                                   'begin-form
                                   #f
                                   e-22818
                                   e-22818
                                   w-22820
                                   s-22821
                                   mod-22823)
                                 (if (eqv? ftype-22862 'eval-when)
                                   (values
                                     'eval-when-form
                                     #f
                                     e-22818
                                     e-22818
                                     w-22820
                                     s-22821
                                     mod-22823)
                                   (if (eqv? ftype-22862 'define)
                                     (let ((tmp-22910
                                             ($sc-dispatch
                                               e-22818
                                               '(_ any any))))
                                       (if (if tmp-22910
                                             (@apply
                                               (lambda (name-22914 val-22915)
                                                 (if (symbol? name-22914)
                                                   #t
                                                   (if (if (vector? name-22914)
                                                         (if (= (vector-length
                                                                  name-22914)
                                                                4)
                                                           (eq? (vector-ref
                                                                  name-22914
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         name-22914
                                                         1))
                                                     #f)))
                                               tmp-22910)
                                             #f)
                                         (@apply
                                           (lambda (name-22942 val-22943)
                                             (values
                                               'define-form
                                               name-22942
                                               e-22818
                                               val-22943
                                               w-22820
                                               s-22821
                                               mod-22823))
                                           tmp-22910)
                                         (let ((tmp-22944
                                                 ($sc-dispatch
                                                   e-22818
                                                   '(_ (any . any)
                                                       any
                                                       .
                                                       each-any))))
                                           (if (if tmp-22944
                                                 (@apply
                                                   (lambda (name-22948
                                                            args-22949
                                                            e1-22950
                                                            e2-22951)
                                                     (if (if (symbol?
                                                               name-22948)
                                                           #t
                                                           (if (if (vector?
                                                                     name-22948)
                                                                 (if (= (vector-length
                                                                          name-22948)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          name-22948
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 name-22948
                                                                 1))
                                                             #f))
                                                       (valid-bound-ids?-6575
                                                         (letrec*
                                                           ((lvl-23100
                                                              (lambda (vars-23102
                                                                       ls-23103
                                                                       w-23104)
                                                                (if (pair? vars-23102)
                                                                  (lvl-23100
                                                                    (cdr vars-23102)
                                                                    (cons (wrap-6578
                                                                            (car vars-23102)
                                                                            w-23104
                                                                            #f)
                                                                          ls-23103)
                                                                    w-23104)
                                                                  (if (if (symbol?
                                                                            vars-23102)
                                                                        #t
                                                                        (if (if (vector?
                                                                                  vars-23102)
                                                                              (if (= (vector-length
                                                                                       vars-23102)
                                                                                     4)
                                                                                (eq? (vector-ref
                                                                                       vars-23102
                                                                                       0)
                                                                                     'syntax-object)
                                                                                #f)
                                                                              #f)
                                                                          (symbol?
                                                                            (vector-ref
                                                                              vars-23102
                                                                              1))
                                                                          #f))
                                                                    (cons (wrap-6578
                                                                            vars-23102
                                                                            w-23104
                                                                            #f)
                                                                          ls-23103)
                                                                    (if (null? vars-23102)
                                                                      ls-23103
                                                                      (if (if (vector?
                                                                                vars-23102)
                                                                            (if (= (vector-length
                                                                                     vars-23102)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     vars-23102
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (lvl-23100
                                                                          (vector-ref
                                                                            vars-23102
                                                                            1)
                                                                          ls-23103
                                                                          (join-wraps-6565
                                                                            w-23104
                                                                            (vector-ref
                                                                              vars-23102
                                                                              2)))
                                                                        (cons vars-23102
                                                                              ls-23103))))))))
                                                           (lvl-23100
                                                             args-22949
                                                             '()
                                                             '(()))))
                                                       #f))
                                                   tmp-22944)
                                                 #f)
                                             (@apply
                                               (lambda (name-23148
                                                        args-23149
                                                        e1-23150
                                                        e2-23151)
                                                 (values
                                                   'define-form
                                                   (wrap-6578
                                                     name-23148
                                                     w-22820
                                                     mod-22823)
                                                   (wrap-6578
                                                     e-22818
                                                     w-22820
                                                     mod-22823)
                                                   (let ((e-23159
                                                           (cons '#(syntax-object
                                                                    lambda
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(name
                                                                         args
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-4009"
                                                                         "l-*-4010"
                                                                         "l-*-4011"
                                                                         "l-*-4012"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(ftype
                                                                         fval
                                                                         fform
                                                                         fe
                                                                         fw
                                                                         fs
                                                                         fmod)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-3961"
                                                                         "l-*-3962"
                                                                         "l-*-3963"
                                                                         "l-*-3964"
                                                                         "l-*-3965"
                                                                         "l-*-3966"
                                                                         "l-*-3967"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(first)
                                                                       #((top))
                                                                       #("l-*-3952"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(e
                                                                         r
                                                                         w
                                                                         s
                                                                         rib
                                                                         mod
                                                                         for-car?)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-3924"
                                                                         "l-*-3925"
                                                                         "l-*-3926"
                                                                         "l-*-3927"
                                                                         "l-*-3928"
                                                                         "l-*-3929"
                                                                         "l-*-3930"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         session-id
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-2527"
                                                                        "l-*-2525"
                                                                        "l-*-2523"
                                                                        "l-*-2521"
                                                                        "l-*-2519"
                                                                        "l-*-2517"
                                                                        "l-*-2515"
                                                                        "l-*-2513"
                                                                        "l-*-2511"
                                                                        "l-*-2509"
                                                                        "l-*-2507"
                                                                        "l-*-2505"
                                                                        "l-*-2503"
                                                                        "l-*-2501"
                                                                        "l-*-2499"
                                                                        "l-*-2497"
                                                                        "l-*-2495"
                                                                        "l-*-2493"
                                                                        "l-*-2491"
                                                                        "l-*-2489"
                                                                        "l-*-2487"
                                                                        "l-*-2485"
                                                                        "l-*-2483"
                                                                        "l-*-2481"
                                                                        "l-*-2479"
                                                                        "l-*-2477"
                                                                        "l-*-2475"
                                                                        "l-*-2473"
                                                                        "l-*-2471"
                                                                        "l-*-2469"
                                                                        "l-*-2467"
                                                                        "l-*-2465"
                                                                        "l-*-2463"
                                                                        "l-*-2461"
                                                                        "l-*-2459"
                                                                        "l-*-2457"
                                                                        "l-*-2455"
                                                                        "l-*-2453"
                                                                        "l-*-2451"
                                                                        "l-*-2450"
                                                                        "l-*-2448"
                                                                        "l-*-2445"
                                                                        "l-*-2444"
                                                                        "l-*-2443"
                                                                        "l-*-2441"
                                                                        "l-*-2440"
                                                                        "l-*-2438"
                                                                        "l-*-2436"
                                                                        "l-*-2434"
                                                                        "l-*-2432"
                                                                        "l-*-2430"
                                                                        "l-*-2428"
                                                                        "l-*-2426"
                                                                        "l-*-2424"
                                                                        "l-*-2421"
                                                                        "l-*-2419"
                                                                        "l-*-2418"
                                                                        "l-*-2416"
                                                                        "l-*-2414"
                                                                        "l-*-2412"
                                                                        "l-*-2410"
                                                                        "l-*-2409"
                                                                        "l-*-2408"
                                                                        "l-*-2407"
                                                                        "l-*-2405"
                                                                        "l-*-2404"
                                                                        "l-*-2401"
                                                                        "l-*-2399"
                                                                        "l-*-2397"
                                                                        "l-*-2395"
                                                                        "l-*-2393"
                                                                        "l-*-2391"
                                                                        "l-*-2389"
                                                                        "l-*-2388"
                                                                        "l-*-2387"
                                                                        "l-*-2385"
                                                                        "l-*-2383"
                                                                        "l-*-2382"
                                                                        "l-*-2379"
                                                                        "l-*-2378"
                                                                        "l-*-2376"
                                                                        "l-*-2374"
                                                                        "l-*-2372"
                                                                        "l-*-2370"
                                                                        "l-*-2368"
                                                                        "l-*-2366"
                                                                        "l-*-2364"
                                                                        "l-*-2362"
                                                                        "l-*-2360"
                                                                        "l-*-2357"
                                                                        "l-*-2355"
                                                                        "l-*-2353"
                                                                        "l-*-2351"
                                                                        "l-*-2349"
                                                                        "l-*-2347"
                                                                        "l-*-2345"
                                                                        "l-*-2343"
                                                                        "l-*-2341"
                                                                        "l-*-2339"
                                                                        "l-*-2337"
                                                                        "l-*-2335"
                                                                        "l-*-2333"
                                                                        "l-*-2331"
                                                                        "l-*-2329"
                                                                        "l-*-2327"
                                                                        "l-*-2325"
                                                                        "l-*-2323"
                                                                        "l-*-2321"
                                                                        "l-*-2319"
                                                                        "l-*-2317"
                                                                        "l-*-2315"
                                                                        "l-*-2313"
                                                                        "l-*-2311"
                                                                        "l-*-2309"
                                                                        "l-*-2307"
                                                                        "l-*-2306"
                                                                        "l-*-2305"
                                                                        "l-*-2304"
                                                                        "l-*-2303"
                                                                        "l-*-2301"
                                                                        "l-*-2299"
                                                                        "l-*-2297"
                                                                        "l-*-2294"
                                                                        "l-*-2292"
                                                                        "l-*-2290"
                                                                        "l-*-2288"
                                                                        "l-*-2286"
                                                                        "l-*-2284"
                                                                        "l-*-2282"
                                                                        "l-*-2280"
                                                                        "l-*-2278"
                                                                        "l-*-2276"
                                                                        "l-*-2274"
                                                                        "l-*-2272"
                                                                        "l-*-2270"
                                                                        "l-*-2268"
                                                                        "l-*-2266"
                                                                        "l-*-2264"
                                                                        "l-*-2262"
                                                                        "l-*-2260"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-2098"
                                                                        "l-*-2097"
                                                                        "l-*-2096")))
                                                                    (hygiene
                                                                      guile))
                                                                 (wrap-6578
                                                                   (cons args-23149
                                                                         (cons e1-23150
                                                                               e2-23151))
                                                                   w-22820
                                                                   mod-22823))))
                                                     (begin
                                                       (if (if (pair? e-23159)
                                                             s-22821
                                                             #f)
                                                         (set-source-properties!
                                                           e-23159
                                                           s-22821))
                                                       e-23159))
                                                   '(())
                                                   s-22821
                                                   mod-22823))
                                               tmp-22944)
                                             (let ((tmp-23166
                                                     ($sc-dispatch
                                                       e-22818
                                                       '(_ any))))
                                               (if (if tmp-23166
                                                     (@apply
                                                       (lambda (name-23170)
                                                         (if (symbol?
                                                               name-23170)
                                                           #t
                                                           (if (if (vector?
                                                                     name-23170)
                                                                 (if (= (vector-length
                                                                          name-23170)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          name-23170
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 name-23170
                                                                 1))
                                                             #f)))
                                                       tmp-23166)
                                                     #f)
                                                 (@apply
                                                   (lambda (name-23197)
                                                     (values
                                                       'define-form
                                                       (wrap-6578
                                                         name-23197
                                                         w-22820
                                                         mod-22823)
                                                       (wrap-6578
                                                         e-22818
                                                         w-22820
                                                         mod-22823)
                                                       '(#(syntax-object
                                                           if
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-4022"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-3961"
                                                                "l-*-3962"
                                                                "l-*-3963"
                                                                "l-*-3964"
                                                                "l-*-3965"
                                                                "l-*-3966"
                                                                "l-*-3967"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-3952"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-3924"
                                                                "l-*-3925"
                                                                "l-*-3926"
                                                                "l-*-3927"
                                                                "l-*-3928"
                                                                "l-*-3929"
                                                                "l-*-3930"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-2527"
                                                               "l-*-2525"
                                                               "l-*-2523"
                                                               "l-*-2521"
                                                               "l-*-2519"
                                                               "l-*-2517"
                                                               "l-*-2515"
                                                               "l-*-2513"
                                                               "l-*-2511"
                                                               "l-*-2509"
                                                               "l-*-2507"
                                                               "l-*-2505"
                                                               "l-*-2503"
                                                               "l-*-2501"
                                                               "l-*-2499"
                                                               "l-*-2497"
                                                               "l-*-2495"
                                                               "l-*-2493"
                                                               "l-*-2491"
                                                               "l-*-2489"
                                                               "l-*-2487"
                                                               "l-*-2485"
                                                               "l-*-2483"
                                                               "l-*-2481"
                                                               "l-*-2479"
                                                               "l-*-2477"
                                                               "l-*-2475"
                                                               "l-*-2473"
                                                               "l-*-2471"
                                                               "l-*-2469"
                                                               "l-*-2467"
                                                               "l-*-2465"
                                                               "l-*-2463"
                                                               "l-*-2461"
                                                               "l-*-2459"
                                                               "l-*-2457"
                                                               "l-*-2455"
                                                               "l-*-2453"
                                                               "l-*-2451"
                                                               "l-*-2450"
                                                               "l-*-2448"
                                                               "l-*-2445"
                                                               "l-*-2444"
                                                               "l-*-2443"
                                                               "l-*-2441"
                                                               "l-*-2440"
                                                               "l-*-2438"
                                                               "l-*-2436"
                                                               "l-*-2434"
                                                               "l-*-2432"
                                                               "l-*-2430"
                                                               "l-*-2428"
                                                               "l-*-2426"
                                                               "l-*-2424"
                                                               "l-*-2421"
                                                               "l-*-2419"
                                                               "l-*-2418"
                                                               "l-*-2416"
                                                               "l-*-2414"
                                                               "l-*-2412"
                                                               "l-*-2410"
                                                               "l-*-2409"
                                                               "l-*-2408"
                                                               "l-*-2407"
                                                               "l-*-2405"
                                                               "l-*-2404"
                                                               "l-*-2401"
                                                               "l-*-2399"
                                                               "l-*-2397"
                                                               "l-*-2395"
                                                               "l-*-2393"
                                                               "l-*-2391"
                                                               "l-*-2389"
                                                               "l-*-2388"
                                                               "l-*-2387"
                                                               "l-*-2385"
                                                               "l-*-2383"
                                                               "l-*-2382"
                                                               "l-*-2379"
                                                               "l-*-2378"
                                                               "l-*-2376"
                                                               "l-*-2374"
                                                               "l-*-2372"
                                                               "l-*-2370"
                                                               "l-*-2368"
                                                               "l-*-2366"
                                                               "l-*-2364"
                                                               "l-*-2362"
                                                               "l-*-2360"
                                                               "l-*-2357"
                                                               "l-*-2355"
                                                               "l-*-2353"
                                                               "l-*-2351"
                                                               "l-*-2349"
                                                               "l-*-2347"
                                                               "l-*-2345"
                                                               "l-*-2343"
                                                               "l-*-2341"
                                                               "l-*-2339"
                                                               "l-*-2337"
                                                               "l-*-2335"
                                                               "l-*-2333"
                                                               "l-*-2331"
                                                               "l-*-2329"
                                                               "l-*-2327"
                                                               "l-*-2325"
                                                               "l-*-2323"
                                                               "l-*-2321"
                                                               "l-*-2319"
                                                               "l-*-2317"
                                                               "l-*-2315"
                                                               "l-*-2313"
                                                               "l-*-2311"
                                                               "l-*-2309"
                                                               "l-*-2307"
                                                               "l-*-2306"
                                                               "l-*-2305"
                                                               "l-*-2304"
                                                               "l-*-2303"
                                                               "l-*-2301"
                                                               "l-*-2299"
                                                               "l-*-2297"
                                                               "l-*-2294"
                                                               "l-*-2292"
                                                               "l-*-2290"
                                                               "l-*-2288"
                                                               "l-*-2286"
                                                               "l-*-2284"
                                                               "l-*-2282"
                                                               "l-*-2280"
                                                               "l-*-2278"
                                                               "l-*-2276"
                                                               "l-*-2274"
                                                               "l-*-2272"
                                                               "l-*-2270"
                                                               "l-*-2268"
                                                               "l-*-2266"
                                                               "l-*-2264"
                                                               "l-*-2262"
                                                               "l-*-2260"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-2098"
                                                               "l-*-2097"
                                                               "l-*-2096")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-4022"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-3961"
                                                                "l-*-3962"
                                                                "l-*-3963"
                                                                "l-*-3964"
                                                                "l-*-3965"
                                                                "l-*-3966"
                                                                "l-*-3967"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-3952"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-3924"
                                                                "l-*-3925"
                                                                "l-*-3926"
                                                                "l-*-3927"
                                                                "l-*-3928"
                                                                "l-*-3929"
                                                                "l-*-3930"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-2527"
                                                               "l-*-2525"
                                                               "l-*-2523"
                                                               "l-*-2521"
                                                               "l-*-2519"
                                                               "l-*-2517"
                                                               "l-*-2515"
                                                               "l-*-2513"
                                                               "l-*-2511"
                                                               "l-*-2509"
                                                               "l-*-2507"
                                                               "l-*-2505"
                                                               "l-*-2503"
                                                               "l-*-2501"
                                                               "l-*-2499"
                                                               "l-*-2497"
                                                               "l-*-2495"
                                                               "l-*-2493"
                                                               "l-*-2491"
                                                               "l-*-2489"
                                                               "l-*-2487"
                                                               "l-*-2485"
                                                               "l-*-2483"
                                                               "l-*-2481"
                                                               "l-*-2479"
                                                               "l-*-2477"
                                                               "l-*-2475"
                                                               "l-*-2473"
                                                               "l-*-2471"
                                                               "l-*-2469"
                                                               "l-*-2467"
                                                               "l-*-2465"
                                                               "l-*-2463"
                                                               "l-*-2461"
                                                               "l-*-2459"
                                                               "l-*-2457"
                                                               "l-*-2455"
                                                               "l-*-2453"
                                                               "l-*-2451"
                                                               "l-*-2450"
                                                               "l-*-2448"
                                                               "l-*-2445"
                                                               "l-*-2444"
                                                               "l-*-2443"
                                                               "l-*-2441"
                                                               "l-*-2440"
                                                               "l-*-2438"
                                                               "l-*-2436"
                                                               "l-*-2434"
                                                               "l-*-2432"
                                                               "l-*-2430"
                                                               "l-*-2428"
                                                               "l-*-2426"
                                                               "l-*-2424"
                                                               "l-*-2421"
                                                               "l-*-2419"
                                                               "l-*-2418"
                                                               "l-*-2416"
                                                               "l-*-2414"
                                                               "l-*-2412"
                                                               "l-*-2410"
                                                               "l-*-2409"
                                                               "l-*-2408"
                                                               "l-*-2407"
                                                               "l-*-2405"
                                                               "l-*-2404"
                                                               "l-*-2401"
                                                               "l-*-2399"
                                                               "l-*-2397"
                                                               "l-*-2395"
                                                               "l-*-2393"
                                                               "l-*-2391"
                                                               "l-*-2389"
                                                               "l-*-2388"
                                                               "l-*-2387"
                                                               "l-*-2385"
                                                               "l-*-2383"
                                                               "l-*-2382"
                                                               "l-*-2379"
                                                               "l-*-2378"
                                                               "l-*-2376"
                                                               "l-*-2374"
                                                               "l-*-2372"
                                                               "l-*-2370"
                                                               "l-*-2368"
                                                               "l-*-2366"
                                                               "l-*-2364"
                                                               "l-*-2362"
                                                               "l-*-2360"
                                                               "l-*-2357"
                                                               "l-*-2355"
                                                               "l-*-2353"
                                                               "l-*-2351"
                                                               "l-*-2349"
                                                               "l-*-2347"
                                                               "l-*-2345"
                                                               "l-*-2343"
                                                               "l-*-2341"
                                                               "l-*-2339"
                                                               "l-*-2337"
                                                               "l-*-2335"
                                                               "l-*-2333"
                                                               "l-*-2331"
                                                               "l-*-2329"
                                                               "l-*-2327"
                                                               "l-*-2325"
                                                               "l-*-2323"
                                                               "l-*-2321"
                                                               "l-*-2319"
                                                               "l-*-2317"
                                                               "l-*-2315"
                                                               "l-*-2313"
                                                               "l-*-2311"
                                                               "l-*-2309"
                                                               "l-*-2307"
                                                               "l-*-2306"
                                                               "l-*-2305"
                                                               "l-*-2304"
                                                               "l-*-2303"
                                                               "l-*-2301"
                                                               "l-*-2299"
                                                               "l-*-2297"
                                                               "l-*-2294"
                                                               "l-*-2292"
                                                               "l-*-2290"
                                                               "l-*-2288"
                                                               "l-*-2286"
                                                               "l-*-2284"
                                                               "l-*-2282"
                                                               "l-*-2280"
                                                               "l-*-2278"
                                                               "l-*-2276"
                                                               "l-*-2274"
                                                               "l-*-2272"
                                                               "l-*-2270"
                                                               "l-*-2268"
                                                               "l-*-2266"
                                                               "l-*-2264"
                                                               "l-*-2262"
                                                               "l-*-2260"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-2098"
                                                               "l-*-2097"
                                                               "l-*-2096")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-4022"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-3961"
                                                                "l-*-3962"
                                                                "l-*-3963"
                                                                "l-*-3964"
                                                                "l-*-3965"
                                                                "l-*-3966"
                                                                "l-*-3967"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-3952"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-3924"
                                                                "l-*-3925"
                                                                "l-*-3926"
                                                                "l-*-3927"
                                                                "l-*-3928"
                                                                "l-*-3929"
                                                                "l-*-3930"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-2527"
                                                               "l-*-2525"
                                                               "l-*-2523"
                                                               "l-*-2521"
                                                               "l-*-2519"
                                                               "l-*-2517"
                                                               "l-*-2515"
                                                               "l-*-2513"
                                                               "l-*-2511"
                                                               "l-*-2509"
                                                               "l-*-2507"
                                                               "l-*-2505"
                                                               "l-*-2503"
                                                               "l-*-2501"
                                                               "l-*-2499"
                                                               "l-*-2497"
                                                               "l-*-2495"
                                                               "l-*-2493"
                                                               "l-*-2491"
                                                               "l-*-2489"
                                                               "l-*-2487"
                                                               "l-*-2485"
                                                               "l-*-2483"
                                                               "l-*-2481"
                                                               "l-*-2479"
                                                               "l-*-2477"
                                                               "l-*-2475"
                                                               "l-*-2473"
                                                               "l-*-2471"
                                                               "l-*-2469"
                                                               "l-*-2467"
                                                               "l-*-2465"
                                                               "l-*-2463"
                                                               "l-*-2461"
                                                               "l-*-2459"
                                                               "l-*-2457"
                                                               "l-*-2455"
                                                               "l-*-2453"
                                                               "l-*-2451"
                                                               "l-*-2450"
                                                               "l-*-2448"
                                                               "l-*-2445"
                                                               "l-*-2444"
                                                               "l-*-2443"
                                                               "l-*-2441"
                                                               "l-*-2440"
                                                               "l-*-2438"
                                                               "l-*-2436"
                                                               "l-*-2434"
                                                               "l-*-2432"
                                                               "l-*-2430"
                                                               "l-*-2428"
                                                               "l-*-2426"
                                                               "l-*-2424"
                                                               "l-*-2421"
                                                               "l-*-2419"
                                                               "l-*-2418"
                                                               "l-*-2416"
                                                               "l-*-2414"
                                                               "l-*-2412"
                                                               "l-*-2410"
                                                               "l-*-2409"
                                                               "l-*-2408"
                                                               "l-*-2407"
                                                               "l-*-2405"
                                                               "l-*-2404"
                                                               "l-*-2401"
                                                               "l-*-2399"
                                                               "l-*-2397"
                                                               "l-*-2395"
                                                               "l-*-2393"
                                                               "l-*-2391"
                                                               "l-*-2389"
                                                               "l-*-2388"
                                                               "l-*-2387"
                                                               "l-*-2385"
                                                               "l-*-2383"
                                                               "l-*-2382"
                                                               "l-*-2379"
                                                               "l-*-2378"
                                                               "l-*-2376"
                                                               "l-*-2374"
                                                               "l-*-2372"
                                                               "l-*-2370"
                                                               "l-*-2368"
                                                               "l-*-2366"
                                                               "l-*-2364"
                                                               "l-*-2362"
                                                               "l-*-2360"
                                                               "l-*-2357"
                                                               "l-*-2355"
                                                               "l-*-2353"
                                                               "l-*-2351"
                                                               "l-*-2349"
                                                               "l-*-2347"
                                                               "l-*-2345"
                                                               "l-*-2343"
                                                               "l-*-2341"
                                                               "l-*-2339"
                                                               "l-*-2337"
                                                               "l-*-2335"
                                                               "l-*-2333"
                                                               "l-*-2331"
                                                               "l-*-2329"
                                                               "l-*-2327"
                                                               "l-*-2325"
                                                               "l-*-2323"
                                                               "l-*-2321"
                                                               "l-*-2319"
                                                               "l-*-2317"
                                                               "l-*-2315"
                                                               "l-*-2313"
                                                               "l-*-2311"
                                                               "l-*-2309"
                                                               "l-*-2307"
                                                               "l-*-2306"
                                                               "l-*-2305"
                                                               "l-*-2304"
                                                               "l-*-2303"
                                                               "l-*-2301"
                                                               "l-*-2299"
                                                               "l-*-2297"
                                                               "l-*-2294"
                                                               "l-*-2292"
                                                               "l-*-2290"
                                                               "l-*-2288"
                                                               "l-*-2286"
                                                               "l-*-2284"
                                                               "l-*-2282"
                                                               "l-*-2280"
                                                               "l-*-2278"
                                                               "l-*-2276"
                                                               "l-*-2274"
                                                               "l-*-2272"
                                                               "l-*-2270"
                                                               "l-*-2268"
                                                               "l-*-2266"
                                                               "l-*-2264"
                                                               "l-*-2262"
                                                               "l-*-2260"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-2098"
                                                               "l-*-2097"
                                                               "l-*-2096")))
                                                           (hygiene guile)))
                                                       '(())
                                                       s-22821
                                                       mod-22823))
                                                   tmp-23166)
                                                 (syntax-violation
                                                   #f
                                                   "source expression failed to match any pattern"
                                                   e-22818)))))))
                                     (if (eqv? ftype-22862 'define-syntax)
                                       (let ((tmp-23218
                                               ($sc-dispatch
                                                 e-22818
                                                 '(_ any any))))
                                         (if (if tmp-23218
                                               (@apply
                                                 (lambda (name-23222 val-23223)
                                                   (if (symbol? name-23222)
                                                     #t
                                                     (if (if (vector?
                                                               name-23222)
                                                           (if (= (vector-length
                                                                    name-23222)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    name-23222
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           name-23222
                                                           1))
                                                       #f)))
                                                 tmp-23218)
                                               #f)
                                           (@apply
                                             (lambda (name-23250 val-23251)
                                               (values
                                                 'define-syntax-form
                                                 name-23250
                                                 e-22818
                                                 val-23251
                                                 w-22820
                                                 s-22821
                                                 mod-22823))
                                             tmp-23218)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             e-22818)))
                                       (if (eqv? ftype-22862
                                                 'define-syntax-parameter)
                                         (let ((tmp-23262
                                                 ($sc-dispatch
                                                   e-22818
                                                   '(_ any any))))
                                           (if (if tmp-23262
                                                 (@apply
                                                   (lambda (name-23266
                                                            val-23267)
                                                     (if (symbol? name-23266)
                                                       #t
                                                       (if (if (vector?
                                                                 name-23266)
                                                             (if (= (vector-length
                                                                      name-23266)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      name-23266
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (symbol?
                                                           (vector-ref
                                                             name-23266
                                                             1))
                                                         #f)))
                                                   tmp-23262)
                                                 #f)
                                             (@apply
                                               (lambda (name-23294 val-23295)
                                                 (values
                                                   'define-syntax-parameter-form
                                                   name-23294
                                                   e-22818
                                                   val-23295
                                                   w-22820
                                                   s-22821
                                                   mod-22823))
                                               tmp-23262)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               e-22818)))
                                         (values
                                           'call
                                           #f
                                           e-22818
                                           e-22818
                                           w-22820
                                           s-22821
                                           mod-22823)))))))))))))))
             (if (if (vector? e-22818)
                   (if (= (vector-length e-22818) 4)
                     (eq? (vector-ref e-22818 0) 'syntax-object)
                     #f)
                   #f)
               (syntax-type-6584
                 (vector-ref e-22818 1)
                 r-22819
                 (join-wraps-6565 w-22820 (vector-ref e-22818 2))
                 (let ((t-23322 (source-annotation-6542 e-22818)))
                   (if t-23322 t-23322 s-22821))
                 rib-22822
                 (let ((t-23557 (vector-ref e-22818 3)))
                   (if t-23557 t-23557 mod-22823))
                 for-car?-22824)
               (if (self-evaluating? e-22818)
                 (values
                   'constant
                   #f
                   e-22818
                   e-22818
                   w-22820
                   s-22821
                   mod-22823)
                 (values
                   'other
                   #f
                   e-22818
                   e-22818
                   w-22820
                   s-22821
                   mod-22823)))))))
     (expand-6585
       (lambda (e-23566 r-23567 w-23568 mod-23569)
         (call-with-values
           (lambda ()
             (syntax-type-6584
               e-23566
               r-23567
               w-23568
               (source-annotation-6542 e-23566)
               #f
               mod-23569
               #f))
           (lambda (type-23724
                    value-23725
                    form-23726
                    e-23727
                    w-23728
                    s-23729
                    mod-23730)
             (expand-expr-6586
               type-23724
               value-23725
               form-23726
               e-23727
               r-23567
               w-23728
               s-23729
               mod-23730)))))
     (expand-expr-6586
       (lambda (type-23733
                value-23734
                form-23735
                e-23736
                r-23737
                w-23738
                s-23739
                mod-23740)
         (if (eqv? type-23733 'lexical)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 3)
             s-23739
             e-23736
             value-23734)
           (if (if (eqv? type-23733 'core)
                 #t
                 (eqv? type-23733 'core-form))
             (value-23734
               e-23736
               r-23737
               w-23738
               s-23739
               mod-23740)
             (if (eqv? type-23733 'module-ref)
               (call-with-values
                 (lambda () (value-23734 e-23736 r-23737 w-23738))
                 (lambda (e-23766 r-23767 w-23768 s-23769 mod-23770)
                   (expand-6585 e-23766 r-23767 w-23768 mod-23770)))
               (if (eqv? type-23733 'lexical-call)
                 (expand-application-6587
                   (let ((id-23845 (car e-23736)))
                     (build-lexical-reference-6519
                       'fun
                       (source-annotation-6542 id-23845)
                       (if (if (vector? id-23845)
                             (if (= (vector-length id-23845) 4)
                               (eq? (vector-ref id-23845 0) 'syntax-object)
                               #f)
                             #f)
                         (syntax->datum id-23845)
                         id-23845)
                       value-23734))
                   e-23736
                   r-23737
                   w-23738
                   s-23739
                   mod-23740)
                 (if (eqv? type-23733 'global-call)
                   (expand-application-6587
                     (build-global-reference-6522
                       (source-annotation-6542 (car e-23736))
                       (if (if (vector? value-23734)
                             (if (= (vector-length value-23734) 4)
                               (eq? (vector-ref value-23734 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref value-23734 1)
                         value-23734)
                       (if (if (vector? value-23734)
                             (if (= (vector-length value-23734) 4)
                               (eq? (vector-ref value-23734 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref value-23734 3)
                         mod-23740))
                     e-23736
                     r-23737
                     w-23738
                     s-23739
                     mod-23740)
                   (if (eqv? type-23733 'constant)
                     (let ((exp-24182
                             (strip-6598
                               (wrap-6578
                                 (begin
                                   (if (if (pair? e-23736) s-23739 #f)
                                     (set-source-properties! e-23736 s-23739))
                                   e-23736)
                                 w-23738
                                 mod-23740)
                               '(()))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         s-23739
                         exp-24182))
                     (if (eqv? type-23733 'global)
                       (analyze-variable-6521
                         mod-23740
                         value-23734
                         (lambda (mod-24218 var-24219 public?-24220)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             s-23739
                             mod-24218
                             var-24219
                             public?-24220))
                         (lambda (var-24229)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             s-23739
                             var-24229)))
                       (if (eqv? type-23733 'call)
                         (expand-application-6587
                           (expand-6585
                             (car e-23736)
                             r-23737
                             w-23738
                             mod-23740)
                           e-23736
                           r-23737
                           w-23738
                           s-23739
                           mod-23740)
                         (if (eqv? type-23733 'begin-form)
                           (let ((tmp-24304
                                   ($sc-dispatch e-23736 '(_ any . each-any))))
                             (if tmp-24304
                               (@apply
                                 (lambda (e1-24308 e2-24309)
                                   (expand-sequence-6580
                                     (cons e1-24308 e2-24309)
                                     r-23737
                                     w-23738
                                     s-23739
                                     mod-23740))
                                 tmp-24304)
                               (let ((tmp-24396 ($sc-dispatch e-23736 '(_))))
                                 (if tmp-24396
                                   (@apply
                                     (lambda ()
                                       (if (include-deprecated-features)
                                         (begin
                                           (issue-deprecation-warning
                                             "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))
                                         (syntax-violation
                                           #f
                                           "sequence of zero expressions"
                                           (wrap-6578
                                             (begin
                                               (if (if (pair? e-23736)
                                                     s-23739
                                                     #f)
                                                 (set-source-properties!
                                                   e-23736
                                                   s-23739))
                                               e-23736)
                                             w-23738
                                             mod-23740))))
                                     tmp-24396)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     e-23736)))))
                           (if (eqv? type-23733 'local-syntax-form)
                             (expand-local-syntax-6590
                               value-23734
                               e-23736
                               r-23737
                               w-23738
                               s-23739
                               mod-23740
                               expand-sequence-6580)
                             (if (eqv? type-23733 'eval-when-form)
                               (let ((tmp-24507
                                       ($sc-dispatch
                                         e-23736
                                         '(_ each-any any . each-any))))
                                 (if tmp-24507
                                   (@apply
                                     (lambda (x-24511 e1-24512 e2-24513)
                                       (let ((when-list-24514
                                               (parse-when-list-6583
                                                 e-23736
                                                 x-24511)))
                                         (if (memq 'eval when-list-24514)
                                           (expand-sequence-6580
                                             (cons e1-24512 e2-24513)
                                             r-23737
                                             w-23738
                                             s-23739
                                             mod-23740)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))))
                                     tmp-24507)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     e-23736)))
                               (if (if (eqv? type-23733 'define-form)
                                     #t
                                     (if (eqv? type-23733 'define-syntax-form)
                                       #t
                                       (eqv? type-23733
                                             'define-syntax-parameter-form)))
                                 (syntax-violation
                                   #f
                                   "definition in expression context, where definitions are not allowed,"
                                   (wrap-6578
                                     (begin
                                       (if (if (pair? form-23735) s-23739 #f)
                                         (set-source-properties!
                                           form-23735
                                           s-23739))
                                       form-23735)
                                     w-23738
                                     mod-23740))
                                 (if (eqv? type-23733 'syntax)
                                   (syntax-violation
                                     #f
                                     "reference to pattern variable outside syntax form"
                                     (wrap-6578
                                       (begin
                                         (if (if (pair? e-23736) s-23739 #f)
                                           (set-source-properties!
                                             e-23736
                                             s-23739))
                                         e-23736)
                                       w-23738
                                       mod-23740))
                                   (if (eqv? type-23733 'displaced-lexical)
                                     (syntax-violation
                                       #f
                                       "reference to identifier outside its scope"
                                       (wrap-6578
                                         (begin
                                           (if (if (pair? e-23736) s-23739 #f)
                                             (set-source-properties!
                                               e-23736
                                               s-23739))
                                           e-23736)
                                         w-23738
                                         mod-23740))
                                     (syntax-violation
                                       #f
                                       "unexpected syntax"
                                       (wrap-6578
                                         (begin
                                           (if (if (pair? e-23736) s-23739 #f)
                                             (set-source-properties!
                                               e-23736
                                               s-23739))
                                           e-23736)
                                         w-23738
                                         mod-23740))))))))))))))))))
     (expand-application-6587
       (lambda (x-24774
                e-24775
                r-24776
                w-24777
                s-24778
                mod-24779)
         (let ((tmp-24781
                 ($sc-dispatch e-24775 '(any . each-any))))
           (if tmp-24781
             (@apply
               (lambda (e0-24785 e1-24786)
                 (build-application-6516
                   s-24778
                   x-24774
                   (map (lambda (e-24866)
                          (expand-6585 e-24866 r-24776 w-24777 mod-24779))
                        e1-24786)))
               tmp-24781)
             (syntax-violation
               #f
               "source expression failed to match any pattern"
               e-24775)))))
     (expand-macro-6588
       (lambda (p-24942
                e-24943
                r-24944
                w-24945
                s-24946
                rib-24947
                mod-24948)
         (letrec*
           ((rebuild-macro-output-24949
              (lambda (x-24982 m-24983)
                (if (pair? x-24982)
                  (let ((e-24987
                          (cons (rebuild-macro-output-24949
                                  (car x-24982)
                                  m-24983)
                                (rebuild-macro-output-24949
                                  (cdr x-24982)
                                  m-24983))))
                    (begin
                      (if (if (pair? e-24987) s-24946 #f)
                        (set-source-properties! e-24987 s-24946))
                      e-24987))
                  (if (if (vector? x-24982)
                        (if (= (vector-length x-24982) 4)
                          (eq? (vector-ref x-24982 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((w-25003 (vector-ref x-24982 2)))
                      (let ((ms-25004 (car w-25003))
                            (s-25005 (cdr w-25003)))
                        (if (if (pair? ms-25004) (eq? (car ms-25004) #f) #f)
                          (let ((expression-25013 (vector-ref x-24982 1))
                                (wrap-25014
                                  (cons (cdr ms-25004)
                                        (if rib-24947
                                          (cons rib-24947 (cdr s-25005))
                                          (cdr s-25005))))
                                (module-25015 (vector-ref x-24982 3)))
                            (vector
                              'syntax-object
                              expression-25013
                              wrap-25014
                              module-25015))
                          (let ((expression-25025
                                  (let ((e-25030 (vector-ref x-24982 1)))
                                    (begin
                                      (if (if (pair? e-25030) s-25005 #f)
                                        (set-source-properties!
                                          e-25030
                                          s-25005))
                                      e-25030)))
                                (wrap-25026
                                  (cons (cons m-24983 ms-25004)
                                        (if rib-24947
                                          (cons rib-24947
                                                (cons 'shift s-25005))
                                          (cons 'shift s-25005))))
                                (module-25027 (vector-ref x-24982 3)))
                            (vector
                              'syntax-object
                              expression-25025
                              wrap-25026
                              module-25027)))))
                    (if (vector? x-24982)
                      (let ((n-25042 (vector-length x-24982)))
                        (let ((v-25043
                                (let ((e-25051 (make-vector n-25042)))
                                  (begin
                                    (if (if (pair? e-25051) x-24982 #f)
                                      (set-source-properties! e-25051 x-24982))
                                    e-25051))))
                          (letrec*
                            ((loop-25044
                               (lambda (i-25096)
                                 (if (= i-25096 n-25042)
                                   v-25043
                                   (begin
                                     (vector-set!
                                       v-25043
                                       i-25096
                                       (rebuild-macro-output-24949
                                         (vector-ref x-24982 i-25096)
                                         m-24983))
                                     (loop-25044 (#{1+}# i-25096)))))))
                            (loop-25044 0))))
                      (if (symbol? x-24982)
                        (syntax-violation
                          #f
                          "encountered raw symbol in macro output"
                          (let ((s-25102 (cdr w-24945)))
                            (wrap-6578
                              (begin
                                (if (if (pair? e-24943) s-25102 #f)
                                  (set-source-properties! e-24943 s-25102))
                                e-24943)
                              w-24945
                              mod-24948))
                          x-24982)
                        (begin
                          (if (if (pair? x-24982) s-24946 #f)
                            (set-source-properties! x-24982 s-24946))
                          x-24982))))))))
           (with-fluids
             ((transformer-environment-6571
                (lambda (k-24950)
                  (k-24950
                    e-24943
                    r-24944
                    w-24945
                    s-24946
                    rib-24947
                    mod-24948))))
             (rebuild-macro-output-24949
               (p-24942
                 (let ((w-24957
                         (cons (cons #f (car w-24945))
                               (cons 'shift (cdr w-24945)))))
                   (wrap-6578
                     (begin
                       (if (if (pair? e-24943) s-24946 #f)
                         (set-source-properties! e-24943 s-24946))
                       e-24943)
                     w-24957
                     mod-24948)))
               (gensym
                 (string-append "m-" (session-id-6510) "-")))))))
     (expand-body-6589
       (lambda (body-25134
                outer-form-25135
                r-25136
                w-25137
                mod-25138)
         (let ((r-25139
                 (cons '("placeholder" placeholder) r-25136)))
           (let ((ribcage-25140 (vector 'ribcage '() '() '())))
             (let ((w-25141
                     (cons (car w-25137)
                           (cons ribcage-25140 (cdr w-25137)))))
               (letrec*
                 ((parse-25142
                    (lambda (body-25155
                             ids-25156
                             labels-25157
                             var-ids-25158
                             vars-25159
                             vals-25160
                             bindings-25161)
                      (if (null? body-25155)
                        (syntax-violation
                          #f
                          "no expressions in body"
                          outer-form-25135)
                        (let ((e-25162 (cdr (car body-25155)))
                              (er-25163 (car (car body-25155))))
                          (call-with-values
                            (lambda ()
                              (syntax-type-6584
                                e-25162
                                er-25163
                                '(())
                                (source-annotation-6542 er-25163)
                                ribcage-25140
                                mod-25138
                                #f))
                            (lambda (type-25320
                                     value-25321
                                     form-25322
                                     e-25323
                                     w-25324
                                     s-25325
                                     mod-25326)
                              (if (eqv? type-25320 'define-form)
                                (let ((id-25330
                                        (wrap-6578
                                          value-25321
                                          w-25324
                                          mod-25326))
                                      (label-25331
                                        (string-append
                                          "l-"
                                          (session-id-6510)
                                          (symbol->string (gensym "-")))))
                                  (let ((var-25332
                                          (let ((id-25392
                                                  (if (if (vector? id-25330)
                                                        (if (= (vector-length
                                                                 id-25330)
                                                               4)
                                                          (eq? (vector-ref
                                                                 id-25330
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref id-25330 1)
                                                    id-25330)))
                                            (gensym
                                              (string-append
                                                (symbol->string id-25392)
                                                "-")))))
                                    (begin
                                      (let ((update-25382
                                              (cons (vector-ref id-25330 1)
                                                    (vector-ref
                                                      ribcage-25140
                                                      1))))
                                        (vector-set!
                                          ribcage-25140
                                          1
                                          update-25382))
                                      (let ((update-25384
                                              (cons (car (vector-ref
                                                           id-25330
                                                           2))
                                                    (vector-ref
                                                      ribcage-25140
                                                      2))))
                                        (vector-set!
                                          ribcage-25140
                                          2
                                          update-25384))
                                      (let ((update-25386
                                              (cons label-25331
                                                    (vector-ref
                                                      ribcage-25140
                                                      3))))
                                        (vector-set!
                                          ribcage-25140
                                          3
                                          update-25386))
                                      (parse-25142
                                        (cdr body-25155)
                                        (cons id-25330 ids-25156)
                                        (cons label-25331 labels-25157)
                                        (cons id-25330 var-ids-25158)
                                        (cons var-25332 vars-25159)
                                        (cons (cons er-25163
                                                    (wrap-6578
                                                      e-25323
                                                      w-25324
                                                      mod-25326))
                                              vals-25160)
                                        (cons (cons 'lexical var-25332)
                                              bindings-25161)))))
                                (if (if (eqv? type-25320 'define-syntax-form)
                                      #t
                                      (eqv? type-25320
                                            'define-syntax-parameter-form))
                                  (let ((id-25425
                                          (wrap-6578
                                            value-25321
                                            w-25324
                                            mod-25326))
                                        (label-25426
                                          (string-append
                                            "l-"
                                            (session-id-6510)
                                            (symbol->string (gensym "-")))))
                                    (begin
                                      (let ((update-25476
                                              (cons (vector-ref id-25425 1)
                                                    (vector-ref
                                                      ribcage-25140
                                                      1))))
                                        (vector-set!
                                          ribcage-25140
                                          1
                                          update-25476))
                                      (let ((update-25478
                                              (cons (car (vector-ref
                                                           id-25425
                                                           2))
                                                    (vector-ref
                                                      ribcage-25140
                                                      2))))
                                        (vector-set!
                                          ribcage-25140
                                          2
                                          update-25478))
                                      (let ((update-25480
                                              (cons label-25426
                                                    (vector-ref
                                                      ribcage-25140
                                                      3))))
                                        (vector-set!
                                          ribcage-25140
                                          3
                                          update-25480))
                                      (parse-25142
                                        (cdr body-25155)
                                        (cons id-25425 ids-25156)
                                        (cons label-25426 labels-25157)
                                        var-ids-25158
                                        vars-25159
                                        vals-25160
                                        (cons (cons 'macro
                                                    (cons er-25163
                                                          (wrap-6578
                                                            e-25323
                                                            w-25324
                                                            mod-25326)))
                                              bindings-25161))))
                                  (if (eqv? type-25320 'begin-form)
                                    (let ((tmp-25488
                                            ($sc-dispatch
                                              e-25323
                                              '(_ . each-any))))
                                      (if tmp-25488
                                        (@apply
                                          (lambda (e1-25492)
                                            (parse-25142
                                              (letrec*
                                                ((f-25493
                                                   (lambda (forms-25556)
                                                     (if (null? forms-25556)
                                                       (cdr body-25155)
                                                       (cons (cons er-25163
                                                                   (wrap-6578
                                                                     (car forms-25556)
                                                                     w-25324
                                                                     mod-25326))
                                                             (f-25493
                                                               (cdr forms-25556)))))))
                                                (f-25493 e1-25492))
                                              ids-25156
                                              labels-25157
                                              var-ids-25158
                                              vars-25159
                                              vals-25160
                                              bindings-25161))
                                          tmp-25488)
                                        (syntax-violation
                                          #f
                                          "source expression failed to match any pattern"
                                          e-25323)))
                                    (if (eqv? type-25320 'local-syntax-form)
                                      (expand-local-syntax-6590
                                        value-25321
                                        e-25323
                                        er-25163
                                        w-25324
                                        s-25325
                                        mod-25326
                                        (lambda (forms-25570
                                                 er-25571
                                                 w-25572
                                                 s-25573
                                                 mod-25574)
                                          (parse-25142
                                            (letrec*
                                              ((f-25575
                                                 (lambda (forms-25638)
                                                   (if (null? forms-25638)
                                                     (cdr body-25155)
                                                     (cons (cons er-25571
                                                                 (wrap-6578
                                                                   (car forms-25638)
                                                                   w-25572
                                                                   mod-25574))
                                                           (f-25575
                                                             (cdr forms-25638)))))))
                                              (f-25575 forms-25570))
                                            ids-25156
                                            labels-25157
                                            var-ids-25158
                                            vars-25159
                                            vals-25160
                                            bindings-25161)))
                                      (if (null? ids-25156)
                                        (build-sequence-6530
                                          #f
                                          (map (lambda (x-25703)
                                                 (let ((e-25707 (cdr x-25703))
                                                       (r-25708 (car x-25703)))
                                                   (call-with-values
                                                     (lambda ()
                                                       (syntax-type-6584
                                                         e-25707
                                                         r-25708
                                                         '(())
                                                         (source-annotation-6542
                                                           e-25707)
                                                         #f
                                                         mod-25326
                                                         #f))
                                                     (lambda (type-25712
                                                              value-25713
                                                              form-25714
                                                              e-25715
                                                              w-25716
                                                              s-25717
                                                              mod-25718)
                                                       (expand-expr-6586
                                                         type-25712
                                                         value-25713
                                                         form-25714
                                                         e-25715
                                                         r-25708
                                                         w-25716
                                                         s-25717
                                                         mod-25718)))))
                                               (cons (cons er-25163
                                                           (wrap-6578
                                                             (begin
                                                               (if (if (pair? e-25323)
                                                                     s-25325
                                                                     #f)
                                                                 (set-source-properties!
                                                                   e-25323
                                                                   s-25325))
                                                               e-25323)
                                                             w-25324
                                                             mod-25326))
                                                     (cdr body-25155))))
                                        (begin
                                          (if (not (valid-bound-ids?-6575
                                                     ids-25156))
                                            (syntax-violation
                                              #f
                                              "invalid or duplicate identifier in definition"
                                              outer-form-25135))
                                          (letrec*
                                            ((loop-25819
                                               (lambda (bs-25822
                                                        er-cache-25823
                                                        r-cache-25824)
                                                 (if (not (null? bs-25822))
                                                   (let ((b-25825
                                                           (car bs-25822)))
                                                     (if (eq? (car b-25825)
                                                              'macro)
                                                       (let ((er-25827
                                                               (car (cdr b-25825))))
                                                         (let ((r-cache-25828
                                                                 (if (eq? er-25827
                                                                          er-cache-25823)
                                                                   r-cache-25824
                                                                   (macros-only-env-6545
                                                                     er-25827))))
                                                           (begin
                                                             (set-cdr!
                                                               b-25825
                                                               (eval-local-transformer-6591
                                                                 (expand-6585
                                                                   (cdr (cdr b-25825))
                                                                   r-cache-25828
                                                                   '(())
                                                                   mod-25326)
                                                                 mod-25326))
                                                             (loop-25819
                                                               (cdr bs-25822)
                                                               er-25827
                                                               r-cache-25828))))
                                                       (loop-25819
                                                         (cdr bs-25822)
                                                         er-cache-25823
                                                         r-cache-25824)))))))
                                            (loop-25819 bindings-25161 #f #f))
                                          (set-cdr!
                                            r-25139
                                            (extend-env-6543
                                              labels-25157
                                              bindings-25161
                                              (cdr r-25139)))
                                          (build-letrec-6533
                                            #f
                                            #t
                                            (reverse
                                              (map syntax->datum
                                                   var-ids-25158))
                                            (reverse vars-25159)
                                            (map (lambda (x-26171)
                                                   (let ((e-26175
                                                           (cdr x-26171))
                                                         (r-26176
                                                           (car x-26171)))
                                                     (call-with-values
                                                       (lambda ()
                                                         (syntax-type-6584
                                                           e-26175
                                                           r-26176
                                                           '(())
                                                           (source-annotation-6542
                                                             e-26175)
                                                           #f
                                                           mod-25326
                                                           #f))
                                                       (lambda (type-26180
                                                                value-26181
                                                                form-26182
                                                                e-26183
                                                                w-26184
                                                                s-26185
                                                                mod-26186)
                                                         (expand-expr-6586
                                                           type-26180
                                                           value-26181
                                                           form-26182
                                                           e-26183
                                                           r-26176
                                                           w-26184
                                                           s-26185
                                                           mod-26186)))))
                                                 (reverse vals-25160))
                                            (let ((exps-26192
                                                    (map (lambda (x-26193)
                                                           (let ((e-26196
                                                                   (cdr x-26193))
                                                                 (r-26197
                                                                   (car x-26193)))
                                                             (call-with-values
                                                               (lambda ()
                                                                 (syntax-type-6584
                                                                   e-26196
                                                                   r-26197
                                                                   '(())
                                                                   (source-annotation-6542
                                                                     e-26196)
                                                                   #f
                                                                   mod-25326
                                                                   #f))
                                                               (lambda (type-26201
                                                                        value-26202
                                                                        form-26203
                                                                        e-26204
                                                                        w-26205
                                                                        s-26206
                                                                        mod-26207)
                                                                 (expand-expr-6586
                                                                   type-26201
                                                                   value-26202
                                                                   form-26203
                                                                   e-26204
                                                                   r-26197
                                                                   w-26205
                                                                   s-26206
                                                                   mod-26207)))))
                                                         (cons (cons er-25163
                                                                     (wrap-6578
                                                                       (begin
                                                                         (if (if (pair? e-25323)
                                                                               s-25325
                                                                               #f)
                                                                           (set-source-properties!
                                                                             e-25323
                                                                             s-25325))
                                                                         e-25323)
                                                                       w-25324
                                                                       mod-25326))
                                                               (cdr body-25155)))))
                                              (if (null? (cdr exps-26192))
                                                (car exps-26192)
                                                (make-struct/no-tail
                                                  (vector-ref
                                                    %expanded-vtables
                                                    12)
                                                  #f
                                                  exps-26192)))))))))))))))))
                 (parse-25142
                   (map (lambda (x-25145)
                          (cons r-25139
                                (wrap-6578 x-25145 w-25141 mod-25138)))
                        body-25134)
                   '()
                   '()
                   '()
                   '()
                   '()
                   '())))))))
     (expand-local-syntax-6590
       (lambda (rec?-26233
                e-26234
                r-26235
                w-26236
                s-26237
                mod-26238
                k-26239)
         (let ((tmp-26241
                 ($sc-dispatch
                   e-26234
                   '(_ #(each (any any)) any . each-any))))
           (if tmp-26241
             (@apply
               (lambda (id-26245 val-26246 e1-26247 e2-26248)
                 (if (not (valid-bound-ids?-6575 id-26245))
                   (syntax-violation
                     #f
                     "duplicate bound keyword"
                     e-26234)
                   (let ((labels-26338 (gen-labels-6552 id-26245)))
                     (let ((new-w-26339
                             (make-binding-wrap-6563
                               id-26245
                               labels-26338
                               w-26236)))
                       (k-26239
                         (cons e1-26247 e2-26248)
                         (extend-env-6543
                           labels-26338
                           (let ((trans-r-26375
                                   (macros-only-env-6545 r-26235)))
                             (begin
                               (if rec?-26233 new-w-26339 w-26236)
                               (map (lambda (x-26376)
                                      (cons 'macro
                                            (eval-local-transformer-6591
                                              (expand-6585
                                                x-26376
                                                trans-r-26375
                                                (values
                                                  (if rec?-26233
                                                    new-w-26339
                                                    w-26236))
                                                mod-26238)
                                              mod-26238)))
                                    val-26246)))
                           r-26235)
                         new-w-26339
                         s-26237
                         mod-26238)))))
               tmp-26241)
             (syntax-violation
               #f
               "bad local syntax definition"
               (wrap-6578
                 (begin
                   (if (if (pair? e-26234) s-26237 #f)
                     (set-source-properties! e-26234 s-26237))
                   e-26234)
                 w-26236
                 mod-26238))))))
     (eval-local-transformer-6591
       (lambda (expanded-26656 mod-26657)
         (let ((p-26658 (primitive-eval expanded-26656)))
           (if (procedure? p-26658)
             p-26658
             (syntax-violation
               #f
               "nonprocedure transformer"
               p-26658)))))
     (ellipsis?-6593
       (lambda (x-7254)
         (if (if (if (vector? x-7254)
                   (if (= (vector-length x-7254) 4)
                     (eq? (vector-ref x-7254 0) 'syntax-object)
                     #f)
                   #f)
               (symbol? (vector-ref x-7254 1))
               #f)
           (if (eq? (if (if (vector? x-7254)
                          (if (= (vector-length x-7254) 4)
                            (eq? (vector-ref x-7254 0) 'syntax-object)
                            #f)
                          #f)
                      (vector-ref x-7254 1)
                      x-7254)
                    (if (if (= (vector-length
                                 '#(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-4404"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-application
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         with-transformer-environment
                                         transformer-environment
                                         resolve-identifier
                                         locally-bound-identifiers
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-application
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         session-id
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-sequence
                                         make-application
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-2527"
                                        "l-*-2525"
                                        "l-*-2523"
                                        "l-*-2521"
                                        "l-*-2519"
                                        "l-*-2517"
                                        "l-*-2515"
                                        "l-*-2513"
                                        "l-*-2511"
                                        "l-*-2509"
                                        "l-*-2507"
                                        "l-*-2505"
                                        "l-*-2503"
                                        "l-*-2501"
                                        "l-*-2499"
                                        "l-*-2497"
                                        "l-*-2495"
                                        "l-*-2493"
                                        "l-*-2491"
                                        "l-*-2489"
                                        "l-*-2487"
                                        "l-*-2485"
                                        "l-*-2483"
                                        "l-*-2481"
                                        "l-*-2479"
                                        "l-*-2477"
                                        "l-*-2475"
                                        "l-*-2473"
                                        "l-*-2471"
                                        "l-*-2469"
                                        "l-*-2467"
                                        "l-*-2465"
                                        "l-*-2463"
                                        "l-*-2461"
                                        "l-*-2459"
                                        "l-*-2457"
                                        "l-*-2455"
                                        "l-*-2453"
                                        "l-*-2451"
                                        "l-*-2450"
                                        "l-*-2448"
                                        "l-*-2445"
                                        "l-*-2444"
                                        "l-*-2443"
                                        "l-*-2441"
                                        "l-*-2440"
                                        "l-*-2438"
                                        "l-*-2436"
                                        "l-*-2434"
                                        "l-*-2432"
                                        "l-*-2430"
                                        "l-*-2428"
                                        "l-*-2426"
                                        "l-*-2424"
                                        "l-*-2421"
                                        "l-*-2419"
                                        "l-*-2418"
                                        "l-*-2416"
                                        "l-*-2414"
                                        "l-*-2412"
                                        "l-*-2410"
                                        "l-*-2409"
                                        "l-*-2408"
                                        "l-*-2407"
                                        "l-*-2405"
                                        "l-*-2404"
                                        "l-*-2401"
                                        "l-*-2399"
                                        "l-*-2397"
                                        "l-*-2395"
                                        "l-*-2393"
                                        "l-*-2391"
                                        "l-*-2389"
                                        "l-*-2388"
                                        "l-*-2387"
                                        "l-*-2385"
                                        "l-*-2383"
                                        "l-*-2382"
                                        "l-*-2379"
                                        "l-*-2378"
                                        "l-*-2376"
                                        "l-*-2374"
                                        "l-*-2372"
                                        "l-*-2370"
                                        "l-*-2368"
                                        "l-*-2366"
                                        "l-*-2364"
                                        "l-*-2362"
                                        "l-*-2360"
                                        "l-*-2357"
                                        "l-*-2355"
                                        "l-*-2353"
                                        "l-*-2351"
                                        "l-*-2349"
                                        "l-*-2347"
                                        "l-*-2345"
                                        "l-*-2343"
                                        "l-*-2341"
                                        "l-*-2339"
                                        "l-*-2337"
                                        "l-*-2335"
                                        "l-*-2333"
                                        "l-*-2331"
                                        "l-*-2329"
                                        "l-*-2327"
                                        "l-*-2325"
                                        "l-*-2323"
                                        "l-*-2321"
                                        "l-*-2319"
                                        "l-*-2317"
                                        "l-*-2315"
                                        "l-*-2313"
                                        "l-*-2311"
                                        "l-*-2309"
                                        "l-*-2307"
                                        "l-*-2306"
                                        "l-*-2305"
                                        "l-*-2304"
                                        "l-*-2303"
                                        "l-*-2301"
                                        "l-*-2299"
                                        "l-*-2297"
                                        "l-*-2294"
                                        "l-*-2292"
                                        "l-*-2290"
                                        "l-*-2288"
                                        "l-*-2286"
                                        "l-*-2284"
                                        "l-*-2282"
                                        "l-*-2280"
                                        "l-*-2278"
                                        "l-*-2276"
                                        "l-*-2274"
                                        "l-*-2272"
                                        "l-*-2270"
                                        "l-*-2268"
                                        "l-*-2266"
                                        "l-*-2264"
                                        "l-*-2262"
                                        "l-*-2260"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("l-*-2098" "l-*-2097" "l-*-2096")))
                                    (hygiene guile)))
                               4)
                          #t
                          #f)
                      '...
                      '#(syntax-object
                         ...
                         ((top)
                          #(ribcage () () ())
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("l-*-4404"))
                          #(ribcage
                            (lambda-var-list
                              gen-var
                              strip
                              expand-lambda-case
                              lambda*-formals
                              expand-simple-lambda
                              lambda-formals
                              ellipsis?
                              expand-void
                              eval-local-transformer
                              expand-local-syntax
                              expand-body
                              expand-macro
                              expand-application
                              expand-expr
                              expand
                              syntax-type
                              parse-when-list
                              expand-install-global
                              expand-top-sequence
                              expand-sequence
                              source-wrap
                              wrap
                              bound-id-member?
                              distinct-bound-ids?
                              valid-bound-ids?
                              bound-id=?
                              free-id=?
                              with-transformer-environment
                              transformer-environment
                              resolve-identifier
                              locally-bound-identifiers
                              id-var-name
                              same-marks?
                              join-marks
                              join-wraps
                              smart-append
                              make-binding-wrap
                              extend-ribcage!
                              make-empty-ribcage
                              new-mark
                              anti-mark
                              the-anti-mark
                              top-marked?
                              top-wrap
                              empty-wrap
                              set-ribcage-labels!
                              set-ribcage-marks!
                              set-ribcage-symnames!
                              ribcage-labels
                              ribcage-marks
                              ribcage-symnames
                              ribcage?
                              make-ribcage
                              gen-labels
                              gen-label
                              make-rename
                              rename-marks
                              rename-new
                              rename-old
                              subst-rename?
                              wrap-subst
                              wrap-marks
                              make-wrap
                              id-sym-name&marks
                              id-sym-name
                              id?
                              nonsymbol-id?
                              global-extend
                              lookup
                              macros-only-env
                              extend-var-env
                              extend-env
                              null-env
                              binding-value
                              binding-type
                              make-binding
                              arg-check
                              source-annotation
                              no-source
                              set-syntax-object-module!
                              set-syntax-object-wrap!
                              set-syntax-object-expression!
                              syntax-object-module
                              syntax-object-wrap
                              syntax-object-expression
                              syntax-object?
                              make-syntax-object
                              build-lexical-var
                              build-letrec
                              build-named-let
                              build-let
                              build-sequence
                              build-data
                              build-primref
                              build-lambda-case
                              build-case-lambda
                              build-simple-lambda
                              build-global-definition
                              build-global-assignment
                              build-global-reference
                              analyze-variable
                              build-lexical-assignment
                              build-lexical-reference
                              build-dynlet
                              build-conditional
                              build-application
                              build-void
                              maybe-name-value!
                              decorate-source
                              get-global-definition-hook
                              put-global-definition-hook
                              session-id
                              local-eval-hook
                              top-level-eval-hook
                              fx<
                              fx=
                              fx-
                              fx+
                              set-lambda-meta!
                              lambda-meta
                              lambda?
                              make-dynlet
                              make-letrec
                              make-let
                              make-lambda-case
                              make-lambda
                              make-sequence
                              make-application
                              make-conditional
                              make-toplevel-define
                              make-toplevel-set
                              make-toplevel-ref
                              make-module-set
                              make-module-ref
                              make-lexical-set
                              make-lexical-ref
                              make-primitive-ref
                              make-const
                              make-void)
                            ((top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top))
                            ("l-*-2527"
                             "l-*-2525"
                             "l-*-2523"
                             "l-*-2521"
                             "l-*-2519"
                             "l-*-2517"
                             "l-*-2515"
                             "l-*-2513"
                             "l-*-2511"
                             "l-*-2509"
                             "l-*-2507"
                             "l-*-2505"
                             "l-*-2503"
                             "l-*-2501"
                             "l-*-2499"
                             "l-*-2497"
                             "l-*-2495"
                             "l-*-2493"
                             "l-*-2491"
                             "l-*-2489"
                             "l-*-2487"
                             "l-*-2485"
                             "l-*-2483"
                             "l-*-2481"
                             "l-*-2479"
                             "l-*-2477"
                             "l-*-2475"
                             "l-*-2473"
                             "l-*-2471"
                             "l-*-2469"
                             "l-*-2467"
                             "l-*-2465"
                             "l-*-2463"
                             "l-*-2461"
                             "l-*-2459"
                             "l-*-2457"
                             "l-*-2455"
                             "l-*-2453"
                             "l-*-2451"
                             "l-*-2450"
                             "l-*-2448"
                             "l-*-2445"
                             "l-*-2444"
                             "l-*-2443"
                             "l-*-2441"
                             "l-*-2440"
                             "l-*-2438"
                             "l-*-2436"
                             "l-*-2434"
                             "l-*-2432"
                             "l-*-2430"
                             "l-*-2428"
                             "l-*-2426"
                             "l-*-2424"
                             "l-*-2421"
                             "l-*-2419"
                             "l-*-2418"
                             "l-*-2416"
                             "l-*-2414"
                             "l-*-2412"
                             "l-*-2410"
                             "l-*-2409"
                             "l-*-2408"
                             "l-*-2407"
                             "l-*-2405"
                             "l-*-2404"
                             "l-*-2401"
                             "l-*-2399"
                             "l-*-2397"
                             "l-*-2395"
                             "l-*-2393"
                             "l-*-2391"
                             "l-*-2389"
                             "l-*-2388"
                             "l-*-2387"
                             "l-*-2385"
                             "l-*-2383"
                             "l-*-2382"
                             "l-*-2379"
                             "l-*-2378"
                             "l-*-2376"
                             "l-*-2374"
                             "l-*-2372"
                             "l-*-2370"
                             "l-*-2368"
                             "l-*-2366"
                             "l-*-2364"
                             "l-*-2362"
                             "l-*-2360"
                             "l-*-2357"
                             "l-*-2355"
                             "l-*-2353"
                             "l-*-2351"
                             "l-*-2349"
                             "l-*-2347"
                             "l-*-2345"
                             "l-*-2343"
                             "l-*-2341"
                             "l-*-2339"
                             "l-*-2337"
                             "l-*-2335"
                             "l-*-2333"
                             "l-*-2331"
                             "l-*-2329"
                             "l-*-2327"
                             "l-*-2325"
                             "l-*-2323"
                             "l-*-2321"
                             "l-*-2319"
                             "l-*-2317"
                             "l-*-2315"
                             "l-*-2313"
                             "l-*-2311"
                             "l-*-2309"
                             "l-*-2307"
                             "l-*-2306"
                             "l-*-2305"
                             "l-*-2304"
                             "l-*-2303"
                             "l-*-2301"
                             "l-*-2299"
                             "l-*-2297"
                             "l-*-2294"
                             "l-*-2292"
                             "l-*-2290"
                             "l-*-2288"
                             "l-*-2286"
                             "l-*-2284"
                             "l-*-2282"
                             "l-*-2280"
                             "l-*-2278"
                             "l-*-2276"
                             "l-*-2274"
                             "l-*-2272"
                             "l-*-2270"
                             "l-*-2268"
                             "l-*-2266"
                             "l-*-2264"
                             "l-*-2262"
                             "l-*-2260"))
                          #(ribcage
                            (define-structure
                              define-expansion-accessors
                              define-expansion-constructors)
                            ((top) (top) (top))
                            ("l-*-2098" "l-*-2097" "l-*-2096")))
                         (hygiene guile))))
             (eq? (id-var-name-6568 x-7254 '(()))
                  (id-var-name-6568
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-4404"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            with-transformer-environment
                            transformer-environment
                            resolve-identifier
                            locally-bound-identifiers
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            session-id
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("l-*-2527"
                           "l-*-2525"
                           "l-*-2523"
                           "l-*-2521"
                           "l-*-2519"
                           "l-*-2517"
                           "l-*-2515"
                           "l-*-2513"
                           "l-*-2511"
                           "l-*-2509"
                           "l-*-2507"
                           "l-*-2505"
                           "l-*-2503"
                           "l-*-2501"
                           "l-*-2499"
                           "l-*-2497"
                           "l-*-2495"
                           "l-*-2493"
                           "l-*-2491"
                           "l-*-2489"
                           "l-*-2487"
                           "l-*-2485"
                           "l-*-2483"
                           "l-*-2481"
                           "l-*-2479"
                           "l-*-2477"
                           "l-*-2475"
                           "l-*-2473"
                           "l-*-2471"
                           "l-*-2469"
                           "l-*-2467"
                           "l-*-2465"
                           "l-*-2463"
                           "l-*-2461"
                           "l-*-2459"
                           "l-*-2457"
                           "l-*-2455"
                           "l-*-2453"
                           "l-*-2451"
                           "l-*-2450"
                           "l-*-2448"
                           "l-*-2445"
                           "l-*-2444"
                           "l-*-2443"
                           "l-*-2441"
                           "l-*-2440"
                           "l-*-2438"
                           "l-*-2436"
                           "l-*-2434"
                           "l-*-2432"
                           "l-*-2430"
                           "l-*-2428"
                           "l-*-2426"
                           "l-*-2424"
                           "l-*-2421"
                           "l-*-2419"
                           "l-*-2418"
                           "l-*-2416"
                           "l-*-2414"
                           "l-*-2412"
                           "l-*-2410"
                           "l-*-2409"
                           "l-*-2408"
                           "l-*-2407"
                           "l-*-2405"
                           "l-*-2404"
                           "l-*-2401"
                           "l-*-2399"
                           "l-*-2397"
                           "l-*-2395"
                           "l-*-2393"
                           "l-*-2391"
                           "l-*-2389"
                           "l-*-2388"
                           "l-*-2387"
                           "l-*-2385"
                           "l-*-2383"
                           "l-*-2382"
                           "l-*-2379"
                           "l-*-2378"
                           "l-*-2376"
                           "l-*-2374"
                           "l-*-2372"
                           "l-*-2370"
                           "l-*-2368"
                           "l-*-2366"
                           "l-*-2364"
                           "l-*-2362"
                           "l-*-2360"
                           "l-*-2357"
                           "l-*-2355"
                           "l-*-2353"
                           "l-*-2351"
                           "l-*-2349"
                           "l-*-2347"
                           "l-*-2345"
                           "l-*-2343"
                           "l-*-2341"
                           "l-*-2339"
                           "l-*-2337"
                           "l-*-2335"
                           "l-*-2333"
                           "l-*-2331"
                           "l-*-2329"
                           "l-*-2327"
                           "l-*-2325"
                           "l-*-2323"
                           "l-*-2321"
                           "l-*-2319"
                           "l-*-2317"
                           "l-*-2315"
                           "l-*-2313"
                           "l-*-2311"
                           "l-*-2309"
                           "l-*-2307"
                           "l-*-2306"
                           "l-*-2305"
                           "l-*-2304"
                           "l-*-2303"
                           "l-*-2301"
                           "l-*-2299"
                           "l-*-2297"
                           "l-*-2294"
                           "l-*-2292"
                           "l-*-2290"
                           "l-*-2288"
                           "l-*-2286"
                           "l-*-2284"
                           "l-*-2282"
                           "l-*-2280"
                           "l-*-2278"
                           "l-*-2276"
                           "l-*-2274"
                           "l-*-2272"
                           "l-*-2270"
                           "l-*-2268"
                           "l-*-2266"
                           "l-*-2264"
                           "l-*-2262"
                           "l-*-2260"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("l-*-2098" "l-*-2097" "l-*-2096")))
                       (hygiene guile))
                    '(())))
             #f)
           #f)))
     (lambda-formals-6594
       (lambda (orig-args-26663)
         (letrec*
           ((req-26664
              (lambda (args-26668 rreq-26669)
                (let ((tmp-26671 ($sc-dispatch args-26668 '())))
                  (if tmp-26671
                    (@apply
                      (lambda () (check-26665 (reverse rreq-26669) #f))
                      tmp-26671)
                    (let ((tmp-26794
                            ($sc-dispatch args-26668 '(any . any))))
                      (if (if tmp-26794
                            (@apply
                              (lambda (a-26798 b-26799)
                                (if (symbol? a-26798)
                                  #t
                                  (if (if (vector? a-26798)
                                        (if (= (vector-length a-26798) 4)
                                          (eq? (vector-ref a-26798 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-26798 1))
                                    #f)))
                              tmp-26794)
                            #f)
                        (@apply
                          (lambda (a-26826 b-26827)
                            (req-26664 b-26827 (cons a-26826 rreq-26669)))
                          tmp-26794)
                        (let ((tmp-26828 (list args-26668)))
                          (if (@apply
                                (lambda (r-26830)
                                  (if (symbol? r-26830)
                                    #t
                                    (if (if (vector? r-26830)
                                          (if (= (vector-length r-26830) 4)
                                            (eq? (vector-ref r-26830 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref r-26830 1))
                                      #f)))
                                tmp-26828)
                            (@apply
                              (lambda (r-26860)
                                (check-26665 (reverse rreq-26669) r-26860))
                              tmp-26828)
                            (syntax-violation
                              'lambda
                              "invalid argument list"
                              orig-args-26663
                              args-26668)))))))))
            (check-26665
              (lambda (req-26991 rest-26992)
                (if (distinct-bound-ids?-6576
                      (if rest-26992
                        (cons rest-26992 req-26991)
                        req-26991))
                  (values req-26991 #f rest-26992 #f)
                  (syntax-violation
                    'lambda
                    "duplicate identifier in argument list"
                    orig-args-26663)))))
           (req-26664 orig-args-26663 '()))))
     (expand-simple-lambda-6595
       (lambda (e-27108
                r-27109
                w-27110
                s-27111
                mod-27112
                req-27113
                rest-27114
                meta-27115
                body-27116)
         (let ((ids-27117
                 (if rest-27114
                   (append req-27113 (list rest-27114))
                   req-27113)))
           (let ((vars-27118 (map gen-var-6599 ids-27117)))
             (let ((labels-27119 (gen-labels-6552 ids-27117)))
               (build-simple-lambda-6525
                 s-27111
                 (map syntax->datum req-27113)
                 (if rest-27114 (syntax->datum rest-27114) #f)
                 vars-27118
                 meta-27115
                 (expand-body-6589
                   body-27116
                   (wrap-6578
                     (begin
                       (if (if (pair? e-27108) s-27111 #f)
                         (set-source-properties! e-27108 s-27111))
                       e-27108)
                     w-27110
                     mod-27112)
                   (extend-var-env-6544
                     labels-27119
                     vars-27118
                     r-27109)
                   (make-binding-wrap-6563
                     ids-27117
                     labels-27119
                     w-27110)
                   mod-27112)))))))
     (lambda*-formals-6596
       (lambda (orig-args-27399)
         (letrec*
           ((req-27400
              (lambda (args-27407 rreq-27408)
                (let ((tmp-27410 ($sc-dispatch args-27407 '())))
                  (if tmp-27410
                    (@apply
                      (lambda ()
                        (check-27404 (reverse rreq-27408) '() #f '()))
                      tmp-27410)
                    (let ((tmp-27416
                            ($sc-dispatch args-27407 '(any . any))))
                      (if (if tmp-27416
                            (@apply
                              (lambda (a-27420 b-27421)
                                (if (symbol? a-27420)
                                  #t
                                  (if (if (vector? a-27420)
                                        (if (= (vector-length a-27420) 4)
                                          (eq? (vector-ref a-27420 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-27420 1))
                                    #f)))
                              tmp-27416)
                            #f)
                        (@apply
                          (lambda (a-27448 b-27449)
                            (req-27400 b-27449 (cons a-27448 rreq-27408)))
                          tmp-27416)
                        (let ((tmp-27450
                                ($sc-dispatch args-27407 '(any . any))))
                          (if (if tmp-27450
                                (@apply
                                  (lambda (a-27454 b-27455)
                                    (eq? (syntax->datum a-27454) #:optional))
                                  tmp-27450)
                                #f)
                            (@apply
                              (lambda (a-27456 b-27457)
                                (opt-27401 b-27457 (reverse rreq-27408) '()))
                              tmp-27450)
                            (let ((tmp-27460
                                    ($sc-dispatch args-27407 '(any . any))))
                              (if (if tmp-27460
                                    (@apply
                                      (lambda (a-27464 b-27465)
                                        (eq? (syntax->datum a-27464) #:key))
                                      tmp-27460)
                                    #f)
                                (@apply
                                  (lambda (a-27466 b-27467)
                                    (key-27402
                                      b-27467
                                      (reverse rreq-27408)
                                      '()
                                      '()))
                                  tmp-27460)
                                (let ((tmp-27470
                                        ($sc-dispatch args-27407 '(any any))))
                                  (if (if tmp-27470
                                        (@apply
                                          (lambda (a-27474 b-27475)
                                            (eq? (syntax->datum a-27474)
                                                 #:rest))
                                          tmp-27470)
                                        #f)
                                    (@apply
                                      (lambda (a-27476 b-27477)
                                        (rest-27403
                                          b-27477
                                          (reverse rreq-27408)
                                          '()
                                          '()))
                                      tmp-27470)
                                    (let ((tmp-27480 (list args-27407)))
                                      (if (@apply
                                            (lambda (r-27482)
                                              (if (symbol? r-27482)
                                                #t
                                                (if (if (vector? r-27482)
                                                      (if (= (vector-length
                                                               r-27482)
                                                             4)
                                                        (eq? (vector-ref
                                                               r-27482
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref r-27482 1))
                                                  #f)))
                                            tmp-27480)
                                        (@apply
                                          (lambda (r-27512)
                                            (rest-27403
                                              r-27512
                                              (reverse rreq-27408)
                                              '()
                                              '()))
                                          tmp-27480)
                                        (syntax-violation
                                          'lambda*
                                          "invalid argument list"
                                          orig-args-27399
                                          args-27407)))))))))))))))
            (opt-27401
              (lambda (args-27531 req-27532 ropt-27533)
                (let ((tmp-27535 ($sc-dispatch args-27531 '())))
                  (if tmp-27535
                    (@apply
                      (lambda ()
                        (check-27404
                          req-27532
                          (reverse ropt-27533)
                          #f
                          '()))
                      tmp-27535)
                    (let ((tmp-27541
                            ($sc-dispatch args-27531 '(any . any))))
                      (if (if tmp-27541
                            (@apply
                              (lambda (a-27545 b-27546)
                                (if (symbol? a-27545)
                                  #t
                                  (if (if (vector? a-27545)
                                        (if (= (vector-length a-27545) 4)
                                          (eq? (vector-ref a-27545 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-27545 1))
                                    #f)))
                              tmp-27541)
                            #f)
                        (@apply
                          (lambda (a-27573 b-27574)
                            (opt-27401
                              b-27574
                              req-27532
                              (cons (cons a-27573
                                          '(#(syntax-object
                                              #f
                                              ((top)
                                               #(ribcage
                                                 #(a b)
                                                 #((top) (top))
                                                 #("l-*-4543" "l-*-4544"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(args req ropt)
                                                 #((top) (top) (top))
                                                 #("l-*-4533"
                                                   "l-*-4534"
                                                   "l-*-4535"))
                                               #(ribcage
                                                 (check rest key opt req)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-4479"
                                                  "l-*-4477"
                                                  "l-*-4475"
                                                  "l-*-4473"
                                                  "l-*-4471"))
                                               #(ribcage
                                                 #(orig-args)
                                                 #((top))
                                                 #("l-*-4470"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-application
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   with-transformer-environment
                                                   transformer-environment
                                                   resolve-identifier
                                                   locally-bound-identifiers
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   session-id
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-2527"
                                                  "l-*-2525"
                                                  "l-*-2523"
                                                  "l-*-2521"
                                                  "l-*-2519"
                                                  "l-*-2517"
                                                  "l-*-2515"
                                                  "l-*-2513"
                                                  "l-*-2511"
                                                  "l-*-2509"
                                                  "l-*-2507"
                                                  "l-*-2505"
                                                  "l-*-2503"
                                                  "l-*-2501"
                                                  "l-*-2499"
                                                  "l-*-2497"
                                                  "l-*-2495"
                                                  "l-*-2493"
                                                  "l-*-2491"
                                                  "l-*-2489"
                                                  "l-*-2487"
                                                  "l-*-2485"
                                                  "l-*-2483"
                                                  "l-*-2481"
                                                  "l-*-2479"
                                                  "l-*-2477"
                                                  "l-*-2475"
                                                  "l-*-2473"
                                                  "l-*-2471"
                                                  "l-*-2469"
                                                  "l-*-2467"
                                                  "l-*-2465"
                                                  "l-*-2463"
                                                  "l-*-2461"
                                                  "l-*-2459"
                                                  "l-*-2457"
                                                  "l-*-2455"
                                                  "l-*-2453"
                                                  "l-*-2451"
                                                  "l-*-2450"
                                                  "l-*-2448"
                                                  "l-*-2445"
                                                  "l-*-2444"
                                                  "l-*-2443"
                                                  "l-*-2441"
                                                  "l-*-2440"
                                                  "l-*-2438"
                                                  "l-*-2436"
                                                  "l-*-2434"
                                                  "l-*-2432"
                                                  "l-*-2430"
                                                  "l-*-2428"
                                                  "l-*-2426"
                                                  "l-*-2424"
                                                  "l-*-2421"
                                                  "l-*-2419"
                                                  "l-*-2418"
                                                  "l-*-2416"
                                                  "l-*-2414"
                                                  "l-*-2412"
                                                  "l-*-2410"
                                                  "l-*-2409"
                                                  "l-*-2408"
                                                  "l-*-2407"
                                                  "l-*-2405"
                                                  "l-*-2404"
                                                  "l-*-2401"
                                                  "l-*-2399"
                                                  "l-*-2397"
                                                  "l-*-2395"
                                                  "l-*-2393"
                                                  "l-*-2391"
                                                  "l-*-2389"
                                                  "l-*-2388"
                                                  "l-*-2387"
                                                  "l-*-2385"
                                                  "l-*-2383"
                                                  "l-*-2382"
                                                  "l-*-2379"
                                                  "l-*-2378"
                                                  "l-*-2376"
                                                  "l-*-2374"
                                                  "l-*-2372"
                                                  "l-*-2370"
                                                  "l-*-2368"
                                                  "l-*-2366"
                                                  "l-*-2364"
                                                  "l-*-2362"
                                                  "l-*-2360"
                                                  "l-*-2357"
                                                  "l-*-2355"
                                                  "l-*-2353"
                                                  "l-*-2351"
                                                  "l-*-2349"
                                                  "l-*-2347"
                                                  "l-*-2345"
                                                  "l-*-2343"
                                                  "l-*-2341"
                                                  "l-*-2339"
                                                  "l-*-2337"
                                                  "l-*-2335"
                                                  "l-*-2333"
                                                  "l-*-2331"
                                                  "l-*-2329"
                                                  "l-*-2327"
                                                  "l-*-2325"
                                                  "l-*-2323"
                                                  "l-*-2321"
                                                  "l-*-2319"
                                                  "l-*-2317"
                                                  "l-*-2315"
                                                  "l-*-2313"
                                                  "l-*-2311"
                                                  "l-*-2309"
                                                  "l-*-2307"
                                                  "l-*-2306"
                                                  "l-*-2305"
                                                  "l-*-2304"
                                                  "l-*-2303"
                                                  "l-*-2301"
                                                  "l-*-2299"
                                                  "l-*-2297"
                                                  "l-*-2294"
                                                  "l-*-2292"
                                                  "l-*-2290"
                                                  "l-*-2288"
                                                  "l-*-2286"
                                                  "l-*-2284"
                                                  "l-*-2282"
                                                  "l-*-2280"
                                                  "l-*-2278"
                                                  "l-*-2276"
                                                  "l-*-2274"
                                                  "l-*-2272"
                                                  "l-*-2270"
                                                  "l-*-2268"
                                                  "l-*-2266"
                                                  "l-*-2264"
                                                  "l-*-2262"
                                                  "l-*-2260"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("l-*-2098"
                                                  "l-*-2097"
                                                  "l-*-2096")))
                                              (hygiene guile))))
                                    ropt-27533)))
                          tmp-27541)
                        (let ((tmp-27575
                                ($sc-dispatch args-27531 '((any any) . any))))
                          (if (if tmp-27575
                                (@apply
                                  (lambda (a-27579 init-27580 b-27581)
                                    (if (symbol? a-27579)
                                      #t
                                      (if (if (vector? a-27579)
                                            (if (= (vector-length a-27579) 4)
                                              (eq? (vector-ref a-27579 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref a-27579 1))
                                        #f)))
                                  tmp-27575)
                                #f)
                            (@apply
                              (lambda (a-27608 init-27609 b-27610)
                                (opt-27401
                                  b-27610
                                  req-27532
                                  (cons (list a-27608 init-27609) ropt-27533)))
                              tmp-27575)
                            (let ((tmp-27611
                                    ($sc-dispatch args-27531 '(any . any))))
                              (if (if tmp-27611
                                    (@apply
                                      (lambda (a-27615 b-27616)
                                        (eq? (syntax->datum a-27615) #:key))
                                      tmp-27611)
                                    #f)
                                (@apply
                                  (lambda (a-27617 b-27618)
                                    (key-27402
                                      b-27618
                                      req-27532
                                      (reverse ropt-27533)
                                      '()))
                                  tmp-27611)
                                (let ((tmp-27621
                                        ($sc-dispatch args-27531 '(any any))))
                                  (if (if tmp-27621
                                        (@apply
                                          (lambda (a-27625 b-27626)
                                            (eq? (syntax->datum a-27625)
                                                 #:rest))
                                          tmp-27621)
                                        #f)
                                    (@apply
                                      (lambda (a-27627 b-27628)
                                        (rest-27403
                                          b-27628
                                          req-27532
                                          (reverse ropt-27533)
                                          '()))
                                      tmp-27621)
                                    (let ((tmp-27631 (list args-27531)))
                                      (if (@apply
                                            (lambda (r-27633)
                                              (if (symbol? r-27633)
                                                #t
                                                (if (if (vector? r-27633)
                                                      (if (= (vector-length
                                                               r-27633)
                                                             4)
                                                        (eq? (vector-ref
                                                               r-27633
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref r-27633 1))
                                                  #f)))
                                            tmp-27631)
                                        (@apply
                                          (lambda (r-27663)
                                            (rest-27403
                                              r-27663
                                              req-27532
                                              (reverse ropt-27533)
                                              '()))
                                          tmp-27631)
                                        (syntax-violation
                                          'lambda*
                                          "invalid optional argument list"
                                          orig-args-27399
                                          args-27531)))))))))))))))
            (key-27402
              (lambda (args-27682 req-27683 opt-27684 rkey-27685)
                (let ((tmp-27687 ($sc-dispatch args-27682 '())))
                  (if tmp-27687
                    (@apply
                      (lambda ()
                        (check-27404
                          req-27683
                          opt-27684
                          #f
                          (cons #f (reverse rkey-27685))))
                      tmp-27687)
                    (let ((tmp-27693
                            ($sc-dispatch args-27682 '(any . any))))
                      (if (if tmp-27693
                            (@apply
                              (lambda (a-27697 b-27698)
                                (if (symbol? a-27697)
                                  #t
                                  (if (if (vector? a-27697)
                                        (if (= (vector-length a-27697) 4)
                                          (eq? (vector-ref a-27697 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-27697 1))
                                    #f)))
                              tmp-27693)
                            #f)
                        (@apply
                          (lambda (a-27725 b-27726)
                            (let ((tmp-27727
                                    (symbol->keyword (syntax->datum a-27725))))
                              (key-27402
                                b-27726
                                req-27683
                                opt-27684
                                (cons (cons tmp-27727
                                            (cons a-27725
                                                  '(#(syntax-object
                                                      #f
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(k)
                                                         #((top))
                                                         #("l-*-4606"))
                                                       #(ribcage
                                                         #(a b)
                                                         #((top) (top))
                                                         #("l-*-4600"
                                                           "l-*-4601"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(args req opt rkey)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("l-*-4589"
                                                           "l-*-4590"
                                                           "l-*-4591"
                                                           "l-*-4592"))
                                                       #(ribcage
                                                         (check rest
                                                                key
                                                                opt
                                                                req)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-4479"
                                                          "l-*-4477"
                                                          "l-*-4475"
                                                          "l-*-4473"
                                                          "l-*-4471"))
                                                       #(ribcage
                                                         #(orig-args)
                                                         #((top))
                                                         #("l-*-4470"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           session-id
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-2527"
                                                          "l-*-2525"
                                                          "l-*-2523"
                                                          "l-*-2521"
                                                          "l-*-2519"
                                                          "l-*-2517"
                                                          "l-*-2515"
                                                          "l-*-2513"
                                                          "l-*-2511"
                                                          "l-*-2509"
                                                          "l-*-2507"
                                                          "l-*-2505"
                                                          "l-*-2503"
                                                          "l-*-2501"
                                                          "l-*-2499"
                                                          "l-*-2497"
                                                          "l-*-2495"
                                                          "l-*-2493"
                                                          "l-*-2491"
                                                          "l-*-2489"
                                                          "l-*-2487"
                                                          "l-*-2485"
                                                          "l-*-2483"
                                                          "l-*-2481"
                                                          "l-*-2479"
                                                          "l-*-2477"
                                                          "l-*-2475"
                                                          "l-*-2473"
                                                          "l-*-2471"
                                                          "l-*-2469"
                                                          "l-*-2467"
                                                          "l-*-2465"
                                                          "l-*-2463"
                                                          "l-*-2461"
                                                          "l-*-2459"
                                                          "l-*-2457"
                                                          "l-*-2455"
                                                          "l-*-2453"
                                                          "l-*-2451"
                                                          "l-*-2450"
                                                          "l-*-2448"
                                                          "l-*-2445"
                                                          "l-*-2444"
                                                          "l-*-2443"
                                                          "l-*-2441"
                                                          "l-*-2440"
                                                          "l-*-2438"
                                                          "l-*-2436"
                                                          "l-*-2434"
                                                          "l-*-2432"
                                                          "l-*-2430"
                                                          "l-*-2428"
                                                          "l-*-2426"
                                                          "l-*-2424"
                                                          "l-*-2421"
                                                          "l-*-2419"
                                                          "l-*-2418"
                                                          "l-*-2416"
                                                          "l-*-2414"
                                                          "l-*-2412"
                                                          "l-*-2410"
                                                          "l-*-2409"
                                                          "l-*-2408"
                                                          "l-*-2407"
                                                          "l-*-2405"
                                                          "l-*-2404"
                                                          "l-*-2401"
                                                          "l-*-2399"
                                                          "l-*-2397"
                                                          "l-*-2395"
                                                          "l-*-2393"
                                                          "l-*-2391"
                                                          "l-*-2389"
                                                          "l-*-2388"
                                                          "l-*-2387"
                                                          "l-*-2385"
                                                          "l-*-2383"
                                                          "l-*-2382"
                                                          "l-*-2379"
                                                          "l-*-2378"
                                                          "l-*-2376"
                                                          "l-*-2374"
                                                          "l-*-2372"
                                                          "l-*-2370"
                                                          "l-*-2368"
                                                          "l-*-2366"
                                                          "l-*-2364"
                                                          "l-*-2362"
                                                          "l-*-2360"
                                                          "l-*-2357"
                                                          "l-*-2355"
                                                          "l-*-2353"
                                                          "l-*-2351"
                                                          "l-*-2349"
                                                          "l-*-2347"
                                                          "l-*-2345"
                                                          "l-*-2343"
                                                          "l-*-2341"
                                                          "l-*-2339"
                                                          "l-*-2337"
                                                          "l-*-2335"
                                                          "l-*-2333"
                                                          "l-*-2331"
                                                          "l-*-2329"
                                                          "l-*-2327"
                                                          "l-*-2325"
                                                          "l-*-2323"
                                                          "l-*-2321"
                                                          "l-*-2319"
                                                          "l-*-2317"
                                                          "l-*-2315"
                                                          "l-*-2313"
                                                          "l-*-2311"
                                                          "l-*-2309"
                                                          "l-*-2307"
                                                          "l-*-2306"
                                                          "l-*-2305"
                                                          "l-*-2304"
                                                          "l-*-2303"
                                                          "l-*-2301"
                                                          "l-*-2299"
                                                          "l-*-2297"
                                                          "l-*-2294"
                                                          "l-*-2292"
                                                          "l-*-2290"
                                                          "l-*-2288"
                                                          "l-*-2286"
                                                          "l-*-2284"
                                                          "l-*-2282"
                                                          "l-*-2280"
                                                          "l-*-2278"
                                                          "l-*-2276"
                                                          "l-*-2274"
                                                          "l-*-2272"
                                                          "l-*-2270"
                                                          "l-*-2268"
                                                          "l-*-2266"
                                                          "l-*-2264"
                                                          "l-*-2262"
                                                          "l-*-2260"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("l-*-2098"
                                                          "l-*-2097"
                                                          "l-*-2096")))
                                                      (hygiene guile)))))
                                      rkey-27685))))
                          tmp-27693)
                        (let ((tmp-27730
                                ($sc-dispatch args-27682 '((any any) . any))))
                          (if (if tmp-27730
                                (@apply
                                  (lambda (a-27734 init-27735 b-27736)
                                    (if (symbol? a-27734)
                                      #t
                                      (if (if (vector? a-27734)
                                            (if (= (vector-length a-27734) 4)
                                              (eq? (vector-ref a-27734 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref a-27734 1))
                                        #f)))
                                  tmp-27730)
                                #f)
                            (@apply
                              (lambda (a-27763 init-27764 b-27765)
                                (let ((tmp-27766
                                        (symbol->keyword
                                          (syntax->datum a-27763))))
                                  (key-27402
                                    b-27765
                                    req-27683
                                    opt-27684
                                    (cons (list tmp-27766 a-27763 init-27764)
                                          rkey-27685))))
                              tmp-27730)
                            (let ((tmp-27769
                                    ($sc-dispatch
                                      args-27682
                                      '((any any any) . any))))
                              (if (if tmp-27769
                                    (@apply
                                      (lambda (a-27773
                                               init-27774
                                               k-27775
                                               b-27776)
                                        (if (if (symbol? a-27773)
                                              #t
                                              (if (if (vector? a-27773)
                                                    (if (= (vector-length
                                                             a-27773)
                                                           4)
                                                      (eq? (vector-ref
                                                             a-27773
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref a-27773 1))
                                                #f))
                                          (keyword? (syntax->datum k-27775))
                                          #f))
                                      tmp-27769)
                                    #f)
                                (@apply
                                  (lambda (a-27803 init-27804 k-27805 b-27806)
                                    (key-27402
                                      b-27806
                                      req-27683
                                      opt-27684
                                      (cons (list k-27805 a-27803 init-27804)
                                            rkey-27685)))
                                  tmp-27769)
                                (let ((tmp-27807
                                        ($sc-dispatch args-27682 '(any))))
                                  (if (if tmp-27807
                                        (@apply
                                          (lambda (aok-27811)
                                            (eq? (syntax->datum aok-27811)
                                                 #:allow-other-keys))
                                          tmp-27807)
                                        #f)
                                    (@apply
                                      (lambda (aok-27812)
                                        (check-27404
                                          req-27683
                                          opt-27684
                                          #f
                                          (cons #t (reverse rkey-27685))))
                                      tmp-27807)
                                    (let ((tmp-27815
                                            ($sc-dispatch
                                              args-27682
                                              '(any any any))))
                                      (if (if tmp-27815
                                            (@apply
                                              (lambda (aok-27819
                                                       a-27820
                                                       b-27821)
                                                (if (eq? (syntax->datum
                                                           aok-27819)
                                                         #:allow-other-keys)
                                                  (eq? (syntax->datum a-27820)
                                                       #:rest)
                                                  #f))
                                              tmp-27815)
                                            #f)
                                        (@apply
                                          (lambda (aok-27822 a-27823 b-27824)
                                            (rest-27403
                                              b-27824
                                              req-27683
                                              opt-27684
                                              (cons #t (reverse rkey-27685))))
                                          tmp-27815)
                                        (let ((tmp-27827
                                                ($sc-dispatch
                                                  args-27682
                                                  '(any . any))))
                                          (if (if tmp-27827
                                                (@apply
                                                  (lambda (aok-27831 r-27832)
                                                    (if (eq? (syntax->datum
                                                               aok-27831)
                                                             #:allow-other-keys)
                                                      (if (symbol? r-27832)
                                                        #t
                                                        (if (if (vector?
                                                                  r-27832)
                                                              (if (= (vector-length
                                                                       r-27832)
                                                                     4)
                                                                (eq? (vector-ref
                                                                       r-27832
                                                                       0)
                                                                     'syntax-object)
                                                                #f)
                                                              #f)
                                                          (symbol?
                                                            (vector-ref
                                                              r-27832
                                                              1))
                                                          #f))
                                                      #f))
                                                  tmp-27827)
                                                #f)
                                            (@apply
                                              (lambda (aok-27859 r-27860)
                                                (rest-27403
                                                  r-27860
                                                  req-27683
                                                  opt-27684
                                                  (cons #t
                                                        (reverse rkey-27685))))
                                              tmp-27827)
                                            (let ((tmp-27863
                                                    ($sc-dispatch
                                                      args-27682
                                                      '(any any))))
                                              (if (if tmp-27863
                                                    (@apply
                                                      (lambda (a-27867 b-27868)
                                                        (eq? (syntax->datum
                                                               a-27867)
                                                             #:rest))
                                                      tmp-27863)
                                                    #f)
                                                (@apply
                                                  (lambda (a-27869 b-27870)
                                                    (rest-27403
                                                      b-27870
                                                      req-27683
                                                      opt-27684
                                                      (cons #f
                                                            (reverse
                                                              rkey-27685))))
                                                  tmp-27863)
                                                (let ((tmp-27873
                                                        (list args-27682)))
                                                  (if (@apply
                                                        (lambda (r-27875)
                                                          (if (symbol? r-27875)
                                                            #t
                                                            (if (if (vector?
                                                                      r-27875)
                                                                  (if (= (vector-length
                                                                           r-27875)
                                                                         4)
                                                                    (eq? (vector-ref
                                                                           r-27875
                                                                           0)
                                                                         'syntax-object)
                                                                    #f)
                                                                  #f)
                                                              (symbol?
                                                                (vector-ref
                                                                  r-27875
                                                                  1))
                                                              #f)))
                                                        tmp-27873)
                                                    (@apply
                                                      (lambda (r-27905)
                                                        (rest-27403
                                                          r-27905
                                                          req-27683
                                                          opt-27684
                                                          (cons #f
                                                                (reverse
                                                                  rkey-27685))))
                                                      tmp-27873)
                                                    (syntax-violation
                                                      'lambda*
                                                      "invalid keyword argument list"
                                                      orig-args-27399
                                                      args-27682)))))))))))))))))))))
            (rest-27403
              (lambda (args-27933 req-27934 opt-27935 kw-27936)
                (let ((tmp-27938 (list args-27933)))
                  (if (@apply
                        (lambda (r-27940)
                          (if (symbol? r-27940)
                            #t
                            (if (if (vector? r-27940)
                                  (if (= (vector-length r-27940) 4)
                                    (eq? (vector-ref r-27940 0) 'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref r-27940 1))
                              #f)))
                        tmp-27938)
                    (@apply
                      (lambda (r-27970)
                        (check-27404
                          req-27934
                          opt-27935
                          r-27970
                          kw-27936))
                      tmp-27938)
                    (syntax-violation
                      'lambda*
                      "invalid rest argument"
                      orig-args-27399
                      args-27933)))))
            (check-27404
              (lambda (req-27974 opt-27975 rest-27976 kw-27977)
                (if (distinct-bound-ids?-6576
                      (append
                        req-27974
                        (map car opt-27975)
                        (if rest-27976 (list rest-27976) '())
                        (if (pair? kw-27977)
                          (map cadr (cdr kw-27977))
                          '())))
                  (values req-27974 opt-27975 rest-27976 kw-27977)
                  (syntax-violation
                    'lambda*
                    "duplicate identifier in argument list"
                    orig-args-27399)))))
           (req-27400 orig-args-27399 '()))))
     (expand-lambda-case-6597
       (lambda (e-28093
                r-28094
                w-28095
                s-28096
                mod-28097
                get-formals-28098
                clauses-28099)
         (letrec*
           ((parse-req-28100
              (lambda (req-28231
                       opt-28232
                       rest-28233
                       kw-28234
                       body-28235)
                (let ((vars-28236 (map gen-var-6599 req-28231))
                      (labels-28237 (gen-labels-6552 req-28231)))
                  (let ((r*-28238
                          (extend-var-env-6544
                            labels-28237
                            vars-28236
                            r-28094))
                        (w*-28239
                          (make-binding-wrap-6563
                            req-28231
                            labels-28237
                            w-28095)))
                    (parse-opt-28101
                      (map syntax->datum req-28231)
                      opt-28232
                      rest-28233
                      kw-28234
                      body-28235
                      (reverse vars-28236)
                      r*-28238
                      w*-28239
                      '()
                      '())))))
            (parse-opt-28101
              (lambda (req-28425
                       opt-28426
                       rest-28427
                       kw-28428
                       body-28429
                       vars-28430
                       r*-28431
                       w*-28432
                       out-28433
                       inits-28434)
                (if (pair? opt-28426)
                  (let ((tmp-28435 (car opt-28426)))
                    (let ((tmp-28436 ($sc-dispatch tmp-28435 '(any any))))
                      (if tmp-28436
                        (@apply
                          (lambda (id-28438 i-28439)
                            (let ((v-28440
                                    (let ((id-28448
                                            (if (if (vector? id-28438)
                                                  (if (= (vector-length
                                                           id-28438)
                                                         4)
                                                    (eq? (vector-ref
                                                           id-28438
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref id-28438 1)
                                              id-28438)))
                                      (gensym
                                        (string-append
                                          (symbol->string id-28448)
                                          "-")))))
                              (let ((l-28441 (gen-labels-6552 (list v-28440))))
                                (let ((r**-28442
                                        (extend-var-env-6544
                                          l-28441
                                          (list v-28440)
                                          r*-28431)))
                                  (let ((w**-28443
                                          (make-binding-wrap-6563
                                            (list id-28438)
                                            l-28441
                                            w*-28432)))
                                    (parse-opt-28101
                                      req-28425
                                      (cdr opt-28426)
                                      rest-28427
                                      kw-28428
                                      body-28429
                                      (cons v-28440 vars-28430)
                                      r**-28442
                                      w**-28443
                                      (cons (syntax->datum id-28438) out-28433)
                                      (cons (expand-6585
                                              i-28439
                                              r*-28431
                                              w*-28432
                                              mod-28097)
                                            inits-28434)))))))
                          tmp-28436)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-28435))))
                  (if rest-28427
                    (let ((v-28686
                            (let ((id-28696
                                    (if (if (vector? rest-28427)
                                          (if (= (vector-length rest-28427) 4)
                                            (eq? (vector-ref rest-28427 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref rest-28427 1)
                                      rest-28427)))
                              (gensym
                                (string-append
                                  (symbol->string id-28696)
                                  "-")))))
                      (let ((l-28687 (gen-labels-6552 (list v-28686))))
                        (let ((r*-28688
                                (extend-var-env-6544
                                  l-28687
                                  (list v-28686)
                                  r*-28431)))
                          (let ((w*-28689
                                  (make-binding-wrap-6563
                                    (list rest-28427)
                                    l-28687
                                    w*-28432)))
                            (parse-kw-28102
                              req-28425
                              (if (pair? out-28433) (reverse out-28433) #f)
                              (syntax->datum rest-28427)
                              (if (pair? kw-28428) (cdr kw-28428) kw-28428)
                              body-28429
                              (cons v-28686 vars-28430)
                              r*-28688
                              w*-28689
                              (if (pair? kw-28428) (car kw-28428) #f)
                              '()
                              inits-28434)))))
                    (parse-kw-28102
                      req-28425
                      (if (pair? out-28433) (reverse out-28433) #f)
                      #f
                      (if (pair? kw-28428) (cdr kw-28428) kw-28428)
                      body-28429
                      vars-28430
                      r*-28431
                      w*-28432
                      (if (pair? kw-28428) (car kw-28428) #f)
                      '()
                      inits-28434)))))
            (parse-kw-28102
              (lambda (req-28867
                       opt-28868
                       rest-28869
                       kw-28870
                       body-28871
                       vars-28872
                       r*-28873
                       w*-28874
                       aok-28875
                       out-28876
                       inits-28877)
                (if (pair? kw-28870)
                  (let ((tmp-28878 (car kw-28870)))
                    (let ((tmp-28879
                            ($sc-dispatch tmp-28878 '(any any any))))
                      (if tmp-28879
                        (@apply
                          (lambda (k-28881 id-28882 i-28883)
                            (let ((v-28884
                                    (let ((id-28892
                                            (if (if (vector? id-28882)
                                                  (if (= (vector-length
                                                           id-28882)
                                                         4)
                                                    (eq? (vector-ref
                                                           id-28882
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref id-28882 1)
                                              id-28882)))
                                      (gensym
                                        (string-append
                                          (symbol->string id-28892)
                                          "-")))))
                              (let ((l-28885 (gen-labels-6552 (list v-28884))))
                                (let ((r**-28886
                                        (extend-var-env-6544
                                          l-28885
                                          (list v-28884)
                                          r*-28873)))
                                  (let ((w**-28887
                                          (make-binding-wrap-6563
                                            (list id-28882)
                                            l-28885
                                            w*-28874)))
                                    (parse-kw-28102
                                      req-28867
                                      opt-28868
                                      rest-28869
                                      (cdr kw-28870)
                                      body-28871
                                      (cons v-28884 vars-28872)
                                      r**-28886
                                      w**-28887
                                      aok-28875
                                      (cons (list (syntax->datum k-28881)
                                                  (syntax->datum id-28882)
                                                  v-28884)
                                            out-28876)
                                      (cons (expand-6585
                                              i-28883
                                              r*-28873
                                              w*-28874
                                              mod-28097)
                                            inits-28877)))))))
                          tmp-28879)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-28878))))
                  (parse-body-28103
                    req-28867
                    opt-28868
                    rest-28869
                    (if (if aok-28875 aok-28875 (pair? out-28876))
                      (cons aok-28875 (reverse out-28876))
                      #f)
                    body-28871
                    (reverse vars-28872)
                    r*-28873
                    w*-28874
                    (reverse inits-28877)
                    '()))))
            (parse-body-28103
              (lambda (req-29139
                       opt-29140
                       rest-29141
                       kw-29142
                       body-29143
                       vars-29144
                       r*-29145
                       w*-29146
                       inits-29147
                       meta-29148)
                (let ((tmp-29150
                        ($sc-dispatch body-29143 '(any any . each-any))))
                  (if (if tmp-29150
                        (@apply
                          (lambda (docstring-29154 e1-29155 e2-29156)
                            (string? (syntax->datum docstring-29154)))
                          tmp-29150)
                        #f)
                    (@apply
                      (lambda (docstring-29157 e1-29158 e2-29159)
                        (parse-body-28103
                          req-29139
                          opt-29140
                          rest-29141
                          kw-29142
                          (cons e1-29158 e2-29159)
                          vars-29144
                          r*-29145
                          w*-29146
                          inits-29147
                          (append
                            meta-29148
                            (list (cons 'documentation
                                        (syntax->datum docstring-29157))))))
                      tmp-29150)
                    (let ((tmp-29160
                            ($sc-dispatch
                              body-29143
                              '(#(vector #(each (any . any)))
                                any
                                .
                                each-any))))
                      (if tmp-29160
                        (@apply
                          (lambda (k-29164 v-29165 e1-29166 e2-29167)
                            (parse-body-28103
                              req-29139
                              opt-29140
                              rest-29141
                              kw-29142
                              (cons e1-29166 e2-29167)
                              vars-29144
                              r*-29145
                              w*-29146
                              inits-29147
                              (append
                                meta-29148
                                (syntax->datum (map cons k-29164 v-29165)))))
                          tmp-29160)
                        (let ((tmp-29168
                                ($sc-dispatch body-29143 '(any . each-any))))
                          (if tmp-29168
                            (@apply
                              (lambda (e1-29172 e2-29173)
                                (values
                                  meta-29148
                                  req-29139
                                  opt-29140
                                  rest-29141
                                  kw-29142
                                  inits-29147
                                  vars-29144
                                  (expand-body-6589
                                    (cons e1-29172 e2-29173)
                                    (wrap-6578
                                      (begin
                                        (if (if (pair? e-28093) s-28096 #f)
                                          (set-source-properties!
                                            e-28093
                                            s-28096))
                                        e-28093)
                                      w-28095
                                      mod-28097)
                                    r*-29145
                                    w*-29146
                                    mod-28097)))
                              tmp-29168)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              body-29143))))))))))
           (let ((tmp-28105 ($sc-dispatch clauses-28099 '())))
             (if tmp-28105
               (@apply (lambda () (values '() #f)) tmp-28105)
               (let ((tmp-28109
                       ($sc-dispatch
                         clauses-28099
                         '((any any . each-any)
                           .
                           #(each (any any . each-any))))))
                 (if tmp-28109
                   (@apply
                     (lambda (args-28113
                              e1-28114
                              e2-28115
                              args*-28116
                              e1*-28117
                              e2*-28118)
                       (call-with-values
                         (lambda () (get-formals-28098 args-28113))
                         (lambda (req-28119 opt-28120 rest-28121 kw-28122)
                           (call-with-values
                             (lambda ()
                               (parse-req-28100
                                 req-28119
                                 opt-28120
                                 rest-28121
                                 kw-28122
                                 (cons e1-28114 e2-28115)))
                             (lambda (meta-28187
                                      req-28188
                                      opt-28189
                                      rest-28190
                                      kw-28191
                                      inits-28192
                                      vars-28193
                                      body-28194)
                               (call-with-values
                                 (lambda ()
                                   (expand-lambda-case-6597
                                     e-28093
                                     r-28094
                                     w-28095
                                     s-28096
                                     mod-28097
                                     get-formals-28098
                                     (map (lambda (tmp-4949-28195
                                                   tmp-4948-28196
                                                   tmp-4947-28197)
                                            (cons tmp-4947-28197
                                                  (cons tmp-4948-28196
                                                        tmp-4949-28195)))
                                          e2*-28118
                                          e1*-28117
                                          args*-28116)))
                                 (lambda (meta*-28198 else*-28199)
                                   (values
                                     (append meta-28187 meta*-28198)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       s-28096
                                       req-28188
                                       opt-28189
                                       rest-28190
                                       kw-28191
                                       inits-28192
                                       vars-28193
                                       body-28194
                                       else*-28199)))))))))
                     tmp-28109)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     clauses-28099))))))))
     (strip-6598
       (lambda (x-29210 w-29211)
         (if (memq 'top (car w-29211))
           x-29210
           (letrec*
             ((f-29212
                (lambda (x-29215)
                  (if (if (vector? x-29215)
                        (if (= (vector-length x-29215) 4)
                          (eq? (vector-ref x-29215 0) 'syntax-object)
                          #f)
                        #f)
                    (strip-6598
                      (vector-ref x-29215 1)
                      (vector-ref x-29215 2))
                    (if (pair? x-29215)
                      (let ((a-29234 (f-29212 (car x-29215)))
                            (d-29235 (f-29212 (cdr x-29215))))
                        (if (if (eq? a-29234 (car x-29215))
                              (eq? d-29235 (cdr x-29215))
                              #f)
                          x-29215
                          (cons a-29234 d-29235)))
                      (if (vector? x-29215)
                        (let ((old-29238 (vector->list x-29215)))
                          (let ((new-29239 (map f-29212 old-29238)))
                            (letrec*
                              ((lp-29240
                                 (lambda (l1-29316 l2-29317)
                                   (if (null? l1-29316)
                                     x-29215
                                     (if (eq? (car l1-29316) (car l2-29317))
                                       (lp-29240 (cdr l1-29316) (cdr l2-29317))
                                       (list->vector new-29239))))))
                              (lp-29240 old-29238 new-29239))))
                        x-29215))))))
             (f-29212 x-29210)))))
     (gen-var-6599
       (lambda (id-28243)
         (let ((id-28244
                 (if (if (vector? id-28243)
                       (if (= (vector-length id-28243) 4)
                         (eq? (vector-ref id-28243 0) 'syntax-object)
                         #f)
                       #f)
                   (vector-ref id-28243 1)
                   id-28243)))
           (gensym
             (string-append (symbol->string id-28244) "-"))))))
    (begin
      (set! session-id-6510
        (let ((v-17707
                (module-variable
                  (current-module)
                  'syntax-session-id)))
          (lambda () ((variable-ref v-17707)))))
      (set! transformer-environment-6571
        (make-fluid
          (lambda (k-16750)
            (error "called outside the dynamic extent of a syntax transformer"))))
      (module-define!
        (current-module)
        'letrec-syntax
        (make-syntax-transformer
          'letrec-syntax
          'local-syntax
          #t))
      (module-define!
        (current-module)
        'let-syntax
        (make-syntax-transformer
          'let-syntax
          'local-syntax
          #f))
      (global-extend-6547
        'core
        'syntax-parameterize
        (lambda (e-6720 r-6721 w-6722 s-6723 mod-6724)
          (let ((tmp-6726
                  ($sc-dispatch
                    e-6720
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-6726
                  (@apply
                    (lambda (var-6730 val-6731 e1-6732 e2-6733)
                      (valid-bound-ids?-6575 var-6730))
                    tmp-6726)
                  #f)
              (@apply
                (lambda (var-6811 val-6812 e1-6813 e2-6814)
                  (let ((names-6815
                          (map (lambda (x-6865)
                                 (id-var-name-6568 x-6865 w-6722))
                               var-6811)))
                    (begin
                      (for-each
                        (lambda (id-6816 n-6817)
                          (let ((atom-key-6818
                                  (car (let ((t-6825 (assq n-6817 r-6721)))
                                         (if t-6825
                                           (cdr t-6825)
                                           (if (symbol? n-6817)
                                             (let ((t-6830
                                                     (get-global-definition-hook-6512
                                                       n-6817
                                                       mod-6724)))
                                               (if t-6830 t-6830 '(global)))
                                             '(displaced-lexical)))))))
                            (if (eqv? atom-key-6818 'displaced-lexical)
                              (syntax-violation
                                'syntax-parameterize
                                "identifier out of context"
                                e-6720
                                (wrap-6578
                                  (begin
                                    (if (if (pair? id-6816) s-6723 #f)
                                      (set-source-properties! id-6816 s-6723))
                                    id-6816)
                                  w-6722
                                  mod-6724)))))
                        var-6811
                        names-6815)
                      (expand-body-6589
                        (cons e1-6813 e2-6814)
                        (wrap-6578
                          (begin
                            (if (if (pair? e-6720) s-6723 #f)
                              (set-source-properties! e-6720 s-6723))
                            e-6720)
                          w-6722
                          mod-6724)
                        (extend-env-6543
                          names-6815
                          (let ((trans-r-6951 (macros-only-env-6545 r-6721)))
                            (map (lambda (x-6952)
                                   (cons 'macro
                                         (eval-local-transformer-6591
                                           (expand-6585
                                             x-6952
                                             trans-r-6951
                                             w-6722
                                             mod-6724)
                                           mod-6724)))
                                 val-6812))
                          r-6721)
                        w-6722
                        mod-6724))))
                tmp-6726)
              (syntax-violation
                'syntax-parameterize
                "bad syntax"
                (wrap-6578
                  (begin
                    (if (if (pair? e-6720) s-6723 #f)
                      (set-source-properties! e-6720 s-6723))
                    e-6720)
                  w-6722
                  mod-6724))))))
      (module-define!
        (current-module)
        'quote
        (make-syntax-transformer
          'quote
          'core
          (lambda (e-7161 r-7162 w-7163 s-7164 mod-7165)
            (let ((tmp-7167 ($sc-dispatch e-7161 '(_ any))))
              (if tmp-7167
                (@apply
                  (lambda (e-7170)
                    (let ((exp-7174 (strip-6598 e-7170 w-7163)))
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 1)
                        s-7164
                        exp-7174)))
                  tmp-7167)
                (syntax-violation
                  'quote
                  "bad syntax"
                  (wrap-6578
                    (begin
                      (if (if (pair? e-7161) s-7164 #f)
                        (set-source-properties! e-7161 s-7164))
                      e-7161)
                    w-7163
                    mod-7165)))))))
      (global-extend-6547
        'core
        'syntax
        (letrec*
          ((gen-syntax-7394
             (lambda (src-7496
                      e-7497
                      r-7498
                      maps-7499
                      ellipsis?-7500
                      mod-7501)
               (if (if (symbol? e-7497)
                     #t
                     (if (if (vector? e-7497)
                           (if (= (vector-length e-7497) 4)
                             (eq? (vector-ref e-7497 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref e-7497 1))
                       #f))
                 (let ((label-7528 (id-var-name-6568 e-7497 '(()))))
                   (let ((b-7529
                           (let ((t-7536 (assq label-7528 r-7498)))
                             (if t-7536
                               (cdr t-7536)
                               (if (symbol? label-7528)
                                 (let ((t-7542
                                         (get-global-definition-hook-6512
                                           label-7528
                                           mod-7501)))
                                   (if t-7542 t-7542 '(global)))
                                 '(displaced-lexical))))))
                     (if (eq? (car b-7529) 'syntax)
                       (call-with-values
                         (lambda ()
                           (let ((var.lev-7551 (cdr b-7529)))
                             (gen-ref-7395
                               src-7496
                               (car var.lev-7551)
                               (cdr var.lev-7551)
                               maps-7499)))
                         (lambda (var-7555 maps-7556)
                           (values (list 'ref var-7555) maps-7556)))
                       (if (ellipsis?-7500 e-7497)
                         (syntax-violation
                           'syntax
                           "misplaced ellipsis"
                           src-7496)
                         (values (list 'quote e-7497) maps-7499)))))
                 (let ((tmp-7558 ($sc-dispatch e-7497 '(any any))))
                   (if (if tmp-7558
                         (@apply
                           (lambda (dots-7562 e-7563)
                             (ellipsis?-7500 dots-7562))
                           tmp-7558)
                         #f)
                     (@apply
                       (lambda (dots-7564 e-7565)
                         (gen-syntax-7394
                           src-7496
                           e-7565
                           r-7498
                           maps-7499
                           (lambda (x-7566) #f)
                           mod-7501))
                       tmp-7558)
                     (let ((tmp-7567 ($sc-dispatch e-7497 '(any any . any))))
                       (if (if tmp-7567
                             (@apply
                               (lambda (x-7571 dots-7572 y-7573)
                                 (ellipsis?-7500 dots-7572))
                               tmp-7567)
                             #f)
                         (@apply
                           (lambda (x-7574 dots-7575 y-7576)
                             (letrec*
                               ((f-7577
                                  (lambda (y-7585 k-7586)
                                    (let ((tmp-7588
                                            ($sc-dispatch
                                              y-7585
                                              '(any . any))))
                                      (if (if tmp-7588
                                            (@apply
                                              (lambda (dots-7592 y-7593)
                                                (ellipsis?-7500 dots-7592))
                                              tmp-7588)
                                            #f)
                                        (@apply
                                          (lambda (dots-7594 y-7595)
                                            (f-7577
                                              y-7595
                                              (lambda (maps-7596)
                                                (call-with-values
                                                  (lambda ()
                                                    (k-7586
                                                      (cons '() maps-7596)))
                                                  (lambda (x-7597 maps-7598)
                                                    (if (null? (car maps-7598))
                                                      (syntax-violation
                                                        'syntax
                                                        "extra ellipsis"
                                                        src-7496)
                                                      (values
                                                        (let ((map-env-7602
                                                                (car maps-7598)))
                                                          (list 'apply
                                                                '(primitive
                                                                   append)
                                                                (gen-map-7397
                                                                  x-7597
                                                                  map-env-7602)))
                                                        (cdr maps-7598))))))))
                                          tmp-7588)
                                        (call-with-values
                                          (lambda ()
                                            (gen-syntax-7394
                                              src-7496
                                              y-7585
                                              r-7498
                                              maps-7499
                                              ellipsis?-7500
                                              mod-7501))
                                          (lambda (y-7605 maps-7606)
                                            (call-with-values
                                              (lambda () (k-7586 maps-7606))
                                              (lambda (x-7607 maps-7608)
                                                (values
                                                  (if (equal? y-7605 ''())
                                                    x-7607
                                                    (list 'append
                                                          x-7607
                                                          y-7605))
                                                  maps-7608))))))))))
                               (f-7577
                                 y-7576
                                 (lambda (maps-7580)
                                   (call-with-values
                                     (lambda ()
                                       (gen-syntax-7394
                                         src-7496
                                         x-7574
                                         r-7498
                                         (cons '() maps-7580)
                                         ellipsis?-7500
                                         mod-7501))
                                     (lambda (x-7581 maps-7582)
                                       (if (null? (car maps-7582))
                                         (syntax-violation
                                           'syntax
                                           "extra ellipsis"
                                           src-7496)
                                         (values
                                           (gen-map-7397
                                             x-7581
                                             (car maps-7582))
                                           (cdr maps-7582)))))))))
                           tmp-7567)
                         (let ((tmp-7624 ($sc-dispatch e-7497 '(any . any))))
                           (if tmp-7624
                             (@apply
                               (lambda (x-7628 y-7629)
                                 (call-with-values
                                   (lambda ()
                                     (gen-syntax-7394
                                       src-7496
                                       x-7628
                                       r-7498
                                       maps-7499
                                       ellipsis?-7500
                                       mod-7501))
                                   (lambda (x-7630 maps-7631)
                                     (call-with-values
                                       (lambda ()
                                         (gen-syntax-7394
                                           src-7496
                                           y-7629
                                           r-7498
                                           maps-7631
                                           ellipsis?-7500
                                           mod-7501))
                                       (lambda (y-7632 maps-7633)
                                         (values
                                           (let ((atom-key-7638 (car y-7632)))
                                             (if (eqv? atom-key-7638 'quote)
                                               (if (eq? (car x-7630) 'quote)
                                                 (list 'quote
                                                       (cons (car (cdr x-7630))
                                                             (car (cdr y-7632))))
                                                 (if (eq? (car (cdr y-7632))
                                                          '())
                                                   (list 'list x-7630)
                                                   (list 'cons x-7630 y-7632)))
                                               (if (eqv? atom-key-7638 'list)
                                                 (cons 'list
                                                       (cons x-7630
                                                             (cdr y-7632)))
                                                 (list 'cons x-7630 y-7632))))
                                           maps-7633))))))
                               tmp-7624)
                             (let ((tmp-7667
                                     ($sc-dispatch
                                       e-7497
                                       '#(vector (any . each-any)))))
                               (if tmp-7667
                                 (@apply
                                   (lambda (e1-7671 e2-7672)
                                     (call-with-values
                                       (lambda ()
                                         (gen-syntax-7394
                                           src-7496
                                           (cons e1-7671 e2-7672)
                                           r-7498
                                           maps-7499
                                           ellipsis?-7500
                                           mod-7501))
                                       (lambda (e-7673 maps-7674)
                                         (values
                                           (if (eq? (car e-7673) 'list)
                                             (cons 'vector (cdr e-7673))
                                             (if (eq? (car e-7673) 'quote)
                                               (list 'quote
                                                     (list->vector
                                                       (car (cdr e-7673))))
                                               (list 'list->vector e-7673)))
                                           maps-7674))))
                                   tmp-7667)
                                 (values
                                   (list 'quote e-7497)
                                   maps-7499))))))))))))
           (gen-ref-7395
             (lambda (src-7701 var-7702 level-7703 maps-7704)
               (if (= level-7703 0)
                 (values var-7702 maps-7704)
                 (if (null? maps-7704)
                   (syntax-violation
                     'syntax
                     "missing ellipsis"
                     src-7701)
                   (call-with-values
                     (lambda ()
                       (gen-ref-7395
                         src-7701
                         var-7702
                         (#{1-}# level-7703)
                         (cdr maps-7704)))
                     (lambda (outer-var-7705 outer-maps-7706)
                       (let ((b-7707 (assq outer-var-7705 (car maps-7704))))
                         (if b-7707
                           (values (cdr b-7707) maps-7704)
                           (let ((inner-var-7709
                                   (gensym
                                     (string-append
                                       (symbol->string 'tmp)
                                       "-"))))
                             (values
                               inner-var-7709
                               (cons (cons (cons outer-var-7705 inner-var-7709)
                                           (car maps-7704))
                                     outer-maps-7706)))))))))))
           (gen-map-7397
             (lambda (e-7723 map-env-7724)
               (let ((formals-7725 (map cdr map-env-7724))
                     (actuals-7726
                       (map (lambda (x-7728) (list 'ref (car x-7728)))
                            map-env-7724)))
                 (if (eq? (car e-7723) 'ref)
                   (car actuals-7726)
                   (if (and-map
                         (lambda (x-7729)
                           (if (eq? (car x-7729) 'ref)
                             (memq (car (cdr x-7729)) formals-7725)
                             #f))
                         (cdr e-7723))
                     (cons 'map
                           (cons (list 'primitive (car e-7723))
                                 (map (let ((r-7731
                                              (map cons
                                                   formals-7725
                                                   actuals-7726)))
                                        (lambda (x-7732)
                                          (cdr (assq (car (cdr x-7732))
                                                     r-7731))))
                                      (cdr e-7723))))
                     (cons 'map
                           (cons (list 'lambda formals-7725 e-7723)
                                 actuals-7726)))))))
           (regen-7401
             (lambda (x-7734)
               (let ((atom-key-7735 (car x-7734)))
                 (if (eqv? atom-key-7735 'ref)
                   (let ((name-7745 (car (cdr x-7734)))
                         (var-7746 (car (cdr x-7734))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 3)
                       #f
                       name-7745
                       var-7746))
                   (if (eqv? atom-key-7735 'primitive)
                     (let ((name-7758 (car (cdr x-7734))))
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           name-7758)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           name-7758
                           #f)))
                     (if (eqv? atom-key-7735 'quote)
                       (let ((exp-7776 (car (cdr x-7734))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 1)
                           #f
                           exp-7776))
                       (if (eqv? atom-key-7735 'lambda)
                         (if (list? (car (cdr x-7734)))
                           (let ((req-7787 (car (cdr x-7734)))
                                 (vars-7789 (car (cdr x-7734)))
                                 (exp-7791
                                   (regen-7401 (car (cdr (cdr x-7734))))))
                             (let ((body-7796
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       req-7787
                                       #f
                                       #f
                                       #f
                                       '()
                                       vars-7789
                                       exp-7791
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 body-7796)))
                           (error "how did we get here" x-7734))
                         (let ((fun-exp-7812
                                 (let ((name-7821 (car x-7734)))
                                   (if (equal?
                                         (module-name (current-module))
                                         '(guile))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 7)
                                       #f
                                       name-7821)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 5)
                                       #f
                                       '(guile)
                                       name-7821
                                       #f))))
                               (arg-exps-7813 (map regen-7401 (cdr x-7734))))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 11)
                             #f
                             fun-exp-7812
                             arg-exps-7813))))))))))
          (lambda (e-7402 r-7403 w-7404 s-7405 mod-7406)
            (let ((e-7407
                    (wrap-6578
                      (begin
                        (if (if (pair? e-7402) s-7405 #f)
                          (set-source-properties! e-7402 s-7405))
                        e-7402)
                      w-7404
                      mod-7406)))
              (let ((tmp-7409 ($sc-dispatch e-7407 '(_ any))))
                (if tmp-7409
                  (@apply
                    (lambda (x-7434)
                      (call-with-values
                        (lambda ()
                          (gen-syntax-7394
                            e-7407
                            x-7434
                            r-7403
                            '()
                            ellipsis?-6593
                            mod-7406))
                        (lambda (e-7488 maps-7489) (regen-7401 e-7488))))
                    tmp-7409)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    e-7407)))))))
      (global-extend-6547
        'core
        'lambda
        (lambda (e-8009 r-8010 w-8011 s-8012 mod-8013)
          (let ((tmp-8015
                  ($sc-dispatch e-8009 '(_ any any . each-any))))
            (if tmp-8015
              (@apply
                (lambda (args-8019 e1-8020 e2-8021)
                  (call-with-values
                    (lambda () (lambda-formals-6594 args-8019))
                    (lambda (req-8024 opt-8025 rest-8026 kw-8027)
                      (letrec*
                        ((lp-8028
                           (lambda (body-8031 meta-8032)
                             (let ((tmp-8034
                                     ($sc-dispatch
                                       body-8031
                                       '(any any . each-any))))
                               (if (if tmp-8034
                                     (@apply
                                       (lambda (docstring-8038 e1-8039 e2-8040)
                                         (string?
                                           (syntax->datum docstring-8038)))
                                       tmp-8034)
                                     #f)
                                 (@apply
                                   (lambda (docstring-8041 e1-8042 e2-8043)
                                     (lp-8028
                                       (cons e1-8042 e2-8043)
                                       (append
                                         meta-8032
                                         (list (cons 'documentation
                                                     (syntax->datum
                                                       docstring-8041))))))
                                   tmp-8034)
                                 (let ((tmp-8044
                                         ($sc-dispatch
                                           body-8031
                                           '(#(vector #(each (any . any)))
                                             any
                                             .
                                             each-any))))
                                   (if tmp-8044
                                     (@apply
                                       (lambda (k-8048 v-8049 e1-8050 e2-8051)
                                         (lp-8028
                                           (cons e1-8050 e2-8051)
                                           (append
                                             meta-8032
                                             (syntax->datum
                                               (map cons k-8048 v-8049)))))
                                       tmp-8044)
                                     (expand-simple-lambda-6595
                                       e-8009
                                       r-8010
                                       w-8011
                                       s-8012
                                       mod-8013
                                       req-8024
                                       rest-8026
                                       meta-8032
                                       body-8031))))))))
                        (lp-8028 (cons e1-8020 e2-8021) '())))))
                tmp-8015)
              (syntax-violation 'lambda "bad lambda" e-8009)))))
      (global-extend-6547
        'core
        'lambda*
        (lambda (e-8340 r-8341 w-8342 s-8343 mod-8344)
          (let ((tmp-8346
                  ($sc-dispatch e-8340 '(_ any any . each-any))))
            (if tmp-8346
              (@apply
                (lambda (args-8350 e1-8351 e2-8352)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-6597
                        e-8340
                        r-8341
                        w-8342
                        s-8343
                        mod-8344
                        lambda*-formals-6596
                        (list (cons args-8350 (cons e1-8351 e2-8352)))))
                    (lambda (meta-8355 lcase-8356)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        s-8343
                        meta-8355
                        lcase-8356))))
                tmp-8346)
              (syntax-violation 'lambda "bad lambda*" e-8340)))))
      (global-extend-6547
        'core
        'case-lambda
        (lambda (e-8526 r-8527 w-8528 s-8529 mod-8530)
          (let ((tmp-8532
                  ($sc-dispatch
                    e-8526
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if tmp-8532
              (@apply
                (lambda (args-8536
                         e1-8537
                         e2-8538
                         args*-8539
                         e1*-8540
                         e2*-8541)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-6597
                        e-8526
                        r-8527
                        w-8528
                        s-8529
                        mod-8530
                        lambda-formals-6594
                        (cons (cons args-8536 (cons e1-8537 e2-8538))
                              (map (lambda (tmp-5448-8544
                                            tmp-5447-8545
                                            tmp-5446-8546)
                                     (cons tmp-5446-8546
                                           (cons tmp-5447-8545 tmp-5448-8544)))
                                   e2*-8541
                                   e1*-8540
                                   args*-8539))))
                    (lambda (meta-8547 lcase-8548)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        s-8529
                        meta-8547
                        lcase-8548))))
                tmp-8532)
              (syntax-violation
                'case-lambda
                "bad case-lambda"
                e-8526)))))
      (global-extend-6547
        'core
        'case-lambda*
        (lambda (e-8710 r-8711 w-8712 s-8713 mod-8714)
          (let ((tmp-8716
                  ($sc-dispatch
                    e-8710
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if tmp-8716
              (@apply
                (lambda (args-8720
                         e1-8721
                         e2-8722
                         args*-8723
                         e1*-8724
                         e2*-8725)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-6597
                        e-8710
                        r-8711
                        w-8712
                        s-8713
                        mod-8714
                        lambda*-formals-6596
                        (cons (cons args-8720 (cons e1-8721 e2-8722))
                              (map (lambda (tmp-5483-8728
                                            tmp-5482-8729
                                            tmp-5481-8730)
                                     (cons tmp-5481-8730
                                           (cons tmp-5482-8729 tmp-5483-8728)))
                                   e2*-8725
                                   e1*-8724
                                   args*-8723))))
                    (lambda (meta-8731 lcase-8732)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        s-8713
                        meta-8731
                        lcase-8732))))
                tmp-8716)
              (syntax-violation
                'case-lambda
                "bad case-lambda*"
                e-8710)))))
      (global-extend-6547
        'core
        'let
        (letrec*
          ((expand-let-8923
             (lambda (e-9072
                      r-9073
                      w-9074
                      s-9075
                      mod-9076
                      constructor-9077
                      ids-9078
                      vals-9079
                      exps-9080)
               (if (not (valid-bound-ids?-6575 ids-9078))
                 (syntax-violation
                   'let
                   "duplicate bound variable"
                   e-9072)
                 (let ((labels-9158 (gen-labels-6552 ids-9078))
                       (new-vars-9159 (map gen-var-6599 ids-9078)))
                   (let ((nw-9160
                           (make-binding-wrap-6563
                             ids-9078
                             labels-9158
                             w-9074))
                         (nr-9161
                           (extend-var-env-6544
                             labels-9158
                             new-vars-9159
                             r-9073)))
                     (constructor-9077
                       s-9075
                       (map syntax->datum ids-9078)
                       new-vars-9159
                       (map (lambda (x-9178)
                              (expand-6585 x-9178 r-9073 w-9074 mod-9076))
                            vals-9079)
                       (expand-body-6589
                         exps-9080
                         (source-wrap-6579 e-9072 nw-9160 s-9075 mod-9076)
                         nr-9161
                         nw-9160
                         mod-9076))))))))
          (lambda (e-8924 r-8925 w-8926 s-8927 mod-8928)
            (let ((tmp-8930
                    ($sc-dispatch
                      e-8924
                      '(_ #(each (any any)) any . each-any))))
              (if (if tmp-8930
                    (@apply
                      (lambda (id-8934 val-8935 e1-8936 e2-8937)
                        (and-map id?-6549 id-8934))
                      tmp-8930)
                    #f)
                (@apply
                  (lambda (id-8953 val-8954 e1-8955 e2-8956)
                    (expand-let-8923
                      e-8924
                      r-8925
                      w-8926
                      s-8927
                      mod-8928
                      build-let-6531
                      id-8953
                      val-8954
                      (cons e1-8955 e2-8956)))
                  tmp-8930)
                (let ((tmp-8986
                        ($sc-dispatch
                          e-8924
                          '(_ any #(each (any any)) any . each-any))))
                  (if (if tmp-8986
                        (@apply
                          (lambda (f-8990 id-8991 val-8992 e1-8993 e2-8994)
                            (if (if (symbol? f-8990)
                                  #t
                                  (if (if (vector? f-8990)
                                        (if (= (vector-length f-8990) 4)
                                          (eq? (vector-ref f-8990 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref f-8990 1))
                                    #f))
                              (and-map id?-6549 id-8991)
                              #f))
                          tmp-8986)
                        #f)
                    (@apply
                      (lambda (f-9036 id-9037 val-9038 e1-9039 e2-9040)
                        (expand-let-8923
                          e-8924
                          r-8925
                          w-8926
                          s-8927
                          mod-8928
                          build-named-let-6532
                          (cons f-9036 id-9037)
                          val-9038
                          (cons e1-9039 e2-9040)))
                      tmp-8986)
                    (syntax-violation
                      'let
                      "bad let"
                      (wrap-6578
                        (begin
                          (if (if (pair? e-8924) s-8927 #f)
                            (set-source-properties! e-8924 s-8927))
                          e-8924)
                        w-8926
                        mod-8928)))))))))
      (global-extend-6547
        'core
        'letrec
        (lambda (e-9590 r-9591 w-9592 s-9593 mod-9594)
          (let ((tmp-9596
                  ($sc-dispatch
                    e-9590
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-9596
                  (@apply
                    (lambda (id-9600 val-9601 e1-9602 e2-9603)
                      (and-map id?-6549 id-9600))
                    tmp-9596)
                  #f)
              (@apply
                (lambda (id-9619 val-9620 e1-9621 e2-9622)
                  (if (not (valid-bound-ids?-6575 id-9619))
                    (syntax-violation
                      'letrec
                      "duplicate bound variable"
                      e-9590)
                    (let ((labels-9712 (gen-labels-6552 id-9619))
                          (new-vars-9713 (map gen-var-6599 id-9619)))
                      (let ((w-9714
                              (make-binding-wrap-6563
                                id-9619
                                labels-9712
                                w-9592))
                            (r-9715
                              (extend-var-env-6544
                                labels-9712
                                new-vars-9713
                                r-9591)))
                        (build-letrec-6533
                          s-9593
                          #f
                          (map syntax->datum id-9619)
                          new-vars-9713
                          (map (lambda (x-9800)
                                 (expand-6585 x-9800 r-9715 w-9714 mod-9594))
                               val-9620)
                          (expand-body-6589
                            (cons e1-9621 e2-9622)
                            (wrap-6578
                              (begin
                                (if (if (pair? e-9590) s-9593 #f)
                                  (set-source-properties! e-9590 s-9593))
                                e-9590)
                              w-9714
                              mod-9594)
                            r-9715
                            w-9714
                            mod-9594))))))
                tmp-9596)
              (syntax-violation
                'letrec
                "bad letrec"
                (wrap-6578
                  (begin
                    (if (if (pair? e-9590) s-9593 #f)
                      (set-source-properties! e-9590 s-9593))
                    e-9590)
                  w-9592
                  mod-9594))))))
      (global-extend-6547
        'core
        'letrec*
        (lambda (e-10195 r-10196 w-10197 s-10198 mod-10199)
          (let ((tmp-10201
                  ($sc-dispatch
                    e-10195
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-10201
                  (@apply
                    (lambda (id-10205 val-10206 e1-10207 e2-10208)
                      (and-map id?-6549 id-10205))
                    tmp-10201)
                  #f)
              (@apply
                (lambda (id-10224 val-10225 e1-10226 e2-10227)
                  (if (not (valid-bound-ids?-6575 id-10224))
                    (syntax-violation
                      'letrec*
                      "duplicate bound variable"
                      e-10195)
                    (let ((labels-10317 (gen-labels-6552 id-10224))
                          (new-vars-10318 (map gen-var-6599 id-10224)))
                      (let ((w-10319
                              (make-binding-wrap-6563
                                id-10224
                                labels-10317
                                w-10197))
                            (r-10320
                              (extend-var-env-6544
                                labels-10317
                                new-vars-10318
                                r-10196)))
                        (build-letrec-6533
                          s-10198
                          #t
                          (map syntax->datum id-10224)
                          new-vars-10318
                          (map (lambda (x-10405)
                                 (expand-6585
                                   x-10405
                                   r-10320
                                   w-10319
                                   mod-10199))
                               val-10225)
                          (expand-body-6589
                            (cons e1-10226 e2-10227)
                            (wrap-6578
                              (begin
                                (if (if (pair? e-10195) s-10198 #f)
                                  (set-source-properties! e-10195 s-10198))
                                e-10195)
                              w-10319
                              mod-10199)
                            r-10320
                            w-10319
                            mod-10199))))))
                tmp-10201)
              (syntax-violation
                'letrec*
                "bad letrec*"
                (wrap-6578
                  (begin
                    (if (if (pair? e-10195) s-10198 #f)
                      (set-source-properties! e-10195 s-10198))
                    e-10195)
                  w-10197
                  mod-10199))))))
      (global-extend-6547
        'core
        'set!
        (lambda (e-10839 r-10840 w-10841 s-10842 mod-10843)
          (let ((tmp-10845 ($sc-dispatch e-10839 '(_ any any))))
            (if (if tmp-10845
                  (@apply
                    (lambda (id-10849 val-10850)
                      (if (symbol? id-10849)
                        #t
                        (if (if (vector? id-10849)
                              (if (= (vector-length id-10849) 4)
                                (eq? (vector-ref id-10849 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-10849 1))
                          #f)))
                    tmp-10845)
                  #f)
              (@apply
                (lambda (id-10877 val-10878)
                  (let ((n-10879 (id-var-name-6568 id-10877 w-10841))
                        (id-mod-10880
                          (if (if (vector? id-10877)
                                (if (= (vector-length id-10877) 4)
                                  (eq? (vector-ref id-10877 0) 'syntax-object)
                                  #f)
                                #f)
                            (vector-ref id-10877 3)
                            mod-10843)))
                    (let ((b-10881
                            (let ((t-10922 (assq n-10879 r-10840)))
                              (if t-10922
                                (cdr t-10922)
                                (if (symbol? n-10879)
                                  (let ((t-10927
                                          (get-global-definition-hook-6512
                                            n-10879
                                            id-mod-10880)))
                                    (if t-10927 t-10927 '(global)))
                                  '(displaced-lexical))))))
                      (let ((atom-key-10882 (car b-10881)))
                        (if (eqv? atom-key-10882 'lexical)
                          (build-lexical-assignment-6520
                            s-10842
                            (syntax->datum id-10877)
                            (cdr b-10881)
                            (expand-6585 val-10878 r-10840 w-10841 mod-10843))
                          (if (eqv? atom-key-10882 'global)
                            (build-global-assignment-6523
                              s-10842
                              n-10879
                              (expand-6585 val-10878 r-10840 w-10841 mod-10843)
                              id-mod-10880)
                            (if (eqv? atom-key-10882 'macro)
                              (let ((p-11241 (cdr b-10881)))
                                (if (procedure-property
                                      p-11241
                                      'variable-transformer)
                                  (expand-6585
                                    (expand-macro-6588
                                      p-11241
                                      e-10839
                                      r-10840
                                      w-10841
                                      s-10842
                                      #f
                                      mod-10843)
                                    r-10840
                                    '(())
                                    mod-10843)
                                  (syntax-violation
                                    'set!
                                    "not a variable transformer"
                                    (wrap-6578 e-10839 w-10841 mod-10843)
                                    (wrap-6578
                                      id-10877
                                      w-10841
                                      id-mod-10880))))
                              (if (eqv? atom-key-10882 'displaced-lexical)
                                (syntax-violation
                                  'set!
                                  "identifier out of context"
                                  (wrap-6578 id-10877 w-10841 mod-10843))
                                (syntax-violation
                                  'set!
                                  "bad set!"
                                  (wrap-6578
                                    (begin
                                      (if (if (pair? e-10839) s-10842 #f)
                                        (set-source-properties!
                                          e-10839
                                          s-10842))
                                      e-10839)
                                    w-10841
                                    mod-10843))))))))))
                tmp-10845)
              (let ((tmp-11336
                      ($sc-dispatch e-10839 '(_ (any . each-any) any))))
                (if tmp-11336
                  (@apply
                    (lambda (head-11340 tail-11341 val-11342)
                      (call-with-values
                        (lambda ()
                          (syntax-type-6584
                            head-11340
                            r-10840
                            '(())
                            #f
                            #f
                            mod-10843
                            #t))
                        (lambda (type-11345
                                 value-11346
                                 formform-11347
                                 ee-11348
                                 ww-11349
                                 ss-11350
                                 modmod-11351)
                          (if (eqv? type-11345 'module-ref)
                            (let ((val-11355
                                    (expand-6585
                                      val-11342
                                      r-10840
                                      w-10841
                                      mod-10843)))
                              (call-with-values
                                (lambda ()
                                  (value-11346
                                    (cons head-11340 tail-11341)
                                    r-10840
                                    w-10841))
                                (lambda (e-11356
                                         r-11357
                                         w-11358
                                         s*-11359
                                         mod-11360)
                                  (let ((tmp-11362 (list e-11356)))
                                    (if (@apply
                                          (lambda (e-11364)
                                            (if (symbol? e-11364)
                                              #t
                                              (if (if (vector? e-11364)
                                                    (if (= (vector-length
                                                             e-11364)
                                                           4)
                                                      (eq? (vector-ref
                                                             e-11364
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref e-11364 1))
                                                #f)))
                                          tmp-11362)
                                      (@apply
                                        (lambda (e-11394)
                                          (build-global-assignment-6523
                                            s-10842
                                            (syntax->datum e-11394)
                                            val-11355
                                            mod-11360))
                                        tmp-11362)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        e-11356))))))
                            (build-application-6516
                              s-10842
                              (let ((e-11619
                                      (list '#(syntax-object
                                               setter
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(type
                                                    value
                                                    formform
                                                    ee
                                                    ww
                                                    ss
                                                    modmod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-5730"
                                                    "l-*-5731"
                                                    "l-*-5732"
                                                    "l-*-5733"
                                                    "l-*-5734"
                                                    "l-*-5735"
                                                    "l-*-5736"))
                                                #(ribcage
                                                  #(head tail val)
                                                  #((top) (top) (top))
                                                  #("l-*-5715"
                                                    "l-*-5716"
                                                    "l-*-5717"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e r w s mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-5679"
                                                    "l-*-5680"
                                                    "l-*-5681"
                                                    "l-*-5682"
                                                    "l-*-5683"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-2527"
                                                   "l-*-2525"
                                                   "l-*-2523"
                                                   "l-*-2521"
                                                   "l-*-2519"
                                                   "l-*-2517"
                                                   "l-*-2515"
                                                   "l-*-2513"
                                                   "l-*-2511"
                                                   "l-*-2509"
                                                   "l-*-2507"
                                                   "l-*-2505"
                                                   "l-*-2503"
                                                   "l-*-2501"
                                                   "l-*-2499"
                                                   "l-*-2497"
                                                   "l-*-2495"
                                                   "l-*-2493"
                                                   "l-*-2491"
                                                   "l-*-2489"
                                                   "l-*-2487"
                                                   "l-*-2485"
                                                   "l-*-2483"
                                                   "l-*-2481"
                                                   "l-*-2479"
                                                   "l-*-2477"
                                                   "l-*-2475"
                                                   "l-*-2473"
                                                   "l-*-2471"
                                                   "l-*-2469"
                                                   "l-*-2467"
                                                   "l-*-2465"
                                                   "l-*-2463"
                                                   "l-*-2461"
                                                   "l-*-2459"
                                                   "l-*-2457"
                                                   "l-*-2455"
                                                   "l-*-2453"
                                                   "l-*-2451"
                                                   "l-*-2450"
                                                   "l-*-2448"
                                                   "l-*-2445"
                                                   "l-*-2444"
                                                   "l-*-2443"
                                                   "l-*-2441"
                                                   "l-*-2440"
                                                   "l-*-2438"
                                                   "l-*-2436"
                                                   "l-*-2434"
                                                   "l-*-2432"
                                                   "l-*-2430"
                                                   "l-*-2428"
                                                   "l-*-2426"
                                                   "l-*-2424"
                                                   "l-*-2421"
                                                   "l-*-2419"
                                                   "l-*-2418"
                                                   "l-*-2416"
                                                   "l-*-2414"
                                                   "l-*-2412"
                                                   "l-*-2410"
                                                   "l-*-2409"
                                                   "l-*-2408"
                                                   "l-*-2407"
                                                   "l-*-2405"
                                                   "l-*-2404"
                                                   "l-*-2401"
                                                   "l-*-2399"
                                                   "l-*-2397"
                                                   "l-*-2395"
                                                   "l-*-2393"
                                                   "l-*-2391"
                                                   "l-*-2389"
                                                   "l-*-2388"
                                                   "l-*-2387"
                                                   "l-*-2385"
                                                   "l-*-2383"
                                                   "l-*-2382"
                                                   "l-*-2379"
                                                   "l-*-2378"
                                                   "l-*-2376"
                                                   "l-*-2374"
                                                   "l-*-2372"
                                                   "l-*-2370"
                                                   "l-*-2368"
                                                   "l-*-2366"
                                                   "l-*-2364"
                                                   "l-*-2362"
                                                   "l-*-2360"
                                                   "l-*-2357"
                                                   "l-*-2355"
                                                   "l-*-2353"
                                                   "l-*-2351"
                                                   "l-*-2349"
                                                   "l-*-2347"
                                                   "l-*-2345"
                                                   "l-*-2343"
                                                   "l-*-2341"
                                                   "l-*-2339"
                                                   "l-*-2337"
                                                   "l-*-2335"
                                                   "l-*-2333"
                                                   "l-*-2331"
                                                   "l-*-2329"
                                                   "l-*-2327"
                                                   "l-*-2325"
                                                   "l-*-2323"
                                                   "l-*-2321"
                                                   "l-*-2319"
                                                   "l-*-2317"
                                                   "l-*-2315"
                                                   "l-*-2313"
                                                   "l-*-2311"
                                                   "l-*-2309"
                                                   "l-*-2307"
                                                   "l-*-2306"
                                                   "l-*-2305"
                                                   "l-*-2304"
                                                   "l-*-2303"
                                                   "l-*-2301"
                                                   "l-*-2299"
                                                   "l-*-2297"
                                                   "l-*-2294"
                                                   "l-*-2292"
                                                   "l-*-2290"
                                                   "l-*-2288"
                                                   "l-*-2286"
                                                   "l-*-2284"
                                                   "l-*-2282"
                                                   "l-*-2280"
                                                   "l-*-2278"
                                                   "l-*-2276"
                                                   "l-*-2274"
                                                   "l-*-2272"
                                                   "l-*-2270"
                                                   "l-*-2268"
                                                   "l-*-2266"
                                                   "l-*-2264"
                                                   "l-*-2262"
                                                   "l-*-2260"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-2098"
                                                   "l-*-2097"
                                                   "l-*-2096")))
                                               (hygiene guile))
                                            head-11340)))
                                (call-with-values
                                  (lambda ()
                                    (syntax-type-6584
                                      e-11619
                                      r-10840
                                      w-10841
                                      (source-annotation-6542 e-11619)
                                      #f
                                      mod-10843
                                      #f))
                                  (lambda (type-11626
                                           value-11627
                                           form-11628
                                           e-11629
                                           w-11630
                                           s-11631
                                           mod-11632)
                                    (expand-expr-6586
                                      type-11626
                                      value-11627
                                      form-11628
                                      e-11629
                                      r-10840
                                      w-11630
                                      s-11631
                                      mod-11632))))
                              (map (lambda (e-11636)
                                     (call-with-values
                                       (lambda ()
                                         (syntax-type-6584
                                           e-11636
                                           r-10840
                                           w-10841
                                           (source-annotation-6542 e-11636)
                                           #f
                                           mod-10843
                                           #f))
                                       (lambda (type-11651
                                                value-11652
                                                form-11653
                                                e-11654
                                                w-11655
                                                s-11656
                                                mod-11657)
                                         (expand-expr-6586
                                           type-11651
                                           value-11652
                                           form-11653
                                           e-11654
                                           r-10840
                                           w-11655
                                           s-11656
                                           mod-11657))))
                                   (append tail-11341 (list val-11342))))))))
                    tmp-11336)
                  (syntax-violation
                    'set!
                    "bad set!"
                    (wrap-6578
                      (begin
                        (if (if (pair? e-10839) s-10842 #f)
                          (set-source-properties! e-10839 s-10842))
                        e-10839)
                      w-10841
                      mod-10843))))))))
      (module-define!
        (current-module)
        '@
        (make-syntax-transformer
          '@
          'module-ref
          (lambda (e-11700 r-11701 w-11702)
            (let ((tmp-11704
                    ($sc-dispatch e-11700 '(_ each-any any))))
              (if (if tmp-11704
                    (@apply
                      (lambda (mod-11707 id-11708)
                        (if (and-map id?-6549 mod-11707)
                          (if (symbol? id-11708)
                            #t
                            (if (if (vector? id-11708)
                                  (if (= (vector-length id-11708) 4)
                                    (eq? (vector-ref id-11708 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref id-11708 1))
                              #f))
                          #f))
                      tmp-11704)
                    #f)
                (@apply
                  (lambda (mod-11748 id-11749)
                    (values
                      (syntax->datum id-11749)
                      r-11701
                      w-11702
                      #f
                      (syntax->datum
                        (cons '#(syntax-object
                                 public
                                 ((top)
                                  #(ribcage
                                    #(mod id)
                                    #((top) (top))
                                    #("l-*-5778" "l-*-5779"))
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(e r w)
                                    #((top) (top) (top))
                                    #("l-*-5766" "l-*-5767" "l-*-5768"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      expand-lambda-case
                                      lambda*-formals
                                      expand-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      expand-void
                                      eval-local-transformer
                                      expand-local-syntax
                                      expand-body
                                      expand-macro
                                      expand-application
                                      expand-expr
                                      expand
                                      syntax-type
                                      parse-when-list
                                      expand-install-global
                                      expand-top-sequence
                                      expand-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      with-transformer-environment
                                      transformer-environment
                                      resolve-identifier
                                      locally-bound-identifiers
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-application
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      session-id
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-sequence
                                      make-application
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("l-*-2527"
                                     "l-*-2525"
                                     "l-*-2523"
                                     "l-*-2521"
                                     "l-*-2519"
                                     "l-*-2517"
                                     "l-*-2515"
                                     "l-*-2513"
                                     "l-*-2511"
                                     "l-*-2509"
                                     "l-*-2507"
                                     "l-*-2505"
                                     "l-*-2503"
                                     "l-*-2501"
                                     "l-*-2499"
                                     "l-*-2497"
                                     "l-*-2495"
                                     "l-*-2493"
                                     "l-*-2491"
                                     "l-*-2489"
                                     "l-*-2487"
                                     "l-*-2485"
                                     "l-*-2483"
                                     "l-*-2481"
                                     "l-*-2479"
                                     "l-*-2477"
                                     "l-*-2475"
                                     "l-*-2473"
                                     "l-*-2471"
                                     "l-*-2469"
                                     "l-*-2467"
                                     "l-*-2465"
                                     "l-*-2463"
                                     "l-*-2461"
                                     "l-*-2459"
                                     "l-*-2457"
                                     "l-*-2455"
                                     "l-*-2453"
                                     "l-*-2451"
                                     "l-*-2450"
                                     "l-*-2448"
                                     "l-*-2445"
                                     "l-*-2444"
                                     "l-*-2443"
                                     "l-*-2441"
                                     "l-*-2440"
                                     "l-*-2438"
                                     "l-*-2436"
                                     "l-*-2434"
                                     "l-*-2432"
                                     "l-*-2430"
                                     "l-*-2428"
                                     "l-*-2426"
                                     "l-*-2424"
                                     "l-*-2421"
                                     "l-*-2419"
                                     "l-*-2418"
                                     "l-*-2416"
                                     "l-*-2414"
                                     "l-*-2412"
                                     "l-*-2410"
                                     "l-*-2409"
                                     "l-*-2408"
                                     "l-*-2407"
                                     "l-*-2405"
                                     "l-*-2404"
                                     "l-*-2401"
                                     "l-*-2399"
                                     "l-*-2397"
                                     "l-*-2395"
                                     "l-*-2393"
                                     "l-*-2391"
                                     "l-*-2389"
                                     "l-*-2388"
                                     "l-*-2387"
                                     "l-*-2385"
                                     "l-*-2383"
                                     "l-*-2382"
                                     "l-*-2379"
                                     "l-*-2378"
                                     "l-*-2376"
                                     "l-*-2374"
                                     "l-*-2372"
                                     "l-*-2370"
                                     "l-*-2368"
                                     "l-*-2366"
                                     "l-*-2364"
                                     "l-*-2362"
                                     "l-*-2360"
                                     "l-*-2357"
                                     "l-*-2355"
                                     "l-*-2353"
                                     "l-*-2351"
                                     "l-*-2349"
                                     "l-*-2347"
                                     "l-*-2345"
                                     "l-*-2343"
                                     "l-*-2341"
                                     "l-*-2339"
                                     "l-*-2337"
                                     "l-*-2335"
                                     "l-*-2333"
                                     "l-*-2331"
                                     "l-*-2329"
                                     "l-*-2327"
                                     "l-*-2325"
                                     "l-*-2323"
                                     "l-*-2321"
                                     "l-*-2319"
                                     "l-*-2317"
                                     "l-*-2315"
                                     "l-*-2313"
                                     "l-*-2311"
                                     "l-*-2309"
                                     "l-*-2307"
                                     "l-*-2306"
                                     "l-*-2305"
                                     "l-*-2304"
                                     "l-*-2303"
                                     "l-*-2301"
                                     "l-*-2299"
                                     "l-*-2297"
                                     "l-*-2294"
                                     "l-*-2292"
                                     "l-*-2290"
                                     "l-*-2288"
                                     "l-*-2286"
                                     "l-*-2284"
                                     "l-*-2282"
                                     "l-*-2280"
                                     "l-*-2278"
                                     "l-*-2276"
                                     "l-*-2274"
                                     "l-*-2272"
                                     "l-*-2270"
                                     "l-*-2268"
                                     "l-*-2266"
                                     "l-*-2264"
                                     "l-*-2262"
                                     "l-*-2260"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("l-*-2098" "l-*-2097" "l-*-2096")))
                                 (hygiene guile))
                              mod-11748))))
                  tmp-11704)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  e-11700))))))
      (global-extend-6547
        'module-ref
        '@@
        (lambda (e-11841 r-11842 w-11843)
          (letrec*
            ((remodulate-11844
               (lambda (x-11879 mod-11880)
                 (if (pair? x-11879)
                   (cons (remodulate-11844 (car x-11879) mod-11880)
                         (remodulate-11844 (cdr x-11879) mod-11880))
                   (if (if (vector? x-11879)
                         (if (= (vector-length x-11879) 4)
                           (eq? (vector-ref x-11879 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((expression-11894
                             (remodulate-11844
                               (vector-ref x-11879 1)
                               mod-11880))
                           (wrap-11895 (vector-ref x-11879 2)))
                       (vector
                         'syntax-object
                         expression-11894
                         wrap-11895
                         mod-11880))
                     (if (vector? x-11879)
                       (let ((n-11903 (vector-length x-11879)))
                         (let ((v-11904 (make-vector n-11903)))
                           (letrec*
                             ((loop-11905
                                (lambda (i-11952)
                                  (if (= i-11952 n-11903)
                                    v-11904
                                    (begin
                                      (vector-set!
                                        v-11904
                                        i-11952
                                        (remodulate-11844
                                          (vector-ref x-11879 i-11952)
                                          mod-11880))
                                      (loop-11905 (#{1+}# i-11952)))))))
                             (loop-11905 0))))
                       x-11879))))))
            (let ((tmp-11846
                    ($sc-dispatch e-11841 '(_ each-any any))))
              (if (if tmp-11846
                    (@apply
                      (lambda (mod-11850 exp-11851)
                        (and-map id?-6549 mod-11850))
                      tmp-11846)
                    #f)
                (@apply
                  (lambda (mod-11867 exp-11868)
                    (let ((mod-11869
                            (syntax->datum
                              (cons '#(syntax-object
                                       private
                                       ((top)
                                        #(ribcage
                                          #(mod exp)
                                          #((top) (top))
                                          #("l-*-5822" "l-*-5823"))
                                        #(ribcage
                                          (remodulate)
                                          ((top))
                                          ("l-*-5789"))
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("l-*-5786" "l-*-5787" "l-*-5788"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-application
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            with-transformer-environment
                                            transformer-environment
                                            resolve-identifier
                                            locally-bound-identifiers
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            session-id
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("l-*-2527"
                                           "l-*-2525"
                                           "l-*-2523"
                                           "l-*-2521"
                                           "l-*-2519"
                                           "l-*-2517"
                                           "l-*-2515"
                                           "l-*-2513"
                                           "l-*-2511"
                                           "l-*-2509"
                                           "l-*-2507"
                                           "l-*-2505"
                                           "l-*-2503"
                                           "l-*-2501"
                                           "l-*-2499"
                                           "l-*-2497"
                                           "l-*-2495"
                                           "l-*-2493"
                                           "l-*-2491"
                                           "l-*-2489"
                                           "l-*-2487"
                                           "l-*-2485"
                                           "l-*-2483"
                                           "l-*-2481"
                                           "l-*-2479"
                                           "l-*-2477"
                                           "l-*-2475"
                                           "l-*-2473"
                                           "l-*-2471"
                                           "l-*-2469"
                                           "l-*-2467"
                                           "l-*-2465"
                                           "l-*-2463"
                                           "l-*-2461"
                                           "l-*-2459"
                                           "l-*-2457"
                                           "l-*-2455"
                                           "l-*-2453"
                                           "l-*-2451"
                                           "l-*-2450"
                                           "l-*-2448"
                                           "l-*-2445"
                                           "l-*-2444"
                                           "l-*-2443"
                                           "l-*-2441"
                                           "l-*-2440"
                                           "l-*-2438"
                                           "l-*-2436"
                                           "l-*-2434"
                                           "l-*-2432"
                                           "l-*-2430"
                                           "l-*-2428"
                                           "l-*-2426"
                                           "l-*-2424"
                                           "l-*-2421"
                                           "l-*-2419"
                                           "l-*-2418"
                                           "l-*-2416"
                                           "l-*-2414"
                                           "l-*-2412"
                                           "l-*-2410"
                                           "l-*-2409"
                                           "l-*-2408"
                                           "l-*-2407"
                                           "l-*-2405"
                                           "l-*-2404"
                                           "l-*-2401"
                                           "l-*-2399"
                                           "l-*-2397"
                                           "l-*-2395"
                                           "l-*-2393"
                                           "l-*-2391"
                                           "l-*-2389"
                                           "l-*-2388"
                                           "l-*-2387"
                                           "l-*-2385"
                                           "l-*-2383"
                                           "l-*-2382"
                                           "l-*-2379"
                                           "l-*-2378"
                                           "l-*-2376"
                                           "l-*-2374"
                                           "l-*-2372"
                                           "l-*-2370"
                                           "l-*-2368"
                                           "l-*-2366"
                                           "l-*-2364"
                                           "l-*-2362"
                                           "l-*-2360"
                                           "l-*-2357"
                                           "l-*-2355"
                                           "l-*-2353"
                                           "l-*-2351"
                                           "l-*-2349"
                                           "l-*-2347"
                                           "l-*-2345"
                                           "l-*-2343"
                                           "l-*-2341"
                                           "l-*-2339"
                                           "l-*-2337"
                                           "l-*-2335"
                                           "l-*-2333"
                                           "l-*-2331"
                                           "l-*-2329"
                                           "l-*-2327"
                                           "l-*-2325"
                                           "l-*-2323"
                                           "l-*-2321"
                                           "l-*-2319"
                                           "l-*-2317"
                                           "l-*-2315"
                                           "l-*-2313"
                                           "l-*-2311"
                                           "l-*-2309"
                                           "l-*-2307"
                                           "l-*-2306"
                                           "l-*-2305"
                                           "l-*-2304"
                                           "l-*-2303"
                                           "l-*-2301"
                                           "l-*-2299"
                                           "l-*-2297"
                                           "l-*-2294"
                                           "l-*-2292"
                                           "l-*-2290"
                                           "l-*-2288"
                                           "l-*-2286"
                                           "l-*-2284"
                                           "l-*-2282"
                                           "l-*-2280"
                                           "l-*-2278"
                                           "l-*-2276"
                                           "l-*-2274"
                                           "l-*-2272"
                                           "l-*-2270"
                                           "l-*-2268"
                                           "l-*-2266"
                                           "l-*-2264"
                                           "l-*-2262"
                                           "l-*-2260"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("l-*-2098" "l-*-2097" "l-*-2096")))
                                       (hygiene guile))
                                    mod-11867))))
                      (values
                        (remodulate-11844 exp-11868 mod-11869)
                        r-11842
                        w-11843
                        (source-annotation-6542 exp-11868)
                        mod-11869)))
                  tmp-11846)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  e-11841))))))
      (global-extend-6547
        'core
        'if
        (lambda (e-12053 r-12054 w-12055 s-12056 mod-12057)
          (let ((tmp-12059 ($sc-dispatch e-12053 '(_ any any))))
            (if tmp-12059
              (@apply
                (lambda (test-12063 then-12064)
                  (build-conditional-6517
                    s-12056
                    (expand-6585
                      test-12063
                      r-12054
                      w-12055
                      mod-12057)
                    (expand-6585
                      then-12064
                      r-12054
                      w-12055
                      mod-12057)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 0)
                      #f)))
                tmp-12059)
              (let ((tmp-12289
                      ($sc-dispatch e-12053 '(_ any any any))))
                (if tmp-12289
                  (@apply
                    (lambda (test-12293 then-12294 else-12295)
                      (build-conditional-6517
                        s-12056
                        (expand-6585
                          test-12293
                          r-12054
                          w-12055
                          mod-12057)
                        (expand-6585
                          then-12294
                          r-12054
                          w-12055
                          mod-12057)
                        (expand-6585
                          else-12295
                          r-12054
                          w-12055
                          mod-12057)))
                    tmp-12289)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    e-12053)))))))
      (global-extend-6547
        'core
        'with-fluids
        (lambda (e-12694 r-12695 w-12696 s-12697 mod-12698)
          (let ((tmp-12700
                  ($sc-dispatch
                    e-12694
                    '(_ #(each (any any)) any . each-any))))
            (if tmp-12700
              (@apply
                (lambda (fluid-12704 val-12705 b-12706 b*-12707)
                  (build-dynlet-6518
                    s-12697
                    (map (lambda (x-12788)
                           (expand-6585 x-12788 r-12695 w-12696 mod-12698))
                         fluid-12704)
                    (map (lambda (x-12858)
                           (expand-6585 x-12858 r-12695 w-12696 mod-12698))
                         val-12705)
                    (expand-body-6589
                      (cons b-12706 b*-12707)
                      (wrap-6578
                        (begin
                          (if (if (pair? e-12694) s-12697 #f)
                            (set-source-properties! e-12694 s-12697))
                          e-12694)
                        w-12696
                        mod-12698)
                      r-12695
                      w-12696
                      mod-12698)))
                tmp-12700)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                e-12694)))))
      (module-define!
        (current-module)
        'begin
        (make-syntax-transformer 'begin 'begin '()))
      (module-define!
        (current-module)
        'define
        (make-syntax-transformer 'define 'define '()))
      (module-define!
        (current-module)
        'define-syntax
        (make-syntax-transformer
          'define-syntax
          'define-syntax
          '()))
      (module-define!
        (current-module)
        'define-syntax-parameter
        (make-syntax-transformer
          'define-syntax-parameter
          'define-syntax-parameter
          '()))
      (module-define!
        (current-module)
        'eval-when
        (make-syntax-transformer
          'eval-when
          'eval-when
          '()))
      (global-extend-6547
        'core
        'syntax-case
        (letrec*
          ((convert-pattern-13226
             (lambda (pattern-14823 keys-14824)
               (letrec*
                 ((cvt*-14825
                    (lambda (p*-15449 n-15450 ids-15451)
                      (if (not (pair? p*-15449))
                        (cvt-14827 p*-15449 n-15450 ids-15451)
                        (call-with-values
                          (lambda ()
                            (cvt*-14825 (cdr p*-15449) n-15450 ids-15451))
                          (lambda (y-15454 ids-15455)
                            (call-with-values
                              (lambda ()
                                (cvt-14827 (car p*-15449) n-15450 ids-15455))
                              (lambda (x-15458 ids-15459)
                                (values
                                  (cons x-15458 y-15454)
                                  ids-15459))))))))
                  (v-reverse-14826
                    (lambda (x-15460)
                      (letrec*
                        ((loop-15461
                           (lambda (r-15541 x-15542)
                             (if (not (pair? x-15542))
                               (values r-15541 x-15542)
                               (loop-15461
                                 (cons (car x-15542) r-15541)
                                 (cdr x-15542))))))
                        (loop-15461 '() x-15460))))
                  (cvt-14827
                    (lambda (p-14830 n-14831 ids-14832)
                      (if (if (symbol? p-14830)
                            #t
                            (if (if (vector? p-14830)
                                  (if (= (vector-length p-14830) 4)
                                    (eq? (vector-ref p-14830 0) 'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref p-14830 1))
                              #f))
                        (if (bound-id-member?-6577 p-14830 keys-14824)
                          (values (vector 'free-id p-14830) ids-14832)
                          (if (if (eq? (if (if (vector? p-14830)
                                             (if (= (vector-length p-14830) 4)
                                               (eq? (vector-ref p-14830 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (vector-ref p-14830 1)
                                         p-14830)
                                       (if (if (= (vector-length
                                                    '#(syntax-object
                                                       _
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p n ids)
                                                          #((top) (top) (top))
                                                          #("l-*-5923"
                                                            "l-*-5924"
                                                            "l-*-5925"))
                                                        #(ribcage
                                                          (cvt v-reverse cvt*)
                                                          ((top) (top) (top))
                                                          ("l-*-5896"
                                                           "l-*-5894"
                                                           "l-*-5892"))
                                                        #(ribcage
                                                          #(pattern keys)
                                                          #((top) (top))
                                                          #("l-*-5890"
                                                            "l-*-5891"))
                                                        #(ribcage
                                                          (gen-syntax-case
                                                            gen-clause
                                                            build-dispatch-call
                                                            convert-pattern)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-5886"
                                                           "l-*-5884"
                                                           "l-*-5882"
                                                           "l-*-5880"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            session-id
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-2527"
                                                           "l-*-2525"
                                                           "l-*-2523"
                                                           "l-*-2521"
                                                           "l-*-2519"
                                                           "l-*-2517"
                                                           "l-*-2515"
                                                           "l-*-2513"
                                                           "l-*-2511"
                                                           "l-*-2509"
                                                           "l-*-2507"
                                                           "l-*-2505"
                                                           "l-*-2503"
                                                           "l-*-2501"
                                                           "l-*-2499"
                                                           "l-*-2497"
                                                           "l-*-2495"
                                                           "l-*-2493"
                                                           "l-*-2491"
                                                           "l-*-2489"
                                                           "l-*-2487"
                                                           "l-*-2485"
                                                           "l-*-2483"
                                                           "l-*-2481"
                                                           "l-*-2479"
                                                           "l-*-2477"
                                                           "l-*-2475"
                                                           "l-*-2473"
                                                           "l-*-2471"
                                                           "l-*-2469"
                                                           "l-*-2467"
                                                           "l-*-2465"
                                                           "l-*-2463"
                                                           "l-*-2461"
                                                           "l-*-2459"
                                                           "l-*-2457"
                                                           "l-*-2455"
                                                           "l-*-2453"
                                                           "l-*-2451"
                                                           "l-*-2450"
                                                           "l-*-2448"
                                                           "l-*-2445"
                                                           "l-*-2444"
                                                           "l-*-2443"
                                                           "l-*-2441"
                                                           "l-*-2440"
                                                           "l-*-2438"
                                                           "l-*-2436"
                                                           "l-*-2434"
                                                           "l-*-2432"
                                                           "l-*-2430"
                                                           "l-*-2428"
                                                           "l-*-2426"
                                                           "l-*-2424"
                                                           "l-*-2421"
                                                           "l-*-2419"
                                                           "l-*-2418"
                                                           "l-*-2416"
                                                           "l-*-2414"
                                                           "l-*-2412"
                                                           "l-*-2410"
                                                           "l-*-2409"
                                                           "l-*-2408"
                                                           "l-*-2407"
                                                           "l-*-2405"
                                                           "l-*-2404"
                                                           "l-*-2401"
                                                           "l-*-2399"
                                                           "l-*-2397"
                                                           "l-*-2395"
                                                           "l-*-2393"
                                                           "l-*-2391"
                                                           "l-*-2389"
                                                           "l-*-2388"
                                                           "l-*-2387"
                                                           "l-*-2385"
                                                           "l-*-2383"
                                                           "l-*-2382"
                                                           "l-*-2379"
                                                           "l-*-2378"
                                                           "l-*-2376"
                                                           "l-*-2374"
                                                           "l-*-2372"
                                                           "l-*-2370"
                                                           "l-*-2368"
                                                           "l-*-2366"
                                                           "l-*-2364"
                                                           "l-*-2362"
                                                           "l-*-2360"
                                                           "l-*-2357"
                                                           "l-*-2355"
                                                           "l-*-2353"
                                                           "l-*-2351"
                                                           "l-*-2349"
                                                           "l-*-2347"
                                                           "l-*-2345"
                                                           "l-*-2343"
                                                           "l-*-2341"
                                                           "l-*-2339"
                                                           "l-*-2337"
                                                           "l-*-2335"
                                                           "l-*-2333"
                                                           "l-*-2331"
                                                           "l-*-2329"
                                                           "l-*-2327"
                                                           "l-*-2325"
                                                           "l-*-2323"
                                                           "l-*-2321"
                                                           "l-*-2319"
                                                           "l-*-2317"
                                                           "l-*-2315"
                                                           "l-*-2313"
                                                           "l-*-2311"
                                                           "l-*-2309"
                                                           "l-*-2307"
                                                           "l-*-2306"
                                                           "l-*-2305"
                                                           "l-*-2304"
                                                           "l-*-2303"
                                                           "l-*-2301"
                                                           "l-*-2299"
                                                           "l-*-2297"
                                                           "l-*-2294"
                                                           "l-*-2292"
                                                           "l-*-2290"
                                                           "l-*-2288"
                                                           "l-*-2286"
                                                           "l-*-2284"
                                                           "l-*-2282"
                                                           "l-*-2280"
                                                           "l-*-2278"
                                                           "l-*-2276"
                                                           "l-*-2274"
                                                           "l-*-2272"
                                                           "l-*-2270"
                                                           "l-*-2268"
                                                           "l-*-2266"
                                                           "l-*-2264"
                                                           "l-*-2262"
                                                           "l-*-2260"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("l-*-2098"
                                                           "l-*-2097"
                                                           "l-*-2096")))
                                                       (hygiene guile)))
                                                  4)
                                             #t
                                             #f)
                                         '_
                                         '#(syntax-object
                                            _
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(p n ids)
                                               #((top) (top) (top))
                                               #("l-*-5923"
                                                 "l-*-5924"
                                                 "l-*-5925"))
                                             #(ribcage
                                               (cvt v-reverse cvt*)
                                               ((top) (top) (top))
                                               ("l-*-5896"
                                                "l-*-5894"
                                                "l-*-5892"))
                                             #(ribcage
                                               #(pattern keys)
                                               #((top) (top))
                                               #("l-*-5890" "l-*-5891"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("l-*-5886"
                                                "l-*-5884"
                                                "l-*-5882"
                                                "l-*-5880"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 session-id
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-2527"
                                                "l-*-2525"
                                                "l-*-2523"
                                                "l-*-2521"
                                                "l-*-2519"
                                                "l-*-2517"
                                                "l-*-2515"
                                                "l-*-2513"
                                                "l-*-2511"
                                                "l-*-2509"
                                                "l-*-2507"
                                                "l-*-2505"
                                                "l-*-2503"
                                                "l-*-2501"
                                                "l-*-2499"
                                                "l-*-2497"
                                                "l-*-2495"
                                                "l-*-2493"
                                                "l-*-2491"
                                                "l-*-2489"
                                                "l-*-2487"
                                                "l-*-2485"
                                                "l-*-2483"
                                                "l-*-2481"
                                                "l-*-2479"
                                                "l-*-2477"
                                                "l-*-2475"
                                                "l-*-2473"
                                                "l-*-2471"
                                                "l-*-2469"
                                                "l-*-2467"
                                                "l-*-2465"
                                                "l-*-2463"
                                                "l-*-2461"
                                                "l-*-2459"
                                                "l-*-2457"
                                                "l-*-2455"
                                                "l-*-2453"
                                                "l-*-2451"
                                                "l-*-2450"
                                                "l-*-2448"
                                                "l-*-2445"
                                                "l-*-2444"
                                                "l-*-2443"
                                                "l-*-2441"
                                                "l-*-2440"
                                                "l-*-2438"
                                                "l-*-2436"
                                                "l-*-2434"
                                                "l-*-2432"
                                                "l-*-2430"
                                                "l-*-2428"
                                                "l-*-2426"
                                                "l-*-2424"
                                                "l-*-2421"
                                                "l-*-2419"
                                                "l-*-2418"
                                                "l-*-2416"
                                                "l-*-2414"
                                                "l-*-2412"
                                                "l-*-2410"
                                                "l-*-2409"
                                                "l-*-2408"
                                                "l-*-2407"
                                                "l-*-2405"
                                                "l-*-2404"
                                                "l-*-2401"
                                                "l-*-2399"
                                                "l-*-2397"
                                                "l-*-2395"
                                                "l-*-2393"
                                                "l-*-2391"
                                                "l-*-2389"
                                                "l-*-2388"
                                                "l-*-2387"
                                                "l-*-2385"
                                                "l-*-2383"
                                                "l-*-2382"
                                                "l-*-2379"
                                                "l-*-2378"
                                                "l-*-2376"
                                                "l-*-2374"
                                                "l-*-2372"
                                                "l-*-2370"
                                                "l-*-2368"
                                                "l-*-2366"
                                                "l-*-2364"
                                                "l-*-2362"
                                                "l-*-2360"
                                                "l-*-2357"
                                                "l-*-2355"
                                                "l-*-2353"
                                                "l-*-2351"
                                                "l-*-2349"
                                                "l-*-2347"
                                                "l-*-2345"
                                                "l-*-2343"
                                                "l-*-2341"
                                                "l-*-2339"
                                                "l-*-2337"
                                                "l-*-2335"
                                                "l-*-2333"
                                                "l-*-2331"
                                                "l-*-2329"
                                                "l-*-2327"
                                                "l-*-2325"
                                                "l-*-2323"
                                                "l-*-2321"
                                                "l-*-2319"
                                                "l-*-2317"
                                                "l-*-2315"
                                                "l-*-2313"
                                                "l-*-2311"
                                                "l-*-2309"
                                                "l-*-2307"
                                                "l-*-2306"
                                                "l-*-2305"
                                                "l-*-2304"
                                                "l-*-2303"
                                                "l-*-2301"
                                                "l-*-2299"
                                                "l-*-2297"
                                                "l-*-2294"
                                                "l-*-2292"
                                                "l-*-2290"
                                                "l-*-2288"
                                                "l-*-2286"
                                                "l-*-2284"
                                                "l-*-2282"
                                                "l-*-2280"
                                                "l-*-2278"
                                                "l-*-2276"
                                                "l-*-2274"
                                                "l-*-2272"
                                                "l-*-2270"
                                                "l-*-2268"
                                                "l-*-2266"
                                                "l-*-2264"
                                                "l-*-2262"
                                                "l-*-2260"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("l-*-2098"
                                                "l-*-2097"
                                                "l-*-2096")))
                                            (hygiene guile))))
                                (eq? (id-var-name-6568 p-14830 '(()))
                                     (id-var-name-6568
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("l-*-5923"
                                               "l-*-5924"
                                               "l-*-5925"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("l-*-5896"
                                              "l-*-5894"
                                              "l-*-5892"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("l-*-5890" "l-*-5891"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("l-*-5886"
                                              "l-*-5884"
                                              "l-*-5882"
                                              "l-*-5880"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               with-transformer-environment
                                               transformer-environment
                                               resolve-identifier
                                               locally-bound-identifiers
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               session-id
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-2527"
                                              "l-*-2525"
                                              "l-*-2523"
                                              "l-*-2521"
                                              "l-*-2519"
                                              "l-*-2517"
                                              "l-*-2515"
                                              "l-*-2513"
                                              "l-*-2511"
                                              "l-*-2509"
                                              "l-*-2507"
                                              "l-*-2505"
                                              "l-*-2503"
                                              "l-*-2501"
                                              "l-*-2499"
                                              "l-*-2497"
                                              "l-*-2495"
                                              "l-*-2493"
                                              "l-*-2491"
                                              "l-*-2489"
                                              "l-*-2487"
                                              "l-*-2485"
                                              "l-*-2483"
                                              "l-*-2481"
                                              "l-*-2479"
                                              "l-*-2477"
                                              "l-*-2475"
                                              "l-*-2473"
                                              "l-*-2471"
                                              "l-*-2469"
                                              "l-*-2467"
                                              "l-*-2465"
                                              "l-*-2463"
                                              "l-*-2461"
                                              "l-*-2459"
                                              "l-*-2457"
                                              "l-*-2455"
                                              "l-*-2453"
                                              "l-*-2451"
                                              "l-*-2450"
                                              "l-*-2448"
                                              "l-*-2445"
                                              "l-*-2444"
                                              "l-*-2443"
                                              "l-*-2441"
                                              "l-*-2440"
                                              "l-*-2438"
                                              "l-*-2436"
                                              "l-*-2434"
                                              "l-*-2432"
                                              "l-*-2430"
                                              "l-*-2428"
                                              "l-*-2426"
                                              "l-*-2424"
                                              "l-*-2421"
                                              "l-*-2419"
                                              "l-*-2418"
                                              "l-*-2416"
                                              "l-*-2414"
                                              "l-*-2412"
                                              "l-*-2410"
                                              "l-*-2409"
                                              "l-*-2408"
                                              "l-*-2407"
                                              "l-*-2405"
                                              "l-*-2404"
                                              "l-*-2401"
                                              "l-*-2399"
                                              "l-*-2397"
                                              "l-*-2395"
                                              "l-*-2393"
                                              "l-*-2391"
                                              "l-*-2389"
                                              "l-*-2388"
                                              "l-*-2387"
                                              "l-*-2385"
                                              "l-*-2383"
                                              "l-*-2382"
                                              "l-*-2379"
                                              "l-*-2378"
                                              "l-*-2376"
                                              "l-*-2374"
                                              "l-*-2372"
                                              "l-*-2370"
                                              "l-*-2368"
                                              "l-*-2366"
                                              "l-*-2364"
                                              "l-*-2362"
                                              "l-*-2360"
                                              "l-*-2357"
                                              "l-*-2355"
                                              "l-*-2353"
                                              "l-*-2351"
                                              "l-*-2349"
                                              "l-*-2347"
                                              "l-*-2345"
                                              "l-*-2343"
                                              "l-*-2341"
                                              "l-*-2339"
                                              "l-*-2337"
                                              "l-*-2335"
                                              "l-*-2333"
                                              "l-*-2331"
                                              "l-*-2329"
                                              "l-*-2327"
                                              "l-*-2325"
                                              "l-*-2323"
                                              "l-*-2321"
                                              "l-*-2319"
                                              "l-*-2317"
                                              "l-*-2315"
                                              "l-*-2313"
                                              "l-*-2311"
                                              "l-*-2309"
                                              "l-*-2307"
                                              "l-*-2306"
                                              "l-*-2305"
                                              "l-*-2304"
                                              "l-*-2303"
                                              "l-*-2301"
                                              "l-*-2299"
                                              "l-*-2297"
                                              "l-*-2294"
                                              "l-*-2292"
                                              "l-*-2290"
                                              "l-*-2288"
                                              "l-*-2286"
                                              "l-*-2284"
                                              "l-*-2282"
                                              "l-*-2280"
                                              "l-*-2278"
                                              "l-*-2276"
                                              "l-*-2274"
                                              "l-*-2272"
                                              "l-*-2270"
                                              "l-*-2268"
                                              "l-*-2266"
                                              "l-*-2264"
                                              "l-*-2262"
                                              "l-*-2260"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("l-*-2098"
                                              "l-*-2097"
                                              "l-*-2096")))
                                          (hygiene guile))
                                       '(())))
                                #f)
                            (values '_ ids-14832)
                            (values
                              'any
                              (cons (cons p-14830 n-14831) ids-14832))))
                        (let ((tmp-15152 ($sc-dispatch p-14830 '(any any))))
                          (if (if tmp-15152
                                (@apply
                                  (lambda (x-15156 dots-15157)
                                    (if (if (if (vector? dots-15157)
                                              (if (= (vector-length dots-15157)
                                                     4)
                                                (eq? (vector-ref dots-15157 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (symbol? (vector-ref dots-15157 1))
                                          #f)
                                      (if (eq? (if (if (vector? dots-15157)
                                                     (if (= (vector-length
                                                              dots-15157)
                                                            4)
                                                       (eq? (vector-ref
                                                              dots-15157
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref dots-15157 1)
                                                 dots-15157)
                                               (if (if (= (vector-length
                                                            '#(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("l-*-4404"))
                                                                #(ribcage
                                                                  (lambda-var-list
                                                                    gen-var
                                                                    strip
                                                                    expand-lambda-case
                                                                    lambda*-formals
                                                                    expand-simple-lambda
                                                                    lambda-formals
                                                                    ellipsis?
                                                                    expand-void
                                                                    eval-local-transformer
                                                                    expand-local-syntax
                                                                    expand-body
                                                                    expand-macro
                                                                    expand-application
                                                                    expand-expr
                                                                    expand
                                                                    syntax-type
                                                                    parse-when-list
                                                                    expand-install-global
                                                                    expand-top-sequence
                                                                    expand-sequence
                                                                    source-wrap
                                                                    wrap
                                                                    bound-id-member?
                                                                    distinct-bound-ids?
                                                                    valid-bound-ids?
                                                                    bound-id=?
                                                                    free-id=?
                                                                    with-transformer-environment
                                                                    transformer-environment
                                                                    resolve-identifier
                                                                    locally-bound-identifiers
                                                                    id-var-name
                                                                    same-marks?
                                                                    join-marks
                                                                    join-wraps
                                                                    smart-append
                                                                    make-binding-wrap
                                                                    extend-ribcage!
                                                                    make-empty-ribcage
                                                                    new-mark
                                                                    anti-mark
                                                                    the-anti-mark
                                                                    top-marked?
                                                                    top-wrap
                                                                    empty-wrap
                                                                    set-ribcage-labels!
                                                                    set-ribcage-marks!
                                                                    set-ribcage-symnames!
                                                                    ribcage-labels
                                                                    ribcage-marks
                                                                    ribcage-symnames
                                                                    ribcage?
                                                                    make-ribcage
                                                                    gen-labels
                                                                    gen-label
                                                                    make-rename
                                                                    rename-marks
                                                                    rename-new
                                                                    rename-old
                                                                    subst-rename?
                                                                    wrap-subst
                                                                    wrap-marks
                                                                    make-wrap
                                                                    id-sym-name&marks
                                                                    id-sym-name
                                                                    id?
                                                                    nonsymbol-id?
                                                                    global-extend
                                                                    lookup
                                                                    macros-only-env
                                                                    extend-var-env
                                                                    extend-env
                                                                    null-env
                                                                    binding-value
                                                                    binding-type
                                                                    make-binding
                                                                    arg-check
                                                                    source-annotation
                                                                    no-source
                                                                    set-syntax-object-module!
                                                                    set-syntax-object-wrap!
                                                                    set-syntax-object-expression!
                                                                    syntax-object-module
                                                                    syntax-object-wrap
                                                                    syntax-object-expression
                                                                    syntax-object?
                                                                    make-syntax-object
                                                                    build-lexical-var
                                                                    build-letrec
                                                                    build-named-let
                                                                    build-let
                                                                    build-sequence
                                                                    build-data
                                                                    build-primref
                                                                    build-lambda-case
                                                                    build-case-lambda
                                                                    build-simple-lambda
                                                                    build-global-definition
                                                                    build-global-assignment
                                                                    build-global-reference
                                                                    analyze-variable
                                                                    build-lexical-assignment
                                                                    build-lexical-reference
                                                                    build-dynlet
                                                                    build-conditional
                                                                    build-application
                                                                    build-void
                                                                    maybe-name-value!
                                                                    decorate-source
                                                                    get-global-definition-hook
                                                                    put-global-definition-hook
                                                                    session-id
                                                                    local-eval-hook
                                                                    top-level-eval-hook
                                                                    fx<
                                                                    fx=
                                                                    fx-
                                                                    fx+
                                                                    set-lambda-meta!
                                                                    lambda-meta
                                                                    lambda?
                                                                    make-dynlet
                                                                    make-letrec
                                                                    make-let
                                                                    make-lambda-case
                                                                    make-lambda
                                                                    make-sequence
                                                                    make-application
                                                                    make-conditional
                                                                    make-toplevel-define
                                                                    make-toplevel-set
                                                                    make-toplevel-ref
                                                                    make-module-set
                                                                    make-module-ref
                                                                    make-lexical-set
                                                                    make-lexical-ref
                                                                    make-primitive-ref
                                                                    make-const
                                                                    make-void)
                                                                  ((top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                  ("l-*-2527"
                                                                   "l-*-2525"
                                                                   "l-*-2523"
                                                                   "l-*-2521"
                                                                   "l-*-2519"
                                                                   "l-*-2517"
                                                                   "l-*-2515"
                                                                   "l-*-2513"
                                                                   "l-*-2511"
                                                                   "l-*-2509"
                                                                   "l-*-2507"
                                                                   "l-*-2505"
                                                                   "l-*-2503"
                                                                   "l-*-2501"
                                                                   "l-*-2499"
                                                                   "l-*-2497"
                                                                   "l-*-2495"
                                                                   "l-*-2493"
                                                                   "l-*-2491"
                                                                   "l-*-2489"
                                                                   "l-*-2487"
                                                                   "l-*-2485"
                                                                   "l-*-2483"
                                                                   "l-*-2481"
                                                                   "l-*-2479"
                                                                   "l-*-2477"
                                                                   "l-*-2475"
                                                                   "l-*-2473"
                                                                   "l-*-2471"
                                                                   "l-*-2469"
                                                                   "l-*-2467"
                                                                   "l-*-2465"
                                                                   "l-*-2463"
                                                                   "l-*-2461"
                                                                   "l-*-2459"
                                                                   "l-*-2457"
                                                                   "l-*-2455"
                                                                   "l-*-2453"
                                                                   "l-*-2451"
                                                                   "l-*-2450"
                                                                   "l-*-2448"
                                                                   "l-*-2445"
                                                                   "l-*-2444"
                                                                   "l-*-2443"
                                                                   "l-*-2441"
                                                                   "l-*-2440"
                                                                   "l-*-2438"
                                                                   "l-*-2436"
                                                                   "l-*-2434"
                                                                   "l-*-2432"
                                                                   "l-*-2430"
                                                                   "l-*-2428"
                                                                   "l-*-2426"
                                                                   "l-*-2424"
                                                                   "l-*-2421"
                                                                   "l-*-2419"
                                                                   "l-*-2418"
                                                                   "l-*-2416"
                                                                   "l-*-2414"
                                                                   "l-*-2412"
                                                                   "l-*-2410"
                                                                   "l-*-2409"
                                                                   "l-*-2408"
                                                                   "l-*-2407"
                                                                   "l-*-2405"
                                                                   "l-*-2404"
                                                                   "l-*-2401"
                                                                   "l-*-2399"
                                                                   "l-*-2397"
                                                                   "l-*-2395"
                                                                   "l-*-2393"
                                                                   "l-*-2391"
                                                                   "l-*-2389"
                                                                   "l-*-2388"
                                                                   "l-*-2387"
                                                                   "l-*-2385"
                                                                   "l-*-2383"
                                                                   "l-*-2382"
                                                                   "l-*-2379"
                                                                   "l-*-2378"
                                                                   "l-*-2376"
                                                                   "l-*-2374"
                                                                   "l-*-2372"
                                                                   "l-*-2370"
                                                                   "l-*-2368"
                                                                   "l-*-2366"
                                                                   "l-*-2364"
                                                                   "l-*-2362"
                                                                   "l-*-2360"
                                                                   "l-*-2357"
                                                                   "l-*-2355"
                                                                   "l-*-2353"
                                                                   "l-*-2351"
                                                                   "l-*-2349"
                                                                   "l-*-2347"
                                                                   "l-*-2345"
                                                                   "l-*-2343"
                                                                   "l-*-2341"
                                                                   "l-*-2339"
                                                                   "l-*-2337"
                                                                   "l-*-2335"
                                                                   "l-*-2333"
                                                                   "l-*-2331"
                                                                   "l-*-2329"
                                                                   "l-*-2327"
                                                                   "l-*-2325"
                                                                   "l-*-2323"
                                                                   "l-*-2321"
                                                                   "l-*-2319"
                                                                   "l-*-2317"
                                                                   "l-*-2315"
                                                                   "l-*-2313"
                                                                   "l-*-2311"
                                                                   "l-*-2309"
                                                                   "l-*-2307"
                                                                   "l-*-2306"
                                                                   "l-*-2305"
                                                                   "l-*-2304"
                                                                   "l-*-2303"
                                                                   "l-*-2301"
                                                                   "l-*-2299"
                                                                   "l-*-2297"
                                                                   "l-*-2294"
                                                                   "l-*-2292"
                                                                   "l-*-2290"
                                                                   "l-*-2288"
                                                                   "l-*-2286"
                                                                   "l-*-2284"
                                                                   "l-*-2282"
                                                                   "l-*-2280"
                                                                   "l-*-2278"
                                                                   "l-*-2276"
                                                                   "l-*-2274"
                                                                   "l-*-2272"
                                                                   "l-*-2270"
                                                                   "l-*-2268"
                                                                   "l-*-2266"
                                                                   "l-*-2264"
                                                                   "l-*-2262"
                                                                   "l-*-2260"))
                                                                #(ribcage
                                                                  (define-structure
                                                                    define-expansion-accessors
                                                                    define-expansion-constructors)
                                                                  ((top)
                                                                   (top)
                                                                   (top))
                                                                  ("l-*-2098"
                                                                   "l-*-2097"
                                                                   "l-*-2096")))
                                                               (hygiene
                                                                 guile)))
                                                          4)
                                                     #t
                                                     #f)
                                                 '...
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-4404"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         with-transformer-environment
                                                         transformer-environment
                                                         resolve-identifier
                                                         locally-bound-identifiers
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         session-id
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("l-*-2527"
                                                        "l-*-2525"
                                                        "l-*-2523"
                                                        "l-*-2521"
                                                        "l-*-2519"
                                                        "l-*-2517"
                                                        "l-*-2515"
                                                        "l-*-2513"
                                                        "l-*-2511"
                                                        "l-*-2509"
                                                        "l-*-2507"
                                                        "l-*-2505"
                                                        "l-*-2503"
                                                        "l-*-2501"
                                                        "l-*-2499"
                                                        "l-*-2497"
                                                        "l-*-2495"
                                                        "l-*-2493"
                                                        "l-*-2491"
                                                        "l-*-2489"
                                                        "l-*-2487"
                                                        "l-*-2485"
                                                        "l-*-2483"
                                                        "l-*-2481"
                                                        "l-*-2479"
                                                        "l-*-2477"
                                                        "l-*-2475"
                                                        "l-*-2473"
                                                        "l-*-2471"
                                                        "l-*-2469"
                                                        "l-*-2467"
                                                        "l-*-2465"
                                                        "l-*-2463"
                                                        "l-*-2461"
                                                        "l-*-2459"
                                                        "l-*-2457"
                                                        "l-*-2455"
                                                        "l-*-2453"
                                                        "l-*-2451"
                                                        "l-*-2450"
                                                        "l-*-2448"
                                                        "l-*-2445"
                                                        "l-*-2444"
                                                        "l-*-2443"
                                                        "l-*-2441"
                                                        "l-*-2440"
                                                        "l-*-2438"
                                                        "l-*-2436"
                                                        "l-*-2434"
                                                        "l-*-2432"
                                                        "l-*-2430"
                                                        "l-*-2428"
                                                        "l-*-2426"
                                                        "l-*-2424"
                                                        "l-*-2421"
                                                        "l-*-2419"
                                                        "l-*-2418"
                                                        "l-*-2416"
                                                        "l-*-2414"
                                                        "l-*-2412"
                                                        "l-*-2410"
                                                        "l-*-2409"
                                                        "l-*-2408"
                                                        "l-*-2407"
                                                        "l-*-2405"
                                                        "l-*-2404"
                                                        "l-*-2401"
                                                        "l-*-2399"
                                                        "l-*-2397"
                                                        "l-*-2395"
                                                        "l-*-2393"
                                                        "l-*-2391"
                                                        "l-*-2389"
                                                        "l-*-2388"
                                                        "l-*-2387"
                                                        "l-*-2385"
                                                        "l-*-2383"
                                                        "l-*-2382"
                                                        "l-*-2379"
                                                        "l-*-2378"
                                                        "l-*-2376"
                                                        "l-*-2374"
                                                        "l-*-2372"
                                                        "l-*-2370"
                                                        "l-*-2368"
                                                        "l-*-2366"
                                                        "l-*-2364"
                                                        "l-*-2362"
                                                        "l-*-2360"
                                                        "l-*-2357"
                                                        "l-*-2355"
                                                        "l-*-2353"
                                                        "l-*-2351"
                                                        "l-*-2349"
                                                        "l-*-2347"
                                                        "l-*-2345"
                                                        "l-*-2343"
                                                        "l-*-2341"
                                                        "l-*-2339"
                                                        "l-*-2337"
                                                        "l-*-2335"
                                                        "l-*-2333"
                                                        "l-*-2331"
                                                        "l-*-2329"
                                                        "l-*-2327"
                                                        "l-*-2325"
                                                        "l-*-2323"
                                                        "l-*-2321"
                                                        "l-*-2319"
                                                        "l-*-2317"
                                                        "l-*-2315"
                                                        "l-*-2313"
                                                        "l-*-2311"
                                                        "l-*-2309"
                                                        "l-*-2307"
                                                        "l-*-2306"
                                                        "l-*-2305"
                                                        "l-*-2304"
                                                        "l-*-2303"
                                                        "l-*-2301"
                                                        "l-*-2299"
                                                        "l-*-2297"
                                                        "l-*-2294"
                                                        "l-*-2292"
                                                        "l-*-2290"
                                                        "l-*-2288"
                                                        "l-*-2286"
                                                        "l-*-2284"
                                                        "l-*-2282"
                                                        "l-*-2280"
                                                        "l-*-2278"
                                                        "l-*-2276"
                                                        "l-*-2274"
                                                        "l-*-2272"
                                                        "l-*-2270"
                                                        "l-*-2268"
                                                        "l-*-2266"
                                                        "l-*-2264"
                                                        "l-*-2262"
                                                        "l-*-2260"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("l-*-2098"
                                                        "l-*-2097"
                                                        "l-*-2096")))
                                                    (hygiene guile))))
                                        (eq? (id-var-name-6568
                                               dots-15157
                                               '(()))
                                             (id-var-name-6568
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-4404"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       with-transformer-environment
                                                       transformer-environment
                                                       resolve-identifier
                                                       locally-bound-identifiers
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       session-id
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-2527"
                                                      "l-*-2525"
                                                      "l-*-2523"
                                                      "l-*-2521"
                                                      "l-*-2519"
                                                      "l-*-2517"
                                                      "l-*-2515"
                                                      "l-*-2513"
                                                      "l-*-2511"
                                                      "l-*-2509"
                                                      "l-*-2507"
                                                      "l-*-2505"
                                                      "l-*-2503"
                                                      "l-*-2501"
                                                      "l-*-2499"
                                                      "l-*-2497"
                                                      "l-*-2495"
                                                      "l-*-2493"
                                                      "l-*-2491"
                                                      "l-*-2489"
                                                      "l-*-2487"
                                                      "l-*-2485"
                                                      "l-*-2483"
                                                      "l-*-2481"
                                                      "l-*-2479"
                                                      "l-*-2477"
                                                      "l-*-2475"
                                                      "l-*-2473"
                                                      "l-*-2471"
                                                      "l-*-2469"
                                                      "l-*-2467"
                                                      "l-*-2465"
                                                      "l-*-2463"
                                                      "l-*-2461"
                                                      "l-*-2459"
                                                      "l-*-2457"
                                                      "l-*-2455"
                                                      "l-*-2453"
                                                      "l-*-2451"
                                                      "l-*-2450"
                                                      "l-*-2448"
                                                      "l-*-2445"
                                                      "l-*-2444"
                                                      "l-*-2443"
                                                      "l-*-2441"
                                                      "l-*-2440"
                                                      "l-*-2438"
                                                      "l-*-2436"
                                                      "l-*-2434"
                                                      "l-*-2432"
                                                      "l-*-2430"
                                                      "l-*-2428"
                                                      "l-*-2426"
                                                      "l-*-2424"
                                                      "l-*-2421"
                                                      "l-*-2419"
                                                      "l-*-2418"
                                                      "l-*-2416"
                                                      "l-*-2414"
                                                      "l-*-2412"
                                                      "l-*-2410"
                                                      "l-*-2409"
                                                      "l-*-2408"
                                                      "l-*-2407"
                                                      "l-*-2405"
                                                      "l-*-2404"
                                                      "l-*-2401"
                                                      "l-*-2399"
                                                      "l-*-2397"
                                                      "l-*-2395"
                                                      "l-*-2393"
                                                      "l-*-2391"
                                                      "l-*-2389"
                                                      "l-*-2388"
                                                      "l-*-2387"
                                                      "l-*-2385"
                                                      "l-*-2383"
                                                      "l-*-2382"
                                                      "l-*-2379"
                                                      "l-*-2378"
                                                      "l-*-2376"
                                                      "l-*-2374"
                                                      "l-*-2372"
                                                      "l-*-2370"
                                                      "l-*-2368"
                                                      "l-*-2366"
                                                      "l-*-2364"
                                                      "l-*-2362"
                                                      "l-*-2360"
                                                      "l-*-2357"
                                                      "l-*-2355"
                                                      "l-*-2353"
                                                      "l-*-2351"
                                                      "l-*-2349"
                                                      "l-*-2347"
                                                      "l-*-2345"
                                                      "l-*-2343"
                                                      "l-*-2341"
                                                      "l-*-2339"
                                                      "l-*-2337"
                                                      "l-*-2335"
                                                      "l-*-2333"
                                                      "l-*-2331"
                                                      "l-*-2329"
                                                      "l-*-2327"
                                                      "l-*-2325"
                                                      "l-*-2323"
                                                      "l-*-2321"
                                                      "l-*-2319"
                                                      "l-*-2317"
                                                      "l-*-2315"
                                                      "l-*-2313"
                                                      "l-*-2311"
                                                      "l-*-2309"
                                                      "l-*-2307"
                                                      "l-*-2306"
                                                      "l-*-2305"
                                                      "l-*-2304"
                                                      "l-*-2303"
                                                      "l-*-2301"
                                                      "l-*-2299"
                                                      "l-*-2297"
                                                      "l-*-2294"
                                                      "l-*-2292"
                                                      "l-*-2290"
                                                      "l-*-2288"
                                                      "l-*-2286"
                                                      "l-*-2284"
                                                      "l-*-2282"
                                                      "l-*-2280"
                                                      "l-*-2278"
                                                      "l-*-2276"
                                                      "l-*-2274"
                                                      "l-*-2272"
                                                      "l-*-2270"
                                                      "l-*-2268"
                                                      "l-*-2266"
                                                      "l-*-2264"
                                                      "l-*-2262"
                                                      "l-*-2260"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("l-*-2098"
                                                      "l-*-2097"
                                                      "l-*-2096")))
                                                  (hygiene guile))
                                               '(())))
                                        #f)
                                      #f))
                                  tmp-15152)
                                #f)
                            (@apply
                              (lambda (x-15257 dots-15258)
                                (call-with-values
                                  (lambda ()
                                    (cvt-14827
                                      x-15257
                                      (#{1+}# n-14831)
                                      ids-14832))
                                  (lambda (p-15259 ids-15260)
                                    (values
                                      (if (eq? p-15259 'any)
                                        'each-any
                                        (vector 'each p-15259))
                                      ids-15260))))
                              tmp-15152)
                            (let ((tmp-15261
                                    ($sc-dispatch p-14830 '(any any . any))))
                              (if (if tmp-15261
                                    (@apply
                                      (lambda (x-15265 dots-15266 ys-15267)
                                        (if (if (if (vector? dots-15266)
                                                  (if (= (vector-length
                                                           dots-15266)
                                                         4)
                                                    (eq? (vector-ref
                                                           dots-15266
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref dots-15266 1))
                                              #f)
                                          (if (eq? (if (if (vector? dots-15266)
                                                         (if (= (vector-length
                                                                  dots-15266)
                                                                4)
                                                           (eq? (vector-ref
                                                                  dots-15266
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref dots-15266 1)
                                                     dots-15266)
                                                   (if (if (= (vector-length
                                                                '#(syntax-object
                                                                   ...
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(x)
                                                                      #((top))
                                                                      #("l-*-4404"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        expand-lambda-case
                                                                        lambda*-formals
                                                                        expand-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        expand-void
                                                                        eval-local-transformer
                                                                        expand-local-syntax
                                                                        expand-body
                                                                        expand-macro
                                                                        expand-application
                                                                        expand-expr
                                                                        expand
                                                                        syntax-type
                                                                        parse-when-list
                                                                        expand-install-global
                                                                        expand-top-sequence
                                                                        expand-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        with-transformer-environment
                                                                        transformer-environment
                                                                        resolve-identifier
                                                                        locally-bound-identifiers
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        session-id
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("l-*-2527"
                                                                       "l-*-2525"
                                                                       "l-*-2523"
                                                                       "l-*-2521"
                                                                       "l-*-2519"
                                                                       "l-*-2517"
                                                                       "l-*-2515"
                                                                       "l-*-2513"
                                                                       "l-*-2511"
                                                                       "l-*-2509"
                                                                       "l-*-2507"
                                                                       "l-*-2505"
                                                                       "l-*-2503"
                                                                       "l-*-2501"
                                                                       "l-*-2499"
                                                                       "l-*-2497"
                                                                       "l-*-2495"
                                                                       "l-*-2493"
                                                                       "l-*-2491"
                                                                       "l-*-2489"
                                                                       "l-*-2487"
                                                                       "l-*-2485"
                                                                       "l-*-2483"
                                                                       "l-*-2481"
                                                                       "l-*-2479"
                                                                       "l-*-2477"
                                                                       "l-*-2475"
                                                                       "l-*-2473"
                                                                       "l-*-2471"
                                                                       "l-*-2469"
                                                                       "l-*-2467"
                                                                       "l-*-2465"
                                                                       "l-*-2463"
                                                                       "l-*-2461"
                                                                       "l-*-2459"
                                                                       "l-*-2457"
                                                                       "l-*-2455"
                                                                       "l-*-2453"
                                                                       "l-*-2451"
                                                                       "l-*-2450"
                                                                       "l-*-2448"
                                                                       "l-*-2445"
                                                                       "l-*-2444"
                                                                       "l-*-2443"
                                                                       "l-*-2441"
                                                                       "l-*-2440"
                                                                       "l-*-2438"
                                                                       "l-*-2436"
                                                                       "l-*-2434"
                                                                       "l-*-2432"
                                                                       "l-*-2430"
                                                                       "l-*-2428"
                                                                       "l-*-2426"
                                                                       "l-*-2424"
                                                                       "l-*-2421"
                                                                       "l-*-2419"
                                                                       "l-*-2418"
                                                                       "l-*-2416"
                                                                       "l-*-2414"
                                                                       "l-*-2412"
                                                                       "l-*-2410"
                                                                       "l-*-2409"
                                                                       "l-*-2408"
                                                                       "l-*-2407"
                                                                       "l-*-2405"
                                                                       "l-*-2404"
                                                                       "l-*-2401"
                                                                       "l-*-2399"
                                                                       "l-*-2397"
                                                                       "l-*-2395"
                                                                       "l-*-2393"
                                                                       "l-*-2391"
                                                                       "l-*-2389"
                                                                       "l-*-2388"
                                                                       "l-*-2387"
                                                                       "l-*-2385"
                                                                       "l-*-2383"
                                                                       "l-*-2382"
                                                                       "l-*-2379"
                                                                       "l-*-2378"
                                                                       "l-*-2376"
                                                                       "l-*-2374"
                                                                       "l-*-2372"
                                                                       "l-*-2370"
                                                                       "l-*-2368"
                                                                       "l-*-2366"
                                                                       "l-*-2364"
                                                                       "l-*-2362"
                                                                       "l-*-2360"
                                                                       "l-*-2357"
                                                                       "l-*-2355"
                                                                       "l-*-2353"
                                                                       "l-*-2351"
                                                                       "l-*-2349"
                                                                       "l-*-2347"
                                                                       "l-*-2345"
                                                                       "l-*-2343"
                                                                       "l-*-2341"
                                                                       "l-*-2339"
                                                                       "l-*-2337"
                                                                       "l-*-2335"
                                                                       "l-*-2333"
                                                                       "l-*-2331"
                                                                       "l-*-2329"
                                                                       "l-*-2327"
                                                                       "l-*-2325"
                                                                       "l-*-2323"
                                                                       "l-*-2321"
                                                                       "l-*-2319"
                                                                       "l-*-2317"
                                                                       "l-*-2315"
                                                                       "l-*-2313"
                                                                       "l-*-2311"
                                                                       "l-*-2309"
                                                                       "l-*-2307"
                                                                       "l-*-2306"
                                                                       "l-*-2305"
                                                                       "l-*-2304"
                                                                       "l-*-2303"
                                                                       "l-*-2301"
                                                                       "l-*-2299"
                                                                       "l-*-2297"
                                                                       "l-*-2294"
                                                                       "l-*-2292"
                                                                       "l-*-2290"
                                                                       "l-*-2288"
                                                                       "l-*-2286"
                                                                       "l-*-2284"
                                                                       "l-*-2282"
                                                                       "l-*-2280"
                                                                       "l-*-2278"
                                                                       "l-*-2276"
                                                                       "l-*-2274"
                                                                       "l-*-2272"
                                                                       "l-*-2270"
                                                                       "l-*-2268"
                                                                       "l-*-2266"
                                                                       "l-*-2264"
                                                                       "l-*-2262"
                                                                       "l-*-2260"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors)
                                                                      ((top)
                                                                       (top)
                                                                       (top))
                                                                      ("l-*-2098"
                                                                       "l-*-2097"
                                                                       "l-*-2096")))
                                                                   (hygiene
                                                                     guile)))
                                                              4)
                                                         #t
                                                         #f)
                                                     '...
                                                     '#(syntax-object
                                                        ...
                                                        ((top)
                                                         #(ribcage () () ())
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-4404"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             with-transformer-environment
                                                             transformer-environment
                                                             resolve-identifier
                                                             locally-bound-identifiers
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             session-id
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("l-*-2527"
                                                            "l-*-2525"
                                                            "l-*-2523"
                                                            "l-*-2521"
                                                            "l-*-2519"
                                                            "l-*-2517"
                                                            "l-*-2515"
                                                            "l-*-2513"
                                                            "l-*-2511"
                                                            "l-*-2509"
                                                            "l-*-2507"
                                                            "l-*-2505"
                                                            "l-*-2503"
                                                            "l-*-2501"
                                                            "l-*-2499"
                                                            "l-*-2497"
                                                            "l-*-2495"
                                                            "l-*-2493"
                                                            "l-*-2491"
                                                            "l-*-2489"
                                                            "l-*-2487"
                                                            "l-*-2485"
                                                            "l-*-2483"
                                                            "l-*-2481"
                                                            "l-*-2479"
                                                            "l-*-2477"
                                                            "l-*-2475"
                                                            "l-*-2473"
                                                            "l-*-2471"
                                                            "l-*-2469"
                                                            "l-*-2467"
                                                            "l-*-2465"
                                                            "l-*-2463"
                                                            "l-*-2461"
                                                            "l-*-2459"
                                                            "l-*-2457"
                                                            "l-*-2455"
                                                            "l-*-2453"
                                                            "l-*-2451"
                                                            "l-*-2450"
                                                            "l-*-2448"
                                                            "l-*-2445"
                                                            "l-*-2444"
                                                            "l-*-2443"
                                                            "l-*-2441"
                                                            "l-*-2440"
                                                            "l-*-2438"
                                                            "l-*-2436"
                                                            "l-*-2434"
                                                            "l-*-2432"
                                                            "l-*-2430"
                                                            "l-*-2428"
                                                            "l-*-2426"
                                                            "l-*-2424"
                                                            "l-*-2421"
                                                            "l-*-2419"
                                                            "l-*-2418"
                                                            "l-*-2416"
                                                            "l-*-2414"
                                                            "l-*-2412"
                                                            "l-*-2410"
                                                            "l-*-2409"
                                                            "l-*-2408"
                                                            "l-*-2407"
                                                            "l-*-2405"
                                                            "l-*-2404"
                                                            "l-*-2401"
                                                            "l-*-2399"
                                                            "l-*-2397"
                                                            "l-*-2395"
                                                            "l-*-2393"
                                                            "l-*-2391"
                                                            "l-*-2389"
                                                            "l-*-2388"
                                                            "l-*-2387"
                                                            "l-*-2385"
                                                            "l-*-2383"
                                                            "l-*-2382"
                                                            "l-*-2379"
                                                            "l-*-2378"
                                                            "l-*-2376"
                                                            "l-*-2374"
                                                            "l-*-2372"
                                                            "l-*-2370"
                                                            "l-*-2368"
                                                            "l-*-2366"
                                                            "l-*-2364"
                                                            "l-*-2362"
                                                            "l-*-2360"
                                                            "l-*-2357"
                                                            "l-*-2355"
                                                            "l-*-2353"
                                                            "l-*-2351"
                                                            "l-*-2349"
                                                            "l-*-2347"
                                                            "l-*-2345"
                                                            "l-*-2343"
                                                            "l-*-2341"
                                                            "l-*-2339"
                                                            "l-*-2337"
                                                            "l-*-2335"
                                                            "l-*-2333"
                                                            "l-*-2331"
                                                            "l-*-2329"
                                                            "l-*-2327"
                                                            "l-*-2325"
                                                            "l-*-2323"
                                                            "l-*-2321"
                                                            "l-*-2319"
                                                            "l-*-2317"
                                                            "l-*-2315"
                                                            "l-*-2313"
                                                            "l-*-2311"
                                                            "l-*-2309"
                                                            "l-*-2307"
                                                            "l-*-2306"
                                                            "l-*-2305"
                                                            "l-*-2304"
                                                            "l-*-2303"
                                                            "l-*-2301"
                                                            "l-*-2299"
                                                            "l-*-2297"
                                                            "l-*-2294"
                                                            "l-*-2292"
                                                            "l-*-2290"
                                                            "l-*-2288"
                                                            "l-*-2286"
                                                            "l-*-2284"
                                                            "l-*-2282"
                                                            "l-*-2280"
                                                            "l-*-2278"
                                                            "l-*-2276"
                                                            "l-*-2274"
                                                            "l-*-2272"
                                                            "l-*-2270"
                                                            "l-*-2268"
                                                            "l-*-2266"
                                                            "l-*-2264"
                                                            "l-*-2262"
                                                            "l-*-2260"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("l-*-2098"
                                                            "l-*-2097"
                                                            "l-*-2096")))
                                                        (hygiene guile))))
                                            (eq? (id-var-name-6568
                                                   dots-15266
                                                   '(()))
                                                 (id-var-name-6568
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-4404"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           session-id
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-2527"
                                                          "l-*-2525"
                                                          "l-*-2523"
                                                          "l-*-2521"
                                                          "l-*-2519"
                                                          "l-*-2517"
                                                          "l-*-2515"
                                                          "l-*-2513"
                                                          "l-*-2511"
                                                          "l-*-2509"
                                                          "l-*-2507"
                                                          "l-*-2505"
                                                          "l-*-2503"
                                                          "l-*-2501"
                                                          "l-*-2499"
                                                          "l-*-2497"
                                                          "l-*-2495"
                                                          "l-*-2493"
                                                          "l-*-2491"
                                                          "l-*-2489"
                                                          "l-*-2487"
                                                          "l-*-2485"
                                                          "l-*-2483"
                                                          "l-*-2481"
                                                          "l-*-2479"
                                                          "l-*-2477"
                                                          "l-*-2475"
                                                          "l-*-2473"
                                                          "l-*-2471"
                                                          "l-*-2469"
                                                          "l-*-2467"
                                                          "l-*-2465"
                                                          "l-*-2463"
                                                          "l-*-2461"
                                                          "l-*-2459"
                                                          "l-*-2457"
                                                          "l-*-2455"
                                                          "l-*-2453"
                                                          "l-*-2451"
                                                          "l-*-2450"
                                                          "l-*-2448"
                                                          "l-*-2445"
                                                          "l-*-2444"
                                                          "l-*-2443"
                                                          "l-*-2441"
                                                          "l-*-2440"
                                                          "l-*-2438"
                                                          "l-*-2436"
                                                          "l-*-2434"
                                                          "l-*-2432"
                                                          "l-*-2430"
                                                          "l-*-2428"
                                                          "l-*-2426"
                                                          "l-*-2424"
                                                          "l-*-2421"
                                                          "l-*-2419"
                                                          "l-*-2418"
                                                          "l-*-2416"
                                                          "l-*-2414"
                                                          "l-*-2412"
                                                          "l-*-2410"
                                                          "l-*-2409"
                                                          "l-*-2408"
                                                          "l-*-2407"
                                                          "l-*-2405"
                                                          "l-*-2404"
                                                          "l-*-2401"
                                                          "l-*-2399"
                                                          "l-*-2397"
                                                          "l-*-2395"
                                                          "l-*-2393"
                                                          "l-*-2391"
                                                          "l-*-2389"
                                                          "l-*-2388"
                                                          "l-*-2387"
                                                          "l-*-2385"
                                                          "l-*-2383"
                                                          "l-*-2382"
                                                          "l-*-2379"
                                                          "l-*-2378"
                                                          "l-*-2376"
                                                          "l-*-2374"
                                                          "l-*-2372"
                                                          "l-*-2370"
                                                          "l-*-2368"
                                                          "l-*-2366"
                                                          "l-*-2364"
                                                          "l-*-2362"
                                                          "l-*-2360"
                                                          "l-*-2357"
                                                          "l-*-2355"
                                                          "l-*-2353"
                                                          "l-*-2351"
                                                          "l-*-2349"
                                                          "l-*-2347"
                                                          "l-*-2345"
                                                          "l-*-2343"
                                                          "l-*-2341"
                                                          "l-*-2339"
                                                          "l-*-2337"
                                                          "l-*-2335"
                                                          "l-*-2333"
                                                          "l-*-2331"
                                                          "l-*-2329"
                                                          "l-*-2327"
                                                          "l-*-2325"
                                                          "l-*-2323"
                                                          "l-*-2321"
                                                          "l-*-2319"
                                                          "l-*-2317"
                                                          "l-*-2315"
                                                          "l-*-2313"
                                                          "l-*-2311"
                                                          "l-*-2309"
                                                          "l-*-2307"
                                                          "l-*-2306"
                                                          "l-*-2305"
                                                          "l-*-2304"
                                                          "l-*-2303"
                                                          "l-*-2301"
                                                          "l-*-2299"
                                                          "l-*-2297"
                                                          "l-*-2294"
                                                          "l-*-2292"
                                                          "l-*-2290"
                                                          "l-*-2288"
                                                          "l-*-2286"
                                                          "l-*-2284"
                                                          "l-*-2282"
                                                          "l-*-2280"
                                                          "l-*-2278"
                                                          "l-*-2276"
                                                          "l-*-2274"
                                                          "l-*-2272"
                                                          "l-*-2270"
                                                          "l-*-2268"
                                                          "l-*-2266"
                                                          "l-*-2264"
                                                          "l-*-2262"
                                                          "l-*-2260"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("l-*-2098"
                                                          "l-*-2097"
                                                          "l-*-2096")))
                                                      (hygiene guile))
                                                   '(())))
                                            #f)
                                          #f))
                                      tmp-15261)
                                    #f)
                                (@apply
                                  (lambda (x-15367 dots-15368 ys-15369)
                                    (call-with-values
                                      (lambda ()
                                        (cvt*-14825
                                          ys-15369
                                          n-14831
                                          ids-14832))
                                      (lambda (ys-15372 ids-15373)
                                        (call-with-values
                                          (lambda ()
                                            (cvt-14827
                                              x-15367
                                              (#{1+}# n-14831)
                                              ids-15373))
                                          (lambda (x-15374 ids-15375)
                                            (call-with-values
                                              (lambda ()
                                                (v-reverse-14826 ys-15372))
                                              (lambda (ys-15408 e-15409)
                                                (values
                                                  (vector
                                                    'each+
                                                    x-15374
                                                    ys-15408
                                                    e-15409)
                                                  ids-15375))))))))
                                  tmp-15261)
                                (let ((tmp-15410
                                        ($sc-dispatch p-14830 '(any . any))))
                                  (if tmp-15410
                                    (@apply
                                      (lambda (x-15414 y-15415)
                                        (call-with-values
                                          (lambda ()
                                            (cvt-14827
                                              y-15415
                                              n-14831
                                              ids-14832))
                                          (lambda (y-15416 ids-15417)
                                            (call-with-values
                                              (lambda ()
                                                (cvt-14827
                                                  x-15414
                                                  n-14831
                                                  ids-15417))
                                              (lambda (x-15418 ids-15419)
                                                (values
                                                  (cons x-15418 y-15416)
                                                  ids-15419))))))
                                      tmp-15410)
                                    (let ((tmp-15420
                                            ($sc-dispatch p-14830 '())))
                                      (if tmp-15420
                                        (@apply
                                          (lambda () (values '() ids-14832))
                                          tmp-15420)
                                        (let ((tmp-15424
                                                ($sc-dispatch
                                                  p-14830
                                                  '#(vector each-any))))
                                          (if tmp-15424
                                            (@apply
                                              (lambda (x-15428)
                                                (call-with-values
                                                  (lambda ()
                                                    (cvt-14827
                                                      x-15428
                                                      n-14831
                                                      ids-14832))
                                                  (lambda (p-15429 ids-15430)
                                                    (values
                                                      (vector 'vector p-15429)
                                                      ids-15430))))
                                              tmp-15424)
                                            (values
                                              (vector
                                                'atom
                                                (strip-6598 p-14830 '(())))
                                              ids-14832)))))))))))))))
                 (cvt-14827 pattern-14823 0 '()))))
           (build-dispatch-call-13227
             (lambda (pvars-15543 exp-15544 y-15545 r-15546 mod-15547)
               (let ((ids-15548 (map car pvars-15543)))
                 (begin
                   (map cdr pvars-15543)
                   (let ((labels-15550 (gen-labels-6552 ids-15548))
                         (new-vars-15551 (map gen-var-6599 ids-15548)))
                     (build-application-6516
                       #f
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'apply)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'apply
                           #f))
                       (list (build-simple-lambda-6525
                               #f
                               (map syntax->datum ids-15548)
                               #f
                               new-vars-15551
                               '()
                               (expand-6585
                                 exp-15544
                                 (extend-env-6543
                                   labels-15550
                                   (map (lambda (var-15874 level-15875)
                                          (cons 'syntax
                                                (cons var-15874 level-15875)))
                                        new-vars-15551
                                        (map cdr pvars-15543))
                                   r-15546)
                                 (make-binding-wrap-6563
                                   ids-15548
                                   labels-15550
                                   '(()))
                                 mod-15547))
                             y-15545)))))))
           (gen-clause-13228
             (lambda (x-14195
                      keys-14196
                      clauses-14197
                      r-14198
                      pat-14199
                      fender-14200
                      exp-14201
                      mod-14202)
               (call-with-values
                 (lambda ()
                   (convert-pattern-13226 pat-14199 keys-14196))
                 (lambda (p-14357 pvars-14358)
                   (if (not (distinct-bound-ids?-6576 (map car pvars-14358)))
                     (syntax-violation
                       'syntax-case
                       "duplicate pattern variable"
                       pat-14199)
                     (if (not (and-map
                                (lambda (x-14474)
                                  (not (let ((x-14478 (car x-14474)))
                                         (if (if (if (vector? x-14478)
                                                   (if (= (vector-length
                                                            x-14478)
                                                          4)
                                                     (eq? (vector-ref
                                                            x-14478
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (symbol? (vector-ref x-14478 1))
                                               #f)
                                           (if (eq? (if (if (vector? x-14478)
                                                          (if (= (vector-length
                                                                   x-14478)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   x-14478
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (vector-ref x-14478 1)
                                                      x-14478)
                                                    (if (if (= (vector-length
                                                                 '#(syntax-object
                                                                    ...
                                                                    ((top)
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("l-*-4404"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         session-id
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-2527"
                                                                        "l-*-2525"
                                                                        "l-*-2523"
                                                                        "l-*-2521"
                                                                        "l-*-2519"
                                                                        "l-*-2517"
                                                                        "l-*-2515"
                                                                        "l-*-2513"
                                                                        "l-*-2511"
                                                                        "l-*-2509"
                                                                        "l-*-2507"
                                                                        "l-*-2505"
                                                                        "l-*-2503"
                                                                        "l-*-2501"
                                                                        "l-*-2499"
                                                                        "l-*-2497"
                                                                        "l-*-2495"
                                                                        "l-*-2493"
                                                                        "l-*-2491"
                                                                        "l-*-2489"
                                                                        "l-*-2487"
                                                                        "l-*-2485"
                                                                        "l-*-2483"
                                                                        "l-*-2481"
                                                                        "l-*-2479"
                                                                        "l-*-2477"
                                                                        "l-*-2475"
                                                                        "l-*-2473"
                                                                        "l-*-2471"
                                                                        "l-*-2469"
                                                                        "l-*-2467"
                                                                        "l-*-2465"
                                                                        "l-*-2463"
                                                                        "l-*-2461"
                                                                        "l-*-2459"
                                                                        "l-*-2457"
                                                                        "l-*-2455"
                                                                        "l-*-2453"
                                                                        "l-*-2451"
                                                                        "l-*-2450"
                                                                        "l-*-2448"
                                                                        "l-*-2445"
                                                                        "l-*-2444"
                                                                        "l-*-2443"
                                                                        "l-*-2441"
                                                                        "l-*-2440"
                                                                        "l-*-2438"
                                                                        "l-*-2436"
                                                                        "l-*-2434"
                                                                        "l-*-2432"
                                                                        "l-*-2430"
                                                                        "l-*-2428"
                                                                        "l-*-2426"
                                                                        "l-*-2424"
                                                                        "l-*-2421"
                                                                        "l-*-2419"
                                                                        "l-*-2418"
                                                                        "l-*-2416"
                                                                        "l-*-2414"
                                                                        "l-*-2412"
                                                                        "l-*-2410"
                                                                        "l-*-2409"
                                                                        "l-*-2408"
                                                                        "l-*-2407"
                                                                        "l-*-2405"
                                                                        "l-*-2404"
                                                                        "l-*-2401"
                                                                        "l-*-2399"
                                                                        "l-*-2397"
                                                                        "l-*-2395"
                                                                        "l-*-2393"
                                                                        "l-*-2391"
                                                                        "l-*-2389"
                                                                        "l-*-2388"
                                                                        "l-*-2387"
                                                                        "l-*-2385"
                                                                        "l-*-2383"
                                                                        "l-*-2382"
                                                                        "l-*-2379"
                                                                        "l-*-2378"
                                                                        "l-*-2376"
                                                                        "l-*-2374"
                                                                        "l-*-2372"
                                                                        "l-*-2370"
                                                                        "l-*-2368"
                                                                        "l-*-2366"
                                                                        "l-*-2364"
                                                                        "l-*-2362"
                                                                        "l-*-2360"
                                                                        "l-*-2357"
                                                                        "l-*-2355"
                                                                        "l-*-2353"
                                                                        "l-*-2351"
                                                                        "l-*-2349"
                                                                        "l-*-2347"
                                                                        "l-*-2345"
                                                                        "l-*-2343"
                                                                        "l-*-2341"
                                                                        "l-*-2339"
                                                                        "l-*-2337"
                                                                        "l-*-2335"
                                                                        "l-*-2333"
                                                                        "l-*-2331"
                                                                        "l-*-2329"
                                                                        "l-*-2327"
                                                                        "l-*-2325"
                                                                        "l-*-2323"
                                                                        "l-*-2321"
                                                                        "l-*-2319"
                                                                        "l-*-2317"
                                                                        "l-*-2315"
                                                                        "l-*-2313"
                                                                        "l-*-2311"
                                                                        "l-*-2309"
                                                                        "l-*-2307"
                                                                        "l-*-2306"
                                                                        "l-*-2305"
                                                                        "l-*-2304"
                                                                        "l-*-2303"
                                                                        "l-*-2301"
                                                                        "l-*-2299"
                                                                        "l-*-2297"
                                                                        "l-*-2294"
                                                                        "l-*-2292"
                                                                        "l-*-2290"
                                                                        "l-*-2288"
                                                                        "l-*-2286"
                                                                        "l-*-2284"
                                                                        "l-*-2282"
                                                                        "l-*-2280"
                                                                        "l-*-2278"
                                                                        "l-*-2276"
                                                                        "l-*-2274"
                                                                        "l-*-2272"
                                                                        "l-*-2270"
                                                                        "l-*-2268"
                                                                        "l-*-2266"
                                                                        "l-*-2264"
                                                                        "l-*-2262"
                                                                        "l-*-2260"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-2098"
                                                                        "l-*-2097"
                                                                        "l-*-2096")))
                                                                    (hygiene
                                                                      guile)))
                                                               4)
                                                          #t
                                                          #f)
                                                      '...
                                                      '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("l-*-4404"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              with-transformer-environment
                                                              transformer-environment
                                                              resolve-identifier
                                                              locally-bound-identifiers
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              session-id
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("l-*-2527"
                                                             "l-*-2525"
                                                             "l-*-2523"
                                                             "l-*-2521"
                                                             "l-*-2519"
                                                             "l-*-2517"
                                                             "l-*-2515"
                                                             "l-*-2513"
                                                             "l-*-2511"
                                                             "l-*-2509"
                                                             "l-*-2507"
                                                             "l-*-2505"
                                                             "l-*-2503"
                                                             "l-*-2501"
                                                             "l-*-2499"
                                                             "l-*-2497"
                                                             "l-*-2495"
                                                             "l-*-2493"
                                                             "l-*-2491"
                                                             "l-*-2489"
                                                             "l-*-2487"
                                                             "l-*-2485"
                                                             "l-*-2483"
                                                             "l-*-2481"
                                                             "l-*-2479"
                                                             "l-*-2477"
                                                             "l-*-2475"
                                                             "l-*-2473"
                                                             "l-*-2471"
                                                             "l-*-2469"
                                                             "l-*-2467"
                                                             "l-*-2465"
                                                             "l-*-2463"
                                                             "l-*-2461"
                                                             "l-*-2459"
                                                             "l-*-2457"
                                                             "l-*-2455"
                                                             "l-*-2453"
                                                             "l-*-2451"
                                                             "l-*-2450"
                                                             "l-*-2448"
                                                             "l-*-2445"
                                                             "l-*-2444"
                                                             "l-*-2443"
                                                             "l-*-2441"
                                                             "l-*-2440"
                                                             "l-*-2438"
                                                             "l-*-2436"
                                                             "l-*-2434"
                                                             "l-*-2432"
                                                             "l-*-2430"
                                                             "l-*-2428"
                                                             "l-*-2426"
                                                             "l-*-2424"
                                                             "l-*-2421"
                                                             "l-*-2419"
                                                             "l-*-2418"
                                                             "l-*-2416"
                                                             "l-*-2414"
                                                             "l-*-2412"
                                                             "l-*-2410"
                                                             "l-*-2409"
                                                             "l-*-2408"
                                                             "l-*-2407"
                                                             "l-*-2405"
                                                             "l-*-2404"
                                                             "l-*-2401"
                                                             "l-*-2399"
                                                             "l-*-2397"
                                                             "l-*-2395"
                                                             "l-*-2393"
                                                             "l-*-2391"
                                                             "l-*-2389"
                                                             "l-*-2388"
                                                             "l-*-2387"
                                                             "l-*-2385"
                                                             "l-*-2383"
                                                             "l-*-2382"
                                                             "l-*-2379"
                                                             "l-*-2378"
                                                             "l-*-2376"
                                                             "l-*-2374"
                                                             "l-*-2372"
                                                             "l-*-2370"
                                                             "l-*-2368"
                                                             "l-*-2366"
                                                             "l-*-2364"
                                                             "l-*-2362"
                                                             "l-*-2360"
                                                             "l-*-2357"
                                                             "l-*-2355"
                                                             "l-*-2353"
                                                             "l-*-2351"
                                                             "l-*-2349"
                                                             "l-*-2347"
                                                             "l-*-2345"
                                                             "l-*-2343"
                                                             "l-*-2341"
                                                             "l-*-2339"
                                                             "l-*-2337"
                                                             "l-*-2335"
                                                             "l-*-2333"
                                                             "l-*-2331"
                                                             "l-*-2329"
                                                             "l-*-2327"
                                                             "l-*-2325"
                                                             "l-*-2323"
                                                             "l-*-2321"
                                                             "l-*-2319"
                                                             "l-*-2317"
                                                             "l-*-2315"
                                                             "l-*-2313"
                                                             "l-*-2311"
                                                             "l-*-2309"
                                                             "l-*-2307"
                                                             "l-*-2306"
                                                             "l-*-2305"
                                                             "l-*-2304"
                                                             "l-*-2303"
                                                             "l-*-2301"
                                                             "l-*-2299"
                                                             "l-*-2297"
                                                             "l-*-2294"
                                                             "l-*-2292"
                                                             "l-*-2290"
                                                             "l-*-2288"
                                                             "l-*-2286"
                                                             "l-*-2284"
                                                             "l-*-2282"
                                                             "l-*-2280"
                                                             "l-*-2278"
                                                             "l-*-2276"
                                                             "l-*-2274"
                                                             "l-*-2272"
                                                             "l-*-2270"
                                                             "l-*-2268"
                                                             "l-*-2266"
                                                             "l-*-2264"
                                                             "l-*-2262"
                                                             "l-*-2260"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("l-*-2098"
                                                             "l-*-2097"
                                                             "l-*-2096")))
                                                         (hygiene guile))))
                                             (eq? (id-var-name-6568
                                                    x-14478
                                                    '(()))
                                                  (id-var-name-6568
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("l-*-4404"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            session-id
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-2527"
                                                           "l-*-2525"
                                                           "l-*-2523"
                                                           "l-*-2521"
                                                           "l-*-2519"
                                                           "l-*-2517"
                                                           "l-*-2515"
                                                           "l-*-2513"
                                                           "l-*-2511"
                                                           "l-*-2509"
                                                           "l-*-2507"
                                                           "l-*-2505"
                                                           "l-*-2503"
                                                           "l-*-2501"
                                                           "l-*-2499"
                                                           "l-*-2497"
                                                           "l-*-2495"
                                                           "l-*-2493"
                                                           "l-*-2491"
                                                           "l-*-2489"
                                                           "l-*-2487"
                                                           "l-*-2485"
                                                           "l-*-2483"
                                                           "l-*-2481"
                                                           "l-*-2479"
                                                           "l-*-2477"
                                                           "l-*-2475"
                                                           "l-*-2473"
                                                           "l-*-2471"
                                                           "l-*-2469"
                                                           "l-*-2467"
                                                           "l-*-2465"
                                                           "l-*-2463"
                                                           "l-*-2461"
                                                           "l-*-2459"
                                                           "l-*-2457"
                                                           "l-*-2455"
                                                           "l-*-2453"
                                                           "l-*-2451"
                                                           "l-*-2450"
                                                           "l-*-2448"
                                                           "l-*-2445"
                                                           "l-*-2444"
                                                           "l-*-2443"
                                                           "l-*-2441"
                                                           "l-*-2440"
                                                           "l-*-2438"
                                                           "l-*-2436"
                                                           "l-*-2434"
                                                           "l-*-2432"
                                                           "l-*-2430"
                                                           "l-*-2428"
                                                           "l-*-2426"
                                                           "l-*-2424"
                                                           "l-*-2421"
                                                           "l-*-2419"
                                                           "l-*-2418"
                                                           "l-*-2416"
                                                           "l-*-2414"
                                                           "l-*-2412"
                                                           "l-*-2410"
                                                           "l-*-2409"
                                                           "l-*-2408"
                                                           "l-*-2407"
                                                           "l-*-2405"
                                                           "l-*-2404"
                                                           "l-*-2401"
                                                           "l-*-2399"
                                                           "l-*-2397"
                                                           "l-*-2395"
                                                           "l-*-2393"
                                                           "l-*-2391"
                                                           "l-*-2389"
                                                           "l-*-2388"
                                                           "l-*-2387"
                                                           "l-*-2385"
                                                           "l-*-2383"
                                                           "l-*-2382"
                                                           "l-*-2379"
                                                           "l-*-2378"
                                                           "l-*-2376"
                                                           "l-*-2374"
                                                           "l-*-2372"
                                                           "l-*-2370"
                                                           "l-*-2368"
                                                           "l-*-2366"
                                                           "l-*-2364"
                                                           "l-*-2362"
                                                           "l-*-2360"
                                                           "l-*-2357"
                                                           "l-*-2355"
                                                           "l-*-2353"
                                                           "l-*-2351"
                                                           "l-*-2349"
                                                           "l-*-2347"
                                                           "l-*-2345"
                                                           "l-*-2343"
                                                           "l-*-2341"
                                                           "l-*-2339"
                                                           "l-*-2337"
                                                           "l-*-2335"
                                                           "l-*-2333"
                                                           "l-*-2331"
                                                           "l-*-2329"
                                                           "l-*-2327"
                                                           "l-*-2325"
                                                           "l-*-2323"
                                                           "l-*-2321"
                                                           "l-*-2319"
                                                           "l-*-2317"
                                                           "l-*-2315"
                                                           "l-*-2313"
                                                           "l-*-2311"
                                                           "l-*-2309"
                                                           "l-*-2307"
                                                           "l-*-2306"
                                                           "l-*-2305"
                                                           "l-*-2304"
                                                           "l-*-2303"
                                                           "l-*-2301"
                                                           "l-*-2299"
                                                           "l-*-2297"
                                                           "l-*-2294"
                                                           "l-*-2292"
                                                           "l-*-2290"
                                                           "l-*-2288"
                                                           "l-*-2286"
                                                           "l-*-2284"
                                                           "l-*-2282"
                                                           "l-*-2280"
                                                           "l-*-2278"
                                                           "l-*-2276"
                                                           "l-*-2274"
                                                           "l-*-2272"
                                                           "l-*-2270"
                                                           "l-*-2268"
                                                           "l-*-2266"
                                                           "l-*-2264"
                                                           "l-*-2262"
                                                           "l-*-2260"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("l-*-2098"
                                                           "l-*-2097"
                                                           "l-*-2096")))
                                                       (hygiene guile))
                                                    '(())))
                                             #f)
                                           #f))))
                                pvars-14358))
                       (syntax-violation
                         'syntax-case
                         "misplaced ellipsis"
                         pat-14199)
                       (let ((y-14554
                               (gensym
                                 (string-append (symbol->string 'tmp) "-"))))
                         (build-application-6516
                           #f
                           (let ((req-14697 (list 'tmp))
                                 (vars-14699 (list y-14554))
                                 (exp-14701
                                   (let ((y-14718
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 3)
                                             #f
                                             'tmp
                                             y-14554)))
                                     (let ((test-exp-14722
                                             (let ((tmp-14731
                                                     ($sc-dispatch
                                                       fender-14200
                                                       '#(atom #t))))
                                               (if tmp-14731
                                                 (@apply
                                                   (lambda () y-14718)
                                                   tmp-14731)
                                                 (let ((then-exp-14749
                                                         (build-dispatch-call-13227
                                                           pvars-14358
                                                           fender-14200
                                                           y-14718
                                                           r-14198
                                                           mod-14202))
                                                       (else-exp-14750
                                                         (make-struct/no-tail
                                                           (vector-ref
                                                             %expanded-vtables
                                                             1)
                                                           #f
                                                           #f)))
                                                   (make-struct/no-tail
                                                     (vector-ref
                                                       %expanded-vtables
                                                       10)
                                                     #f
                                                     y-14718
                                                     then-exp-14749
                                                     else-exp-14750)))))
                                           (then-exp-14723
                                             (build-dispatch-call-13227
                                               pvars-14358
                                               exp-14201
                                               y-14718
                                               r-14198
                                               mod-14202))
                                           (else-exp-14724
                                             (gen-syntax-case-13229
                                               x-14195
                                               keys-14196
                                               clauses-14197
                                               r-14198
                                               mod-14202)))
                                       (make-struct/no-tail
                                         (vector-ref %expanded-vtables 10)
                                         #f
                                         test-exp-14722
                                         then-exp-14723
                                         else-exp-14724)))))
                             (let ((body-14706
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       req-14697
                                       #f
                                       #f
                                       #f
                                       '()
                                       vars-14699
                                       exp-14701
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 body-14706)))
                           (list (if (eq? p-14357 'any)
                                   (let ((fun-exp-14772
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               'list)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               'list
                                               #f)))
                                         (arg-exps-14773 (list x-14195)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       fun-exp-14772
                                       arg-exps-14773))
                                   (let ((fun-exp-14796
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               '$sc-dispatch)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               '$sc-dispatch
                                               #f)))
                                         (arg-exps-14797
                                           (list x-14195
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     1)
                                                   #f
                                                   p-14357))))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       fun-exp-14796
                                       arg-exps-14797))))))))))))
           (gen-syntax-case-13229
             (lambda (x-13628
                      keys-13629
                      clauses-13630
                      r-13631
                      mod-13632)
               (if (null? clauses-13630)
                 (let ((fun-exp-13637
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'syntax-violation)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'syntax-violation
                             #f)))
                       (arg-exps-13638
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #f)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 "source expression failed to match any pattern")
                               x-13628)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     fun-exp-13637
                     arg-exps-13638))
                 (let ((tmp-13671 (car clauses-13630)))
                   (let ((tmp-13672 ($sc-dispatch tmp-13671 '(any any))))
                     (if tmp-13672
                       (@apply
                         (lambda (pat-13674 exp-13675)
                           (if (if (if (symbol? pat-13674)
                                     #t
                                     (if (if (vector? pat-13674)
                                           (if (= (vector-length pat-13674) 4)
                                             (eq? (vector-ref pat-13674 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (symbol? (vector-ref pat-13674 1))
                                       #f))
                                 (and-map
                                   (lambda (x-13702)
                                     (not (if (eq? (if (if (vector? pat-13674)
                                                         (if (= (vector-length
                                                                  pat-13674)
                                                                4)
                                                           (eq? (vector-ref
                                                                  pat-13674
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref pat-13674 1)
                                                     pat-13674)
                                                   (if (if (vector? x-13702)
                                                         (if (= (vector-length
                                                                  x-13702)
                                                                4)
                                                           (eq? (vector-ref
                                                                  x-13702
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref x-13702 1)
                                                     x-13702))
                                            (eq? (id-var-name-6568
                                                   pat-13674
                                                   '(()))
                                                 (id-var-name-6568
                                                   x-13702
                                                   '(())))
                                            #f)))
                                   (cons '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("l-*-6087" "l-*-6088"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("l-*-6076"
                                                 "l-*-6077"
                                                 "l-*-6078"
                                                 "l-*-6079"
                                                 "l-*-6080"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("l-*-5886"
                                                "l-*-5884"
                                                "l-*-5882"
                                                "l-*-5880"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 session-id
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-2527"
                                                "l-*-2525"
                                                "l-*-2523"
                                                "l-*-2521"
                                                "l-*-2519"
                                                "l-*-2517"
                                                "l-*-2515"
                                                "l-*-2513"
                                                "l-*-2511"
                                                "l-*-2509"
                                                "l-*-2507"
                                                "l-*-2505"
                                                "l-*-2503"
                                                "l-*-2501"
                                                "l-*-2499"
                                                "l-*-2497"
                                                "l-*-2495"
                                                "l-*-2493"
                                                "l-*-2491"
                                                "l-*-2489"
                                                "l-*-2487"
                                                "l-*-2485"
                                                "l-*-2483"
                                                "l-*-2481"
                                                "l-*-2479"
                                                "l-*-2477"
                                                "l-*-2475"
                                                "l-*-2473"
                                                "l-*-2471"
                                                "l-*-2469"
                                                "l-*-2467"
                                                "l-*-2465"
                                                "l-*-2463"
                                                "l-*-2461"
                                                "l-*-2459"
                                                "l-*-2457"
                                                "l-*-2455"
                                                "l-*-2453"
                                                "l-*-2451"
                                                "l-*-2450"
                                                "l-*-2448"
                                                "l-*-2445"
                                                "l-*-2444"
                                                "l-*-2443"
                                                "l-*-2441"
                                                "l-*-2440"
                                                "l-*-2438"
                                                "l-*-2436"
                                                "l-*-2434"
                                                "l-*-2432"
                                                "l-*-2430"
                                                "l-*-2428"
                                                "l-*-2426"
                                                "l-*-2424"
                                                "l-*-2421"
                                                "l-*-2419"
                                                "l-*-2418"
                                                "l-*-2416"
                                                "l-*-2414"
                                                "l-*-2412"
                                                "l-*-2410"
                                                "l-*-2409"
                                                "l-*-2408"
                                                "l-*-2407"
                                                "l-*-2405"
                                                "l-*-2404"
                                                "l-*-2401"
                                                "l-*-2399"
                                                "l-*-2397"
                                                "l-*-2395"
                                                "l-*-2393"
                                                "l-*-2391"
                                                "l-*-2389"
                                                "l-*-2388"
                                                "l-*-2387"
                                                "l-*-2385"
                                                "l-*-2383"
                                                "l-*-2382"
                                                "l-*-2379"
                                                "l-*-2378"
                                                "l-*-2376"
                                                "l-*-2374"
                                                "l-*-2372"
                                                "l-*-2370"
                                                "l-*-2368"
                                                "l-*-2366"
                                                "l-*-2364"
                                                "l-*-2362"
                                                "l-*-2360"
                                                "l-*-2357"
                                                "l-*-2355"
                                                "l-*-2353"
                                                "l-*-2351"
                                                "l-*-2349"
                                                "l-*-2347"
                                                "l-*-2345"
                                                "l-*-2343"
                                                "l-*-2341"
                                                "l-*-2339"
                                                "l-*-2337"
                                                "l-*-2335"
                                                "l-*-2333"
                                                "l-*-2331"
                                                "l-*-2329"
                                                "l-*-2327"
                                                "l-*-2325"
                                                "l-*-2323"
                                                "l-*-2321"
                                                "l-*-2319"
                                                "l-*-2317"
                                                "l-*-2315"
                                                "l-*-2313"
                                                "l-*-2311"
                                                "l-*-2309"
                                                "l-*-2307"
                                                "l-*-2306"
                                                "l-*-2305"
                                                "l-*-2304"
                                                "l-*-2303"
                                                "l-*-2301"
                                                "l-*-2299"
                                                "l-*-2297"
                                                "l-*-2294"
                                                "l-*-2292"
                                                "l-*-2290"
                                                "l-*-2288"
                                                "l-*-2286"
                                                "l-*-2284"
                                                "l-*-2282"
                                                "l-*-2280"
                                                "l-*-2278"
                                                "l-*-2276"
                                                "l-*-2274"
                                                "l-*-2272"
                                                "l-*-2270"
                                                "l-*-2268"
                                                "l-*-2266"
                                                "l-*-2264"
                                                "l-*-2262"
                                                "l-*-2260"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("l-*-2098"
                                                "l-*-2097"
                                                "l-*-2096")))
                                            (hygiene guile))
                                         keys-13629))
                                 #f)
                             (if (if (eq? (if (if (= (vector-length
                                                       '#(syntax-object
                                                          pad
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("l-*-6087"
                                                               "l-*-6088"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-6076"
                                                               "l-*-6077"
                                                               "l-*-6078"
                                                               "l-*-6079"
                                                               "l-*-6080"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-5886"
                                                              "l-*-5884"
                                                              "l-*-5882"
                                                              "l-*-5880"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               session-id
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-2527"
                                                              "l-*-2525"
                                                              "l-*-2523"
                                                              "l-*-2521"
                                                              "l-*-2519"
                                                              "l-*-2517"
                                                              "l-*-2515"
                                                              "l-*-2513"
                                                              "l-*-2511"
                                                              "l-*-2509"
                                                              "l-*-2507"
                                                              "l-*-2505"
                                                              "l-*-2503"
                                                              "l-*-2501"
                                                              "l-*-2499"
                                                              "l-*-2497"
                                                              "l-*-2495"
                                                              "l-*-2493"
                                                              "l-*-2491"
                                                              "l-*-2489"
                                                              "l-*-2487"
                                                              "l-*-2485"
                                                              "l-*-2483"
                                                              "l-*-2481"
                                                              "l-*-2479"
                                                              "l-*-2477"
                                                              "l-*-2475"
                                                              "l-*-2473"
                                                              "l-*-2471"
                                                              "l-*-2469"
                                                              "l-*-2467"
                                                              "l-*-2465"
                                                              "l-*-2463"
                                                              "l-*-2461"
                                                              "l-*-2459"
                                                              "l-*-2457"
                                                              "l-*-2455"
                                                              "l-*-2453"
                                                              "l-*-2451"
                                                              "l-*-2450"
                                                              "l-*-2448"
                                                              "l-*-2445"
                                                              "l-*-2444"
                                                              "l-*-2443"
                                                              "l-*-2441"
                                                              "l-*-2440"
                                                              "l-*-2438"
                                                              "l-*-2436"
                                                              "l-*-2434"
                                                              "l-*-2432"
                                                              "l-*-2430"
                                                              "l-*-2428"
                                                              "l-*-2426"
                                                              "l-*-2424"
                                                              "l-*-2421"
                                                              "l-*-2419"
                                                              "l-*-2418"
                                                              "l-*-2416"
                                                              "l-*-2414"
                                                              "l-*-2412"
                                                              "l-*-2410"
                                                              "l-*-2409"
                                                              "l-*-2408"
                                                              "l-*-2407"
                                                              "l-*-2405"
                                                              "l-*-2404"
                                                              "l-*-2401"
                                                              "l-*-2399"
                                                              "l-*-2397"
                                                              "l-*-2395"
                                                              "l-*-2393"
                                                              "l-*-2391"
                                                              "l-*-2389"
                                                              "l-*-2388"
                                                              "l-*-2387"
                                                              "l-*-2385"
                                                              "l-*-2383"
                                                              "l-*-2382"
                                                              "l-*-2379"
                                                              "l-*-2378"
                                                              "l-*-2376"
                                                              "l-*-2374"
                                                              "l-*-2372"
                                                              "l-*-2370"
                                                              "l-*-2368"
                                                              "l-*-2366"
                                                              "l-*-2364"
                                                              "l-*-2362"
                                                              "l-*-2360"
                                                              "l-*-2357"
                                                              "l-*-2355"
                                                              "l-*-2353"
                                                              "l-*-2351"
                                                              "l-*-2349"
                                                              "l-*-2347"
                                                              "l-*-2345"
                                                              "l-*-2343"
                                                              "l-*-2341"
                                                              "l-*-2339"
                                                              "l-*-2337"
                                                              "l-*-2335"
                                                              "l-*-2333"
                                                              "l-*-2331"
                                                              "l-*-2329"
                                                              "l-*-2327"
                                                              "l-*-2325"
                                                              "l-*-2323"
                                                              "l-*-2321"
                                                              "l-*-2319"
                                                              "l-*-2317"
                                                              "l-*-2315"
                                                              "l-*-2313"
                                                              "l-*-2311"
                                                              "l-*-2309"
                                                              "l-*-2307"
                                                              "l-*-2306"
                                                              "l-*-2305"
                                                              "l-*-2304"
                                                              "l-*-2303"
                                                              "l-*-2301"
                                                              "l-*-2299"
                                                              "l-*-2297"
                                                              "l-*-2294"
                                                              "l-*-2292"
                                                              "l-*-2290"
                                                              "l-*-2288"
                                                              "l-*-2286"
                                                              "l-*-2284"
                                                              "l-*-2282"
                                                              "l-*-2280"
                                                              "l-*-2278"
                                                              "l-*-2276"
                                                              "l-*-2274"
                                                              "l-*-2272"
                                                              "l-*-2270"
                                                              "l-*-2268"
                                                              "l-*-2266"
                                                              "l-*-2264"
                                                              "l-*-2262"
                                                              "l-*-2260"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("l-*-2098"
                                                              "l-*-2097"
                                                              "l-*-2096")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            'pad
                                            '#(syntax-object
                                               pad
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("l-*-6087" "l-*-6088"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-6076"
                                                    "l-*-6077"
                                                    "l-*-6078"
                                                    "l-*-6079"
                                                    "l-*-6080"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("l-*-5886"
                                                   "l-*-5884"
                                                   "l-*-5882"
                                                   "l-*-5880"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-2527"
                                                   "l-*-2525"
                                                   "l-*-2523"
                                                   "l-*-2521"
                                                   "l-*-2519"
                                                   "l-*-2517"
                                                   "l-*-2515"
                                                   "l-*-2513"
                                                   "l-*-2511"
                                                   "l-*-2509"
                                                   "l-*-2507"
                                                   "l-*-2505"
                                                   "l-*-2503"
                                                   "l-*-2501"
                                                   "l-*-2499"
                                                   "l-*-2497"
                                                   "l-*-2495"
                                                   "l-*-2493"
                                                   "l-*-2491"
                                                   "l-*-2489"
                                                   "l-*-2487"
                                                   "l-*-2485"
                                                   "l-*-2483"
                                                   "l-*-2481"
                                                   "l-*-2479"
                                                   "l-*-2477"
                                                   "l-*-2475"
                                                   "l-*-2473"
                                                   "l-*-2471"
                                                   "l-*-2469"
                                                   "l-*-2467"
                                                   "l-*-2465"
                                                   "l-*-2463"
                                                   "l-*-2461"
                                                   "l-*-2459"
                                                   "l-*-2457"
                                                   "l-*-2455"
                                                   "l-*-2453"
                                                   "l-*-2451"
                                                   "l-*-2450"
                                                   "l-*-2448"
                                                   "l-*-2445"
                                                   "l-*-2444"
                                                   "l-*-2443"
                                                   "l-*-2441"
                                                   "l-*-2440"
                                                   "l-*-2438"
                                                   "l-*-2436"
                                                   "l-*-2434"
                                                   "l-*-2432"
                                                   "l-*-2430"
                                                   "l-*-2428"
                                                   "l-*-2426"
                                                   "l-*-2424"
                                                   "l-*-2421"
                                                   "l-*-2419"
                                                   "l-*-2418"
                                                   "l-*-2416"
                                                   "l-*-2414"
                                                   "l-*-2412"
                                                   "l-*-2410"
                                                   "l-*-2409"
                                                   "l-*-2408"
                                                   "l-*-2407"
                                                   "l-*-2405"
                                                   "l-*-2404"
                                                   "l-*-2401"
                                                   "l-*-2399"
                                                   "l-*-2397"
                                                   "l-*-2395"
                                                   "l-*-2393"
                                                   "l-*-2391"
                                                   "l-*-2389"
                                                   "l-*-2388"
                                                   "l-*-2387"
                                                   "l-*-2385"
                                                   "l-*-2383"
                                                   "l-*-2382"
                                                   "l-*-2379"
                                                   "l-*-2378"
                                                   "l-*-2376"
                                                   "l-*-2374"
                                                   "l-*-2372"
                                                   "l-*-2370"
                                                   "l-*-2368"
                                                   "l-*-2366"
                                                   "l-*-2364"
                                                   "l-*-2362"
                                                   "l-*-2360"
                                                   "l-*-2357"
                                                   "l-*-2355"
                                                   "l-*-2353"
                                                   "l-*-2351"
                                                   "l-*-2349"
                                                   "l-*-2347"
                                                   "l-*-2345"
                                                   "l-*-2343"
                                                   "l-*-2341"
                                                   "l-*-2339"
                                                   "l-*-2337"
                                                   "l-*-2335"
                                                   "l-*-2333"
                                                   "l-*-2331"
                                                   "l-*-2329"
                                                   "l-*-2327"
                                                   "l-*-2325"
                                                   "l-*-2323"
                                                   "l-*-2321"
                                                   "l-*-2319"
                                                   "l-*-2317"
                                                   "l-*-2315"
                                                   "l-*-2313"
                                                   "l-*-2311"
                                                   "l-*-2309"
                                                   "l-*-2307"
                                                   "l-*-2306"
                                                   "l-*-2305"
                                                   "l-*-2304"
                                                   "l-*-2303"
                                                   "l-*-2301"
                                                   "l-*-2299"
                                                   "l-*-2297"
                                                   "l-*-2294"
                                                   "l-*-2292"
                                                   "l-*-2290"
                                                   "l-*-2288"
                                                   "l-*-2286"
                                                   "l-*-2284"
                                                   "l-*-2282"
                                                   "l-*-2280"
                                                   "l-*-2278"
                                                   "l-*-2276"
                                                   "l-*-2274"
                                                   "l-*-2272"
                                                   "l-*-2270"
                                                   "l-*-2268"
                                                   "l-*-2266"
                                                   "l-*-2264"
                                                   "l-*-2262"
                                                   "l-*-2260"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-2098"
                                                   "l-*-2097"
                                                   "l-*-2096")))
                                               (hygiene guile)))
                                          (if (if (= (vector-length
                                                       '#(syntax-object
                                                          _
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("l-*-6087"
                                                               "l-*-6088"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-6076"
                                                               "l-*-6077"
                                                               "l-*-6078"
                                                               "l-*-6079"
                                                               "l-*-6080"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-5886"
                                                              "l-*-5884"
                                                              "l-*-5882"
                                                              "l-*-5880"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               session-id
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-2527"
                                                              "l-*-2525"
                                                              "l-*-2523"
                                                              "l-*-2521"
                                                              "l-*-2519"
                                                              "l-*-2517"
                                                              "l-*-2515"
                                                              "l-*-2513"
                                                              "l-*-2511"
                                                              "l-*-2509"
                                                              "l-*-2507"
                                                              "l-*-2505"
                                                              "l-*-2503"
                                                              "l-*-2501"
                                                              "l-*-2499"
                                                              "l-*-2497"
                                                              "l-*-2495"
                                                              "l-*-2493"
                                                              "l-*-2491"
                                                              "l-*-2489"
                                                              "l-*-2487"
                                                              "l-*-2485"
                                                              "l-*-2483"
                                                              "l-*-2481"
                                                              "l-*-2479"
                                                              "l-*-2477"
                                                              "l-*-2475"
                                                              "l-*-2473"
                                                              "l-*-2471"
                                                              "l-*-2469"
                                                              "l-*-2467"
                                                              "l-*-2465"
                                                              "l-*-2463"
                                                              "l-*-2461"
                                                              "l-*-2459"
                                                              "l-*-2457"
                                                              "l-*-2455"
                                                              "l-*-2453"
                                                              "l-*-2451"
                                                              "l-*-2450"
                                                              "l-*-2448"
                                                              "l-*-2445"
                                                              "l-*-2444"
                                                              "l-*-2443"
                                                              "l-*-2441"
                                                              "l-*-2440"
                                                              "l-*-2438"
                                                              "l-*-2436"
                                                              "l-*-2434"
                                                              "l-*-2432"
                                                              "l-*-2430"
                                                              "l-*-2428"
                                                              "l-*-2426"
                                                              "l-*-2424"
                                                              "l-*-2421"
                                                              "l-*-2419"
                                                              "l-*-2418"
                                                              "l-*-2416"
                                                              "l-*-2414"
                                                              "l-*-2412"
                                                              "l-*-2410"
                                                              "l-*-2409"
                                                              "l-*-2408"
                                                              "l-*-2407"
                                                              "l-*-2405"
                                                              "l-*-2404"
                                                              "l-*-2401"
                                                              "l-*-2399"
                                                              "l-*-2397"
                                                              "l-*-2395"
                                                              "l-*-2393"
                                                              "l-*-2391"
                                                              "l-*-2389"
                                                              "l-*-2388"
                                                              "l-*-2387"
                                                              "l-*-2385"
                                                              "l-*-2383"
                                                              "l-*-2382"
                                                              "l-*-2379"
                                                              "l-*-2378"
                                                              "l-*-2376"
                                                              "l-*-2374"
                                                              "l-*-2372"
                                                              "l-*-2370"
                                                              "l-*-2368"
                                                              "l-*-2366"
                                                              "l-*-2364"
                                                              "l-*-2362"
                                                              "l-*-2360"
                                                              "l-*-2357"
                                                              "l-*-2355"
                                                              "l-*-2353"
                                                              "l-*-2351"
                                                              "l-*-2349"
                                                              "l-*-2347"
                                                              "l-*-2345"
                                                              "l-*-2343"
                                                              "l-*-2341"
                                                              "l-*-2339"
                                                              "l-*-2337"
                                                              "l-*-2335"
                                                              "l-*-2333"
                                                              "l-*-2331"
                                                              "l-*-2329"
                                                              "l-*-2327"
                                                              "l-*-2325"
                                                              "l-*-2323"
                                                              "l-*-2321"
                                                              "l-*-2319"
                                                              "l-*-2317"
                                                              "l-*-2315"
                                                              "l-*-2313"
                                                              "l-*-2311"
                                                              "l-*-2309"
                                                              "l-*-2307"
                                                              "l-*-2306"
                                                              "l-*-2305"
                                                              "l-*-2304"
                                                              "l-*-2303"
                                                              "l-*-2301"
                                                              "l-*-2299"
                                                              "l-*-2297"
                                                              "l-*-2294"
                                                              "l-*-2292"
                                                              "l-*-2290"
                                                              "l-*-2288"
                                                              "l-*-2286"
                                                              "l-*-2284"
                                                              "l-*-2282"
                                                              "l-*-2280"
                                                              "l-*-2278"
                                                              "l-*-2276"
                                                              "l-*-2274"
                                                              "l-*-2272"
                                                              "l-*-2270"
                                                              "l-*-2268"
                                                              "l-*-2266"
                                                              "l-*-2264"
                                                              "l-*-2262"
                                                              "l-*-2260"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("l-*-2098"
                                                              "l-*-2097"
                                                              "l-*-2096")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            '_
                                            '#(syntax-object
                                               _
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("l-*-6087" "l-*-6088"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-6076"
                                                    "l-*-6077"
                                                    "l-*-6078"
                                                    "l-*-6079"
                                                    "l-*-6080"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("l-*-5886"
                                                   "l-*-5884"
                                                   "l-*-5882"
                                                   "l-*-5880"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-2527"
                                                   "l-*-2525"
                                                   "l-*-2523"
                                                   "l-*-2521"
                                                   "l-*-2519"
                                                   "l-*-2517"
                                                   "l-*-2515"
                                                   "l-*-2513"
                                                   "l-*-2511"
                                                   "l-*-2509"
                                                   "l-*-2507"
                                                   "l-*-2505"
                                                   "l-*-2503"
                                                   "l-*-2501"
                                                   "l-*-2499"
                                                   "l-*-2497"
                                                   "l-*-2495"
                                                   "l-*-2493"
                                                   "l-*-2491"
                                                   "l-*-2489"
                                                   "l-*-2487"
                                                   "l-*-2485"
                                                   "l-*-2483"
                                                   "l-*-2481"
                                                   "l-*-2479"
                                                   "l-*-2477"
                                                   "l-*-2475"
                                                   "l-*-2473"
                                                   "l-*-2471"
                                                   "l-*-2469"
                                                   "l-*-2467"
                                                   "l-*-2465"
                                                   "l-*-2463"
                                                   "l-*-2461"
                                                   "l-*-2459"
                                                   "l-*-2457"
                                                   "l-*-2455"
                                                   "l-*-2453"
                                                   "l-*-2451"
                                                   "l-*-2450"
                                                   "l-*-2448"
                                                   "l-*-2445"
                                                   "l-*-2444"
                                                   "l-*-2443"
                                                   "l-*-2441"
                                                   "l-*-2440"
                                                   "l-*-2438"
                                                   "l-*-2436"
                                                   "l-*-2434"
                                                   "l-*-2432"
                                                   "l-*-2430"
                                                   "l-*-2428"
                                                   "l-*-2426"
                                                   "l-*-2424"
                                                   "l-*-2421"
                                                   "l-*-2419"
                                                   "l-*-2418"
                                                   "l-*-2416"
                                                   "l-*-2414"
                                                   "l-*-2412"
                                                   "l-*-2410"
                                                   "l-*-2409"
                                                   "l-*-2408"
                                                   "l-*-2407"
                                                   "l-*-2405"
                                                   "l-*-2404"
                                                   "l-*-2401"
                                                   "l-*-2399"
                                                   "l-*-2397"
                                                   "l-*-2395"
                                                   "l-*-2393"
                                                   "l-*-2391"
                                                   "l-*-2389"
                                                   "l-*-2388"
                                                   "l-*-2387"
                                                   "l-*-2385"
                                                   "l-*-2383"
                                                   "l-*-2382"
                                                   "l-*-2379"
                                                   "l-*-2378"
                                                   "l-*-2376"
                                                   "l-*-2374"
                                                   "l-*-2372"
                                                   "l-*-2370"
                                                   "l-*-2368"
                                                   "l-*-2366"
                                                   "l-*-2364"
                                                   "l-*-2362"
                                                   "l-*-2360"
                                                   "l-*-2357"
                                                   "l-*-2355"
                                                   "l-*-2353"
                                                   "l-*-2351"
                                                   "l-*-2349"
                                                   "l-*-2347"
                                                   "l-*-2345"
                                                   "l-*-2343"
                                                   "l-*-2341"
                                                   "l-*-2339"
                                                   "l-*-2337"
                                                   "l-*-2335"
                                                   "l-*-2333"
                                                   "l-*-2331"
                                                   "l-*-2329"
                                                   "l-*-2327"
                                                   "l-*-2325"
                                                   "l-*-2323"
                                                   "l-*-2321"
                                                   "l-*-2319"
                                                   "l-*-2317"
                                                   "l-*-2315"
                                                   "l-*-2313"
                                                   "l-*-2311"
                                                   "l-*-2309"
                                                   "l-*-2307"
                                                   "l-*-2306"
                                                   "l-*-2305"
                                                   "l-*-2304"
                                                   "l-*-2303"
                                                   "l-*-2301"
                                                   "l-*-2299"
                                                   "l-*-2297"
                                                   "l-*-2294"
                                                   "l-*-2292"
                                                   "l-*-2290"
                                                   "l-*-2288"
                                                   "l-*-2286"
                                                   "l-*-2284"
                                                   "l-*-2282"
                                                   "l-*-2280"
                                                   "l-*-2278"
                                                   "l-*-2276"
                                                   "l-*-2274"
                                                   "l-*-2272"
                                                   "l-*-2270"
                                                   "l-*-2268"
                                                   "l-*-2266"
                                                   "l-*-2264"
                                                   "l-*-2262"
                                                   "l-*-2260"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-2098"
                                                   "l-*-2097"
                                                   "l-*-2096")))
                                               (hygiene guile))))
                                   (eq? (id-var-name-6568
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("l-*-6087" "l-*-6088"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-6076"
                                                  "l-*-6077"
                                                  "l-*-6078"
                                                  "l-*-6079"
                                                  "l-*-6080"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("l-*-5886"
                                                 "l-*-5884"
                                                 "l-*-5882"
                                                 "l-*-5880"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  session-id
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-2527"
                                                 "l-*-2525"
                                                 "l-*-2523"
                                                 "l-*-2521"
                                                 "l-*-2519"
                                                 "l-*-2517"
                                                 "l-*-2515"
                                                 "l-*-2513"
                                                 "l-*-2511"
                                                 "l-*-2509"
                                                 "l-*-2507"
                                                 "l-*-2505"
                                                 "l-*-2503"
                                                 "l-*-2501"
                                                 "l-*-2499"
                                                 "l-*-2497"
                                                 "l-*-2495"
                                                 "l-*-2493"
                                                 "l-*-2491"
                                                 "l-*-2489"
                                                 "l-*-2487"
                                                 "l-*-2485"
                                                 "l-*-2483"
                                                 "l-*-2481"
                                                 "l-*-2479"
                                                 "l-*-2477"
                                                 "l-*-2475"
                                                 "l-*-2473"
                                                 "l-*-2471"
                                                 "l-*-2469"
                                                 "l-*-2467"
                                                 "l-*-2465"
                                                 "l-*-2463"
                                                 "l-*-2461"
                                                 "l-*-2459"
                                                 "l-*-2457"
                                                 "l-*-2455"
                                                 "l-*-2453"
                                                 "l-*-2451"
                                                 "l-*-2450"
                                                 "l-*-2448"
                                                 "l-*-2445"
                                                 "l-*-2444"
                                                 "l-*-2443"
                                                 "l-*-2441"
                                                 "l-*-2440"
                                                 "l-*-2438"
                                                 "l-*-2436"
                                                 "l-*-2434"
                                                 "l-*-2432"
                                                 "l-*-2430"
                                                 "l-*-2428"
                                                 "l-*-2426"
                                                 "l-*-2424"
                                                 "l-*-2421"
                                                 "l-*-2419"
                                                 "l-*-2418"
                                                 "l-*-2416"
                                                 "l-*-2414"
                                                 "l-*-2412"
                                                 "l-*-2410"
                                                 "l-*-2409"
                                                 "l-*-2408"
                                                 "l-*-2407"
                                                 "l-*-2405"
                                                 "l-*-2404"
                                                 "l-*-2401"
                                                 "l-*-2399"
                                                 "l-*-2397"
                                                 "l-*-2395"
                                                 "l-*-2393"
                                                 "l-*-2391"
                                                 "l-*-2389"
                                                 "l-*-2388"
                                                 "l-*-2387"
                                                 "l-*-2385"
                                                 "l-*-2383"
                                                 "l-*-2382"
                                                 "l-*-2379"
                                                 "l-*-2378"
                                                 "l-*-2376"
                                                 "l-*-2374"
                                                 "l-*-2372"
                                                 "l-*-2370"
                                                 "l-*-2368"
                                                 "l-*-2366"
                                                 "l-*-2364"
                                                 "l-*-2362"
                                                 "l-*-2360"
                                                 "l-*-2357"
                                                 "l-*-2355"
                                                 "l-*-2353"
                                                 "l-*-2351"
                                                 "l-*-2349"
                                                 "l-*-2347"
                                                 "l-*-2345"
                                                 "l-*-2343"
                                                 "l-*-2341"
                                                 "l-*-2339"
                                                 "l-*-2337"
                                                 "l-*-2335"
                                                 "l-*-2333"
                                                 "l-*-2331"
                                                 "l-*-2329"
                                                 "l-*-2327"
                                                 "l-*-2325"
                                                 "l-*-2323"
                                                 "l-*-2321"
                                                 "l-*-2319"
                                                 "l-*-2317"
                                                 "l-*-2315"
                                                 "l-*-2313"
                                                 "l-*-2311"
                                                 "l-*-2309"
                                                 "l-*-2307"
                                                 "l-*-2306"
                                                 "l-*-2305"
                                                 "l-*-2304"
                                                 "l-*-2303"
                                                 "l-*-2301"
                                                 "l-*-2299"
                                                 "l-*-2297"
                                                 "l-*-2294"
                                                 "l-*-2292"
                                                 "l-*-2290"
                                                 "l-*-2288"
                                                 "l-*-2286"
                                                 "l-*-2284"
                                                 "l-*-2282"
                                                 "l-*-2280"
                                                 "l-*-2278"
                                                 "l-*-2276"
                                                 "l-*-2274"
                                                 "l-*-2272"
                                                 "l-*-2270"
                                                 "l-*-2268"
                                                 "l-*-2266"
                                                 "l-*-2264"
                                                 "l-*-2262"
                                                 "l-*-2260"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("l-*-2098"
                                                 "l-*-2097"
                                                 "l-*-2096")))
                                             (hygiene guile))
                                          '(()))
                                        (id-var-name-6568
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("l-*-6087" "l-*-6088"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-6076"
                                                  "l-*-6077"
                                                  "l-*-6078"
                                                  "l-*-6079"
                                                  "l-*-6080"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("l-*-5886"
                                                 "l-*-5884"
                                                 "l-*-5882"
                                                 "l-*-5880"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  session-id
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-2527"
                                                 "l-*-2525"
                                                 "l-*-2523"
                                                 "l-*-2521"
                                                 "l-*-2519"
                                                 "l-*-2517"
                                                 "l-*-2515"
                                                 "l-*-2513"
                                                 "l-*-2511"
                                                 "l-*-2509"
                                                 "l-*-2507"
                                                 "l-*-2505"
                                                 "l-*-2503"
                                                 "l-*-2501"
                                                 "l-*-2499"
                                                 "l-*-2497"
                                                 "l-*-2495"
                                                 "l-*-2493"
                                                 "l-*-2491"
                                                 "l-*-2489"
                                                 "l-*-2487"
                                                 "l-*-2485"
                                                 "l-*-2483"
                                                 "l-*-2481"
                                                 "l-*-2479"
                                                 "l-*-2477"
                                                 "l-*-2475"
                                                 "l-*-2473"
                                                 "l-*-2471"
                                                 "l-*-2469"
                                                 "l-*-2467"
                                                 "l-*-2465"
                                                 "l-*-2463"
                                                 "l-*-2461"
                                                 "l-*-2459"
                                                 "l-*-2457"
                                                 "l-*-2455"
                                                 "l-*-2453"
                                                 "l-*-2451"
                                                 "l-*-2450"
                                                 "l-*-2448"
                                                 "l-*-2445"
                                                 "l-*-2444"
                                                 "l-*-2443"
                                                 "l-*-2441"
                                                 "l-*-2440"
                                                 "l-*-2438"
                                                 "l-*-2436"
                                                 "l-*-2434"
                                                 "l-*-2432"
                                                 "l-*-2430"
                                                 "l-*-2428"
                                                 "l-*-2426"
                                                 "l-*-2424"
                                                 "l-*-2421"
                                                 "l-*-2419"
                                                 "l-*-2418"
                                                 "l-*-2416"
                                                 "l-*-2414"
                                                 "l-*-2412"
                                                 "l-*-2410"
                                                 "l-*-2409"
                                                 "l-*-2408"
                                                 "l-*-2407"
                                                 "l-*-2405"
                                                 "l-*-2404"
                                                 "l-*-2401"
                                                 "l-*-2399"
                                                 "l-*-2397"
                                                 "l-*-2395"
                                                 "l-*-2393"
                                                 "l-*-2391"
                                                 "l-*-2389"
                                                 "l-*-2388"
                                                 "l-*-2387"
                                                 "l-*-2385"
                                                 "l-*-2383"
                                                 "l-*-2382"
                                                 "l-*-2379"
                                                 "l-*-2378"
                                                 "l-*-2376"
                                                 "l-*-2374"
                                                 "l-*-2372"
                                                 "l-*-2370"
                                                 "l-*-2368"
                                                 "l-*-2366"
                                                 "l-*-2364"
                                                 "l-*-2362"
                                                 "l-*-2360"
                                                 "l-*-2357"
                                                 "l-*-2355"
                                                 "l-*-2353"
                                                 "l-*-2351"
                                                 "l-*-2349"
                                                 "l-*-2347"
                                                 "l-*-2345"
                                                 "l-*-2343"
                                                 "l-*-2341"
                                                 "l-*-2339"
                                                 "l-*-2337"
                                                 "l-*-2335"
                                                 "l-*-2333"
                                                 "l-*-2331"
                                                 "l-*-2329"
                                                 "l-*-2327"
                                                 "l-*-2325"
                                                 "l-*-2323"
                                                 "l-*-2321"
                                                 "l-*-2319"
                                                 "l-*-2317"
                                                 "l-*-2315"
                                                 "l-*-2313"
                                                 "l-*-2311"
                                                 "l-*-2309"
                                                 "l-*-2307"
                                                 "l-*-2306"
                                                 "l-*-2305"
                                                 "l-*-2304"
                                                 "l-*-2303"
                                                 "l-*-2301"
                                                 "l-*-2299"
                                                 "l-*-2297"
                                                 "l-*-2294"
                                                 "l-*-2292"
                                                 "l-*-2290"
                                                 "l-*-2288"
                                                 "l-*-2286"
                                                 "l-*-2284"
                                                 "l-*-2282"
                                                 "l-*-2280"
                                                 "l-*-2278"
                                                 "l-*-2276"
                                                 "l-*-2274"
                                                 "l-*-2272"
                                                 "l-*-2270"
                                                 "l-*-2268"
                                                 "l-*-2266"
                                                 "l-*-2264"
                                                 "l-*-2262"
                                                 "l-*-2260"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("l-*-2098"
                                                 "l-*-2097"
                                                 "l-*-2096")))
                                             (hygiene guile))
                                          '(())))
                                   #f)
                               (expand-6585 exp-13675 r-13631 '(()) mod-13632)
                               (let ((labels-13878
                                       (list (string-append
                                               "l-"
                                               (session-id-6510)
                                               (symbol->string (gensym "-")))))
                                     (var-13879
                                       (let ((id-13917
                                               (if (if (vector? pat-13674)
                                                     (if (= (vector-length
                                                              pat-13674)
                                                            4)
                                                       (eq? (vector-ref
                                                              pat-13674
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref pat-13674 1)
                                                 pat-13674)))
                                         (gensym
                                           (string-append
                                             (symbol->string id-13917)
                                             "-")))))
                                 (build-application-6516
                                   #f
                                   (build-simple-lambda-6525
                                     #f
                                     (list (syntax->datum pat-13674))
                                     #f
                                     (list var-13879)
                                     '()
                                     (expand-6585
                                       exp-13675
                                       (extend-env-6543
                                         labels-13878
                                         (list (cons 'syntax
                                                     (cons var-13879 0)))
                                         r-13631)
                                       (make-binding-wrap-6563
                                         (list pat-13674)
                                         labels-13878
                                         '(()))
                                       mod-13632))
                                   (list x-13628))))
                             (gen-clause-13228
                               x-13628
                               keys-13629
                               (cdr clauses-13630)
                               r-13631
                               pat-13674
                               #t
                               exp-13675
                               mod-13632)))
                         tmp-13672)
                       (let ((tmp-14187
                               ($sc-dispatch tmp-13671 '(any any any))))
                         (if tmp-14187
                           (@apply
                             (lambda (pat-14189 fender-14190 exp-14191)
                               (gen-clause-13228
                                 x-13628
                                 keys-13629
                                 (cdr clauses-13630)
                                 r-13631
                                 pat-14189
                                 fender-14190
                                 exp-14191
                                 mod-13632))
                             tmp-14187)
                           (syntax-violation
                             'syntax-case
                             "invalid clause"
                             (car clauses-13630)))))))))))
          (lambda (e-13230 r-13231 w-13232 s-13233 mod-13234)
            (let ((e-13235
                    (wrap-6578
                      (begin
                        (if (if (pair? e-13230) s-13233 #f)
                          (set-source-properties! e-13230 s-13233))
                        e-13230)
                      w-13232
                      mod-13234)))
              (let ((tmp-13237
                      ($sc-dispatch
                        e-13235
                        '(_ any each-any . each-any))))
                (if tmp-13237
                  (@apply
                    (lambda (val-13262 key-13263 m-13264)
                      (if (and-map
                            (lambda (x-13265)
                              (if (if (symbol? x-13265)
                                    #t
                                    (if (if (vector? x-13265)
                                          (if (= (vector-length x-13265) 4)
                                            (eq? (vector-ref x-13265 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref x-13265 1))
                                      #f))
                                (not (if (if (if (vector? x-13265)
                                               (if (= (vector-length x-13265)
                                                      4)
                                                 (eq? (vector-ref x-13265 0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol? (vector-ref x-13265 1))
                                           #f)
                                       (if (eq? (if (if (vector? x-13265)
                                                      (if (= (vector-length
                                                               x-13265)
                                                             4)
                                                        (eq? (vector-ref
                                                               x-13265
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref x-13265 1)
                                                  x-13265)
                                                (if (if (= (vector-length
                                                             '#(syntax-object
                                                                ...
                                                                ((top)
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-4404"))
                                                                 #(ribcage
                                                                   (lambda-var-list
                                                                     gen-var
                                                                     strip
                                                                     expand-lambda-case
                                                                     lambda*-formals
                                                                     expand-simple-lambda
                                                                     lambda-formals
                                                                     ellipsis?
                                                                     expand-void
                                                                     eval-local-transformer
                                                                     expand-local-syntax
                                                                     expand-body
                                                                     expand-macro
                                                                     expand-application
                                                                     expand-expr
                                                                     expand
                                                                     syntax-type
                                                                     parse-when-list
                                                                     expand-install-global
                                                                     expand-top-sequence
                                                                     expand-sequence
                                                                     source-wrap
                                                                     wrap
                                                                     bound-id-member?
                                                                     distinct-bound-ids?
                                                                     valid-bound-ids?
                                                                     bound-id=?
                                                                     free-id=?
                                                                     with-transformer-environment
                                                                     transformer-environment
                                                                     resolve-identifier
                                                                     locally-bound-identifiers
                                                                     id-var-name
                                                                     same-marks?
                                                                     join-marks
                                                                     join-wraps
                                                                     smart-append
                                                                     make-binding-wrap
                                                                     extend-ribcage!
                                                                     make-empty-ribcage
                                                                     new-mark
                                                                     anti-mark
                                                                     the-anti-mark
                                                                     top-marked?
                                                                     top-wrap
                                                                     empty-wrap
                                                                     set-ribcage-labels!
                                                                     set-ribcage-marks!
                                                                     set-ribcage-symnames!
                                                                     ribcage-labels
                                                                     ribcage-marks
                                                                     ribcage-symnames
                                                                     ribcage?
                                                                     make-ribcage
                                                                     gen-labels
                                                                     gen-label
                                                                     make-rename
                                                                     rename-marks
                                                                     rename-new
                                                                     rename-old
                                                                     subst-rename?
                                                                     wrap-subst
                                                                     wrap-marks
                                                                     make-wrap
                                                                     id-sym-name&marks
                                                                     id-sym-name
                                                                     id?
                                                                     nonsymbol-id?
                                                                     global-extend
                                                                     lookup
                                                                     macros-only-env
                                                                     extend-var-env
                                                                     extend-env
                                                                     null-env
                                                                     binding-value
                                                                     binding-type
                                                                     make-binding
                                                                     arg-check
                                                                     source-annotation
                                                                     no-source
                                                                     set-syntax-object-module!
                                                                     set-syntax-object-wrap!
                                                                     set-syntax-object-expression!
                                                                     syntax-object-module
                                                                     syntax-object-wrap
                                                                     syntax-object-expression
                                                                     syntax-object?
                                                                     make-syntax-object
                                                                     build-lexical-var
                                                                     build-letrec
                                                                     build-named-let
                                                                     build-let
                                                                     build-sequence
                                                                     build-data
                                                                     build-primref
                                                                     build-lambda-case
                                                                     build-case-lambda
                                                                     build-simple-lambda
                                                                     build-global-definition
                                                                     build-global-assignment
                                                                     build-global-reference
                                                                     analyze-variable
                                                                     build-lexical-assignment
                                                                     build-lexical-reference
                                                                     build-dynlet
                                                                     build-conditional
                                                                     build-application
                                                                     build-void
                                                                     maybe-name-value!
                                                                     decorate-source
                                                                     get-global-definition-hook
                                                                     put-global-definition-hook
                                                                     session-id
                                                                     local-eval-hook
                                                                     top-level-eval-hook
                                                                     fx<
                                                                     fx=
                                                                     fx-
                                                                     fx+
                                                                     set-lambda-meta!
                                                                     lambda-meta
                                                                     lambda?
                                                                     make-dynlet
                                                                     make-letrec
                                                                     make-let
                                                                     make-lambda-case
                                                                     make-lambda
                                                                     make-sequence
                                                                     make-application
                                                                     make-conditional
                                                                     make-toplevel-define
                                                                     make-toplevel-set
                                                                     make-toplevel-ref
                                                                     make-module-set
                                                                     make-module-ref
                                                                     make-lexical-set
                                                                     make-lexical-ref
                                                                     make-primitive-ref
                                                                     make-const
                                                                     make-void)
                                                                   ((top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                   ("l-*-2527"
                                                                    "l-*-2525"
                                                                    "l-*-2523"
                                                                    "l-*-2521"
                                                                    "l-*-2519"
                                                                    "l-*-2517"
                                                                    "l-*-2515"
                                                                    "l-*-2513"
                                                                    "l-*-2511"
                                                                    "l-*-2509"
                                                                    "l-*-2507"
                                                                    "l-*-2505"
                                                                    "l-*-2503"
                                                                    "l-*-2501"
                                                                    "l-*-2499"
                                                                    "l-*-2497"
                                                                    "l-*-2495"
                                                                    "l-*-2493"
                                                                    "l-*-2491"
                                                                    "l-*-2489"
                                                                    "l-*-2487"
                                                                    "l-*-2485"
                                                                    "l-*-2483"
                                                                    "l-*-2481"
                                                                    "l-*-2479"
                                                                    "l-*-2477"
                                                                    "l-*-2475"
                                                                    "l-*-2473"
                                                                    "l-*-2471"
                                                                    "l-*-2469"
                                                                    "l-*-2467"
                                                                    "l-*-2465"
                                                                    "l-*-2463"
                                                                    "l-*-2461"
                                                                    "l-*-2459"
                                                                    "l-*-2457"
                                                                    "l-*-2455"
                                                                    "l-*-2453"
                                                                    "l-*-2451"
                                                                    "l-*-2450"
                                                                    "l-*-2448"
                                                                    "l-*-2445"
                                                                    "l-*-2444"
                                                                    "l-*-2443"
                                                                    "l-*-2441"
                                                                    "l-*-2440"
                                                                    "l-*-2438"
                                                                    "l-*-2436"
                                                                    "l-*-2434"
                                                                    "l-*-2432"
                                                                    "l-*-2430"
                                                                    "l-*-2428"
                                                                    "l-*-2426"
                                                                    "l-*-2424"
                                                                    "l-*-2421"
                                                                    "l-*-2419"
                                                                    "l-*-2418"
                                                                    "l-*-2416"
                                                                    "l-*-2414"
                                                                    "l-*-2412"
                                                                    "l-*-2410"
                                                                    "l-*-2409"
                                                                    "l-*-2408"
                                                                    "l-*-2407"
                                                                    "l-*-2405"
                                                                    "l-*-2404"
                                                                    "l-*-2401"
                                                                    "l-*-2399"
                                                                    "l-*-2397"
                                                                    "l-*-2395"
                                                                    "l-*-2393"
                                                                    "l-*-2391"
                                                                    "l-*-2389"
                                                                    "l-*-2388"
                                                                    "l-*-2387"
                                                                    "l-*-2385"
                                                                    "l-*-2383"
                                                                    "l-*-2382"
                                                                    "l-*-2379"
                                                                    "l-*-2378"
                                                                    "l-*-2376"
                                                                    "l-*-2374"
                                                                    "l-*-2372"
                                                                    "l-*-2370"
                                                                    "l-*-2368"
                                                                    "l-*-2366"
                                                                    "l-*-2364"
                                                                    "l-*-2362"
                                                                    "l-*-2360"
                                                                    "l-*-2357"
                                                                    "l-*-2355"
                                                                    "l-*-2353"
                                                                    "l-*-2351"
                                                                    "l-*-2349"
                                                                    "l-*-2347"
                                                                    "l-*-2345"
                                                                    "l-*-2343"
                                                                    "l-*-2341"
                                                                    "l-*-2339"
                                                                    "l-*-2337"
                                                                    "l-*-2335"
                                                                    "l-*-2333"
                                                                    "l-*-2331"
                                                                    "l-*-2329"
                                                                    "l-*-2327"
                                                                    "l-*-2325"
                                                                    "l-*-2323"
                                                                    "l-*-2321"
                                                                    "l-*-2319"
                                                                    "l-*-2317"
                                                                    "l-*-2315"
                                                                    "l-*-2313"
                                                                    "l-*-2311"
                                                                    "l-*-2309"
                                                                    "l-*-2307"
                                                                    "l-*-2306"
                                                                    "l-*-2305"
                                                                    "l-*-2304"
                                                                    "l-*-2303"
                                                                    "l-*-2301"
                                                                    "l-*-2299"
                                                                    "l-*-2297"
                                                                    "l-*-2294"
                                                                    "l-*-2292"
                                                                    "l-*-2290"
                                                                    "l-*-2288"
                                                                    "l-*-2286"
                                                                    "l-*-2284"
                                                                    "l-*-2282"
                                                                    "l-*-2280"
                                                                    "l-*-2278"
                                                                    "l-*-2276"
                                                                    "l-*-2274"
                                                                    "l-*-2272"
                                                                    "l-*-2270"
                                                                    "l-*-2268"
                                                                    "l-*-2266"
                                                                    "l-*-2264"
                                                                    "l-*-2262"
                                                                    "l-*-2260"))
                                                                 #(ribcage
                                                                   (define-structure
                                                                     define-expansion-accessors
                                                                     define-expansion-constructors)
                                                                   ((top)
                                                                    (top)
                                                                    (top))
                                                                   ("l-*-2098"
                                                                    "l-*-2097"
                                                                    "l-*-2096")))
                                                                (hygiene
                                                                  guile)))
                                                           4)
                                                      #t
                                                      #f)
                                                  '...
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("l-*-4404"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          with-transformer-environment
                                                          transformer-environment
                                                          resolve-identifier
                                                          locally-bound-identifiers
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          session-id
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("l-*-2527"
                                                         "l-*-2525"
                                                         "l-*-2523"
                                                         "l-*-2521"
                                                         "l-*-2519"
                                                         "l-*-2517"
                                                         "l-*-2515"
                                                         "l-*-2513"
                                                         "l-*-2511"
                                                         "l-*-2509"
                                                         "l-*-2507"
                                                         "l-*-2505"
                                                         "l-*-2503"
                                                         "l-*-2501"
                                                         "l-*-2499"
                                                         "l-*-2497"
                                                         "l-*-2495"
                                                         "l-*-2493"
                                                         "l-*-2491"
                                                         "l-*-2489"
                                                         "l-*-2487"
                                                         "l-*-2485"
                                                         "l-*-2483"
                                                         "l-*-2481"
                                                         "l-*-2479"
                                                         "l-*-2477"
                                                         "l-*-2475"
                                                         "l-*-2473"
                                                         "l-*-2471"
                                                         "l-*-2469"
                                                         "l-*-2467"
                                                         "l-*-2465"
                                                         "l-*-2463"
                                                         "l-*-2461"
                                                         "l-*-2459"
                                                         "l-*-2457"
                                                         "l-*-2455"
                                                         "l-*-2453"
                                                         "l-*-2451"
                                                         "l-*-2450"
                                                         "l-*-2448"
                                                         "l-*-2445"
                                                         "l-*-2444"
                                                         "l-*-2443"
                                                         "l-*-2441"
                                                         "l-*-2440"
                                                         "l-*-2438"
                                                         "l-*-2436"
                                                         "l-*-2434"
                                                         "l-*-2432"
                                                         "l-*-2430"
                                                         "l-*-2428"
                                                         "l-*-2426"
                                                         "l-*-2424"
                                                         "l-*-2421"
                                                         "l-*-2419"
                                                         "l-*-2418"
                                                         "l-*-2416"
                                                         "l-*-2414"
                                                         "l-*-2412"
                                                         "l-*-2410"
                                                         "l-*-2409"
                                                         "l-*-2408"
                                                         "l-*-2407"
                                                         "l-*-2405"
                                                         "l-*-2404"
                                                         "l-*-2401"
                                                         "l-*-2399"
                                                         "l-*-2397"
                                                         "l-*-2395"
                                                         "l-*-2393"
                                                         "l-*-2391"
                                                         "l-*-2389"
                                                         "l-*-2388"
                                                         "l-*-2387"
                                                         "l-*-2385"
                                                         "l-*-2383"
                                                         "l-*-2382"
                                                         "l-*-2379"
                                                         "l-*-2378"
                                                         "l-*-2376"
                                                         "l-*-2374"
                                                         "l-*-2372"
                                                         "l-*-2370"
                                                         "l-*-2368"
                                                         "l-*-2366"
                                                         "l-*-2364"
                                                         "l-*-2362"
                                                         "l-*-2360"
                                                         "l-*-2357"
                                                         "l-*-2355"
                                                         "l-*-2353"
                                                         "l-*-2351"
                                                         "l-*-2349"
                                                         "l-*-2347"
                                                         "l-*-2345"
                                                         "l-*-2343"
                                                         "l-*-2341"
                                                         "l-*-2339"
                                                         "l-*-2337"
                                                         "l-*-2335"
                                                         "l-*-2333"
                                                         "l-*-2331"
                                                         "l-*-2329"
                                                         "l-*-2327"
                                                         "l-*-2325"
                                                         "l-*-2323"
                                                         "l-*-2321"
                                                         "l-*-2319"
                                                         "l-*-2317"
                                                         "l-*-2315"
                                                         "l-*-2313"
                                                         "l-*-2311"
                                                         "l-*-2309"
                                                         "l-*-2307"
                                                         "l-*-2306"
                                                         "l-*-2305"
                                                         "l-*-2304"
                                                         "l-*-2303"
                                                         "l-*-2301"
                                                         "l-*-2299"
                                                         "l-*-2297"
                                                         "l-*-2294"
                                                         "l-*-2292"
                                                         "l-*-2290"
                                                         "l-*-2288"
                                                         "l-*-2286"
                                                         "l-*-2284"
                                                         "l-*-2282"
                                                         "l-*-2280"
                                                         "l-*-2278"
                                                         "l-*-2276"
                                                         "l-*-2274"
                                                         "l-*-2272"
                                                         "l-*-2270"
                                                         "l-*-2268"
                                                         "l-*-2266"
                                                         "l-*-2264"
                                                         "l-*-2262"
                                                         "l-*-2260"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("l-*-2098"
                                                         "l-*-2097"
                                                         "l-*-2096")))
                                                     (hygiene guile))))
                                         (eq? (id-var-name-6568 x-13265 '(()))
                                              (id-var-name-6568
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-4404"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        with-transformer-environment
                                                        transformer-environment
                                                        resolve-identifier
                                                        locally-bound-identifiers
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        session-id
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("l-*-2527"
                                                       "l-*-2525"
                                                       "l-*-2523"
                                                       "l-*-2521"
                                                       "l-*-2519"
                                                       "l-*-2517"
                                                       "l-*-2515"
                                                       "l-*-2513"
                                                       "l-*-2511"
                                                       "l-*-2509"
                                                       "l-*-2507"
                                                       "l-*-2505"
                                                       "l-*-2503"
                                                       "l-*-2501"
                                                       "l-*-2499"
                                                       "l-*-2497"
                                                       "l-*-2495"
                                                       "l-*-2493"
                                                       "l-*-2491"
                                                       "l-*-2489"
                                                       "l-*-2487"
                                                       "l-*-2485"
                                                       "l-*-2483"
                                                       "l-*-2481"
                                                       "l-*-2479"
                                                       "l-*-2477"
                                                       "l-*-2475"
                                                       "l-*-2473"
                                                       "l-*-2471"
                                                       "l-*-2469"
                                                       "l-*-2467"
                                                       "l-*-2465"
                                                       "l-*-2463"
                                                       "l-*-2461"
                                                       "l-*-2459"
                                                       "l-*-2457"
                                                       "l-*-2455"
                                                       "l-*-2453"
                                                       "l-*-2451"
                                                       "l-*-2450"
                                                       "l-*-2448"
                                                       "l-*-2445"
                                                       "l-*-2444"
                                                       "l-*-2443"
                                                       "l-*-2441"
                                                       "l-*-2440"
                                                       "l-*-2438"
                                                       "l-*-2436"
                                                       "l-*-2434"
                                                       "l-*-2432"
                                                       "l-*-2430"
                                                       "l-*-2428"
                                                       "l-*-2426"
                                                       "l-*-2424"
                                                       "l-*-2421"
                                                       "l-*-2419"
                                                       "l-*-2418"
                                                       "l-*-2416"
                                                       "l-*-2414"
                                                       "l-*-2412"
                                                       "l-*-2410"
                                                       "l-*-2409"
                                                       "l-*-2408"
                                                       "l-*-2407"
                                                       "l-*-2405"
                                                       "l-*-2404"
                                                       "l-*-2401"
                                                       "l-*-2399"
                                                       "l-*-2397"
                                                       "l-*-2395"
                                                       "l-*-2393"
                                                       "l-*-2391"
                                                       "l-*-2389"
                                                       "l-*-2388"
                                                       "l-*-2387"
                                                       "l-*-2385"
                                                       "l-*-2383"
                                                       "l-*-2382"
                                                       "l-*-2379"
                                                       "l-*-2378"
                                                       "l-*-2376"
                                                       "l-*-2374"
                                                       "l-*-2372"
                                                       "l-*-2370"
                                                       "l-*-2368"
                                                       "l-*-2366"
                                                       "l-*-2364"
                                                       "l-*-2362"
                                                       "l-*-2360"
                                                       "l-*-2357"
                                                       "l-*-2355"
                                                       "l-*-2353"
                                                       "l-*-2351"
                                                       "l-*-2349"
                                                       "l-*-2347"
                                                       "l-*-2345"
                                                       "l-*-2343"
                                                       "l-*-2341"
                                                       "l-*-2339"
                                                       "l-*-2337"
                                                       "l-*-2335"
                                                       "l-*-2333"
                                                       "l-*-2331"
                                                       "l-*-2329"
                                                       "l-*-2327"
                                                       "l-*-2325"
                                                       "l-*-2323"
                                                       "l-*-2321"
                                                       "l-*-2319"
                                                       "l-*-2317"
                                                       "l-*-2315"
                                                       "l-*-2313"
                                                       "l-*-2311"
                                                       "l-*-2309"
                                                       "l-*-2307"
                                                       "l-*-2306"
                                                       "l-*-2305"
                                                       "l-*-2304"
                                                       "l-*-2303"
                                                       "l-*-2301"
                                                       "l-*-2299"
                                                       "l-*-2297"
                                                       "l-*-2294"
                                                       "l-*-2292"
                                                       "l-*-2290"
                                                       "l-*-2288"
                                                       "l-*-2286"
                                                       "l-*-2284"
                                                       "l-*-2282"
                                                       "l-*-2280"
                                                       "l-*-2278"
                                                       "l-*-2276"
                                                       "l-*-2274"
                                                       "l-*-2272"
                                                       "l-*-2270"
                                                       "l-*-2268"
                                                       "l-*-2266"
                                                       "l-*-2264"
                                                       "l-*-2262"
                                                       "l-*-2260"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("l-*-2098"
                                                       "l-*-2097"
                                                       "l-*-2096")))
                                                   (hygiene guile))
                                                '(())))
                                         #f)
                                       #f))
                                #f))
                            key-13263)
                        (let ((x-13391
                                (gensym
                                  (string-append (symbol->string 'tmp) "-"))))
                          (build-application-6516
                            s-13233
                            (let ((req-13521 (list 'tmp))
                                  (vars-13523 (list x-13391))
                                  (exp-13525
                                    (gen-syntax-case-13229
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        x-13391)
                                      key-13263
                                      m-13264
                                      r-13231
                                      mod-13234)))
                              (let ((body-13530
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 14)
                                        #f
                                        req-13521
                                        #f
                                        #f
                                        #f
                                        '()
                                        vars-13523
                                        exp-13525
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 13)
                                  #f
                                  '()
                                  body-13530)))
                            (list (expand-6585
                                    val-13262
                                    r-13231
                                    '(())
                                    mod-13234))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          e-13235)))
                    tmp-13237)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    e-13235)))))))
      (set! macroexpand
        (lambda*
          (x-15948
            #:optional
            (m-15949 'e)
            (esew-15950 '(eval)))
          (expand-top-sequence-6581
            (list x-15948)
            '()
            '((top))
            #f
            m-15949
            esew-15950
            (cons 'hygiene (module-name (current-module))))))
      (set! identifier?
        (lambda (x-15953)
          (if (if (vector? x-15953)
                (if (= (vector-length x-15953) 4)
                  (eq? (vector-ref x-15953 0) 'syntax-object)
                  #f)
                #f)
            (symbol? (vector-ref x-15953 1))
            #f)))
      (set! datum->syntax
        (lambda (id-15978 datum-15979)
          (let ((wrap-15984 (vector-ref id-15978 2))
                (module-15985 (vector-ref id-15978 3)))
            (vector
              'syntax-object
              datum-15979
              wrap-15984
              module-15985))))
      (set! syntax->datum
        (lambda (x-15992) (strip-6598 x-15992 '(()))))
      (set! syntax-source
        (lambda (x-15995)
          (source-annotation-6542 x-15995)))
      (set! generate-temporaries
        (lambda (ls-16148)
          (begin
            (if (not (list? ls-16148))
              (syntax-violation
                'generate-temporaries
                "invalid argument"
                ls-16148))
            (let ((mod-16156
                    (cons 'hygiene (module-name (current-module)))))
              (map (lambda (x-16157)
                     (wrap-6578 (gensym "t-") '((top)) mod-16156))
                   ls-16148)))))
      (set! free-identifier=?
        (lambda (x-16161 y-16162)
          (begin
            (if (not (if (if (vector? x-16161)
                           (if (= (vector-length x-16161) 4)
                             (eq? (vector-ref x-16161 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref x-16161 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                x-16161))
            (if (not (if (if (vector? y-16162)
                           (if (= (vector-length y-16162) 4)
                             (eq? (vector-ref y-16162 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref y-16162 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                y-16162))
            (if (eq? (if (if (vector? x-16161)
                           (if (= (vector-length x-16161) 4)
                             (eq? (vector-ref x-16161 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref x-16161 1)
                       x-16161)
                     (if (if (vector? y-16162)
                           (if (= (vector-length y-16162) 4)
                             (eq? (vector-ref y-16162 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref y-16162 1)
                       y-16162))
              (eq? (id-var-name-6568 x-16161 '(()))
                   (id-var-name-6568 y-16162 '(())))
              #f))))
      (set! bound-identifier=?
        (lambda (x-16312 y-16313)
          (begin
            (if (not (if (if (vector? x-16312)
                           (if (= (vector-length x-16312) 4)
                             (eq? (vector-ref x-16312 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref x-16312 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                x-16312))
            (if (not (if (if (vector? y-16313)
                           (if (= (vector-length y-16313) 4)
                             (eq? (vector-ref y-16313 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref y-16313 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                y-16313))
            (if (if (if (vector? x-16312)
                      (if (= (vector-length x-16312) 4)
                        (eq? (vector-ref x-16312 0) 'syntax-object)
                        #f)
                      #f)
                  (if (vector? y-16313)
                    (if (= (vector-length y-16313) 4)
                      (eq? (vector-ref y-16313 0) 'syntax-object)
                      #f)
                    #f)
                  #f)
              (if (eq? (vector-ref x-16312 1)
                       (vector-ref y-16313 1))
                (same-marks?-6567
                  (car (vector-ref x-16312 2))
                  (car (vector-ref y-16313 2)))
                #f)
              (eq? x-16312 y-16313)))))
      (set! syntax-violation
        (lambda*
          (who-16446
            message-16447
            form-16448
            #:optional
            (subform-16449 #f))
          (begin
            (if (not (if (not who-16446)
                       (not who-16446)
                       (let ((t-16467 (string? who-16446)))
                         (if t-16467 t-16467 (symbol? who-16446)))))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                who-16446))
            (if (not (string? message-16447))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                message-16447))
            (throw 'syntax-error
                   who-16446
                   message-16447
                   (source-annotation-6542
                     (if form-16448 form-16448 subform-16449))
                   (strip-6598 form-16448 '(()))
                   (if subform-16449
                     (strip-6598 subform-16449 '(()))
                     #f)))))
      (letrec*
        ((syntax-local-binding-16671
           (lambda (id-16804)
             (begin
               (if (not (if (if (vector? id-16804)
                              (if (= (vector-length id-16804) 4)
                                (eq? (vector-ref id-16804 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-16804 1))
                          #f))
                 (syntax-violation
                   'syntax-local-binding
                   "invalid argument"
                   id-16804))
               ((fluid-ref transformer-environment-6571)
                (lambda (e-16844
                         r-16845
                         w-16846
                         s-16847
                         rib-16848
                         mod-16849)
                  (call-with-values
                    (lambda ()
                      (let ((id-16852 (vector-ref id-16804 1))
                            (w-16853
                              (let ((w-16864 (vector-ref id-16804 2)))
                                (let ((ms-16865 (car w-16864))
                                      (s-16866 (cdr w-16864)))
                                  (if (if (pair? ms-16865)
                                        (eq? (car ms-16865) #f)
                                        #f)
                                    (cons (cdr ms-16865)
                                          (if rib-16848
                                            (cons rib-16848 (cdr s-16866))
                                            (cdr s-16866)))
                                    (cons ms-16865
                                          (if rib-16848
                                            (cons rib-16848 s-16866)
                                            s-16866))))))
                            (mod-16855 (vector-ref id-16804 3)))
                        (let ((n-16858 (id-var-name-6568 id-16852 w-16853)))
                          (if (symbol? n-16858)
                            (let ((mod-16872
                                    (if (if (vector? id-16852)
                                          (if (= (vector-length id-16852) 4)
                                            (eq? (vector-ref id-16852 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref id-16852 3)
                                      mod-16855)))
                              (let ((b-16873
                                      (let ((t-16874
                                              (get-global-definition-hook-6512
                                                n-16858
                                                mod-16872)))
                                        (if t-16874 t-16874 '(global)))))
                                (if (eq? (car b-16873) 'global)
                                  (values 'global n-16858 mod-16872)
                                  (values
                                    (car b-16873)
                                    (cdr b-16873)
                                    mod-16872))))
                            (if (string? n-16858)
                              (let ((mod-16900
                                      (if (if (vector? id-16852)
                                            (if (= (vector-length id-16852) 4)
                                              (eq? (vector-ref id-16852 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (vector-ref id-16852 3)
                                        mod-16855)))
                                (let ((b-16901
                                        (let ((t-16902
                                                (assq-ref r-16845 n-16858)))
                                          (if t-16902
                                            t-16902
                                            '(displaced-lexical)))))
                                  (values
                                    (car b-16901)
                                    (cdr b-16901)
                                    mod-16900)))
                              (error "unexpected id-var-name"
                                     id-16852
                                     w-16853
                                     n-16858))))))
                    (lambda (type-16915 value-16916 mod-16917)
                      (if (eqv? type-16915 'lexical)
                        (values 'lexical value-16916)
                        (if (eqv? type-16915 'macro)
                          (values 'macro value-16916)
                          (if (eqv? type-16915 'syntax)
                            (values 'pattern-variable value-16916)
                            (if (eqv? type-16915 'displaced-lexical)
                              (values 'displaced-lexical #f)
                              (if (eqv? type-16915 'global)
                                (values
                                  'global
                                  (cons value-16916 (cdr mod-16917)))
                                (values 'other #f)))))))))))))
         (syntax-locally-bound-identifiers-16672
           (lambda (id-16928)
             (begin
               (if (not (if (if (vector? id-16928)
                              (if (= (vector-length id-16928) 4)
                                (eq? (vector-ref id-16928 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-16928 1))
                          #f))
                 (syntax-violation
                   'syntax-locally-bound-identifiers
                   "invalid argument"
                   id-16928))
               (locally-bound-identifiers-6569
                 (vector-ref id-16928 2)
                 (vector-ref id-16928 3))))))
        (begin
          (define!
            'syntax-module
            (lambda (id-16674)
              (begin
                (if (not (if (if (vector? id-16674)
                               (if (= (vector-length id-16674) 4)
                                 (eq? (vector-ref id-16674 0) 'syntax-object)
                                 #f)
                               #f)
                           (symbol? (vector-ref id-16674 1))
                           #f))
                  (syntax-violation
                    'syntax-module
                    "invalid argument"
                    id-16674))
                (cdr (vector-ref id-16674 3)))))
          (define!
            'syntax-local-binding
            syntax-local-binding-16671)
          (define!
            'syntax-locally-bound-identifiers
            syntax-locally-bound-identifiers-16672)))
      (letrec*
        ((match-each-17035
           (lambda (e-17622 p-17623 w-17624 mod-17625)
             (if (pair? e-17622)
               (let ((first-17626
                       (match-17041
                         (car e-17622)
                         p-17623
                         w-17624
                         '()
                         mod-17625)))
                 (if first-17626
                   (let ((rest-17629
                           (match-each-17035
                             (cdr e-17622)
                             p-17623
                             w-17624
                             mod-17625)))
                     (if rest-17629 (cons first-17626 rest-17629) #f))
                   #f))
               (if (null? e-17622)
                 '()
                 (if (if (vector? e-17622)
                       (if (= (vector-length e-17622) 4)
                         (eq? (vector-ref e-17622 0) 'syntax-object)
                         #f)
                       #f)
                   (match-each-17035
                     (vector-ref e-17622 1)
                     p-17623
                     (join-wraps-6565 w-17624 (vector-ref e-17622 2))
                     (vector-ref e-17622 3))
                   #f)))))
         (match-each-any-17037
           (lambda (e-17657 w-17658 mod-17659)
             (if (pair? e-17657)
               (let ((l-17660
                       (match-each-any-17037
                         (cdr e-17657)
                         w-17658
                         mod-17659)))
                 (if l-17660
                   (cons (wrap-6578 (car e-17657) w-17658 mod-17659)
                         l-17660)
                   #f))
               (if (null? e-17657)
                 '()
                 (if (if (vector? e-17657)
                       (if (= (vector-length e-17657) 4)
                         (eq? (vector-ref e-17657 0) 'syntax-object)
                         #f)
                       #f)
                   (match-each-any-17037
                     (vector-ref e-17657 1)
                     (join-wraps-6565 w-17658 (vector-ref e-17657 2))
                     mod-17659)
                   #f)))))
         (match-empty-17038
           (lambda (p-17684 r-17685)
             (if (null? p-17684)
               r-17685
               (if (eq? p-17684 '_)
                 r-17685
                 (if (eq? p-17684 'any)
                   (cons '() r-17685)
                   (if (pair? p-17684)
                     (match-empty-17038
                       (car p-17684)
                       (match-empty-17038 (cdr p-17684) r-17685))
                     (if (eq? p-17684 'each-any)
                       (cons '() r-17685)
                       (let ((atom-key-17686 (vector-ref p-17684 0)))
                         (if (eqv? atom-key-17686 'each)
                           (match-empty-17038
                             (vector-ref p-17684 1)
                             r-17685)
                           (if (eqv? atom-key-17686 'each+)
                             (match-empty-17038
                               (vector-ref p-17684 1)
                               (match-empty-17038
                                 (reverse (vector-ref p-17684 2))
                                 (match-empty-17038
                                   (vector-ref p-17684 3)
                                   r-17685)))
                             (if (if (eqv? atom-key-17686 'free-id)
                                   #t
                                   (eqv? atom-key-17686 'atom))
                               r-17685
                               (if (eqv? atom-key-17686 'vector)
                                 (match-empty-17038
                                   (vector-ref p-17684 1)
                                   r-17685)))))))))))))
         (combine-17039
           (lambda (r*-17705 r-17706)
             (if (null? (car r*-17705))
               r-17706
               (cons (map car r*-17705)
                     (combine-17039 (map cdr r*-17705) r-17706)))))
         (match*-17040
           (lambda (e-17070 p-17071 w-17072 r-17073 mod-17074)
             (if (null? p-17071)
               (if (null? e-17070) r-17073 #f)
               (if (pair? p-17071)
                 (if (pair? e-17070)
                   (match-17041
                     (car e-17070)
                     (car p-17071)
                     w-17072
                     (match-17041
                       (cdr e-17070)
                       (cdr p-17071)
                       w-17072
                       r-17073
                       mod-17074)
                     mod-17074)
                   #f)
                 (if (eq? p-17071 'each-any)
                   (let ((l-17079
                           (match-each-any-17037 e-17070 w-17072 mod-17074)))
                     (if l-17079 (cons l-17079 r-17073) #f))
                   (let ((atom-key-17084 (vector-ref p-17071 0)))
                     (if (eqv? atom-key-17084 'each)
                       (if (null? e-17070)
                         (match-empty-17038
                           (vector-ref p-17071 1)
                           r-17073)
                         (let ((l-17091
                                 (match-each-17035
                                   e-17070
                                   (vector-ref p-17071 1)
                                   w-17072
                                   mod-17074)))
                           (if l-17091
                             (letrec*
                               ((collect-17094
                                  (lambda (l-17145)
                                    (if (null? (car l-17145))
                                      r-17073
                                      (cons (map car l-17145)
                                            (collect-17094
                                              (map cdr l-17145)))))))
                               (collect-17094 l-17091))
                             #f)))
                       (if (eqv? atom-key-17084 'each+)
                         (call-with-values
                           (lambda ()
                             (let ((x-pat-17154 (vector-ref p-17071 1))
                                   (y-pat-17155 (vector-ref p-17071 2))
                                   (z-pat-17156 (vector-ref p-17071 3)))
                               (letrec*
                                 ((f-17160
                                    (lambda (e-17162 w-17163)
                                      (if (pair? e-17162)
                                        (call-with-values
                                          (lambda ()
                                            (f-17160 (cdr e-17162) w-17163))
                                          (lambda (xr*-17164
                                                   y-pat-17165
                                                   r-17166)
                                            (if r-17166
                                              (if (null? y-pat-17165)
                                                (let ((xr-17167
                                                        (match-17041
                                                          (car e-17162)
                                                          x-pat-17154
                                                          w-17163
                                                          '()
                                                          mod-17074)))
                                                  (if xr-17167
                                                    (values
                                                      (cons xr-17167 xr*-17164)
                                                      y-pat-17165
                                                      r-17166)
                                                    (values #f #f #f)))
                                                (values
                                                  '()
                                                  (cdr y-pat-17165)
                                                  (match-17041
                                                    (car e-17162)
                                                    (car y-pat-17165)
                                                    w-17163
                                                    r-17166
                                                    mod-17074)))
                                              (values #f #f #f))))
                                        (if (if (vector? e-17162)
                                              (if (= (vector-length e-17162) 4)
                                                (eq? (vector-ref e-17162 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (f-17160
                                            (vector-ref e-17162 1)
                                            (join-wraps-6565 w-17163 e-17162))
                                          (values
                                            '()
                                            y-pat-17155
                                            (match-17041
                                              e-17162
                                              z-pat-17156
                                              w-17163
                                              r-17073
                                              mod-17074)))))))
                                 (f-17160 e-17070 w-17072))))
                           (lambda (xr*-17193 y-pat-17194 r-17195)
                             (if r-17195
                               (if (null? y-pat-17194)
                                 (if (null? xr*-17193)
                                   (match-empty-17038
                                     (vector-ref p-17071 1)
                                     r-17195)
                                   (combine-17039 xr*-17193 r-17195))
                                 #f)
                               #f)))
                         (if (eqv? atom-key-17084 'free-id)
                           (if (if (symbol? e-17070)
                                 #t
                                 (if (if (vector? e-17070)
                                       (if (= (vector-length e-17070) 4)
                                         (eq? (vector-ref e-17070 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (symbol? (vector-ref e-17070 1))
                                   #f))
                             (if (let ((i-17526
                                         (wrap-6578 e-17070 w-17072 mod-17074))
                                       (j-17527 (vector-ref p-17071 1)))
                                   (if (eq? (if (if (vector? i-17526)
                                                  (if (= (vector-length
                                                           i-17526)
                                                         4)
                                                    (eq? (vector-ref i-17526 0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref i-17526 1)
                                              i-17526)
                                            (if (if (vector? j-17527)
                                                  (if (= (vector-length
                                                           j-17527)
                                                         4)
                                                    (eq? (vector-ref j-17527 0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref j-17527 1)
                                              j-17527))
                                     (eq? (id-var-name-6568 i-17526 '(()))
                                          (id-var-name-6568 j-17527 '(())))
                                     #f))
                               r-17073
                               #f)
                             #f)
                           (if (eqv? atom-key-17084 'atom)
                             (if (equal?
                                   (vector-ref p-17071 1)
                                   (strip-6598 e-17070 w-17072))
                               r-17073
                               #f)
                             (if (eqv? atom-key-17084 'vector)
                               (if (vector? e-17070)
                                 (match-17041
                                   (vector->list e-17070)
                                   (vector-ref p-17071 1)
                                   w-17072
                                   r-17073
                                   mod-17074)
                                 #f))))))))))))
         (match-17041
           (lambda (e-17587 p-17588 w-17589 r-17590 mod-17591)
             (if (not r-17590)
               #f
               (if (eq? p-17588 '_)
                 r-17590
                 (if (eq? p-17588 'any)
                   (cons (wrap-6578 e-17587 w-17589 mod-17591)
                         r-17590)
                   (if (if (vector? e-17587)
                         (if (= (vector-length e-17587) 4)
                           (eq? (vector-ref e-17587 0) 'syntax-object)
                           #f)
                         #f)
                     (match*-17040
                       (vector-ref e-17587 1)
                       p-17588
                       (join-wraps-6565 w-17589 (vector-ref e-17587 2))
                       r-17590
                       (vector-ref e-17587 3))
                     (match*-17040
                       e-17587
                       p-17588
                       w-17589
                       r-17590
                       mod-17591))))))))
        (set! $sc-dispatch
          (lambda (e-17042 p-17043)
            (if (eq? p-17043 'any)
              (list e-17042)
              (if (eq? p-17043 '_)
                '()
                (if (if (vector? e-17042)
                      (if (= (vector-length e-17042) 4)
                        (eq? (vector-ref e-17042 0) 'syntax-object)
                        #f)
                      #f)
                  (match*-17040
                    (vector-ref e-17042 1)
                    p-17043
                    (vector-ref e-17042 2)
                    '()
                    (vector-ref e-17042 3))
                  (match*-17040 e-17042 p-17043 '(()) '() #f))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (x-29889)
      (let ((tmp-29891
              ($sc-dispatch x-29889 '(_ () any . each-any))))
        (if tmp-29891
          (@apply
            (lambda (e1-29895 e2-29896)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("l-*-29862" "l-*-29863"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-29859")))
                       (hygiene guile))
                    (cons '() (cons e1-29895 e2-29896))))
            tmp-29891)
          (let ((tmp-29897
                  ($sc-dispatch
                    x-29889
                    '(_ ((any any)) any . each-any))))
            (if tmp-29897
              (@apply
                (lambda (out-29901 in-29902 e1-29903 e2-29904)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("l-*-29868"
                                "l-*-29869"
                                "l-*-29870"
                                "l-*-29871"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29859")))
                           (hygiene guile))
                        in-29902
                        '()
                        (list out-29901
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("l-*-29868"
                                            "l-*-29869"
                                            "l-*-29870"
                                            "l-*-29871"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-29859")))
                                       (hygiene guile))
                                    (cons '() (cons e1-29903 e2-29904))))))
                tmp-29897)
              (let ((tmp-29905
                      ($sc-dispatch
                        x-29889
                        '(_ #(each (any any)) any . each-any))))
                (if tmp-29905
                  (@apply
                    (lambda (out-29909 in-29910 e1-29911 e2-29912)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("l-*-29878"
                                    "l-*-29879"
                                    "l-*-29880"
                                    "l-*-29881"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("l-*-29859")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("l-*-29878"
                                          "l-*-29879"
                                          "l-*-29880"
                                          "l-*-29881"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-29859")))
                                     (hygiene guile))
                                  in-29910)
                            '()
                            (list out-29909
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("l-*-29878"
                                                "l-*-29879"
                                                "l-*-29880"
                                                "l-*-29881"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("l-*-29859")))
                                           (hygiene guile))
                                        (cons '() (cons e1-29911 e2-29912))))))
                    tmp-29905)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    x-29889))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (x-29966)
      (let ((tmp-29968
              ($sc-dispatch
                x-29966
                '(_ each-any . #(each ((any . any) any))))))
        (if tmp-29968
          (@apply
            (lambda (k-29972
                     keyword-29973
                     pattern-29974
                     template-29975)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("l-*-29929"
                            "l-*-29930"
                            "l-*-29931"
                            "l-*-29932"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-29926")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("l-*-29929"
                             "l-*-29930"
                             "l-*-29931"
                             "l-*-29932"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("l-*-29926")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("l-*-29929"
                               "l-*-29930"
                               "l-*-29931"
                               "l-*-29932"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-29926")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("l-*-29929"
                               "l-*-29930"
                               "l-*-29931"
                               "l-*-29932"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-29926")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("l-*-29929"
                                    "l-*-29930"
                                    "l-*-29931"
                                    "l-*-29932"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("l-*-29926")))
                               (hygiene guile))
                            pattern-29974))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("l-*-29929"
                                  "l-*-29930"
                                  "l-*-29931"
                                  "l-*-29932"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-29926")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("l-*-29929"
                                        "l-*-29930"
                                        "l-*-29931"
                                        "l-*-29932"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-29926")))
                                   (hygiene guile))
                                (cons k-29972
                                      (map (lambda (tmp-29940-29976
                                                    tmp-29939-29977)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("l-*-29929"
                                                                 "l-*-29930"
                                                                 "l-*-29931"
                                                                 "l-*-29932"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-29926")))
                                                            (hygiene guile))
                                                         tmp-29939-29977)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("l-*-29929"
                                                                 "l-*-29930"
                                                                 "l-*-29931"
                                                                 "l-*-29932"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-29926")))
                                                            (hygiene guile))
                                                         tmp-29940-29976)))
                                           template-29975
                                           pattern-29974))))))
            tmp-29968)
          (let ((tmp-29978
                  ($sc-dispatch
                    x-29966
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if tmp-29978
                  (@apply
                    (lambda (k-29982
                             docstring-29983
                             keyword-29984
                             pattern-29985
                             template-29986)
                      (string? (syntax->datum docstring-29983)))
                    tmp-29978)
                  #f)
              (@apply
                (lambda (k-29987
                         docstring-29988
                         keyword-29989
                         pattern-29990
                         template-29991)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("l-*-29952"
                                "l-*-29953"
                                "l-*-29954"
                                "l-*-29955"
                                "l-*-29956"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29926")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("l-*-29952"
                                 "l-*-29953"
                                 "l-*-29954"
                                 "l-*-29955"
                                 "l-*-29956"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("l-*-29926")))
                            (hygiene guile)))
                        docstring-29988
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("l-*-29952"
                                   "l-*-29953"
                                   "l-*-29954"
                                   "l-*-29955"
                                   "l-*-29956"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-29926")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("l-*-29952"
                                   "l-*-29953"
                                   "l-*-29954"
                                   "l-*-29955"
                                   "l-*-29956"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-29926")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("l-*-29952"
                                        "l-*-29953"
                                        "l-*-29954"
                                        "l-*-29955"
                                        "l-*-29956"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-29926")))
                                   (hygiene guile))
                                pattern-29990))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("l-*-29952"
                                      "l-*-29953"
                                      "l-*-29954"
                                      "l-*-29955"
                                      "l-*-29956"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-29926")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-29952"
                                            "l-*-29953"
                                            "l-*-29954"
                                            "l-*-29955"
                                            "l-*-29956"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-29926")))
                                       (hygiene guile))
                                    (cons k-29987
                                          (map (lambda (tmp-29965-29992
                                                        tmp-29964-29993)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-29952"
                                                                     "l-*-29953"
                                                                     "l-*-29954"
                                                                     "l-*-29955"
                                                                     "l-*-29956"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-29926")))
                                                                (hygiene
                                                                  guile))
                                                             tmp-29964-29993)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-29952"
                                                                     "l-*-29953"
                                                                     "l-*-29954"
                                                                     "l-*-29955"
                                                                     "l-*-29956"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-29926")))
                                                                (hygiene
                                                                  guile))
                                                             tmp-29965-29992)))
                                               template-29991
                                               pattern-29990))))))
                tmp-29978)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-29966))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (x-30030)
      (let ((tmp-30032
              ($sc-dispatch x-30030 '(_ (any . any) any))))
        (if tmp-30032
          (@apply
            (lambda (name-30036 pattern-30037 template-30038)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("l-*-30007" "l-*-30008" "l-*-30009"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-30004")))
                       (hygiene guile))
                    name-30036
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("l-*-30007" "l-*-30008" "l-*-30009"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-30004")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("l-*-30007"
                                              "l-*-30008"
                                              "l-*-30009"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-30004")))
                                         (hygiene guile))
                                      pattern-30037)
                                template-30038))))
            tmp-30032)
          (let ((tmp-30039
                  ($sc-dispatch x-30030 '(_ (any . any) any any))))
            (if (if tmp-30039
                  (@apply
                    (lambda (name-30043
                             pattern-30044
                             docstring-30045
                             template-30046)
                      (string? (syntax->datum docstring-30045)))
                    tmp-30039)
                  #f)
              (@apply
                (lambda (name-30047
                         pattern-30048
                         docstring-30049
                         template-30050)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("l-*-30022"
                                "l-*-30023"
                                "l-*-30024"
                                "l-*-30025"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-30004")))
                           (hygiene guile))
                        name-30047
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("l-*-30022"
                                      "l-*-30023"
                                      "l-*-30024"
                                      "l-*-30025"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-30004")))
                                 (hygiene guile))
                              '()
                              docstring-30049
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("l-*-30022"
                                                  "l-*-30023"
                                                  "l-*-30024"
                                                  "l-*-30025"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("l-*-30004")))
                                             (hygiene guile))
                                          pattern-30048)
                                    template-30050))))
                tmp-30039)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-30030))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (x-30099)
      (let ((tmp-30101
              ($sc-dispatch
                x-30099
                '(any #(each (any any)) any . each-any))))
        (if (if tmp-30101
              (@apply
                (lambda (let*-30105 x-30106 v-30107 e1-30108 e2-30109)
                  (and-map identifier? x-30106))
                tmp-30101)
              #f)
          (@apply
            (lambda (let*-30110 x-30111 v-30112 e1-30113 e2-30114)
              (letrec*
                ((f-30115
                   (lambda (bindings-30118)
                     (if (null? bindings-30118)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("l-*-30085" "l-*-30086"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("l-*-30075"
                                     "l-*-30076"
                                     "l-*-30077"
                                     "l-*-30078"
                                     "l-*-30079"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("l-*-30061")))
                                (hygiene guile))
                             (cons '() (cons e1-30113 e2-30114)))
                       (let ((tmp-30119
                               (list (f-30115 (cdr bindings-30118))
                                     (car bindings-30118))))
                         (let ((tmp-30120 ($sc-dispatch tmp-30119 '(any any))))
                           (if tmp-30120
                             (@apply
                               (lambda (body-30122 binding-30123)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("l-*-30095" "l-*-30096"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("l-*-30085" "l-*-30086"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("l-*-30075"
                                               "l-*-30076"
                                               "l-*-30077"
                                               "l-*-30078"
                                               "l-*-30079"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-30061")))
                                          (hygiene guile))
                                       (list binding-30123)
                                       body-30122))
                               tmp-30120)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               tmp-30119))))))))
                (f-30115 (map list x-30111 v-30112))))
            tmp-30101)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-30099))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (orig-x-30181)
      (let ((tmp-30183
              ($sc-dispatch
                orig-x-30181
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if tmp-30183
          (@apply
            (lambda (var-30187
                     init-30188
                     step-30189
                     e0-30190
                     e1-30191
                     c-30192)
              (let ((tmp-30193
                      (map (lambda (v-30196 s-30197)
                             (let ((tmp-30199 ($sc-dispatch s-30197 '())))
                               (if tmp-30199
                                 (@apply (lambda () v-30196) tmp-30199)
                                 (let ((tmp-30202
                                         ($sc-dispatch s-30197 '(any))))
                                   (if tmp-30202
                                     (@apply
                                       (lambda (e-30205) e-30205)
                                       tmp-30202)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       orig-x-30181
                                       s-30197))))))
                           var-30187
                           step-30189)))
                (let ((tmp-30194 ($sc-dispatch tmp-30193 'each-any)))
                  (if tmp-30194
                    (@apply
                      (lambda (step-30211)
                        (let ((tmp-30213 ($sc-dispatch e1-30191 '())))
                          (if tmp-30213
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("l-*-30149"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("l-*-30134"
                                              "l-*-30135"
                                              "l-*-30136"
                                              "l-*-30137"
                                              "l-*-30138"
                                              "l-*-30139"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("l-*-30131")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("l-*-30149"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("l-*-30134"
                                              "l-*-30135"
                                              "l-*-30136"
                                              "l-*-30137"
                                              "l-*-30138"
                                              "l-*-30139"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("l-*-30131")))
                                         (hygiene guile))
                                      (map list var-30187 init-30188)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("l-*-30149"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-30134"
                                                    "l-*-30135"
                                                    "l-*-30136"
                                                    "l-*-30137"
                                                    "l-*-30138"
                                                    "l-*-30139"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("l-*-30131")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("l-*-30149"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("l-*-30134"
                                                          "l-*-30135"
                                                          "l-*-30136"
                                                          "l-*-30137"
                                                          "l-*-30138"
                                                          "l-*-30139"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("l-*-30131")))
                                                     (hygiene guile))
                                                  e0-30190)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("l-*-30149"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("l-*-30134"
                                                          "l-*-30135"
                                                          "l-*-30136"
                                                          "l-*-30137"
                                                          "l-*-30138"
                                                          "l-*-30139"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("l-*-30131")))
                                                     (hygiene guile))
                                                  (append
                                                    c-30192
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("l-*-30149"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("l-*-30134"
                                                                        "l-*-30135"
                                                                        "l-*-30136"
                                                                        "l-*-30137"
                                                                        "l-*-30138"
                                                                        "l-*-30139"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("l-*-30131")))
                                                                   (hygiene
                                                                     guile))
                                                                step-30211)))))))
                              tmp-30213)
                            (let ((tmp-30217
                                    ($sc-dispatch e1-30191 '(any . each-any))))
                              (if tmp-30217
                                (@apply
                                  (lambda (e1-30221 e2-30222)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("l-*-30158" "l-*-30159"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("l-*-30149"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-30134"
                                                  "l-*-30135"
                                                  "l-*-30136"
                                                  "l-*-30137"
                                                  "l-*-30138"
                                                  "l-*-30139"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("l-*-30131")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("l-*-30158" "l-*-30159"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("l-*-30149"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-30134"
                                                  "l-*-30135"
                                                  "l-*-30136"
                                                  "l-*-30137"
                                                  "l-*-30138"
                                                  "l-*-30139"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("l-*-30131")))
                                             (hygiene guile))
                                          (map list var-30187 init-30188)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("l-*-30158"
                                                        "l-*-30159"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("l-*-30149"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-30134"
                                                        "l-*-30135"
                                                        "l-*-30136"
                                                        "l-*-30137"
                                                        "l-*-30138"
                                                        "l-*-30139"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("l-*-30131")))
                                                   (hygiene guile))
                                                e0-30190
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("l-*-30158"
                                                              "l-*-30159"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("l-*-30149"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-30134"
                                                              "l-*-30135"
                                                              "l-*-30136"
                                                              "l-*-30137"
                                                              "l-*-30138"
                                                              "l-*-30139"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("l-*-30131")))
                                                         (hygiene guile))
                                                      (cons e1-30221 e2-30222))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("l-*-30158"
                                                              "l-*-30159"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("l-*-30149"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-30134"
                                                              "l-*-30135"
                                                              "l-*-30136"
                                                              "l-*-30137"
                                                              "l-*-30138"
                                                              "l-*-30139"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("l-*-30131")))
                                                         (hygiene guile))
                                                      (append
                                                        c-30192
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("l-*-30158"
                                                                            "l-*-30159"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("l-*-30149"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("l-*-30134"
                                                                            "l-*-30135"
                                                                            "l-*-30136"
                                                                            "l-*-30137"
                                                                            "l-*-30138"
                                                                            "l-*-30139"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("l-*-30131")))
                                                                       (hygiene
                                                                         guile))
                                                                    step-30211)))))))
                                  tmp-30217)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  e1-30191))))))
                      tmp-30194)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      tmp-30193)))))
            tmp-30183)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            orig-x-30181))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((quasi-30508
         (lambda (p-30532 lev-30533)
           (let ((tmp-30535
                   ($sc-dispatch
                     p-30532
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-30254" "l-*-30255"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-30250"
                               "l-*-30248"
                               "l-*-30246"
                               "l-*-30244"
                               "l-*-30242"
                               "l-*-30240"
                               "l-*-30238")))
                           (hygiene guile)))
                       any))))
             (if tmp-30535
               (@apply
                 (lambda (p-30539)
                   (if (= lev-30533 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("l-*-30258"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("l-*-30254" "l-*-30255"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("l-*-30250"
                                  "l-*-30248"
                                  "l-*-30246"
                                  "l-*-30244"
                                  "l-*-30242"
                                  "l-*-30240"
                                  "l-*-30238")))
                              (hygiene guile))
                           p-30539)
                     (quasicons-30510
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("l-*-30258"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-30254" "l-*-30255"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-30250"
                               "l-*-30248"
                               "l-*-30246"
                               "l-*-30244"
                               "l-*-30242"
                               "l-*-30240"
                               "l-*-30238")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("l-*-30258"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-30254" "l-*-30255"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-30250"
                               "l-*-30248"
                               "l-*-30246"
                               "l-*-30244"
                               "l-*-30242"
                               "l-*-30240"
                               "l-*-30238")))
                           (hygiene guile)))
                       (quasi-30508 (list p-30539) (#{1-}# lev-30533)))))
                 tmp-30535)
               (let ((tmp-30542
                       ($sc-dispatch
                         p-30532
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("l-*-30254" "l-*-30255"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("l-*-30250"
                                   "l-*-30248"
                                   "l-*-30246"
                                   "l-*-30244"
                                   "l-*-30242"
                                   "l-*-30240"
                                   "l-*-30238")))
                               (hygiene guile)))
                           any))))
                 (if tmp-30542
                   (@apply
                     (lambda (p-30546)
                       (quasicons-30510
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("l-*-30261"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("l-*-30254" "l-*-30255"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("l-*-30250"
                                 "l-*-30248"
                                 "l-*-30246"
                                 "l-*-30244"
                                 "l-*-30242"
                                 "l-*-30240"
                                 "l-*-30238")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("l-*-30261"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("l-*-30254" "l-*-30255"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("l-*-30250"
                                 "l-*-30248"
                                 "l-*-30246"
                                 "l-*-30244"
                                 "l-*-30242"
                                 "l-*-30240"
                                 "l-*-30238")))
                             (hygiene guile)))
                         (quasi-30508 (list p-30546) (#{1+}# lev-30533))))
                     tmp-30542)
                   (let ((tmp-30549 ($sc-dispatch p-30532 '(any . any))))
                     (if tmp-30549
                       (@apply
                         (lambda (p-30553 q-30554)
                           (let ((tmp-30556
                                   ($sc-dispatch
                                     p-30553
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("l-*-30264" "l-*-30265"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("l-*-30254" "l-*-30255"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("l-*-30250"
                                               "l-*-30248"
                                               "l-*-30246"
                                               "l-*-30244"
                                               "l-*-30242"
                                               "l-*-30240"
                                               "l-*-30238")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if tmp-30556
                               (@apply
                                 (lambda (p-30560)
                                   (if (= lev-30533 0)
                                     (quasilist*-30512
                                       (map (lambda (tmp-30272-30596)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("l-*-30270"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("l-*-30264"
                                                            "l-*-30265"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("l-*-30254"
                                                            "l-*-30255"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-30250"
                                                           "l-*-30248"
                                                           "l-*-30246"
                                                           "l-*-30244"
                                                           "l-*-30242"
                                                           "l-*-30240"
                                                           "l-*-30238")))
                                                       (hygiene guile))
                                                    tmp-30272-30596))
                                            p-30560)
                                       (quasi-30508 q-30554 lev-30533))
                                     (quasicons-30510
                                       (quasicons-30510
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("l-*-30270"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("l-*-30264" "l-*-30265"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("l-*-30254" "l-*-30255"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-30250"
                                                 "l-*-30248"
                                                 "l-*-30246"
                                                 "l-*-30244"
                                                 "l-*-30242"
                                                 "l-*-30240"
                                                 "l-*-30238")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("l-*-30270"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("l-*-30264" "l-*-30265"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("l-*-30254" "l-*-30255"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-30250"
                                                 "l-*-30248"
                                                 "l-*-30246"
                                                 "l-*-30244"
                                                 "l-*-30242"
                                                 "l-*-30240"
                                                 "l-*-30238")))
                                             (hygiene guile)))
                                         (quasi-30508
                                           p-30560
                                           (#{1-}# lev-30533)))
                                       (quasi-30508 q-30554 lev-30533))))
                                 tmp-30556)
                               (let ((tmp-30601
                                       ($sc-dispatch
                                         p-30553
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("l-*-30264" "l-*-30265"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("l-*-30254" "l-*-30255"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-30250"
                                                   "l-*-30248"
                                                   "l-*-30246"
                                                   "l-*-30244"
                                                   "l-*-30242"
                                                   "l-*-30240"
                                                   "l-*-30238")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if tmp-30601
                                   (@apply
                                     (lambda (p-30605)
                                       (if (= lev-30533 0)
                                         (quasiappend-30511
                                           (map (lambda (tmp-30277-30608)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("l-*-30275"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("l-*-30264"
                                                                "l-*-30265"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("l-*-30254"
                                                                "l-*-30255"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-30250"
                                                               "l-*-30248"
                                                               "l-*-30246"
                                                               "l-*-30244"
                                                               "l-*-30242"
                                                               "l-*-30240"
                                                               "l-*-30238")))
                                                           (hygiene guile))
                                                        tmp-30277-30608))
                                                p-30605)
                                           (quasi-30508 q-30554 lev-30533))
                                         (quasicons-30510
                                           (quasicons-30510
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("l-*-30275"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("l-*-30264" "l-*-30265"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("l-*-30254" "l-*-30255"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("l-*-30250"
                                                     "l-*-30248"
                                                     "l-*-30246"
                                                     "l-*-30244"
                                                     "l-*-30242"
                                                     "l-*-30240"
                                                     "l-*-30238")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("l-*-30275"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("l-*-30264" "l-*-30265"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("l-*-30254" "l-*-30255"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("l-*-30250"
                                                     "l-*-30248"
                                                     "l-*-30246"
                                                     "l-*-30244"
                                                     "l-*-30242"
                                                     "l-*-30240"
                                                     "l-*-30238")))
                                                 (hygiene guile)))
                                             (quasi-30508
                                               p-30605
                                               (#{1-}# lev-30533)))
                                           (quasi-30508 q-30554 lev-30533))))
                                     tmp-30601)
                                   (quasicons-30510
                                     (quasi-30508 p-30553 lev-30533)
                                     (quasi-30508 q-30554 lev-30533)))))))
                         tmp-30549)
                       (let ((tmp-30622
                               ($sc-dispatch p-30532 '#(vector each-any))))
                         (if tmp-30622
                           (@apply
                             (lambda (x-30626)
                               (let ((x-30629
                                       (vquasi-30509 x-30626 lev-30533)))
                                 (let ((tmp-30631
                                         ($sc-dispatch
                                           x-30629
                                           '(#(atom "quote") each-any))))
                                   (if tmp-30631
                                     (@apply
                                       (lambda (x-30635)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-30382"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-30379"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-30250"
                                                      "l-*-30248"
                                                      "l-*-30246"
                                                      "l-*-30244"
                                                      "l-*-30242"
                                                      "l-*-30240"
                                                      "l-*-30238")))
                                                  (hygiene guile))
                                               (list->vector x-30635)))
                                       tmp-30631)
                                     (letrec*
                                       ((f-30637
                                          (lambda (y-30649 k-30650)
                                            (let ((tmp-30652
                                                    ($sc-dispatch
                                                      y-30649
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if tmp-30652
                                                (@apply
                                                  (lambda (y-30655)
                                                    (k-30650
                                                      (map (lambda (tmp-30407-30656)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("l-*-30405"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("l-*-30387"
                                                                           "l-*-30388"
                                                                           "l-*-30389"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("l-*-30385"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("l-*-30379"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("l-*-30250"
                                                                          "l-*-30248"
                                                                          "l-*-30246"
                                                                          "l-*-30244"
                                                                          "l-*-30242"
                                                                          "l-*-30240"
                                                                          "l-*-30238")))
                                                                      (hygiene
                                                                        guile))
                                                                   tmp-30407-30656))
                                                           y-30655)))
                                                  tmp-30652)
                                                (let ((tmp-30657
                                                        ($sc-dispatch
                                                          y-30649
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if tmp-30657
                                                    (@apply
                                                      (lambda (y-30660)
                                                        (k-30650 y-30660))
                                                      tmp-30657)
                                                    (let ((tmp-30661
                                                            ($sc-dispatch
                                                              y-30649
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if tmp-30661
                                                        (@apply
                                                          (lambda (y-30664
                                                                   z-30665)
                                                            (f-30637
                                                              z-30665
                                                              (lambda (ls-30666)
                                                                (k-30650
                                                                  (append
                                                                    y-30664
                                                                    ls-30666)))))
                                                          tmp-30661)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(t-30422)
                                                                    #((m-*-30423
                                                                        top))
                                                                    #("l-*-30426"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("l-*-30420"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("l-*-30387"
                                                                      "l-*-30388"
                                                                      "l-*-30389"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("l-*-30385"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("l-*-30379"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("l-*-30250"
                                                                     "l-*-30248"
                                                                     "l-*-30246"
                                                                     "l-*-30244"
                                                                     "l-*-30242"
                                                                     "l-*-30240"
                                                                     "l-*-30238")))
                                                                 (hygiene
                                                                   guile))
                                                              x-30629))))))))))
                                       (f-30637
                                         x-30629
                                         (lambda (ls-30639)
                                           (let ((tmp-30641
                                                   ($sc-dispatch
                                                     ls-30639
                                                     'each-any)))
                                             (if tmp-30641
                                               (@apply
                                                 (lambda (t-30395-30644)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(t-30395)
                                                               #((m-*-30396
                                                                   top))
                                                               #("l-*-30400"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("l-*-30394"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("l-*-30385"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-30379"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("l-*-30250"
                                                                "l-*-30248"
                                                                "l-*-30246"
                                                                "l-*-30244"
                                                                "l-*-30242"
                                                                "l-*-30240"
                                                                "l-*-30238")))
                                                            (hygiene guile))
                                                         t-30395-30644))
                                                 tmp-30641)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 ls-30639))))))))))
                             tmp-30622)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("l-*-30285"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("l-*-30254" "l-*-30255"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-30250"
                                        "l-*-30248"
                                        "l-*-30246"
                                        "l-*-30244"
                                        "l-*-30242"
                                        "l-*-30240"
                                        "l-*-30238")))
                                    (hygiene guile))
                                 p-30532)))))))))))
       (vquasi-30509
         (lambda (p-30694 lev-30695)
           (let ((tmp-30697 ($sc-dispatch p-30694 '(any . any))))
             (if tmp-30697
               (@apply
                 (lambda (p-30701 q-30702)
                   (let ((tmp-30704
                           ($sc-dispatch
                             p-30701
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("l-*-30293" "l-*-30294"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("l-*-30289" "l-*-30290"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("l-*-30250"
                                       "l-*-30248"
                                       "l-*-30246"
                                       "l-*-30244"
                                       "l-*-30242"
                                       "l-*-30240"
                                       "l-*-30238")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if tmp-30704
                       (@apply
                         (lambda (p-30708)
                           (if (= lev-30695 0)
                             (quasilist*-30512
                               (map (lambda (tmp-30301-30744)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("l-*-30299"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("l-*-30293" "l-*-30294"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("l-*-30289" "l-*-30290"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-30250"
                                                   "l-*-30248"
                                                   "l-*-30246"
                                                   "l-*-30244"
                                                   "l-*-30242"
                                                   "l-*-30240"
                                                   "l-*-30238")))
                                               (hygiene guile))
                                            tmp-30301-30744))
                                    p-30708)
                               (vquasi-30509 q-30702 lev-30695))
                             (quasicons-30510
                               (quasicons-30510
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("l-*-30299"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("l-*-30293" "l-*-30294"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("l-*-30289" "l-*-30290"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("l-*-30250"
                                         "l-*-30248"
                                         "l-*-30246"
                                         "l-*-30244"
                                         "l-*-30242"
                                         "l-*-30240"
                                         "l-*-30238")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("l-*-30299"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("l-*-30293" "l-*-30294"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("l-*-30289" "l-*-30290"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("l-*-30250"
                                         "l-*-30248"
                                         "l-*-30246"
                                         "l-*-30244"
                                         "l-*-30242"
                                         "l-*-30240"
                                         "l-*-30238")))
                                     (hygiene guile)))
                                 (quasi-30508 p-30708 (#{1-}# lev-30695)))
                               (vquasi-30509 q-30702 lev-30695))))
                         tmp-30704)
                       (let ((tmp-30751
                               ($sc-dispatch
                                 p-30701
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("l-*-30293" "l-*-30294"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("l-*-30289" "l-*-30290"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("l-*-30250"
                                           "l-*-30248"
                                           "l-*-30246"
                                           "l-*-30244"
                                           "l-*-30242"
                                           "l-*-30240"
                                           "l-*-30238")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if tmp-30751
                           (@apply
                             (lambda (p-30755)
                               (if (= lev-30695 0)
                                 (quasiappend-30511
                                   (map (lambda (tmp-30306-30758)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("l-*-30304"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("l-*-30293"
                                                        "l-*-30294"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("l-*-30289"
                                                        "l-*-30290"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("l-*-30250"
                                                       "l-*-30248"
                                                       "l-*-30246"
                                                       "l-*-30244"
                                                       "l-*-30242"
                                                       "l-*-30240"
                                                       "l-*-30238")))
                                                   (hygiene guile))
                                                tmp-30306-30758))
                                        p-30755)
                                   (vquasi-30509 q-30702 lev-30695))
                                 (quasicons-30510
                                   (quasicons-30510
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage
                                            #(p)
                                            #((top))
                                            #("l-*-30304"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("l-*-30293" "l-*-30294"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("l-*-30289" "l-*-30290"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("l-*-30250"
                                             "l-*-30248"
                                             "l-*-30246"
                                             "l-*-30244"
                                             "l-*-30242"
                                             "l-*-30240"
                                             "l-*-30238")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage
                                            #(p)
                                            #((top))
                                            #("l-*-30304"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("l-*-30293" "l-*-30294"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("l-*-30289" "l-*-30290"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("l-*-30250"
                                             "l-*-30248"
                                             "l-*-30246"
                                             "l-*-30244"
                                             "l-*-30242"
                                             "l-*-30240"
                                             "l-*-30238")))
                                         (hygiene guile)))
                                     (quasi-30508 p-30755 (#{1-}# lev-30695)))
                                   (vquasi-30509 q-30702 lev-30695))))
                             tmp-30751)
                           (quasicons-30510
                             (quasi-30508 p-30701 lev-30695)
                             (vquasi-30509 q-30702 lev-30695)))))))
                 tmp-30697)
               (let ((tmp-30776 ($sc-dispatch p-30694 '())))
                 (if tmp-30776
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-30289" "l-*-30290"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-30250"
                               "l-*-30248"
                               "l-*-30246"
                               "l-*-30244"
                               "l-*-30242"
                               "l-*-30240"
                               "l-*-30238")))
                           (hygiene guile))
                         ()))
                     tmp-30776)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     p-30694)))))))
       (quasicons-30510
         (lambda (x-30789 y-30790)
           (let ((tmp-30791 (list x-30789 y-30790)))
             (let ((tmp-30792 ($sc-dispatch tmp-30791 '(any any))))
               (if tmp-30792
                 (@apply
                   (lambda (x-30794 y-30795)
                     (let ((tmp-30797
                             ($sc-dispatch y-30795 '(#(atom "quote") any))))
                       (if tmp-30797
                         (@apply
                           (lambda (dy-30801)
                             (let ((tmp-30803
                                     ($sc-dispatch
                                       x-30794
                                       '(#(atom "quote") any))))
                               (if tmp-30803
                                 (@apply
                                   (lambda (dx-30807)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("l-*-30328"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("l-*-30324"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-30318" "l-*-30319"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-30313" "l-*-30314"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-30250"
                                                  "l-*-30248"
                                                  "l-*-30246"
                                                  "l-*-30244"
                                                  "l-*-30242"
                                                  "l-*-30240"
                                                  "l-*-30238")))
                                              (hygiene guile))
                                           (cons dx-30807 dy-30801)))
                                   tmp-30803)
                                 (if (null? dy-30801)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("l-*-30330"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("l-*-30324"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-30318" "l-*-30319"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-30313" "l-*-30314"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-30250"
                                                "l-*-30248"
                                                "l-*-30246"
                                                "l-*-30244"
                                                "l-*-30242"
                                                "l-*-30240"
                                                "l-*-30238")))
                                            (hygiene guile))
                                         x-30794)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("l-*-30330"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("l-*-30324"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-30318" "l-*-30319"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-30313" "l-*-30314"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-30250"
                                                "l-*-30248"
                                                "l-*-30246"
                                                "l-*-30244"
                                                "l-*-30242"
                                                "l-*-30240"
                                                "l-*-30238")))
                                            (hygiene guile))
                                         x-30794
                                         y-30795)))))
                           tmp-30797)
                         (let ((tmp-30812
                                 ($sc-dispatch
                                   y-30795
                                   '(#(atom "list") . any))))
                           (if tmp-30812
                             (@apply
                               (lambda (stuff-30816)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("l-*-30333"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-30318" "l-*-30319"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-30313" "l-*-30314"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-30250"
                                              "l-*-30248"
                                              "l-*-30246"
                                              "l-*-30244"
                                              "l-*-30242"
                                              "l-*-30240"
                                              "l-*-30238")))
                                          (hygiene guile))
                                       (cons x-30794 stuff-30816)))
                               tmp-30812)
                             (let ((tmp-30817
                                     ($sc-dispatch
                                       y-30795
                                       '(#(atom "list*") . any))))
                               (if tmp-30817
                                 (@apply
                                   (lambda (stuff-30821)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("l-*-30336"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-30318" "l-*-30319"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-30313" "l-*-30314"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-30250"
                                                  "l-*-30248"
                                                  "l-*-30246"
                                                  "l-*-30244"
                                                  "l-*-30242"
                                                  "l-*-30240"
                                                  "l-*-30238")))
                                              (hygiene guile))
                                           (cons x-30794 stuff-30821)))
                                   tmp-30817)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage
                                             #(_)
                                             #((top))
                                             #("l-*-30338"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-30318" "l-*-30319"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-30313" "l-*-30314"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-30250"
                                              "l-*-30248"
                                              "l-*-30246"
                                              "l-*-30244"
                                              "l-*-30242"
                                              "l-*-30240"
                                              "l-*-30238")))
                                          (hygiene guile))
                                       x-30794
                                       y-30795))))))))
                   tmp-30792)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   tmp-30791))))))
       (quasiappend-30511
         (lambda (x-30832 y-30833)
           (let ((tmp-30835
                   ($sc-dispatch y-30833 '(#(atom "quote") ()))))
             (if tmp-30835
               (@apply
                 (lambda ()
                   (if (null? x-30832)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("l-*-30342" "l-*-30343"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("l-*-30250"
                             "l-*-30248"
                             "l-*-30246"
                             "l-*-30244"
                             "l-*-30242"
                             "l-*-30240"
                             "l-*-30238")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr x-30832))
                       (car x-30832)
                       (let ((tmp-30840 ($sc-dispatch x-30832 'each-any)))
                         (if tmp-30840
                           (@apply
                             (lambda (p-30844)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p)
                                           #((top))
                                           #("l-*-30354"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("l-*-30342" "l-*-30343"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("l-*-30250"
                                            "l-*-30248"
                                            "l-*-30246"
                                            "l-*-30244"
                                            "l-*-30242"
                                            "l-*-30240"
                                            "l-*-30238")))
                                        (hygiene guile))
                                     p-30844))
                             tmp-30840)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             x-30832))))))
                 tmp-30835)
               (if (null? x-30832)
                 y-30833
                 (let ((tmp-30852 (list x-30832 y-30833)))
                   (let ((tmp-30853
                           ($sc-dispatch tmp-30852 '(each-any any))))
                     (if tmp-30853
                       (@apply
                         (lambda (p-30855 y-30856)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("l-*-30365" "l-*-30366"))
                                     #(ribcage #(_) #((top)) #("l-*-30357"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("l-*-30342" "l-*-30343"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-30250"
                                        "l-*-30248"
                                        "l-*-30246"
                                        "l-*-30244"
                                        "l-*-30242"
                                        "l-*-30240"
                                        "l-*-30238")))
                                    (hygiene guile))
                                 (append p-30855 (list y-30856))))
                         tmp-30853)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         tmp-30852)))))))))
       (quasilist*-30512
         (lambda (x-30860 y-30861)
           (letrec*
             ((f-30862
                (lambda (x-30951)
                  (if (null? x-30951)
                    y-30861
                    (quasicons-30510
                      (car x-30951)
                      (f-30862 (cdr x-30951)))))))
             (f-30862 x-30860))))
       (emit-30514
         (lambda (x-30954)
           (let ((tmp-30956
                   ($sc-dispatch x-30954 '(#(atom "quote") any))))
             (if tmp-30956
               (@apply
                 (lambda (x-30960)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("l-*-30432"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("l-*-30429"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("l-*-30250"
                                "l-*-30248"
                                "l-*-30246"
                                "l-*-30244"
                                "l-*-30242"
                                "l-*-30240"
                                "l-*-30238")))
                            (hygiene guile))
                         x-30960))
                 tmp-30956)
               (let ((tmp-30961
                       ($sc-dispatch
                         x-30954
                         '(#(atom "list") . each-any))))
                 (if tmp-30961
                   (@apply
                     (lambda (x-30965)
                       (let ((tmp-30966 (map emit-30514 x-30965)))
                         (let ((tmp-30967 ($sc-dispatch tmp-30966 'each-any)))
                           (if tmp-30967
                             (@apply
                               (lambda (t-30437-30969)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(t-30437)
                                             #((m-*-30438 top))
                                             #("l-*-30442"))
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-30435"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-30429"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-30250"
                                              "l-*-30248"
                                              "l-*-30246"
                                              "l-*-30244"
                                              "l-*-30242"
                                              "l-*-30240"
                                              "l-*-30238")))
                                          (hygiene guile))
                                       t-30437-30969))
                               tmp-30967)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               tmp-30966)))))
                     tmp-30961)
                   (let ((tmp-30970
                           ($sc-dispatch
                             x-30954
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if tmp-30970
                       (@apply
                         (lambda (x-30974 y-30975)
                           (letrec*
                             ((f-30976
                                (lambda (x*-30979)
                                  (if (null? x*-30979)
                                    (emit-30514 y-30975)
                                    (let ((tmp-30980
                                            (list (emit-30514 (car x*-30979))
                                                  (f-30976 (cdr x*-30979)))))
                                      (let ((tmp-30981
                                              ($sc-dispatch
                                                tmp-30980
                                                '(any any))))
                                        (if tmp-30981
                                          (@apply
                                            (lambda (t-30457-30983
                                                     t-30456-30984)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(t-30457 t-30456)
                                                          #((m-*-30458 top)
                                                            (m-*-30458 top))
                                                          #("l-*-30462"
                                                            "l-*-30463"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("l-*-30451"
                                                            "l-*-30452"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("l-*-30447"
                                                            "l-*-30448"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("l-*-30429"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-30250"
                                                           "l-*-30248"
                                                           "l-*-30246"
                                                           "l-*-30244"
                                                           "l-*-30242"
                                                           "l-*-30240"
                                                           "l-*-30238")))
                                                       (hygiene guile))
                                                    t-30457-30983
                                                    t-30456-30984))
                                            tmp-30981)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            tmp-30980))))))))
                             (f-30976 x-30974)))
                         tmp-30970)
                       (let ((tmp-30985
                               ($sc-dispatch
                                 x-30954
                                 '(#(atom "append") . each-any))))
                         (if tmp-30985
                           (@apply
                             (lambda (x-30989)
                               (let ((tmp-30990 (map emit-30514 x-30989)))
                                 (let ((tmp-30991
                                         ($sc-dispatch tmp-30990 'each-any)))
                                   (if tmp-30991
                                     (@apply
                                       (lambda (t-30469-30993)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(t-30469)
                                                     #((m-*-30470 top))
                                                     #("l-*-30474"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-30467"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-30429"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-30250"
                                                      "l-*-30248"
                                                      "l-*-30246"
                                                      "l-*-30244"
                                                      "l-*-30242"
                                                      "l-*-30240"
                                                      "l-*-30238")))
                                                  (hygiene guile))
                                               t-30469-30993))
                                       tmp-30991)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       tmp-30990)))))
                             tmp-30985)
                           (let ((tmp-30994
                                   ($sc-dispatch
                                     x-30954
                                     '(#(atom "vector") . each-any))))
                             (if tmp-30994
                               (@apply
                                 (lambda (x-30998)
                                   (let ((tmp-30999 (map emit-30514 x-30998)))
                                     (let ((tmp-31000
                                             ($sc-dispatch
                                               tmp-30999
                                               'each-any)))
                                       (if tmp-31000
                                         (@apply
                                           (lambda (t-30481-31002)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(t-30481)
                                                         #((m-*-30482 top))
                                                         #("l-*-30486"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-30479"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-30429"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-30250"
                                                          "l-*-30248"
                                                          "l-*-30246"
                                                          "l-*-30244"
                                                          "l-*-30242"
                                                          "l-*-30240"
                                                          "l-*-30238")))
                                                      (hygiene guile))
                                                   t-30481-31002))
                                           tmp-31000)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           tmp-30999)))))
                                 tmp-30994)
                               (let ((tmp-31003
                                       ($sc-dispatch
                                         x-30954
                                         '(#(atom "list->vector") any))))
                                 (if tmp-31003
                                   (@apply
                                     (lambda (x-31007)
                                       (let ((tmp-31008 (emit-30514 x-31007)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(t-30493)
                                                     #((m-*-30494 top))
                                                     #("l-*-30497"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-30491"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-30429"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-30250"
                                                      "l-*-30248"
                                                      "l-*-30246"
                                                      "l-*-30244"
                                                      "l-*-30242"
                                                      "l-*-30240"
                                                      "l-*-30238")))
                                                  (hygiene guile))
                                               tmp-31008)))
                                     tmp-31003)
                                   (let ((tmp-31011
                                           ($sc-dispatch
                                             x-30954
                                             '(#(atom "value") any))))
                                     (if tmp-31011
                                       (@apply
                                         (lambda (x-31015) x-31015)
                                         tmp-31011)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         x-30954))))))))))))))))))
      (lambda (x-30515)
        (let ((tmp-30517 ($sc-dispatch x-30515 '(_ any))))
          (if tmp-30517
            (@apply
              (lambda (e-30521)
                (emit-30514 (quasi-30508 e-30521 0)))
              tmp-30517)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              x-30515)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (x-31070)
      (letrec*
        ((read-file-31071
           (lambda (fn-31180 k-31181)
             (let ((p-31182 (open-input-file fn-31180)))
               (letrec*
                 ((f-31183
                    (lambda (x-31237 result-31238)
                      (if (eof-object? x-31237)
                        (begin
                          (close-input-port p-31182)
                          (reverse result-31238))
                        (f-31183
                          (read p-31182)
                          (cons (datum->syntax k-31181 x-31237)
                                result-31238))))))
                 (f-31183 (read p-31182) '()))))))
        (let ((tmp-31073 ($sc-dispatch x-31070 '(any any))))
          (if tmp-31073
            (@apply
              (lambda (k-31077 filename-31078)
                (let ((fn-31079 (syntax->datum filename-31078)))
                  (let ((tmp-31080
                          (read-file-31071 fn-31079 filename-31078)))
                    (let ((tmp-31081 ($sc-dispatch tmp-31080 'each-any)))
                      (if tmp-31081
                        (@apply
                          (lambda (exp-31099)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("l-*-31067"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("l-*-31062"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("l-*-31058" "l-*-31059"))
                                      #(ribcage
                                        (read-file)
                                        ((top))
                                        ("l-*-31042"))
                                      #(ribcage #(x) #((top)) #("l-*-31041")))
                                     (hygiene guile))
                                  exp-31099))
                          tmp-31081)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-31080))))))
              tmp-31073)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              x-31070)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (x-31257)
      (let ((tmp-31259 ($sc-dispatch x-31257 '(any any))))
        (if tmp-31259
          (@apply
            (lambda (k-31263 filename-31264)
              (let ((fn-31265 (syntax->datum filename-31264)))
                (let ((tmp-31266
                        (datum->syntax
                          filename-31264
                          (let ((t-31269 (%search-load-path fn-31265)))
                            (if t-31269
                              t-31269
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                x-31257
                                filename-31264))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("l-*-31251"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("l-*-31247"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("l-*-31243" "l-*-31244"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-31240")))
                           (hygiene guile))
                        tmp-31266))))
            tmp-31259)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-31257))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (x-31278)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        x-31278))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (x-31281)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        x-31281))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (x-31337)
      (let ((tmp-31339
              ($sc-dispatch x-31337 '(_ any any . each-any))))
        (if tmp-31339
          (@apply
            (lambda (e-31343 m1-31344 m2-31345)
              (let ((tmp-31346
                      (letrec*
                        ((f-31388
                           (lambda (clause-31391 clauses-31392)
                             (if (null? clauses-31392)
                               (let ((tmp-31394
                                       ($sc-dispatch
                                         clause-31391
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("l-*-31296"
                                                    "l-*-31297"
                                                    "l-*-31298"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("l-*-31286"
                                                    "l-*-31287"
                                                    "l-*-31288"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("l-*-31283")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if tmp-31394
                                   (@apply
                                     (lambda (e1-31398 e2-31399)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("l-*-31305" "l-*-31306"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("l-*-31296"
                                                     "l-*-31297"
                                                     "l-*-31298"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("l-*-31286"
                                                     "l-*-31287"
                                                     "l-*-31288"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-31283")))
                                                (hygiene guile))
                                             (cons e1-31398 e2-31399)))
                                     tmp-31394)
                                   (let ((tmp-31400
                                           ($sc-dispatch
                                             clause-31391
                                             '(each-any any . each-any))))
                                     (if tmp-31400
                                       (@apply
                                         (lambda (k-31404 e1-31405 e2-31406)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("l-*-31311"
                                                         "l-*-31312"
                                                         "l-*-31313"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("l-*-31296"
                                                         "l-*-31297"
                                                         "l-*-31298"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("l-*-31286"
                                                         "l-*-31287"
                                                         "l-*-31288"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-31283")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31311"
                                                               "l-*-31312"
                                                               "l-*-31313"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31296"
                                                               "l-*-31297"
                                                               "l-*-31298"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31286"
                                                               "l-*-31287"
                                                               "l-*-31288"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-31283")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31311"
                                                               "l-*-31312"
                                                               "l-*-31313"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31296"
                                                               "l-*-31297"
                                                               "l-*-31298"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31286"
                                                               "l-*-31287"
                                                               "l-*-31288"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-31283")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-31311"
                                                                     "l-*-31312"
                                                                     "l-*-31313"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-31296"
                                                                     "l-*-31297"
                                                                     "l-*-31298"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-31286"
                                                                     "l-*-31287"
                                                                     "l-*-31288"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-31283")))
                                                                (hygiene
                                                                  guile))
                                                             k-31404))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31311"
                                                               "l-*-31312"
                                                               "l-*-31313"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31296"
                                                               "l-*-31297"
                                                               "l-*-31298"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31286"
                                                               "l-*-31287"
                                                               "l-*-31288"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-31283")))
                                                          (hygiene guile))
                                                       (cons e1-31405
                                                             e2-31406))))
                                         tmp-31400)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         x-31337
                                         clause-31391)))))
                               (let ((tmp-31414
                                       (f-31388
                                         (car clauses-31392)
                                         (cdr clauses-31392))))
                                 (let ((tmp-31417
                                         ($sc-dispatch
                                           clause-31391
                                           '(each-any any . each-any))))
                                   (if tmp-31417
                                     (@apply
                                       (lambda (k-31421 e1-31422 e2-31423)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("l-*-31327"
                                                       "l-*-31328"
                                                       "l-*-31329"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("l-*-31323"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("l-*-31296"
                                                       "l-*-31297"
                                                       "l-*-31298"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("l-*-31286"
                                                       "l-*-31287"
                                                       "l-*-31288"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-31283")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-31327"
                                                             "l-*-31328"
                                                             "l-*-31329"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-31323"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-31296"
                                                             "l-*-31297"
                                                             "l-*-31298"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-31286"
                                                             "l-*-31287"
                                                             "l-*-31288"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-31283")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-31327"
                                                             "l-*-31328"
                                                             "l-*-31329"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-31323"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-31296"
                                                             "l-*-31297"
                                                             "l-*-31298"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-31286"
                                                             "l-*-31287"
                                                             "l-*-31288"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-31283")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-31327"
                                                                   "l-*-31328"
                                                                   "l-*-31329"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("l-*-31323"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-31296"
                                                                   "l-*-31297"
                                                                   "l-*-31298"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-31286"
                                                                   "l-*-31287"
                                                                   "l-*-31288"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("l-*-31283")))
                                                              (hygiene guile))
                                                           k-31421))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-31327"
                                                             "l-*-31328"
                                                             "l-*-31329"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-31323"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-31296"
                                                             "l-*-31297"
                                                             "l-*-31298"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-31286"
                                                             "l-*-31287"
                                                             "l-*-31288"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-31283")))
                                                        (hygiene guile))
                                                     (cons e1-31422 e2-31423))
                                               tmp-31414))
                                       tmp-31417)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       x-31337
                                       clause-31391))))))))
                        (f-31388 m1-31344 m2-31345))))
                (let ((body-31347 tmp-31346))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("l-*-31294"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("l-*-31286" "l-*-31287" "l-*-31288"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-31283")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(body)
                                          #((top))
                                          #("l-*-31294"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("l-*-31286"
                                            "l-*-31287"
                                            "l-*-31288"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-31283")))
                                       (hygiene guile))
                                    e-31343))
                        body-31347))))
            tmp-31339)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-31337))))))

(define make-variable-transformer
  (lambda (proc-31441)
    (if (procedure? proc-31441)
      (letrec*
        ((trans-31442
           (lambda (x-31448) (proc-31441 x-31448))))
        (begin
          (set-procedure-property!
            trans-31442
            'variable-transformer
            #t)
          trans-31442))
      (error "variable transformer not a procedure"
             proc-31441))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (x-31480)
      (let ((tmp-31482 ($sc-dispatch x-31480 '(_ any))))
        (if tmp-31482
          (@apply
            (lambda (e-31486)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("l-*-31455"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-31452")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("l-*-31455"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("l-*-31452")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("l-*-31455"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-31452")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("l-*-31455"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-31452")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("l-*-31455"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-31452")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("l-*-31455"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-31452")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("l-*-31455"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-31452")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-31455"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-31452")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("l-*-31455"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-31452")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("l-*-31455"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-31452")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage
                                            #(e)
                                            #((top))
                                            #("l-*-31455"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-31452")))
                                         (hygiene guile))
                                      e-31486))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-31455"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-31452")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-31455"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-31452")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-31455"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-31452")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage
                                            #(e)
                                            #((top))
                                            #("l-*-31455"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-31452")))
                                         (hygiene guile))
                                      (cons e-31486
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("l-*-31455"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-31452")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("l-*-31455"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-31452")))
                                                (hygiene guile)))))))))
            tmp-31482)
          (let ((tmp-31487
                  ($sc-dispatch
                    x-31480
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-31452")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if tmp-31487
                  (@apply
                    (lambda (id-31491
                             exp1-31492
                             var-31493
                             val-31494
                             exp2-31495)
                      (if (identifier? id-31491)
                        (identifier? var-31493)
                        #f))
                    tmp-31487)
                  #f)
              (@apply
                (lambda (id-31496
                         exp1-31497
                         var-31498
                         val-31499
                         exp2-31500)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("l-*-31470"
                                "l-*-31471"
                                "l-*-31472"
                                "l-*-31473"
                                "l-*-31474"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-31452")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("l-*-31470"
                                      "l-*-31471"
                                      "l-*-31472"
                                      "l-*-31473"
                                      "l-*-31474"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-31452")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("l-*-31470"
                                       "l-*-31471"
                                       "l-*-31472"
                                       "l-*-31473"
                                       "l-*-31474"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("l-*-31452")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("l-*-31470"
                                         "l-*-31471"
                                         "l-*-31472"
                                         "l-*-31473"
                                         "l-*-31474"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-31452")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("l-*-31470"
                                         "l-*-31471"
                                         "l-*-31472"
                                         "l-*-31473"
                                         "l-*-31474"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-31452")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-31470"
                                            "l-*-31471"
                                            "l-*-31472"
                                            "l-*-31473"
                                            "l-*-31474"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-31452")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-31470"
                                            "l-*-31471"
                                            "l-*-31472"
                                            "l-*-31473"
                                            "l-*-31474"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-31452")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("l-*-31470"
                                             "l-*-31471"
                                             "l-*-31472"
                                             "l-*-31473"
                                             "l-*-31474"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x)
                                           #((top))
                                           #("l-*-31452")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-31470"
                                                        "l-*-31471"
                                                        "l-*-31472"
                                                        "l-*-31473"
                                                        "l-*-31474"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-31452")))
                                                   (hygiene guile))
                                                var-31498
                                                val-31499)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-31470"
                                                        "l-*-31471"
                                                        "l-*-31472"
                                                        "l-*-31473"
                                                        "l-*-31474"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-31452")))
                                                   (hygiene guile))
                                                exp2-31500))
                                    (list (cons id-31496
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("l-*-31470"
                                                         "l-*-31471"
                                                         "l-*-31472"
                                                         "l-*-31473"
                                                         "l-*-31474"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-31452")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("l-*-31470"
                                                         "l-*-31471"
                                                         "l-*-31472"
                                                         "l-*-31473"
                                                         "l-*-31474"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-31452")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-31470"
                                                        "l-*-31471"
                                                        "l-*-31472"
                                                        "l-*-31473"
                                                        "l-*-31474"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-31452")))
                                                   (hygiene guile))
                                                (cons exp1-31497
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31470"
                                                               "l-*-31471"
                                                               "l-*-31472"
                                                               "l-*-31473"
                                                               "l-*-31474"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-31452")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31470"
                                                               "l-*-31471"
                                                               "l-*-31472"
                                                               "l-*-31473"
                                                               "l-*-31474"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-31452")))
                                                          (hygiene guile))))))
                                    (list id-31496
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-31470"
                                                        "l-*-31471"
                                                        "l-*-31472"
                                                        "l-*-31473"
                                                        "l-*-31474"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-31452")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-31470"
                                                              "l-*-31471"
                                                              "l-*-31472"
                                                              "l-*-31473"
                                                              "l-*-31474"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("l-*-31452")))
                                                         (hygiene guile))
                                                      id-31496))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-31470"
                                                        "l-*-31471"
                                                        "l-*-31472"
                                                        "l-*-31473"
                                                        "l-*-31474"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-31452")))
                                                   (hygiene guile))
                                                exp1-31497))))))
                tmp-31487)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-31480))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (x-31532)
      (let ((tmp-31534
              ($sc-dispatch
                x-31532
                '(_ (any . any) any . each-any))))
        (if tmp-31534
          (@apply
            (lambda (id-31538 args-31539 b0-31540 b1-31541)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("l-*-31514"
                            "l-*-31515"
                            "l-*-31516"
                            "l-*-31517"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-31511")))
                       (hygiene guile))
                    id-31538
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("l-*-31514"
                                  "l-*-31515"
                                  "l-*-31516"
                                  "l-*-31517"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-31511")))
                             (hygiene guile))
                          (cons args-31539 (cons b0-31540 b1-31541)))))
            tmp-31534)
          (let ((tmp-31542 ($sc-dispatch x-31532 '(_ any any))))
            (if (if tmp-31542
                  (@apply
                    (lambda (id-31546 val-31547)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("l-*-31524" "l-*-31525"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-31511")))
                           (hygiene guile))))
                    tmp-31542)
                  #f)
              (@apply
                (lambda (id-31548 val-31549)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("l-*-31528" "l-*-31529"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-31511")))
                           (hygiene guile))
                        id-31548
                        val-31549))
                tmp-31542)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-31532))))))))

