(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(let ((#{transformer-environment 4436}# (if #f #f)))
  (letrec*
    ((#{top-level-eval-hook 4375}#
       (lambda (#{x 26114}# #{mod 26115}#)
         (primitive-eval #{x 26114}#)))
     (#{get-global-definition-hook 4378}#
       (lambda (#{symbol 15434}# #{module 15435}#)
         (begin
           (if (if (not #{module 15435}#) (current-module) #f)
             (warn "module system is booted, we should have a module"
                   #{symbol 15434}#))
           (let ((#{v 15436}#
                   (module-variable
                     (if #{module 15435}#
                       (resolve-module (cdr #{module 15435}#))
                       (current-module))
                     #{symbol 15434}#)))
             (if #{v 15436}#
               (if (variable-bound? #{v 15436}#)
                 (let ((#{val 15438}# (variable-ref #{v 15436}#)))
                   (if (macro? #{val 15438}#)
                     (if (macro-type #{val 15438}#)
                       (cons (macro-type #{val 15438}#)
                             (macro-binding #{val 15438}#))
                       #f)
                     #f))
                 #f)
               #f)))))
     (#{maybe-name-value! 4380}#
       (lambda (#{name 15715}# #{val 15716}#)
         (if (if (struct? #{val 15716}#)
               (eq? (struct-vtable #{val 15716}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 15723}# (struct-ref #{val 15716}# 1)))
             (if (not (assq 'name #{meta 15723}#))
               (let ((#{v 15728}#
                       (cons (cons 'name #{name 15715}#) #{meta 15723}#)))
                 (struct-set! #{val 15716}# 1 #{v 15728}#)))))))
     (#{build-application 4382}#
       (lambda (#{source 15440}#
                #{fun-exp 15441}#
                #{arg-exps 15442}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 11)
           #{source 15440}#
           #{fun-exp 15441}#
           #{arg-exps 15442}#)))
     (#{build-conditional 4383}#
       (lambda (#{source 15448}#
                #{test-exp 15449}#
                #{then-exp 15450}#
                #{else-exp 15451}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 10)
           #{source 15448}#
           #{test-exp 15449}#
           #{then-exp 15450}#
           #{else-exp 15451}#)))
     (#{build-dynlet 4384}#
       (lambda (#{source 15458}#
                #{fluids 15459}#
                #{vals 15460}#
                #{body 15461}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 17)
           #{source 15458}#
           #{fluids 15459}#
           #{vals 15460}#
           #{body 15461}#)))
     (#{build-lexical-reference 4385}#
       (lambda (#{type 26116}#
                #{source 26117}#
                #{name 26118}#
                #{var 26119}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{source 26117}#
           #{name 26118}#
           #{var 26119}#)))
     (#{build-lexical-assignment 4386}#
       (lambda (#{source 15468}#
                #{name 15469}#
                #{var 15470}#
                #{exp 15471}#)
         (begin
           (if (if (struct? #{exp 15471}#)
                 (eq? (struct-vtable #{exp 15471}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta 15487}# (struct-ref #{exp 15471}# 1)))
               (if (not (assq 'name #{meta 15487}#))
                 (let ((#{v 15494}#
                         (cons (cons 'name #{name 15469}#) #{meta 15487}#)))
                   (struct-set! #{exp 15471}# 1 #{v 15494}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 4)
             #{source 15468}#
             #{name 15469}#
             #{var 15470}#
             #{exp 15471}#))))
     (#{analyze-variable 4387}#
       (lambda (#{mod 26125}#
                #{var 26126}#
                #{modref-cont 26127}#
                #{bare-cont 26128}#)
         (if (not #{mod 26125}#)
           (#{bare-cont 26128}# #{var 26126}#)
           (let ((#{kind 26129}# (car #{mod 26125}#))
                 (#{mod 26130}# (cdr #{mod 26125}#)))
             (if (eqv? #{kind 26129}# 'public)
               (#{modref-cont 26127}#
                 #{mod 26130}#
                 #{var 26126}#
                 #t)
               (if (eqv? #{kind 26129}# 'private)
                 (if (not (equal?
                            #{mod 26130}#
                            (module-name (current-module))))
                   (#{modref-cont 26127}#
                     #{mod 26130}#
                     #{var 26126}#
                     #f)
                   (#{bare-cont 26128}# #{var 26126}#))
                 (if (eqv? #{kind 26129}# 'bare)
                   (#{bare-cont 26128}# #{var 26126}#)
                   (if (eqv? #{kind 26129}# 'hygiene)
                     (if (if (not (equal?
                                    #{mod 26130}#
                                    (module-name (current-module))))
                           (module-variable
                             (resolve-module #{mod 26130}#)
                             #{var 26126}#)
                           #f)
                       (#{modref-cont 26127}#
                         #{mod 26130}#
                         #{var 26126}#
                         #f)
                       (#{bare-cont 26128}# #{var 26126}#))
                     (syntax-violation
                       #f
                       "bad module kind"
                       #{var 26126}#
                       #{mod 26130}#)))))))))
     (#{build-global-reference 4388}#
       (lambda (#{source 26145}# #{var 26146}# #{mod 26147}#)
         (#{analyze-variable 4387}#
           #{mod 26147}#
           #{var 26146}#
           (lambda (#{mod 26150}# #{var 26151}# #{public? 26152}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               #{source 26145}#
               #{mod 26150}#
               #{var 26151}#
               #{public? 26152}#))
           (lambda (#{var 26160}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               #{source 26145}#
               #{var 26160}#)))))
     (#{build-global-assignment 4389}#
       (lambda (#{source 15503}#
                #{var 15504}#
                #{exp 15505}#
                #{mod 15506}#)
         (begin
           (if (if (struct? #{exp 15505}#)
                 (eq? (struct-vtable #{exp 15505}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta 15522}# (struct-ref #{exp 15505}# 1)))
               (if (not (assq 'name #{meta 15522}#))
                 (let ((#{v 15529}#
                         (cons (cons 'name #{var 15504}#) #{meta 15522}#)))
                   (struct-set! #{exp 15505}# 1 #{v 15529}#)))))
           (#{analyze-variable 4387}#
             #{mod 15506}#
             #{var 15504}#
             (lambda (#{mod 15534}# #{var 15535}# #{public? 15536}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 6)
                 #{source 15503}#
                 #{mod 15534}#
                 #{var 15535}#
                 #{public? 15536}#
                 #{exp 15505}#))
             (lambda (#{var 15544}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 8)
                 #{source 15503}#
                 #{var 15544}#
                 #{exp 15505}#))))))
     (#{build-global-definition 4390}#
       (lambda (#{source 26166}# #{var 26167}# #{exp 26168}#)
         (begin
           (if (if (struct? #{exp 26168}#)
                 (eq? (struct-vtable #{exp 26168}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta 26184}# (struct-ref #{exp 26168}# 1)))
               (if (not (assq 'name #{meta 26184}#))
                 (let ((#{v 26191}#
                         (cons (cons 'name #{var 26167}#) #{meta 26184}#)))
                   (struct-set! #{exp 26168}# 1 #{v 26191}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #{source 26166}#
             #{var 26167}#
             #{exp 26168}#))))
     (#{build-simple-lambda 4391}#
       (lambda (#{src 15550}#
                #{req 15551}#
                #{rest 15552}#
                #{vars 15553}#
                #{meta 15554}#
                #{exp 15555}#)
         (let ((#{body 15561}#
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 14)
                   #{src 15550}#
                   #{req 15551}#
                   #f
                   #{rest 15552}#
                   #f
                   '()
                   #{vars 15553}#
                   #{exp 15555}#
                   #f)))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             #{src 15550}#
             #{meta 15554}#
             #{body 15561}#))))
     (#{build-sequence 4396}#
       (lambda (#{src 26199}# #{exps 26200}#)
         (if (null? (cdr #{exps 26200}#))
           (car #{exps 26200}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 12)
             #{src 26199}#
             #{exps 26200}#))))
     (#{build-let 4397}#
       (lambda (#{src 15573}#
                #{ids 15574}#
                #{vars 15575}#
                #{val-exps 15576}#
                #{body-exp 15577}#)
         (begin
           (for-each
             #{maybe-name-value! 4380}#
             #{ids 15574}#
             #{val-exps 15576}#)
           (if (null? #{vars 15575}#)
             #{body-exp 15577}#
             (make-struct/no-tail
               (vector-ref %expanded-vtables 15)
               #{src 15573}#
               #{ids 15574}#
               #{vars 15575}#
               #{val-exps 15576}#
               #{body-exp 15577}#)))))
     (#{build-named-let 4398}#
       (lambda (#{src 15601}#
                #{ids 15602}#
                #{vars 15603}#
                #{val-exps 15604}#
                #{body-exp 15605}#)
         (let ((#{f 15606}# (car #{vars 15603}#))
               (#{f-name 15607}# (car #{ids 15602}#))
               (#{vars 15608}# (cdr #{vars 15603}#))
               (#{ids 15609}# (cdr #{ids 15602}#)))
           (let ((#{proc 15610}#
                   (let ((#{body 15630}#
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 14)
                             #{src 15601}#
                             #{ids 15609}#
                             #f
                             #f
                             #f
                             '()
                             #{vars 15608}#
                             #{body-exp 15605}#
                             #f)))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 13)
                       #{src 15601}#
                       '()
                       #{body 15630}#))))
             (begin
               (if (if (struct? #{proc 15610}#)
                     (eq? (struct-vtable #{proc 15610}#)
                          (vector-ref %expanded-vtables 13))
                     #f)
                 (let ((#{meta 15654}# (struct-ref #{proc 15610}# 1)))
                   (if (not (assq 'name #{meta 15654}#))
                     (let ((#{v 15661}#
                             (cons (cons 'name #{f-name 15607}#)
                                   #{meta 15654}#)))
                       (struct-set! #{proc 15610}# 1 #{v 15661}#)))))
               (for-each
                 #{maybe-name-value! 4380}#
                 #{ids 15609}#
                 #{val-exps 15604}#)
               (let ((#{names 15685}# (list #{f-name 15607}#))
                     (#{gensyms 15686}# (list #{f 15606}#))
                     (#{vals 15687}# (list #{proc 15610}#))
                     (#{body 15688}#
                       (let ((#{fun-exp 15692}#
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 3)
                                 #{src 15601}#
                                 #{f-name 15607}#
                                 #{f 15606}#)))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #{src 15601}#
                           #{fun-exp 15692}#
                           #{val-exps 15604}#))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 16)
                   #{src 15601}#
                   #f
                   #{names 15685}#
                   #{gensyms 15686}#
                   #{vals 15687}#
                   #{body 15688}#)))))))
     (#{build-letrec 4399}#
       (lambda (#{src 15708}#
                #{in-order? 15709}#
                #{ids 15710}#
                #{vars 15711}#
                #{val-exps 15712}#
                #{body-exp 15713}#)
         (if (null? #{vars 15711}#)
           #{body-exp 15713}#
           (begin
             (for-each
               #{maybe-name-value! 4380}#
               #{ids 15710}#
               #{val-exps 15712}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 16)
               #{src 15708}#
               #{in-order? 15709}#
               #{ids 15710}#
               #{vars 15711}#
               #{val-exps 15712}#
               #{body-exp 15713}#)))))
     (#{source-annotation 4408}#
       (lambda (#{x 15739}#)
         (if (if (vector? #{x 15739}#)
               (if (= (vector-length #{x 15739}#) 4)
                 (eq? (vector-ref #{x 15739}# 0) 'syntax-object)
                 #f)
               #f)
           (#{source-annotation 4408}#
             (vector-ref #{x 15739}# 1))
           (if (pair? #{x 15739}#)
             (let ((#{props 15754}# (source-properties #{x 15739}#)))
               (if (pair? #{props 15754}#) #{props 15754}# #f))
             #f))))
     (#{extend-env 4409}#
       (lambda (#{labels 15756}# #{bindings 15757}# #{r 15758}#)
         (if (null? #{labels 15756}#)
           #{r 15758}#
           (#{extend-env 4409}#
             (cdr #{labels 15756}#)
             (cdr #{bindings 15757}#)
             (cons (cons (car #{labels 15756}#)
                         (car #{bindings 15757}#))
                   #{r 15758}#)))))
     (#{extend-var-env 4410}#
       (lambda (#{labels 15759}# #{vars 15760}# #{r 15761}#)
         (if (null? #{labels 15759}#)
           #{r 15761}#
           (#{extend-var-env 4410}#
             (cdr #{labels 15759}#)
             (cdr #{vars 15760}#)
             (cons (cons (car #{labels 15759}#)
                         (cons 'lexical (car #{vars 15760}#)))
                   #{r 15761}#)))))
     (#{macros-only-env 4411}#
       (lambda (#{r 15762}#)
         (if (null? #{r 15762}#)
           '()
           (let ((#{a 15763}# (car #{r 15762}#)))
             (if (eq? (car (cdr #{a 15763}#)) 'macro)
               (cons #{a 15763}#
                     (#{macros-only-env 4411}# (cdr #{r 15762}#)))
               (#{macros-only-env 4411}# (cdr #{r 15762}#)))))))
     (#{global-extend 4413}#
       (lambda (#{type 15765}# #{sym 15766}# #{val 15767}#)
         (module-define!
           (current-module)
           #{sym 15766}#
           (make-syntax-transformer
             #{sym 15766}#
             #{type 15765}#
             #{val 15767}#))))
     (#{id? 4415}#
       (lambda (#{x 9800}#)
         (if (symbol? #{x 9800}#)
           #t
           (if (if (vector? #{x 9800}#)
                 (if (= (vector-length #{x 9800}#) 4)
                   (eq? (vector-ref #{x 9800}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 9800}# 1))
             #f))))
     (#{gen-labels 4418}#
       (lambda (#{ls 15777}#)
         (if (null? #{ls 15777}#)
           '()
           (cons (symbol->string (gensym "i"))
                 (#{gen-labels 4418}# (cdr #{ls 15777}#))))))
     (#{make-binding-wrap 4429}#
       (lambda (#{ids 15781}# #{labels 15782}# #{w 15783}#)
         (if (null? #{ids 15781}#)
           #{w 15783}#
           (cons (car #{w 15783}#)
                 (cons (let ((#{labelvec 15784}#
                               (list->vector #{labels 15782}#)))
                         (let ((#{n 15785}#
                                 (vector-length #{labelvec 15784}#)))
                           (let ((#{symnamevec 15786}#
                                   (make-vector #{n 15785}#))
                                 (#{marksvec 15787}#
                                   (make-vector #{n 15785}#)))
                             (begin
                               (letrec*
                                 ((#{f 15788}#
                                    (lambda (#{ids 15791}# #{i 15792}#)
                                      (if (not (null? #{ids 15791}#))
                                        (call-with-values
                                          (lambda ()
                                            (let ((#{x 15795}#
                                                    (car #{ids 15791}#)))
                                              (if (if (vector? #{x 15795}#)
                                                    (if (= (vector-length
                                                             #{x 15795}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{x 15795}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (values
                                                  (vector-ref #{x 15795}# 1)
                                                  (let ((#{m1 15811}#
                                                          (car #{w 15783}#))
                                                        (#{m2 15812}#
                                                          (car (vector-ref
                                                                 #{x 15795}#
                                                                 2))))
                                                    (if (null? #{m2 15812}#)
                                                      #{m1 15811}#
                                                      (append
                                                        #{m1 15811}#
                                                        #{m2 15812}#))))
                                                (values
                                                  #{x 15795}#
                                                  (car #{w 15783}#)))))
                                          (lambda (#{symname 15832}#
                                                   #{marks 15833}#)
                                            (begin
                                              (vector-set!
                                                #{symnamevec 15786}#
                                                #{i 15792}#
                                                #{symname 15832}#)
                                              (vector-set!
                                                #{marksvec 15787}#
                                                #{i 15792}#
                                                #{marks 15833}#)
                                              (#{f 15788}#
                                                (cdr #{ids 15791}#)
                                                (#{1+}# #{i 15792}#)))))))))
                                 (#{f 15788}# #{ids 15781}# 0))
                               (vector
                                 'ribcage
                                 #{symnamevec 15786}#
                                 #{marksvec 15787}#
                                 #{labelvec 15784}#)))))
                       (cdr #{w 15783}#))))))
     (#{join-wraps 4431}#
       (lambda (#{w1 15842}# #{w2 15843}#)
         (let ((#{m1 15844}# (car #{w1 15842}#))
               (#{s1 15845}# (cdr #{w1 15842}#)))
           (if (null? #{m1 15844}#)
             (if (null? #{s1 15845}#)
               #{w2 15843}#
               (cons (car #{w2 15843}#)
                     (let ((#{m2 15852}# (cdr #{w2 15843}#)))
                       (if (null? #{m2 15852}#)
                         #{s1 15845}#
                         (append #{s1 15845}# #{m2 15852}#)))))
             (cons (let ((#{m2 15861}# (car #{w2 15843}#)))
                     (if (null? #{m2 15861}#)
                       #{m1 15844}#
                       (append #{m1 15844}# #{m2 15861}#)))
                   (let ((#{m2 15870}# (cdr #{w2 15843}#)))
                     (if (null? #{m2 15870}#)
                       #{s1 15845}#
                       (append #{s1 15845}# #{m2 15870}#))))))))
     (#{same-marks? 4433}#
       (lambda (#{x 15875}# #{y 15876}#)
         (if (eq? #{x 15875}# #{y 15876}#)
           (eq? #{x 15875}# #{y 15876}#)
           (if (not (null? #{x 15875}#))
             (if (not (null? #{y 15876}#))
               (if (eq? (car #{x 15875}#) (car #{y 15876}#))
                 (#{same-marks? 4433}#
                   (cdr #{x 15875}#)
                   (cdr #{y 15876}#))
                 #f)
               #f)
             #f))))
     (#{id-var-name 4434}#
       (lambda (#{id 15884}# #{w 15885}#)
         (letrec*
           ((#{search 15886}#
              (lambda (#{sym 15947}# #{subst 15948}# #{marks 15949}#)
                (if (null? #{subst 15948}#)
                  (values #f #{marks 15949}#)
                  (let ((#{fst 15950}# (car #{subst 15948}#)))
                    (if (eq? #{fst 15950}# 'shift)
                      (#{search 15886}#
                        #{sym 15947}#
                        (cdr #{subst 15948}#)
                        (cdr #{marks 15949}#))
                      (let ((#{symnames 15952}# (vector-ref #{fst 15950}# 1)))
                        (if (vector? #{symnames 15952}#)
                          (let ((#{n 15964}#
                                  (vector-length #{symnames 15952}#)))
                            (letrec*
                              ((#{f 15965}#
                                 (lambda (#{i 15967}#)
                                   (if (= #{i 15967}# #{n 15964}#)
                                     (#{search 15886}#
                                       #{sym 15947}#
                                       (cdr #{subst 15948}#)
                                       #{marks 15949}#)
                                     (if (if (eq? (vector-ref
                                                    #{symnames 15952}#
                                                    #{i 15967}#)
                                                  #{sym 15947}#)
                                           (#{same-marks? 4433}#
                                             #{marks 15949}#
                                             (vector-ref
                                               (vector-ref #{fst 15950}# 2)
                                               #{i 15967}#))
                                           #f)
                                       (values
                                         (vector-ref
                                           (vector-ref #{fst 15950}# 3)
                                           #{i 15967}#)
                                         #{marks 15949}#)
                                       (#{f 15965}# (#{1+}# #{i 15967}#)))))))
                              (#{f 15965}# 0)))
                          (letrec*
                            ((#{f 16000}#
                               (lambda (#{symnames 16002}# #{i 16003}#)
                                 (if (null? #{symnames 16002}#)
                                   (#{search 15886}#
                                     #{sym 15947}#
                                     (cdr #{subst 15948}#)
                                     #{marks 15949}#)
                                   (if (if (eq? (car #{symnames 16002}#)
                                                #{sym 15947}#)
                                         (#{same-marks? 4433}#
                                           #{marks 15949}#
                                           (list-ref
                                             (vector-ref #{fst 15950}# 2)
                                             #{i 16003}#))
                                         #f)
                                     (values
                                       (list-ref
                                         (vector-ref #{fst 15950}# 3)
                                         #{i 16003}#)
                                       #{marks 15949}#)
                                     (#{f 16000}#
                                       (cdr #{symnames 16002}#)
                                       (#{1+}# #{i 16003}#)))))))
                            (#{f 16000}# #{symnames 15952}# 0))))))))))
           (if (symbol? #{id 15884}#)
             (let ((#{t 15889}#
                     (#{search 15886}#
                       #{id 15884}#
                       (cdr #{w 15885}#)
                       (car #{w 15885}#))))
               (if #{t 15889}# #{t 15889}# #{id 15884}#))
             (if (if (vector? #{id 15884}#)
                   (if (= (vector-length #{id 15884}#) 4)
                     (eq? (vector-ref #{id 15884}# 0) 'syntax-object)
                     #f)
                   #f)
               (let ((#{id 15904}# (vector-ref #{id 15884}# 1))
                     (#{w1 15905}# (vector-ref #{id 15884}# 2)))
                 (let ((#{marks 15906}#
                         (let ((#{m1 15916}# (car #{w 15885}#))
                               (#{m2 15917}# (car #{w1 15905}#)))
                           (if (null? #{m2 15917}#)
                             #{m1 15916}#
                             (append #{m1 15916}# #{m2 15917}#)))))
                   (call-with-values
                     (lambda ()
                       (#{search 15886}#
                         #{id 15904}#
                         (cdr #{w 15885}#)
                         #{marks 15906}#))
                     (lambda (#{new-id 15933}# #{marks 15934}#)
                       (if #{new-id 15933}#
                         #{new-id 15933}#
                         (let ((#{t 15942}#
                                 (#{search 15886}#
                                   #{id 15904}#
                                   (cdr #{w1 15905}#)
                                   #{marks 15934}#)))
                           (if #{t 15942}# #{t 15942}# #{id 15904}#)))))))
               (syntax-violation
                 'id-var-name
                 "invalid id"
                 #{id 15884}#))))))
     (#{valid-bound-ids? 4440}#
       (lambda (#{ids 16025}#)
         (if (letrec*
               ((#{all-ids? 16026}#
                  (lambda (#{ids 16188}#)
                    (if (null? #{ids 16188}#)
                      (null? #{ids 16188}#)
                      (if (let ((#{x 16199}# (car #{ids 16188}#)))
                            (if (symbol? #{x 16199}#)
                              #t
                              (if (if (vector? #{x 16199}#)
                                    (if (= (vector-length #{x 16199}#) 4)
                                      (eq? (vector-ref #{x 16199}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (symbol? (vector-ref #{x 16199}# 1))
                                #f)))
                        (#{all-ids? 16026}# (cdr #{ids 16188}#))
                        #f)))))
               (#{all-ids? 16026}# #{ids 16025}#))
           (#{distinct-bound-ids? 4441}# #{ids 16025}#)
           #f)))
     (#{distinct-bound-ids? 4441}#
       (lambda (#{ids 16327}#)
         (letrec*
           ((#{distinct? 16328}#
              (lambda (#{ids 16440}#)
                (if (null? #{ids 16440}#)
                  (null? #{ids 16440}#)
                  (if (not (#{bound-id-member? 4442}#
                             (car #{ids 16440}#)
                             (cdr #{ids 16440}#)))
                    (#{distinct? 16328}# (cdr #{ids 16440}#))
                    #f)))))
           (#{distinct? 16328}# #{ids 16327}#))))
     (#{bound-id-member? 4442}#
       (lambda (#{x 16650}# #{list 16651}#)
         (if (not (null? #{list 16651}#))
           (let ((#{t 16652}#
                   (let ((#{j 16733}# (car #{list 16651}#)))
                     (if (if (if (vector? #{x 16650}#)
                               (if (= (vector-length #{x 16650}#) 4)
                                 (eq? (vector-ref #{x 16650}# 0)
                                      'syntax-object)
                                 #f)
                               #f)
                           (if (vector? #{j 16733}#)
                             (if (= (vector-length #{j 16733}#) 4)
                               (eq? (vector-ref #{j 16733}# 0) 'syntax-object)
                               #f)
                             #f)
                           #f)
                       (if (eq? (vector-ref #{x 16650}# 1)
                                (vector-ref #{j 16733}# 1))
                         (#{same-marks? 4433}#
                           (car (vector-ref #{x 16650}# 2))
                           (car (vector-ref #{j 16733}# 2)))
                         #f)
                       (eq? #{x 16650}# #{j 16733}#)))))
             (if #{t 16652}#
               #{t 16652}#
               (#{bound-id-member? 4442}#
                 #{x 16650}#
                 (cdr #{list 16651}#))))
           #f)))
     (#{wrap 4443}#
       (lambda (#{x 16777}# #{w 16778}# #{defmod 16779}#)
         (if (if (null? (car #{w 16778}#))
               (null? (cdr #{w 16778}#))
               #f)
           #{x 16777}#
           (if (if (vector? #{x 16777}#)
                 (if (= (vector-length #{x 16777}#) 4)
                   (eq? (vector-ref #{x 16777}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{expression 16793}# (vector-ref #{x 16777}# 1))
                   (#{wrap 16794}#
                     (#{join-wraps 4431}#
                       #{w 16778}#
                       (vector-ref #{x 16777}# 2)))
                   (#{module 16795}# (vector-ref #{x 16777}# 3)))
               (vector
                 'syntax-object
                 #{expression 16793}#
                 #{wrap 16794}#
                 #{module 16795}#))
             (if (null? #{x 16777}#)
               #{x 16777}#
               (vector
                 'syntax-object
                 #{x 16777}#
                 #{w 16778}#
                 #{defmod 16779}#))))))
     (#{source-wrap 4444}#
       (lambda (#{x 16812}#
                #{w 16813}#
                #{s 16814}#
                #{defmod 16815}#)
         (#{wrap 4443}#
           (begin
             (if (if (pair? #{x 16812}#) #{s 16814}# #f)
               (set-source-properties! #{x 16812}# #{s 16814}#))
             #{x 16812}#)
           #{w 16813}#
           #{defmod 16815}#)))
     (#{expand-sequence 4445}#
       (lambda (#{body 26205}#
                #{r 26206}#
                #{w 26207}#
                #{s 26208}#
                #{mod 26209}#)
         (#{build-sequence 4396}#
           #{s 26208}#
           (letrec*
             ((#{dobody 26289}#
                (lambda (#{body 26639}#
                         #{r 26640}#
                         #{w 26641}#
                         #{mod 26642}#)
                  (if (null? #{body 26639}#)
                    '()
                    (let ((#{first 26643}#
                            (let ((#{e 26647}# (car #{body 26639}#)))
                              (call-with-values
                                (lambda ()
                                  (#{syntax-type 4449}#
                                    #{e 26647}#
                                    #{r 26640}#
                                    #{w 26641}#
                                    (#{source-annotation 4408}# #{e 26647}#)
                                    #f
                                    #{mod 26642}#
                                    #f))
                                (lambda (#{type 26654}#
                                         #{value 26655}#
                                         #{e 26656}#
                                         #{w 26657}#
                                         #{s 26658}#
                                         #{mod 26659}#)
                                  (#{expand-expr 4451}#
                                    #{type 26654}#
                                    #{value 26655}#
                                    #{e 26656}#
                                    #{r 26640}#
                                    #{w 26657}#
                                    #{s 26658}#
                                    #{mod 26659}#))))))
                      (cons #{first 26643}#
                            (#{dobody 26289}#
                              (cdr #{body 26639}#)
                              #{r 26640}#
                              #{w 26641}#
                              #{mod 26642}#)))))))
             (#{dobody 26289}#
               #{body 26205}#
               #{r 26206}#
               #{w 26207}#
               #{mod 26209}#)))))
     (#{expand-top-sequence 4446}#
       (lambda (#{body 16833}#
                #{r 16834}#
                #{w 16835}#
                #{s 16836}#
                #{m 16837}#
                #{esew 16838}#
                #{mod 16839}#)
         (letrec*
           ((#{scan 16840}#
              (lambda (#{body 16971}#
                       #{r 16972}#
                       #{w 16973}#
                       #{s 16974}#
                       #{m 16975}#
                       #{esew 16976}#
                       #{mod 16977}#
                       #{exps 16978}#)
                (if (null? #{body 16971}#)
                  #{exps 16978}#
                  (call-with-values
                    (lambda ()
                      (call-with-values
                        (lambda ()
                          (let ((#{e 16979}# (car #{body 16971}#)))
                            (#{syntax-type 4449}#
                              #{e 16979}#
                              #{r 16972}#
                              #{w 16973}#
                              (let ((#{t 16983}#
                                      (#{source-annotation 4408}#
                                        #{e 16979}#)))
                                (if #{t 16983}# #{t 16983}# #{s 16974}#))
                              #f
                              #{mod 16977}#
                              #f)))
                        (lambda (#{type 17218}#
                                 #{value 17219}#
                                 #{e 17220}#
                                 #{w 17221}#
                                 #{s 17222}#
                                 #{mod 17223}#)
                          (if (eqv? #{type 17218}# 'begin-form)
                            (let ((#{tmp 17228}#
                                    ($sc-dispatch #{e 17220}# '(_))))
                              (if #{tmp 17228}#
                                (@apply
                                  (lambda () #{exps 16978}#)
                                  #{tmp 17228}#)
                                (let ((#{tmp 17232}#
                                        ($sc-dispatch
                                          #{e 17220}#
                                          '(_ any . each-any))))
                                  (if #{tmp 17232}#
                                    (@apply
                                      (lambda (#{e1 17236}# #{e2 17237}#)
                                        (#{scan 16840}#
                                          (cons #{e1 17236}# #{e2 17237}#)
                                          #{r 16972}#
                                          #{w 17221}#
                                          #{s 17222}#
                                          #{m 16975}#
                                          #{esew 16976}#
                                          #{mod 17223}#
                                          #{exps 16978}#))
                                      #{tmp 17232}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 17220}#)))))
                            (if (eqv? #{type 17218}# 'local-syntax-form)
                              (#{expand-local-syntax 4455}#
                                #{value 17219}#
                                #{e 17220}#
                                #{r 16972}#
                                #{w 17221}#
                                #{s 17222}#
                                #{mod 17223}#
                                (lambda (#{body 17252}#
                                         #{r 17253}#
                                         #{w 17254}#
                                         #{s 17255}#
                                         #{mod 17256}#)
                                  (#{scan 16840}#
                                    #{body 17252}#
                                    #{r 17253}#
                                    #{w 17254}#
                                    #{s 17255}#
                                    #{m 16975}#
                                    #{esew 16976}#
                                    #{mod 17256}#
                                    #{exps 16978}#)))
                              (if (eqv? #{type 17218}# 'eval-when-form)
                                (let ((#{tmp 17261}#
                                        ($sc-dispatch
                                          #{e 17220}#
                                          '(_ each-any any . each-any))))
                                  (if #{tmp 17261}#
                                    (@apply
                                      (lambda (#{x 17265}#
                                               #{e1 17266}#
                                               #{e2 17267}#)
                                        (let ((#{when-list 17268}#
                                                (#{parse-when-list 4448}#
                                                  #{e 17220}#
                                                  #{x 17265}#))
                                              (#{body 17269}#
                                                (cons #{e1 17266}#
                                                      #{e2 17267}#)))
                                          (if (eq? #{m 16975}# 'e)
                                            (if (memq 'eval
                                                      #{when-list 17268}#)
                                              (#{scan 16840}#
                                                #{body 17269}#
                                                #{r 16972}#
                                                #{w 17221}#
                                                #{s 17222}#
                                                (if (memq 'expand
                                                          #{when-list 17268}#)
                                                  'c&e
                                                  'e)
                                                '(eval)
                                                #{mod 17223}#
                                                #{exps 16978}#)
                                              (begin
                                                (if (memq 'expand
                                                          #{when-list 17268}#)
                                                  (let ((#{x 17346}#
                                                          (#{expand-top-sequence 4446}#
                                                            #{body 17269}#
                                                            #{r 16972}#
                                                            #{w 17221}#
                                                            #{s 17222}#
                                                            'e
                                                            '(eval)
                                                            #{mod 17223}#)))
                                                    (primitive-eval
                                                      #{x 17346}#)))
                                                (values #{exps 16978}#)))
                                            (if (memq 'load
                                                      #{when-list 17268}#)
                                              (if (let ((#{t 17372}#
                                                          (memq 'compile
                                                                #{when-list 17268}#)))
                                                    (if #{t 17372}#
                                                      #{t 17372}#
                                                      (let ((#{t 17421}#
                                                              (memq 'expand
                                                                    #{when-list 17268}#)))
                                                        (if #{t 17421}#
                                                          #{t 17421}#
                                                          (if (eq? #{m 16975}#
                                                                   'c&e)
                                                            (memq 'eval
                                                                  #{when-list 17268}#)
                                                            #f)))))
                                                (#{scan 16840}#
                                                  #{body 17269}#
                                                  #{r 16972}#
                                                  #{w 17221}#
                                                  #{s 17222}#
                                                  'c&e
                                                  '(compile load)
                                                  #{mod 17223}#
                                                  #{exps 16978}#)
                                                (if (if (eq? #{m 16975}# 'c)
                                                      #t
                                                      (eq? #{m 16975}# 'c&e))
                                                  (#{scan 16840}#
                                                    #{body 17269}#
                                                    #{r 16972}#
                                                    #{w 17221}#
                                                    #{s 17222}#
                                                    'c
                                                    '(load)
                                                    #{mod 17223}#
                                                    #{exps 16978}#)
                                                  (values #{exps 16978}#)))
                                              (if (let ((#{t 17550}#
                                                          (memq 'compile
                                                                #{when-list 17268}#)))
                                                    (if #{t 17550}#
                                                      #{t 17550}#
                                                      (let ((#{t 17599}#
                                                              (memq 'expand
                                                                    #{when-list 17268}#)))
                                                        (if #{t 17599}#
                                                          #{t 17599}#
                                                          (if (eq? #{m 16975}#
                                                                   'c&e)
                                                            (memq 'eval
                                                                  #{when-list 17268}#)
                                                            #f)))))
                                                (begin
                                                  (let ((#{x 17723}#
                                                          (#{expand-top-sequence 4446}#
                                                            #{body 17269}#
                                                            #{r 16972}#
                                                            #{w 17221}#
                                                            #{s 17222}#
                                                            'e
                                                            '(eval)
                                                            #{mod 17223}#)))
                                                    (primitive-eval
                                                      #{x 17723}#))
                                                  (values #{exps 16978}#))
                                                (values #{exps 16978}#))))))
                                      #{tmp 17261}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 17220}#)))
                                (if (if (eqv? #{type 17218}#
                                              'define-syntax-form)
                                      #t
                                      (eqv? #{type 17218}#
                                            'define-syntax-parameter-form))
                                  (let ((#{n 17769}#
                                          (#{id-var-name 4434}#
                                            #{value 17219}#
                                            #{w 17221}#))
                                        (#{r 17770}#
                                          (#{macros-only-env 4411}#
                                            #{r 16972}#)))
                                    (if (eqv? #{m 16975}# 'c)
                                      (if (memq 'compile #{esew 16976}#)
                                        (let ((#{e 17774}#
                                                (#{expand-install-global 4447}#
                                                  #{n 17769}#
                                                  (#{expand 4450}#
                                                    #{e 17220}#
                                                    #{r 17770}#
                                                    #{w 17221}#
                                                    #{mod 17223}#))))
                                          (begin
                                            (#{top-level-eval-hook 4375}#
                                              #{e 17774}#
                                              #{mod 17223}#)
                                            (if (memq 'load #{esew 16976}#)
                                              (values
                                                (cons #{e 17774}#
                                                      #{exps 16978}#))
                                              (values #{exps 16978}#))))
                                        (if (memq 'load #{esew 16976}#)
                                          (values
                                            (cons (#{expand-install-global 4447}#
                                                    #{n 17769}#
                                                    (#{expand 4450}#
                                                      #{e 17220}#
                                                      #{r 17770}#
                                                      #{w 17221}#
                                                      #{mod 17223}#))
                                                  #{exps 16978}#))
                                          (values #{exps 16978}#)))
                                      (if (eqv? #{m 16975}# 'c&e)
                                        (let ((#{e 18221}#
                                                (#{expand-install-global 4447}#
                                                  #{n 17769}#
                                                  (#{expand 4450}#
                                                    #{e 17220}#
                                                    #{r 17770}#
                                                    #{w 17221}#
                                                    #{mod 17223}#))))
                                          (begin
                                            (#{top-level-eval-hook 4375}#
                                              #{e 18221}#
                                              #{mod 17223}#)
                                            (values
                                              (cons #{e 18221}#
                                                    #{exps 16978}#))))
                                        (begin
                                          (if (memq 'eval #{esew 16976}#)
                                            (#{top-level-eval-hook 4375}#
                                              (#{expand-install-global 4447}#
                                                #{n 17769}#
                                                (#{expand 4450}#
                                                  #{e 17220}#
                                                  #{r 17770}#
                                                  #{w 17221}#
                                                  #{mod 17223}#))
                                              #{mod 17223}#))
                                          (values #{exps 16978}#)))))
                                  (if (eqv? #{type 17218}# 'define-form)
                                    (let ((#{n 18856}#
                                            (#{id-var-name 4434}#
                                              #{value 17219}#
                                              #{w 17221}#)))
                                      (let ((#{type 18857}#
                                              (car (let ((#{t 18864}#
                                                           (assq #{n 18856}#
                                                                 #{r 16972}#)))
                                                     (if #{t 18864}#
                                                       (cdr #{t 18864}#)
                                                       (if (symbol?
                                                             #{n 18856}#)
                                                         (let ((#{t 18870}#
                                                                 (#{get-global-definition-hook 4378}#
                                                                   #{n 18856}#
                                                                   #{mod 17223}#)))
                                                           (if #{t 18870}#
                                                             #{t 18870}#
                                                             '(global)))
                                                         '(displaced-lexical)))))))
                                        (if (if (eqv? #{type 18857}# 'global)
                                              #t
                                              (if (eqv? #{type 18857}# 'core)
                                                #t
                                                (if (eqv? #{type 18857}#
                                                          'macro)
                                                  #t
                                                  (eqv? #{type 18857}#
                                                        'module-ref))))
                                          (begin
                                            (if (if (if (eq? #{m 16975}# 'c)
                                                      #t
                                                      (eq? #{m 16975}# 'c&e))
                                                  (if (not (module-local-variable
                                                             (current-module)
                                                             #{n 18856}#))
                                                    (current-module)
                                                    #f)
                                                  #f)
                                              (let ((#{old 18901}#
                                                      (module-variable
                                                        (current-module)
                                                        #{n 18856}#)))
                                                (if (if (variable?
                                                          #{old 18901}#)
                                                      (variable-bound?
                                                        #{old 18901}#)
                                                      #f)
                                                  (module-define!
                                                    (current-module)
                                                    #{n 18856}#
                                                    (variable-ref
                                                      #{old 18901}#))
                                                  (module-add!
                                                    (current-module)
                                                    #{n 18856}#
                                                    (make-undefined-variable)))))
                                            (values
                                              (cons (if (eq? #{m 16975}# 'c&e)
                                                      (let ((#{x 18903}#
                                                              (#{build-global-definition 4390}#
                                                                #{s 17222}#
                                                                #{n 18856}#
                                                                (#{expand 4450}#
                                                                  #{e 17220}#
                                                                  #{r 16972}#
                                                                  #{w 17221}#
                                                                  #{mod 17223}#))))
                                                        (begin
                                                          (#{top-level-eval-hook 4375}#
                                                            #{x 18903}#
                                                            #{mod 17223}#)
                                                          #{x 18903}#))
                                                      (lambda ()
                                                        (#{build-global-definition 4390}#
                                                          #{s 17222}#
                                                          #{n 18856}#
                                                          (#{expand 4450}#
                                                            #{e 17220}#
                                                            #{r 16972}#
                                                            #{w 17221}#
                                                            #{mod 17223}#))))
                                                    #{exps 16978}#)))
                                          (if (eqv? #{type 18857}#
                                                    'displaced-lexical)
                                            (syntax-violation
                                              #f
                                              "identifier out of context"
                                              #{e 17220}#
                                              (#{wrap 4443}#
                                                #{value 17219}#
                                                #{w 17221}#
                                                #{mod 17223}#))
                                            (syntax-violation
                                              #f
                                              "cannot define keyword at top level"
                                              #{e 17220}#
                                              (#{wrap 4443}#
                                                #{value 17219}#
                                                #{w 17221}#
                                                #{mod 17223}#))))))
                                    (values
                                      (cons (if (eq? #{m 16975}# 'c&e)
                                              (let ((#{x 19349}#
                                                      (#{expand-expr 4451}#
                                                        #{type 17218}#
                                                        #{value 17219}#
                                                        #{e 17220}#
                                                        #{r 16972}#
                                                        #{w 17221}#
                                                        #{s 17222}#
                                                        #{mod 17223}#)))
                                                (begin
                                                  (primitive-eval #{x 19349}#)
                                                  #{x 19349}#))
                                              (lambda ()
                                                (#{expand-expr 4451}#
                                                  #{type 17218}#
                                                  #{value 17219}#
                                                  #{e 17220}#
                                                  #{r 16972}#
                                                  #{w 17221}#
                                                  #{s 17222}#
                                                  #{mod 17223}#)))
                                            #{exps 16978}#))))))))))
                    (lambda (#{exps 19358}#)
                      (#{scan 16840}#
                        (cdr #{body 16971}#)
                        #{r 16972}#
                        #{w 16973}#
                        #{s 16974}#
                        #{m 16975}#
                        #{esew 16976}#
                        #{mod 16977}#
                        #{exps 19358}#)))))))
           (call-with-values
             (lambda ()
               (#{scan 16840}#
                 #{body 16833}#
                 #{r 16834}#
                 #{w 16835}#
                 #{s 16836}#
                 #{m 16837}#
                 #{esew 16838}#
                 #{mod 16839}#
                 '()))
             (lambda (#{exps 16843}#)
               (if (null? #{exps 16843}#)
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 0)
                   #{s 16836}#)
                 (#{build-sequence 4396}#
                   #{s 16836}#
                   (letrec*
                     ((#{lp 16883}#
                        (lambda (#{in 16967}# #{out 16968}#)
                          (if (null? #{in 16967}#)
                            #{out 16968}#
                            (let ((#{e 16969}# (car #{in 16967}#)))
                              (#{lp 16883}#
                                (cdr #{in 16967}#)
                                (cons (if (procedure? #{e 16969}#)
                                        (#{e 16969}#)
                                        #{e 16969}#)
                                      #{out 16968}#)))))))
                     (#{lp 16883}# #{exps 16843}# '())))))))))
     (#{expand-install-global 4447}#
       (lambda (#{name 19359}# #{e 19360}#)
         (let ((#{exp 19366}#
                 (let ((#{fun-exp 19376}#
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'make-syntax-transformer)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'make-syntax-transformer
                             #f)))
                       (#{arg-exps 19377}#
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #{name 19359}#)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'macro)
                               #{e 19360}#)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     #{fun-exp 19376}#
                     #{arg-exps 19377}#))))
           (begin
             (if (if (struct? #{exp 19366}#)
                   (eq? (struct-vtable #{exp 19366}#)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((#{meta 19418}# (struct-ref #{exp 19366}# 1)))
                 (if (not (assq 'name #{meta 19418}#))
                   (let ((#{v 19425}#
                           (cons (cons 'name #{name 19359}#) #{meta 19418}#)))
                     (struct-set! #{exp 19366}# 1 #{v 19425}#)))))
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #f
               #{name 19359}#
               #{exp 19366}#)))))
     (#{parse-when-list 4448}#
       (lambda (#{e 19436}# #{when-list 19437}#)
         (let ((#{result 19438}#
                 (#{strip 4463}# #{when-list 19437}# '(()))))
           (letrec*
             ((#{lp 19439}#
                (lambda (#{l 19493}#)
                  (if (null? #{l 19493}#)
                    #{result 19438}#
                    (if (let ((#{t 19495}# (car #{l 19493}#)))
                          (if (eq? #{t 19495}# 'compile)
                            #t
                            (if (eq? #{t 19495}# 'load)
                              #t
                              (if (eq? #{t 19495}# 'eval)
                                #t
                                (eq? #{t 19495}# 'expand)))))
                      (#{lp 19439}# (cdr #{l 19493}#))
                      (syntax-violation
                        'eval-when
                        "invalid situation"
                        #{e 19436}#
                        (car #{l 19493}#)))))))
             (#{lp 19439}# #{result 19438}#)))))
     (#{syntax-type 4449}#
       (lambda (#{e 19497}#
                #{r 19498}#
                #{w 19499}#
                #{s 19500}#
                #{rib 19501}#
                #{mod 19502}#
                #{for-car? 19503}#)
         (if (symbol? #{e 19497}#)
           (let ((#{n 19504}#
                   (#{id-var-name 4434}# #{e 19497}# #{w 19499}#)))
             (let ((#{b 19505}#
                     (let ((#{t 19513}# (assq #{n 19504}# #{r 19498}#)))
                       (if #{t 19513}#
                         (cdr #{t 19513}#)
                         (if (symbol? #{n 19504}#)
                           (let ((#{t 19519}#
                                   (#{get-global-definition-hook 4378}#
                                     #{n 19504}#
                                     #{mod 19502}#)))
                             (if #{t 19519}# #{t 19519}# '(global)))
                           '(displaced-lexical))))))
               (let ((#{type 19506}# (car #{b 19505}#)))
                 (if (eqv? #{type 19506}# 'lexical)
                   (values
                     #{type 19506}#
                     (cdr #{b 19505}#)
                     #{e 19497}#
                     #{w 19499}#
                     #{s 19500}#
                     #{mod 19502}#)
                   (if (eqv? #{type 19506}# 'global)
                     (values
                       #{type 19506}#
                       #{n 19504}#
                       #{e 19497}#
                       #{w 19499}#
                       #{s 19500}#
                       #{mod 19502}#)
                     (if (eqv? #{type 19506}# 'macro)
                       (if #{for-car? 19503}#
                         (values
                           #{type 19506}#
                           (cdr #{b 19505}#)
                           #{e 19497}#
                           #{w 19499}#
                           #{s 19500}#
                           #{mod 19502}#)
                         (#{syntax-type 4449}#
                           (#{expand-macro 4453}#
                             (cdr #{b 19505}#)
                             #{e 19497}#
                             #{r 19498}#
                             #{w 19499}#
                             #{s 19500}#
                             #{rib 19501}#
                             #{mod 19502}#)
                           #{r 19498}#
                           '(())
                           #{s 19500}#
                           #{rib 19501}#
                           #{mod 19502}#
                           #f))
                       (values
                         #{type 19506}#
                         (cdr #{b 19505}#)
                         #{e 19497}#
                         #{w 19499}#
                         #{s 19500}#
                         #{mod 19502}#)))))))
           (if (pair? #{e 19497}#)
             (let ((#{first 19539}# (car #{e 19497}#)))
               (call-with-values
                 (lambda ()
                   (#{syntax-type 4449}#
                     #{first 19539}#
                     #{r 19498}#
                     #{w 19499}#
                     #{s 19500}#
                     #{rib 19501}#
                     #{mod 19502}#
                     #t))
                 (lambda (#{ftype 19541}#
                          #{fval 19542}#
                          #{fe 19543}#
                          #{fw 19544}#
                          #{fs 19545}#
                          #{fmod 19546}#)
                   (if (eqv? #{ftype 19541}# 'lexical)
                     (values
                       'lexical-call
                       #{fval 19542}#
                       #{e 19497}#
                       #{w 19499}#
                       #{s 19500}#
                       #{mod 19502}#)
                     (if (eqv? #{ftype 19541}# 'global)
                       (values
                         'global-call
                         (vector
                           'syntax-object
                           #{fval 19542}#
                           #{w 19499}#
                           #{fmod 19546}#)
                         #{e 19497}#
                         #{w 19499}#
                         #{s 19500}#
                         #{mod 19502}#)
                       (if (eqv? #{ftype 19541}# 'macro)
                         (#{syntax-type 4449}#
                           (#{expand-macro 4453}#
                             #{fval 19542}#
                             #{e 19497}#
                             #{r 19498}#
                             #{w 19499}#
                             #{s 19500}#
                             #{rib 19501}#
                             #{mod 19502}#)
                           #{r 19498}#
                           '(())
                           #{s 19500}#
                           #{rib 19501}#
                           #{mod 19502}#
                           #{for-car? 19503}#)
                         (if (eqv? #{ftype 19541}# 'module-ref)
                           (call-with-values
                             (lambda ()
                               (#{fval 19542}#
                                 #{e 19497}#
                                 #{r 19498}#
                                 #{w 19499}#))
                             (lambda (#{e 19567}#
                                      #{r 19568}#
                                      #{w 19569}#
                                      #{s 19570}#
                                      #{mod 19571}#)
                               (#{syntax-type 4449}#
                                 #{e 19567}#
                                 #{r 19568}#
                                 #{w 19569}#
                                 #{s 19570}#
                                 #{rib 19501}#
                                 #{mod 19571}#
                                 #{for-car? 19503}#)))
                           (if (eqv? #{ftype 19541}# 'core)
                             (values
                               'core-form
                               #{fval 19542}#
                               #{e 19497}#
                               #{w 19499}#
                               #{s 19500}#
                               #{mod 19502}#)
                             (if (eqv? #{ftype 19541}# 'local-syntax)
                               (values
                                 'local-syntax-form
                                 #{fval 19542}#
                                 #{e 19497}#
                                 #{w 19499}#
                                 #{s 19500}#
                                 #{mod 19502}#)
                               (if (eqv? #{ftype 19541}# 'begin)
                                 (values
                                   'begin-form
                                   #f
                                   #{e 19497}#
                                   #{w 19499}#
                                   #{s 19500}#
                                   #{mod 19502}#)
                                 (if (eqv? #{ftype 19541}# 'eval-when)
                                   (values
                                     'eval-when-form
                                     #f
                                     #{e 19497}#
                                     #{w 19499}#
                                     #{s 19500}#
                                     #{mod 19502}#)
                                   (if (eqv? #{ftype 19541}# 'define)
                                     (let ((#{tmp 19588}#
                                             ($sc-dispatch
                                               #{e 19497}#
                                               '(_ any any))))
                                       (if (if #{tmp 19588}#
                                             (@apply
                                               (lambda (#{name 19592}#
                                                        #{val 19593}#)
                                                 (if (symbol? #{name 19592}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 19592}#)
                                                         (if (= (vector-length
                                                                  #{name 19592}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 19592}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 19592}#
                                                         1))
                                                     #f)))
                                               #{tmp 19588}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 19620}#
                                                    #{val 19621}#)
                                             (values
                                               'define-form
                                               #{name 19620}#
                                               #{val 19621}#
                                               #{w 19499}#
                                               #{s 19500}#
                                               #{mod 19502}#))
                                           #{tmp 19588}#)
                                         (let ((#{tmp 19622}#
                                                 ($sc-dispatch
                                                   #{e 19497}#
                                                   '(_ (any . any)
                                                       any
                                                       .
                                                       each-any))))
                                           (if (if #{tmp 19622}#
                                                 (@apply
                                                   (lambda (#{name 19626}#
                                                            #{args 19627}#
                                                            #{e1 19628}#
                                                            #{e2 19629}#)
                                                     (if (if (symbol?
                                                               #{name 19626}#)
                                                           #t
                                                           (if (if (vector?
                                                                     #{name 19626}#)
                                                                 (if (= (vector-length
                                                                          #{name 19626}#)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          #{name 19626}#
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 #{name 19626}#
                                                                 1))
                                                             #f))
                                                       (#{valid-bound-ids? 4440}#
                                                         (letrec*
                                                           ((#{lvl 19778}#
                                                              (lambda (#{vars 19780}#
                                                                       #{ls 19781}#
                                                                       #{w 19782}#)
                                                                (if (pair? #{vars 19780}#)
                                                                  (#{lvl 19778}#
                                                                    (cdr #{vars 19780}#)
                                                                    (cons (#{wrap 4443}#
                                                                            (car #{vars 19780}#)
                                                                            #{w 19782}#
                                                                            #f)
                                                                          #{ls 19781}#)
                                                                    #{w 19782}#)
                                                                  (if (if (symbol?
                                                                            #{vars 19780}#)
                                                                        #t
                                                                        (if (if (vector?
                                                                                  #{vars 19780}#)
                                                                              (if (= (vector-length
                                                                                       #{vars 19780}#)
                                                                                     4)
                                                                                (eq? (vector-ref
                                                                                       #{vars 19780}#
                                                                                       0)
                                                                                     'syntax-object)
                                                                                #f)
                                                                              #f)
                                                                          (symbol?
                                                                            (vector-ref
                                                                              #{vars 19780}#
                                                                              1))
                                                                          #f))
                                                                    (cons (#{wrap 4443}#
                                                                            #{vars 19780}#
                                                                            #{w 19782}#
                                                                            #f)
                                                                          #{ls 19781}#)
                                                                    (if (null? #{vars 19780}#)
                                                                      #{ls 19781}#
                                                                      (if (if (vector?
                                                                                #{vars 19780}#)
                                                                            (if (= (vector-length
                                                                                     #{vars 19780}#)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     #{vars 19780}#
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (#{lvl 19778}#
                                                                          (vector-ref
                                                                            #{vars 19780}#
                                                                            1)
                                                                          #{ls 19781}#
                                                                          (#{join-wraps 4431}#
                                                                            #{w 19782}#
                                                                            (vector-ref
                                                                              #{vars 19780}#
                                                                              2)))
                                                                        (cons #{vars 19780}#
                                                                              #{ls 19781}#))))))))
                                                           (#{lvl 19778}#
                                                             #{args 19627}#
                                                             '()
                                                             '(()))))
                                                       #f))
                                                   #{tmp 19622}#)
                                                 #f)
                                             (@apply
                                               (lambda (#{name 19826}#
                                                        #{args 19827}#
                                                        #{e1 19828}#
                                                        #{e2 19829}#)
                                                 (values
                                                   'define-form
                                                   (#{wrap 4443}#
                                                     #{name 19826}#
                                                     #{w 19499}#
                                                     #{mod 19502}#)
                                                   (let ((#{e 19835}#
                                                           (cons '#(syntax-object
                                                                    lambda
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(name
                                                                         args
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1899"
                                                                         "i1900"
                                                                         "i1901"
                                                                         "i1902"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(ftype
                                                                         fval
                                                                         fe
                                                                         fw
                                                                         fs
                                                                         fmod)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1852"
                                                                         "i1853"
                                                                         "i1854"
                                                                         "i1855"
                                                                         "i1856"
                                                                         "i1857"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(first)
                                                                       #((top))
                                                                       #("i1844"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(e
                                                                         r
                                                                         w
                                                                         s
                                                                         rib
                                                                         mod
                                                                         for-car?)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1816"
                                                                         "i1817"
                                                                         "i1818"
                                                                         "i1819"
                                                                         "i1820"
                                                                         "i1821"
                                                                         "i1822"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i473"
                                                                        "i471"
                                                                        "i469"
                                                                        "i467"
                                                                        "i465"
                                                                        "i463"
                                                                        "i461"
                                                                        "i459"
                                                                        "i457"
                                                                        "i455"
                                                                        "i453"
                                                                        "i451"
                                                                        "i449"
                                                                        "i447"
                                                                        "i445"
                                                                        "i443"
                                                                        "i441"
                                                                        "i439"
                                                                        "i437"
                                                                        "i435"
                                                                        "i433"
                                                                        "i431"
                                                                        "i429"
                                                                        "i427"
                                                                        "i425"
                                                                        "i423"
                                                                        "i421"
                                                                        "i419"
                                                                        "i417"
                                                                        "i415"
                                                                        "i413"
                                                                        "i411"
                                                                        "i409"
                                                                        "i407"
                                                                        "i405"
                                                                        "i403"
                                                                        "i401"
                                                                        "i399"
                                                                        "i398"
                                                                        "i396"
                                                                        "i393"
                                                                        "i392"
                                                                        "i391"
                                                                        "i389"
                                                                        "i388"
                                                                        "i386"
                                                                        "i384"
                                                                        "i382"
                                                                        "i380"
                                                                        "i378"
                                                                        "i376"
                                                                        "i374"
                                                                        "i372"
                                                                        "i369"
                                                                        "i367"
                                                                        "i366"
                                                                        "i364"
                                                                        "i362"
                                                                        "i360"
                                                                        "i358"
                                                                        "i357"
                                                                        "i356"
                                                                        "i355"
                                                                        "i353"
                                                                        "i352"
                                                                        "i349"
                                                                        "i347"
                                                                        "i345"
                                                                        "i343"
                                                                        "i341"
                                                                        "i339"
                                                                        "i337"
                                                                        "i336"
                                                                        "i335"
                                                                        "i333"
                                                                        "i331"
                                                                        "i330"
                                                                        "i327"
                                                                        "i326"
                                                                        "i324"
                                                                        "i322"
                                                                        "i320"
                                                                        "i318"
                                                                        "i316"
                                                                        "i314"
                                                                        "i312"
                                                                        "i310"
                                                                        "i308"
                                                                        "i305"
                                                                        "i303"
                                                                        "i301"
                                                                        "i299"
                                                                        "i297"
                                                                        "i295"
                                                                        "i293"
                                                                        "i291"
                                                                        "i289"
                                                                        "i287"
                                                                        "i285"
                                                                        "i283"
                                                                        "i281"
                                                                        "i279"
                                                                        "i277"
                                                                        "i275"
                                                                        "i273"
                                                                        "i271"
                                                                        "i269"
                                                                        "i267"
                                                                        "i265"
                                                                        "i263"
                                                                        "i261"
                                                                        "i260"
                                                                        "i257"
                                                                        "i255"
                                                                        "i254"
                                                                        "i253"
                                                                        "i252"
                                                                        "i251"
                                                                        "i249"
                                                                        "i247"
                                                                        "i245"
                                                                        "i242"
                                                                        "i240"
                                                                        "i238"
                                                                        "i236"
                                                                        "i234"
                                                                        "i232"
                                                                        "i230"
                                                                        "i228"
                                                                        "i226"
                                                                        "i224"
                                                                        "i222"
                                                                        "i220"
                                                                        "i218"
                                                                        "i216"
                                                                        "i214"
                                                                        "i212"
                                                                        "i210"
                                                                        "i208"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("i46"
                                                                        "i45"
                                                                        "i44")))
                                                                    (hygiene
                                                                      guile))
                                                                 (#{wrap 4443}#
                                                                   (cons #{args 19827}#
                                                                         (cons #{e1 19828}#
                                                                               #{e2 19829}#))
                                                                   #{w 19499}#
                                                                   #{mod 19502}#))))
                                                     (begin
                                                       (if (if (pair? #{e 19835}#)
                                                             #{s 19500}#
                                                             #f)
                                                         (set-source-properties!
                                                           #{e 19835}#
                                                           #{s 19500}#))
                                                       #{e 19835}#))
                                                   '(())
                                                   #{s 19500}#
                                                   #{mod 19502}#))
                                               #{tmp 19622}#)
                                             (let ((#{tmp 19842}#
                                                     ($sc-dispatch
                                                       #{e 19497}#
                                                       '(_ any))))
                                               (if (if #{tmp 19842}#
                                                     (@apply
                                                       (lambda (#{name 19846}#)
                                                         (if (symbol?
                                                               #{name 19846}#)
                                                           #t
                                                           (if (if (vector?
                                                                     #{name 19846}#)
                                                                 (if (= (vector-length
                                                                          #{name 19846}#)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          #{name 19846}#
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 #{name 19846}#
                                                                 1))
                                                             #f)))
                                                       #{tmp 19842}#)
                                                     #f)
                                                 (@apply
                                                   (lambda (#{name 19873}#)
                                                     (values
                                                       'define-form
                                                       (#{wrap 4443}#
                                                         #{name 19873}#
                                                         #{w 19499}#
                                                         #{mod 19502}#)
                                                       '(#(syntax-object
                                                           if
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("i1912"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i1852"
                                                                "i1853"
                                                                "i1854"
                                                                "i1855"
                                                                "i1856"
                                                                "i1857"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("i1844"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i1816"
                                                                "i1817"
                                                                "i1818"
                                                                "i1819"
                                                                "i1820"
                                                                "i1821"
                                                                "i1822"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i473"
                                                               "i471"
                                                               "i469"
                                                               "i467"
                                                               "i465"
                                                               "i463"
                                                               "i461"
                                                               "i459"
                                                               "i457"
                                                               "i455"
                                                               "i453"
                                                               "i451"
                                                               "i449"
                                                               "i447"
                                                               "i445"
                                                               "i443"
                                                               "i441"
                                                               "i439"
                                                               "i437"
                                                               "i435"
                                                               "i433"
                                                               "i431"
                                                               "i429"
                                                               "i427"
                                                               "i425"
                                                               "i423"
                                                               "i421"
                                                               "i419"
                                                               "i417"
                                                               "i415"
                                                               "i413"
                                                               "i411"
                                                               "i409"
                                                               "i407"
                                                               "i405"
                                                               "i403"
                                                               "i401"
                                                               "i399"
                                                               "i398"
                                                               "i396"
                                                               "i393"
                                                               "i392"
                                                               "i391"
                                                               "i389"
                                                               "i388"
                                                               "i386"
                                                               "i384"
                                                               "i382"
                                                               "i380"
                                                               "i378"
                                                               "i376"
                                                               "i374"
                                                               "i372"
                                                               "i369"
                                                               "i367"
                                                               "i366"
                                                               "i364"
                                                               "i362"
                                                               "i360"
                                                               "i358"
                                                               "i357"
                                                               "i356"
                                                               "i355"
                                                               "i353"
                                                               "i352"
                                                               "i349"
                                                               "i347"
                                                               "i345"
                                                               "i343"
                                                               "i341"
                                                               "i339"
                                                               "i337"
                                                               "i336"
                                                               "i335"
                                                               "i333"
                                                               "i331"
                                                               "i330"
                                                               "i327"
                                                               "i326"
                                                               "i324"
                                                               "i322"
                                                               "i320"
                                                               "i318"
                                                               "i316"
                                                               "i314"
                                                               "i312"
                                                               "i310"
                                                               "i308"
                                                               "i305"
                                                               "i303"
                                                               "i301"
                                                               "i299"
                                                               "i297"
                                                               "i295"
                                                               "i293"
                                                               "i291"
                                                               "i289"
                                                               "i287"
                                                               "i285"
                                                               "i283"
                                                               "i281"
                                                               "i279"
                                                               "i277"
                                                               "i275"
                                                               "i273"
                                                               "i271"
                                                               "i269"
                                                               "i267"
                                                               "i265"
                                                               "i263"
                                                               "i261"
                                                               "i260"
                                                               "i257"
                                                               "i255"
                                                               "i254"
                                                               "i253"
                                                               "i252"
                                                               "i251"
                                                               "i249"
                                                               "i247"
                                                               "i245"
                                                               "i242"
                                                               "i240"
                                                               "i238"
                                                               "i236"
                                                               "i234"
                                                               "i232"
                                                               "i230"
                                                               "i228"
                                                               "i226"
                                                               "i224"
                                                               "i222"
                                                               "i220"
                                                               "i218"
                                                               "i216"
                                                               "i214"
                                                               "i212"
                                                               "i210"
                                                               "i208"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("i46"
                                                               "i45"
                                                               "i44")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("i1912"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i1852"
                                                                "i1853"
                                                                "i1854"
                                                                "i1855"
                                                                "i1856"
                                                                "i1857"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("i1844"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i1816"
                                                                "i1817"
                                                                "i1818"
                                                                "i1819"
                                                                "i1820"
                                                                "i1821"
                                                                "i1822"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i473"
                                                               "i471"
                                                               "i469"
                                                               "i467"
                                                               "i465"
                                                               "i463"
                                                               "i461"
                                                               "i459"
                                                               "i457"
                                                               "i455"
                                                               "i453"
                                                               "i451"
                                                               "i449"
                                                               "i447"
                                                               "i445"
                                                               "i443"
                                                               "i441"
                                                               "i439"
                                                               "i437"
                                                               "i435"
                                                               "i433"
                                                               "i431"
                                                               "i429"
                                                               "i427"
                                                               "i425"
                                                               "i423"
                                                               "i421"
                                                               "i419"
                                                               "i417"
                                                               "i415"
                                                               "i413"
                                                               "i411"
                                                               "i409"
                                                               "i407"
                                                               "i405"
                                                               "i403"
                                                               "i401"
                                                               "i399"
                                                               "i398"
                                                               "i396"
                                                               "i393"
                                                               "i392"
                                                               "i391"
                                                               "i389"
                                                               "i388"
                                                               "i386"
                                                               "i384"
                                                               "i382"
                                                               "i380"
                                                               "i378"
                                                               "i376"
                                                               "i374"
                                                               "i372"
                                                               "i369"
                                                               "i367"
                                                               "i366"
                                                               "i364"
                                                               "i362"
                                                               "i360"
                                                               "i358"
                                                               "i357"
                                                               "i356"
                                                               "i355"
                                                               "i353"
                                                               "i352"
                                                               "i349"
                                                               "i347"
                                                               "i345"
                                                               "i343"
                                                               "i341"
                                                               "i339"
                                                               "i337"
                                                               "i336"
                                                               "i335"
                                                               "i333"
                                                               "i331"
                                                               "i330"
                                                               "i327"
                                                               "i326"
                                                               "i324"
                                                               "i322"
                                                               "i320"
                                                               "i318"
                                                               "i316"
                                                               "i314"
                                                               "i312"
                                                               "i310"
                                                               "i308"
                                                               "i305"
                                                               "i303"
                                                               "i301"
                                                               "i299"
                                                               "i297"
                                                               "i295"
                                                               "i293"
                                                               "i291"
                                                               "i289"
                                                               "i287"
                                                               "i285"
                                                               "i283"
                                                               "i281"
                                                               "i279"
                                                               "i277"
                                                               "i275"
                                                               "i273"
                                                               "i271"
                                                               "i269"
                                                               "i267"
                                                               "i265"
                                                               "i263"
                                                               "i261"
                                                               "i260"
                                                               "i257"
                                                               "i255"
                                                               "i254"
                                                               "i253"
                                                               "i252"
                                                               "i251"
                                                               "i249"
                                                               "i247"
                                                               "i245"
                                                               "i242"
                                                               "i240"
                                                               "i238"
                                                               "i236"
                                                               "i234"
                                                               "i232"
                                                               "i230"
                                                               "i228"
                                                               "i226"
                                                               "i224"
                                                               "i222"
                                                               "i220"
                                                               "i218"
                                                               "i216"
                                                               "i214"
                                                               "i212"
                                                               "i210"
                                                               "i208"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("i46"
                                                               "i45"
                                                               "i44")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("i1912"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i1852"
                                                                "i1853"
                                                                "i1854"
                                                                "i1855"
                                                                "i1856"
                                                                "i1857"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("i1844"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i1816"
                                                                "i1817"
                                                                "i1818"
                                                                "i1819"
                                                                "i1820"
                                                                "i1821"
                                                                "i1822"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i473"
                                                               "i471"
                                                               "i469"
                                                               "i467"
                                                               "i465"
                                                               "i463"
                                                               "i461"
                                                               "i459"
                                                               "i457"
                                                               "i455"
                                                               "i453"
                                                               "i451"
                                                               "i449"
                                                               "i447"
                                                               "i445"
                                                               "i443"
                                                               "i441"
                                                               "i439"
                                                               "i437"
                                                               "i435"
                                                               "i433"
                                                               "i431"
                                                               "i429"
                                                               "i427"
                                                               "i425"
                                                               "i423"
                                                               "i421"
                                                               "i419"
                                                               "i417"
                                                               "i415"
                                                               "i413"
                                                               "i411"
                                                               "i409"
                                                               "i407"
                                                               "i405"
                                                               "i403"
                                                               "i401"
                                                               "i399"
                                                               "i398"
                                                               "i396"
                                                               "i393"
                                                               "i392"
                                                               "i391"
                                                               "i389"
                                                               "i388"
                                                               "i386"
                                                               "i384"
                                                               "i382"
                                                               "i380"
                                                               "i378"
                                                               "i376"
                                                               "i374"
                                                               "i372"
                                                               "i369"
                                                               "i367"
                                                               "i366"
                                                               "i364"
                                                               "i362"
                                                               "i360"
                                                               "i358"
                                                               "i357"
                                                               "i356"
                                                               "i355"
                                                               "i353"
                                                               "i352"
                                                               "i349"
                                                               "i347"
                                                               "i345"
                                                               "i343"
                                                               "i341"
                                                               "i339"
                                                               "i337"
                                                               "i336"
                                                               "i335"
                                                               "i333"
                                                               "i331"
                                                               "i330"
                                                               "i327"
                                                               "i326"
                                                               "i324"
                                                               "i322"
                                                               "i320"
                                                               "i318"
                                                               "i316"
                                                               "i314"
                                                               "i312"
                                                               "i310"
                                                               "i308"
                                                               "i305"
                                                               "i303"
                                                               "i301"
                                                               "i299"
                                                               "i297"
                                                               "i295"
                                                               "i293"
                                                               "i291"
                                                               "i289"
                                                               "i287"
                                                               "i285"
                                                               "i283"
                                                               "i281"
                                                               "i279"
                                                               "i277"
                                                               "i275"
                                                               "i273"
                                                               "i271"
                                                               "i269"
                                                               "i267"
                                                               "i265"
                                                               "i263"
                                                               "i261"
                                                               "i260"
                                                               "i257"
                                                               "i255"
                                                               "i254"
                                                               "i253"
                                                               "i252"
                                                               "i251"
                                                               "i249"
                                                               "i247"
                                                               "i245"
                                                               "i242"
                                                               "i240"
                                                               "i238"
                                                               "i236"
                                                               "i234"
                                                               "i232"
                                                               "i230"
                                                               "i228"
                                                               "i226"
                                                               "i224"
                                                               "i222"
                                                               "i220"
                                                               "i218"
                                                               "i216"
                                                               "i214"
                                                               "i212"
                                                               "i210"
                                                               "i208"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("i46"
                                                               "i45"
                                                               "i44")))
                                                           (hygiene guile)))
                                                       '(())
                                                       #{s 19500}#
                                                       #{mod 19502}#))
                                                   #{tmp 19842}#)
                                                 (syntax-violation
                                                   #f
                                                   "source expression failed to match any pattern"
                                                   #{e 19497}#)))))))
                                     (if (eqv? #{ftype 19541}# 'define-syntax)
                                       (let ((#{tmp 19892}#
                                               ($sc-dispatch
                                                 #{e 19497}#
                                                 '(_ any any))))
                                         (if (if #{tmp 19892}#
                                               (@apply
                                                 (lambda (#{name 19896}#
                                                          #{val 19897}#)
                                                   (if (symbol? #{name 19896}#)
                                                     #t
                                                     (if (if (vector?
                                                               #{name 19896}#)
                                                           (if (= (vector-length
                                                                    #{name 19896}#)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    #{name 19896}#
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           #{name 19896}#
                                                           1))
                                                       #f)))
                                                 #{tmp 19892}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 19924}#
                                                      #{val 19925}#)
                                               (values
                                                 'define-syntax-form
                                                 #{name 19924}#
                                                 #{val 19925}#
                                                 #{w 19499}#
                                                 #{s 19500}#
                                                 #{mod 19502}#))
                                             #{tmp 19892}#)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             #{e 19497}#)))
                                       (if (eqv? #{ftype 19541}#
                                                 'define-syntax-parameter)
                                         (let ((#{tmp 19936}#
                                                 ($sc-dispatch
                                                   #{e 19497}#
                                                   '(_ any any))))
                                           (if (if #{tmp 19936}#
                                                 (@apply
                                                   (lambda (#{name 19940}#
                                                            #{val 19941}#)
                                                     (if (symbol?
                                                           #{name 19940}#)
                                                       #t
                                                       (if (if (vector?
                                                                 #{name 19940}#)
                                                             (if (= (vector-length
                                                                      #{name 19940}#)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      #{name 19940}#
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (symbol?
                                                           (vector-ref
                                                             #{name 19940}#
                                                             1))
                                                         #f)))
                                                   #{tmp 19936}#)
                                                 #f)
                                             (@apply
                                               (lambda (#{name 19968}#
                                                        #{val 19969}#)
                                                 (values
                                                   'define-syntax-parameter-form
                                                   #{name 19968}#
                                                   #{val 19969}#
                                                   #{w 19499}#
                                                   #{s 19500}#
                                                   #{mod 19502}#))
                                               #{tmp 19936}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{e 19497}#)))
                                         (values
                                           'call
                                           #f
                                           #{e 19497}#
                                           #{w 19499}#
                                           #{s 19500}#
                                           #{mod 19502}#)))))))))))))))
             (if (if (vector? #{e 19497}#)
                   (if (= (vector-length #{e 19497}#) 4)
                     (eq? (vector-ref #{e 19497}# 0) 'syntax-object)
                     #f)
                   #f)
               (#{syntax-type 4449}#
                 (vector-ref #{e 19497}# 1)
                 #{r 19498}#
                 (#{join-wraps 4431}#
                   #{w 19499}#
                   (vector-ref #{e 19497}# 2))
                 (let ((#{t 19996}#
                         (#{source-annotation 4408}# #{e 19497}#)))
                   (if #{t 19996}# #{t 19996}# #{s 19500}#))
                 #{rib 19501}#
                 (let ((#{t 20231}# (vector-ref #{e 19497}# 3)))
                   (if #{t 20231}# #{t 20231}# #{mod 19502}#))
                 #{for-car? 19503}#)
               (if (self-evaluating? #{e 19497}#)
                 (values
                   'constant
                   #f
                   #{e 19497}#
                   #{w 19499}#
                   #{s 19500}#
                   #{mod 19502}#)
                 (values
                   'other
                   #f
                   #{e 19497}#
                   #{w 19499}#
                   #{s 19500}#
                   #{mod 19502}#)))))))
     (#{expand 4450}#
       (lambda (#{e 20240}#
                #{r 20241}#
                #{w 20242}#
                #{mod 20243}#)
         (call-with-values
           (lambda ()
             (#{syntax-type 4449}#
               #{e 20240}#
               #{r 20241}#
               #{w 20242}#
               (#{source-annotation 4408}# #{e 20240}#)
               #f
               #{mod 20243}#
               #f))
           (lambda (#{type 20398}#
                    #{value 20399}#
                    #{e 20400}#
                    #{w 20401}#
                    #{s 20402}#
                    #{mod 20403}#)
             (#{expand-expr 4451}#
               #{type 20398}#
               #{value 20399}#
               #{e 20400}#
               #{r 20241}#
               #{w 20401}#
               #{s 20402}#
               #{mod 20403}#)))))
     (#{expand-expr 4451}#
       (lambda (#{type 20406}#
                #{value 20407}#
                #{e 20408}#
                #{r 20409}#
                #{w 20410}#
                #{s 20411}#
                #{mod 20412}#)
         (if (eqv? #{type 20406}# 'lexical)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 3)
             #{s 20411}#
             #{e 20408}#
             #{value 20407}#)
           (if (if (eqv? #{type 20406}# 'core)
                 #t
                 (eqv? #{type 20406}# 'core-form))
             (#{value 20407}#
               #{e 20408}#
               #{r 20409}#
               #{w 20410}#
               #{s 20411}#
               #{mod 20412}#)
             (if (eqv? #{type 20406}# 'module-ref)
               (call-with-values
                 (lambda ()
                   (#{value 20407}#
                     #{e 20408}#
                     #{r 20409}#
                     #{w 20410}#))
                 (lambda (#{e 20438}#
                          #{r 20439}#
                          #{w 20440}#
                          #{s 20441}#
                          #{mod 20442}#)
                   (#{expand 4450}#
                     #{e 20438}#
                     #{r 20439}#
                     #{w 20440}#
                     #{mod 20442}#)))
               (if (eqv? #{type 20406}# 'lexical-call)
                 (#{expand-application 4452}#
                   (let ((#{id 20517}# (car #{e 20408}#)))
                     (#{build-lexical-reference 4385}#
                       'fun
                       (#{source-annotation 4408}# #{id 20517}#)
                       (if (if (vector? #{id 20517}#)
                             (if (= (vector-length #{id 20517}#) 4)
                               (eq? (vector-ref #{id 20517}# 0) 'syntax-object)
                               #f)
                             #f)
                         (syntax->datum #{id 20517}#)
                         #{id 20517}#)
                       #{value 20407}#))
                   #{e 20408}#
                   #{r 20409}#
                   #{w 20410}#
                   #{s 20411}#
                   #{mod 20412}#)
                 (if (eqv? #{type 20406}# 'global-call)
                   (#{expand-application 4452}#
                     (#{build-global-reference 4388}#
                       (#{source-annotation 4408}# (car #{e 20408}#))
                       (if (if (vector? #{value 20407}#)
                             (if (= (vector-length #{value 20407}#) 4)
                               (eq? (vector-ref #{value 20407}# 0)
                                    'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{value 20407}# 1)
                         #{value 20407}#)
                       (if (if (vector? #{value 20407}#)
                             (if (= (vector-length #{value 20407}#) 4)
                               (eq? (vector-ref #{value 20407}# 0)
                                    'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{value 20407}# 3)
                         #{mod 20412}#))
                     #{e 20408}#
                     #{r 20409}#
                     #{w 20410}#
                     #{s 20411}#
                     #{mod 20412}#)
                   (if (eqv? #{type 20406}# 'constant)
                     (let ((#{exp 20854}#
                             (#{strip 4463}#
                               (#{wrap 4443}#
                                 (begin
                                   (if (if (pair? #{e 20408}#) #{s 20411}# #f)
                                     (set-source-properties!
                                       #{e 20408}#
                                       #{s 20411}#))
                                   #{e 20408}#)
                                 #{w 20410}#
                                 #{mod 20412}#)
                               '(()))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #{s 20411}#
                         #{exp 20854}#))
                     (if (eqv? #{type 20406}# 'global)
                       (#{analyze-variable 4387}#
                         #{mod 20412}#
                         #{value 20407}#
                         (lambda (#{mod 20890}#
                                  #{var 20891}#
                                  #{public? 20892}#)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #{s 20411}#
                             #{mod 20890}#
                             #{var 20891}#
                             #{public? 20892}#))
                         (lambda (#{var 20901}#)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #{s 20411}#
                             #{var 20901}#)))
                       (if (eqv? #{type 20406}# 'call)
                         (#{expand-application 4452}#
                           (#{expand 4450}#
                             (car #{e 20408}#)
                             #{r 20409}#
                             #{w 20410}#
                             #{mod 20412}#)
                           #{e 20408}#
                           #{r 20409}#
                           #{w 20410}#
                           #{s 20411}#
                           #{mod 20412}#)
                         (if (eqv? #{type 20406}# 'begin-form)
                           (let ((#{tmp 20976}#
                                   ($sc-dispatch
                                     #{e 20408}#
                                     '(_ any . each-any))))
                             (if #{tmp 20976}#
                               (@apply
                                 (lambda (#{e1 20980}# #{e2 20981}#)
                                   (#{expand-sequence 4445}#
                                     (cons #{e1 20980}# #{e2 20981}#)
                                     #{r 20409}#
                                     #{w 20410}#
                                     #{s 20411}#
                                     #{mod 20412}#))
                                 #{tmp 20976}#)
                               (let ((#{tmp 21068}#
                                       ($sc-dispatch #{e 20408}# '(_))))
                                 (if #{tmp 21068}#
                                   (@apply
                                     (lambda ()
                                       (if (include-deprecated-features)
                                         (begin
                                           (issue-deprecation-warning
                                             "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))
                                         (syntax-violation
                                           #f
                                           "sequence of zero expressions"
                                           (#{wrap 4443}#
                                             (begin
                                               (if (if (pair? #{e 20408}#)
                                                     #{s 20411}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 20408}#
                                                   #{s 20411}#))
                                               #{e 20408}#)
                                             #{w 20410}#
                                             #{mod 20412}#))))
                                     #{tmp 21068}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{e 20408}#)))))
                           (if (eqv? #{type 20406}# 'local-syntax-form)
                             (#{expand-local-syntax 4455}#
                               #{value 20407}#
                               #{e 20408}#
                               #{r 20409}#
                               #{w 20410}#
                               #{s 20411}#
                               #{mod 20412}#
                               #{expand-sequence 4445}#)
                             (if (eqv? #{type 20406}# 'eval-when-form)
                               (let ((#{tmp 21179}#
                                       ($sc-dispatch
                                         #{e 20408}#
                                         '(_ each-any any . each-any))))
                                 (if #{tmp 21179}#
                                   (@apply
                                     (lambda (#{x 21183}#
                                              #{e1 21184}#
                                              #{e2 21185}#)
                                       (let ((#{when-list 21186}#
                                               (#{parse-when-list 4448}#
                                                 #{e 20408}#
                                                 #{x 21183}#)))
                                         (if (memq 'eval #{when-list 21186}#)
                                           (#{expand-sequence 4445}#
                                             (cons #{e1 21184}# #{e2 21185}#)
                                             #{r 20409}#
                                             #{w 20410}#
                                             #{s 20411}#
                                             #{mod 20412}#)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))))
                                     #{tmp 21179}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{e 20408}#)))
                               (if (if (eqv? #{type 20406}# 'define-form)
                                     #t
                                     (if (eqv? #{type 20406}#
                                               'define-syntax-form)
                                       #t
                                       (eqv? #{type 20406}#
                                             'define-syntax-parameter-form)))
                                 (syntax-violation
                                   #f
                                   "definition in expression context"
                                   #{e 20408}#
                                   (#{wrap 4443}#
                                     #{value 20407}#
                                     #{w 20410}#
                                     #{mod 20412}#))
                                 (if (eqv? #{type 20406}# 'syntax)
                                   (syntax-violation
                                     #f
                                     "reference to pattern variable outside syntax form"
                                     (#{wrap 4443}#
                                       (begin
                                         (if (if (pair? #{e 20408}#)
                                               #{s 20411}#
                                               #f)
                                           (set-source-properties!
                                             #{e 20408}#
                                             #{s 20411}#))
                                         #{e 20408}#)
                                       #{w 20410}#
                                       #{mod 20412}#))
                                   (if (eqv? #{type 20406}# 'displaced-lexical)
                                     (syntax-violation
                                       #f
                                       "reference to identifier outside its scope"
                                       (#{wrap 4443}#
                                         (begin
                                           (if (if (pair? #{e 20408}#)
                                                 #{s 20411}#
                                                 #f)
                                             (set-source-properties!
                                               #{e 20408}#
                                               #{s 20411}#))
                                           #{e 20408}#)
                                         #{w 20410}#
                                         #{mod 20412}#))
                                     (syntax-violation
                                       #f
                                       "unexpected syntax"
                                       (#{wrap 4443}#
                                         (begin
                                           (if (if (pair? #{e 20408}#)
                                                 #{s 20411}#
                                                 #f)
                                             (set-source-properties!
                                               #{e 20408}#
                                               #{s 20411}#))
                                           #{e 20408}#)
                                         #{w 20410}#
                                         #{mod 20412}#))))))))))))))))))
     (#{expand-application 4452}#
       (lambda (#{x 21426}#
                #{e 21427}#
                #{r 21428}#
                #{w 21429}#
                #{s 21430}#
                #{mod 21431}#)
         (let ((#{tmp 21433}#
                 ($sc-dispatch #{e 21427}# '(any . each-any))))
           (if #{tmp 21433}#
             (@apply
               (lambda (#{e0 21437}# #{e1 21438}#)
                 (#{build-application 4382}#
                   #{s 21430}#
                   #{x 21426}#
                   (map (lambda (#{e 21518}#)
                          (#{expand 4450}#
                            #{e 21518}#
                            #{r 21428}#
                            #{w 21429}#
                            #{mod 21431}#))
                        #{e1 21438}#)))
               #{tmp 21433}#)
             (syntax-violation
               #f
               "source expression failed to match any pattern"
               #{e 21427}#)))))
     (#{expand-macro 4453}#
       (lambda (#{p 21594}#
                #{e 21595}#
                #{r 21596}#
                #{w 21597}#
                #{s 21598}#
                #{rib 21599}#
                #{mod 21600}#)
         (letrec*
           ((#{rebuild-macro-output 21601}#
              (lambda (#{x 21633}# #{m 21634}#)
                (if (pair? #{x 21633}#)
                  (let ((#{e 21638}#
                          (cons (#{rebuild-macro-output 21601}#
                                  (car #{x 21633}#)
                                  #{m 21634}#)
                                (#{rebuild-macro-output 21601}#
                                  (cdr #{x 21633}#)
                                  #{m 21634}#))))
                    (begin
                      (if (if (pair? #{e 21638}#) #{s 21598}# #f)
                        (set-source-properties! #{e 21638}# #{s 21598}#))
                      #{e 21638}#))
                  (if (if (vector? #{x 21633}#)
                        (if (= (vector-length #{x 21633}#) 4)
                          (eq? (vector-ref #{x 21633}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{w 21654}# (vector-ref #{x 21633}# 2)))
                      (let ((#{ms 21655}# (car #{w 21654}#))
                            (#{s 21656}# (cdr #{w 21654}#)))
                        (if (if (pair? #{ms 21655}#)
                              (eq? (car #{ms 21655}#) #f)
                              #f)
                          (let ((#{expression 21664}#
                                  (vector-ref #{x 21633}# 1))
                                (#{wrap 21665}#
                                  (cons (cdr #{ms 21655}#)
                                        (if #{rib 21599}#
                                          (cons #{rib 21599}#
                                                (cdr #{s 21656}#))
                                          (cdr #{s 21656}#))))
                                (#{module 21666}# (vector-ref #{x 21633}# 3)))
                            (vector
                              'syntax-object
                              #{expression 21664}#
                              #{wrap 21665}#
                              #{module 21666}#))
                          (let ((#{expression 21676}#
                                  (let ((#{e 21681}#
                                          (vector-ref #{x 21633}# 1)))
                                    (begin
                                      (if (if (pair? #{e 21681}#)
                                            #{s 21656}#
                                            #f)
                                        (set-source-properties!
                                          #{e 21681}#
                                          #{s 21656}#))
                                      #{e 21681}#)))
                                (#{wrap 21677}#
                                  (cons (cons #{m 21634}# #{ms 21655}#)
                                        (if #{rib 21599}#
                                          (cons #{rib 21599}#
                                                (cons 'shift #{s 21656}#))
                                          (cons 'shift #{s 21656}#))))
                                (#{module 21678}# (vector-ref #{x 21633}# 3)))
                            (vector
                              'syntax-object
                              #{expression 21676}#
                              #{wrap 21677}#
                              #{module 21678}#)))))
                    (if (vector? #{x 21633}#)
                      (let ((#{n 21693}# (vector-length #{x 21633}#)))
                        (let ((#{v 21694}#
                                (let ((#{e 21702}# (make-vector #{n 21693}#)))
                                  (begin
                                    (if (if (pair? #{e 21702}#) #{x 21633}# #f)
                                      (set-source-properties!
                                        #{e 21702}#
                                        #{x 21633}#))
                                    #{e 21702}#))))
                          (letrec*
                            ((#{loop 21695}#
                               (lambda (#{i 21747}#)
                                 (if (= #{i 21747}# #{n 21693}#)
                                   #{v 21694}#
                                   (begin
                                     (vector-set!
                                       #{v 21694}#
                                       #{i 21747}#
                                       (#{rebuild-macro-output 21601}#
                                         (vector-ref #{x 21633}# #{i 21747}#)
                                         #{m 21634}#))
                                     (#{loop 21695}# (#{1+}# #{i 21747}#)))))))
                            (#{loop 21695}# 0))))
                      (if (symbol? #{x 21633}#)
                        (syntax-violation
                          #f
                          "encountered raw symbol in macro output"
                          (let ((#{s 21753}# (cdr #{w 21597}#)))
                            (#{wrap 4443}#
                              (begin
                                (if (if (pair? #{e 21595}#) #{s 21753}# #f)
                                  (set-source-properties!
                                    #{e 21595}#
                                    #{s 21753}#))
                                #{e 21595}#)
                              #{w 21597}#
                              #{mod 21600}#))
                          #{x 21633}#)
                        (begin
                          (if (if (pair? #{x 21633}#) #{s 21598}# #f)
                            (set-source-properties! #{x 21633}# #{s 21598}#))
                          #{x 21633}#))))))))
           (with-fluids
             ((#{transformer-environment 4436}#
                (lambda (#{k 21602}#)
                  (#{k 21602}#
                    #{e 21595}#
                    #{r 21596}#
                    #{w 21597}#
                    #{s 21598}#
                    #{rib 21599}#
                    #{mod 21600}#))))
             (#{rebuild-macro-output 21601}#
               (#{p 21594}#
                 (let ((#{w 21609}#
                         (cons (cons #f (car #{w 21597}#))
                               (cons 'shift (cdr #{w 21597}#)))))
                   (#{wrap 4443}#
                     (begin
                       (if (if (pair? #{e 21595}#) #{s 21598}# #f)
                         (set-source-properties! #{e 21595}# #{s 21598}#))
                       #{e 21595}#)
                     #{w 21609}#
                     #{mod 21600}#)))
               (gensym "m"))))))
     (#{expand-body 4454}#
       (lambda (#{body 21785}#
                #{outer-form 21786}#
                #{r 21787}#
                #{w 21788}#
                #{mod 21789}#)
         (let ((#{r 21790}#
                 (cons '("placeholder" placeholder) #{r 21787}#)))
           (let ((#{ribcage 21791}# (vector 'ribcage '() '() '())))
             (let ((#{w 21792}#
                     (cons (car #{w 21788}#)
                           (cons #{ribcage 21791}# (cdr #{w 21788}#)))))
               (letrec*
                 ((#{parse 21793}#
                    (lambda (#{body 21806}#
                             #{ids 21807}#
                             #{labels 21808}#
                             #{var-ids 21809}#
                             #{vars 21810}#
                             #{vals 21811}#
                             #{bindings 21812}#)
                      (if (null? #{body 21806}#)
                        (syntax-violation
                          #f
                          "no expressions in body"
                          #{outer-form 21786}#)
                        (let ((#{e 21813}# (cdr (car #{body 21806}#)))
                              (#{er 21814}# (car (car #{body 21806}#))))
                          (call-with-values
                            (lambda ()
                              (#{syntax-type 4449}#
                                #{e 21813}#
                                #{er 21814}#
                                '(())
                                (#{source-annotation 4408}# #{er 21814}#)
                                #{ribcage 21791}#
                                #{mod 21789}#
                                #f))
                            (lambda (#{type 21971}#
                                     #{value 21972}#
                                     #{e 21973}#
                                     #{w 21974}#
                                     #{s 21975}#
                                     #{mod 21976}#)
                              (if (eqv? #{type 21971}# 'define-form)
                                (let ((#{id 21980}#
                                        (#{wrap 4443}#
                                          #{value 21972}#
                                          #{w 21974}#
                                          #{mod 21976}#))
                                      (#{label 21981}#
                                        (symbol->string (gensym "i"))))
                                  (let ((#{var 21982}#
                                          (let ((#{id 22042}#
                                                  (if (if (vector?
                                                            #{id 21980}#)
                                                        (if (= (vector-length
                                                                 #{id 21980}#)
                                                               4)
                                                          (eq? (vector-ref
                                                                 #{id 21980}#
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref #{id 21980}# 1)
                                                    #{id 21980}#)))
                                            (gensym
                                              (string-append
                                                (symbol->string #{id 22042}#)
                                                " ")))))
                                    (begin
                                      (let ((#{update 22032}#
                                              (cons (vector-ref #{id 21980}# 1)
                                                    (vector-ref
                                                      #{ribcage 21791}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 21791}#
                                          1
                                          #{update 22032}#))
                                      (let ((#{update 22034}#
                                              (cons (car (vector-ref
                                                           #{id 21980}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 21791}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 21791}#
                                          2
                                          #{update 22034}#))
                                      (let ((#{update 22036}#
                                              (cons #{label 21981}#
                                                    (vector-ref
                                                      #{ribcage 21791}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 21791}#
                                          3
                                          #{update 22036}#))
                                      (#{parse 21793}#
                                        (cdr #{body 21806}#)
                                        (cons #{id 21980}# #{ids 21807}#)
                                        (cons #{label 21981}# #{labels 21808}#)
                                        (cons #{id 21980}# #{var-ids 21809}#)
                                        (cons #{var 21982}# #{vars 21810}#)
                                        (cons (cons #{er 21814}#
                                                    (#{wrap 4443}#
                                                      #{e 21973}#
                                                      #{w 21974}#
                                                      #{mod 21976}#))
                                              #{vals 21811}#)
                                        (cons (cons 'lexical #{var 21982}#)
                                              #{bindings 21812}#)))))
                                (if (if (eqv? #{type 21971}#
                                              'define-syntax-form)
                                      #t
                                      (eqv? #{type 21971}#
                                            'define-syntax-parameter-form))
                                  (let ((#{id 22075}#
                                          (#{wrap 4443}#
                                            #{value 21972}#
                                            #{w 21974}#
                                            #{mod 21976}#))
                                        (#{label 22076}#
                                          (symbol->string (gensym "i"))))
                                    (begin
                                      (let ((#{update 22126}#
                                              (cons (vector-ref #{id 22075}# 1)
                                                    (vector-ref
                                                      #{ribcage 21791}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 21791}#
                                          1
                                          #{update 22126}#))
                                      (let ((#{update 22128}#
                                              (cons (car (vector-ref
                                                           #{id 22075}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 21791}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 21791}#
                                          2
                                          #{update 22128}#))
                                      (let ((#{update 22130}#
                                              (cons #{label 22076}#
                                                    (vector-ref
                                                      #{ribcage 21791}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 21791}#
                                          3
                                          #{update 22130}#))
                                      (#{parse 21793}#
                                        (cdr #{body 21806}#)
                                        (cons #{id 22075}# #{ids 21807}#)
                                        (cons #{label 22076}# #{labels 21808}#)
                                        #{var-ids 21809}#
                                        #{vars 21810}#
                                        #{vals 21811}#
                                        (cons (cons 'macro
                                                    (cons #{er 21814}#
                                                          (#{wrap 4443}#
                                                            #{e 21973}#
                                                            #{w 21974}#
                                                            #{mod 21976}#)))
                                              #{bindings 21812}#))))
                                  (if (eqv? #{type 21971}# 'begin-form)
                                    (let ((#{tmp 22138}#
                                            ($sc-dispatch
                                              #{e 21973}#
                                              '(_ . each-any))))
                                      (if #{tmp 22138}#
                                        (@apply
                                          (lambda (#{e1 22142}#)
                                            (#{parse 21793}#
                                              (letrec*
                                                ((#{f 22143}#
                                                   (lambda (#{forms 22206}#)
                                                     (if (null? #{forms 22206}#)
                                                       (cdr #{body 21806}#)
                                                       (cons (cons #{er 21814}#
                                                                   (#{wrap 4443}#
                                                                     (car #{forms 22206}#)
                                                                     #{w 21974}#
                                                                     #{mod 21976}#))
                                                             (#{f 22143}#
                                                               (cdr #{forms 22206}#)))))))
                                                (#{f 22143}# #{e1 22142}#))
                                              #{ids 21807}#
                                              #{labels 21808}#
                                              #{var-ids 21809}#
                                              #{vars 21810}#
                                              #{vals 21811}#
                                              #{bindings 21812}#))
                                          #{tmp 22138}#)
                                        (syntax-violation
                                          #f
                                          "source expression failed to match any pattern"
                                          #{e 21973}#)))
                                    (if (eqv? #{type 21971}#
                                              'local-syntax-form)
                                      (#{expand-local-syntax 4455}#
                                        #{value 21972}#
                                        #{e 21973}#
                                        #{er 21814}#
                                        #{w 21974}#
                                        #{s 21975}#
                                        #{mod 21976}#
                                        (lambda (#{forms 22220}#
                                                 #{er 22221}#
                                                 #{w 22222}#
                                                 #{s 22223}#
                                                 #{mod 22224}#)
                                          (#{parse 21793}#
                                            (letrec*
                                              ((#{f 22225}#
                                                 (lambda (#{forms 22288}#)
                                                   (if (null? #{forms 22288}#)
                                                     (cdr #{body 21806}#)
                                                     (cons (cons #{er 22221}#
                                                                 (#{wrap 4443}#
                                                                   (car #{forms 22288}#)
                                                                   #{w 22222}#
                                                                   #{mod 22224}#))
                                                           (#{f 22225}#
                                                             (cdr #{forms 22288}#)))))))
                                              (#{f 22225}# #{forms 22220}#))
                                            #{ids 21807}#
                                            #{labels 21808}#
                                            #{var-ids 21809}#
                                            #{vars 21810}#
                                            #{vals 21811}#
                                            #{bindings 21812}#)))
                                      (if (null? #{ids 21807}#)
                                        (#{build-sequence 4396}#
                                          #f
                                          (map (lambda (#{x 22353}#)
                                                 (let ((#{e 22357}#
                                                         (cdr #{x 22353}#))
                                                       (#{r 22358}#
                                                         (car #{x 22353}#)))
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{syntax-type 4449}#
                                                         #{e 22357}#
                                                         #{r 22358}#
                                                         '(())
                                                         (#{source-annotation 4408}#
                                                           #{e 22357}#)
                                                         #f
                                                         #{mod 21976}#
                                                         #f))
                                                     (lambda (#{type 22362}#
                                                              #{value 22363}#
                                                              #{e 22364}#
                                                              #{w 22365}#
                                                              #{s 22366}#
                                                              #{mod 22367}#)
                                                       (#{expand-expr 4451}#
                                                         #{type 22362}#
                                                         #{value 22363}#
                                                         #{e 22364}#
                                                         #{r 22358}#
                                                         #{w 22365}#
                                                         #{s 22366}#
                                                         #{mod 22367}#)))))
                                               (cons (cons #{er 21814}#
                                                           (#{wrap 4443}#
                                                             (begin
                                                               (if (if (pair? #{e 21973}#)
                                                                     #{s 21975}#
                                                                     #f)
                                                                 (set-source-properties!
                                                                   #{e 21973}#
                                                                   #{s 21975}#))
                                                               #{e 21973}#)
                                                             #{w 21974}#
                                                             #{mod 21976}#))
                                                     (cdr #{body 21806}#))))
                                        (begin
                                          (if (not (#{valid-bound-ids? 4440}#
                                                     #{ids 21807}#))
                                            (syntax-violation
                                              #f
                                              "invalid or duplicate identifier in definition"
                                              #{outer-form 21786}#))
                                          (letrec*
                                            ((#{loop 22468}#
                                               (lambda (#{bs 22471}#
                                                        #{er-cache 22472}#
                                                        #{r-cache 22473}#)
                                                 (if (not (null? #{bs 22471}#))
                                                   (let ((#{b 22474}#
                                                           (car #{bs 22471}#)))
                                                     (if (eq? (car #{b 22474}#)
                                                              'macro)
                                                       (let ((#{er 22476}#
                                                               (car (cdr #{b 22474}#))))
                                                         (let ((#{r-cache 22477}#
                                                                 (if (eq? #{er 22476}#
                                                                          #{er-cache 22472}#)
                                                                   #{r-cache 22473}#
                                                                   (#{macros-only-env 4411}#
                                                                     #{er 22476}#))))
                                                           (begin
                                                             (set-cdr!
                                                               #{b 22474}#
                                                               (#{eval-local-transformer 4456}#
                                                                 (#{expand 4450}#
                                                                   (cdr (cdr #{b 22474}#))
                                                                   #{r-cache 22477}#
                                                                   '(())
                                                                   #{mod 21976}#)
                                                                 #{mod 21976}#))
                                                             (#{loop 22468}#
                                                               (cdr #{bs 22471}#)
                                                               #{er 22476}#
                                                               #{r-cache 22477}#))))
                                                       (#{loop 22468}#
                                                         (cdr #{bs 22471}#)
                                                         #{er-cache 22472}#
                                                         #{r-cache 22473}#)))))))
                                            (#{loop 22468}#
                                              #{bindings 21812}#
                                              #f
                                              #f))
                                          (set-cdr!
                                            #{r 21790}#
                                            (#{extend-env 4409}#
                                              #{labels 21808}#
                                              #{bindings 21812}#
                                              (cdr #{r 21790}#)))
                                          (#{build-letrec 4399}#
                                            #f
                                            #t
                                            (reverse
                                              (map syntax->datum
                                                   #{var-ids 21809}#))
                                            (reverse #{vars 21810}#)
                                            (map (lambda (#{x 22820}#)
                                                   (let ((#{e 22824}#
                                                           (cdr #{x 22820}#))
                                                         (#{r 22825}#
                                                           (car #{x 22820}#)))
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{syntax-type 4449}#
                                                           #{e 22824}#
                                                           #{r 22825}#
                                                           '(())
                                                           (#{source-annotation 4408}#
                                                             #{e 22824}#)
                                                           #f
                                                           #{mod 21976}#
                                                           #f))
                                                       (lambda (#{type 22829}#
                                                                #{value 22830}#
                                                                #{e 22831}#
                                                                #{w 22832}#
                                                                #{s 22833}#
                                                                #{mod 22834}#)
                                                         (#{expand-expr 4451}#
                                                           #{type 22829}#
                                                           #{value 22830}#
                                                           #{e 22831}#
                                                           #{r 22825}#
                                                           #{w 22832}#
                                                           #{s 22833}#
                                                           #{mod 22834}#)))))
                                                 (reverse #{vals 21811}#))
                                            (let ((#{exps 22840}#
                                                    (map (lambda (#{x 22841}#)
                                                           (let ((#{e 22844}#
                                                                   (cdr #{x 22841}#))
                                                                 (#{r 22845}#
                                                                   (car #{x 22841}#)))
                                                             (call-with-values
                                                               (lambda ()
                                                                 (#{syntax-type 4449}#
                                                                   #{e 22844}#
                                                                   #{r 22845}#
                                                                   '(())
                                                                   (#{source-annotation 4408}#
                                                                     #{e 22844}#)
                                                                   #f
                                                                   #{mod 21976}#
                                                                   #f))
                                                               (lambda (#{type 22849}#
                                                                        #{value 22850}#
                                                                        #{e 22851}#
                                                                        #{w 22852}#
                                                                        #{s 22853}#
                                                                        #{mod 22854}#)
                                                                 (#{expand-expr 4451}#
                                                                   #{type 22849}#
                                                                   #{value 22850}#
                                                                   #{e 22851}#
                                                                   #{r 22845}#
                                                                   #{w 22852}#
                                                                   #{s 22853}#
                                                                   #{mod 22854}#)))))
                                                         (cons (cons #{er 21814}#
                                                                     (#{wrap 4443}#
                                                                       (begin
                                                                         (if (if (pair? #{e 21973}#)
                                                                               #{s 21975}#
                                                                               #f)
                                                                           (set-source-properties!
                                                                             #{e 21973}#
                                                                             #{s 21975}#))
                                                                         #{e 21973}#)
                                                                       #{w 21974}#
                                                                       #{mod 21976}#))
                                                               (cdr #{body 21806}#)))))
                                              (if (null? (cdr #{exps 22840}#))
                                                (car #{exps 22840}#)
                                                (make-struct/no-tail
                                                  (vector-ref
                                                    %expanded-vtables
                                                    12)
                                                  #f
                                                  #{exps 22840}#)))))))))))))))))
                 (#{parse 21793}#
                   (map (lambda (#{x 21796}#)
                          (cons #{r 21790}#
                                (#{wrap 4443}#
                                  #{x 21796}#
                                  #{w 21792}#
                                  #{mod 21789}#)))
                        #{body 21785}#)
                   '()
                   '()
                   '()
                   '()
                   '()
                   '())))))))
     (#{expand-local-syntax 4455}#
       (lambda (#{rec? 22880}#
                #{e 22881}#
                #{r 22882}#
                #{w 22883}#
                #{s 22884}#
                #{mod 22885}#
                #{k 22886}#)
         (let ((#{tmp 22888}#
                 ($sc-dispatch
                   #{e 22881}#
                   '(_ #(each (any any)) any . each-any))))
           (if #{tmp 22888}#
             (@apply
               (lambda (#{id 22892}#
                        #{val 22893}#
                        #{e1 22894}#
                        #{e2 22895}#)
                 (if (not (#{valid-bound-ids? 4440}# #{id 22892}#))
                   (syntax-violation
                     #f
                     "duplicate bound keyword"
                     #{e 22881}#)
                   (let ((#{labels 22985}#
                           (#{gen-labels 4418}# #{id 22892}#)))
                     (let ((#{new-w 22986}#
                             (#{make-binding-wrap 4429}#
                               #{id 22892}#
                               #{labels 22985}#
                               #{w 22883}#)))
                       (#{k 22886}#
                         (cons #{e1 22894}# #{e2 22895}#)
                         (#{extend-env 4409}#
                           #{labels 22985}#
                           (let ((#{trans-r 23024}#
                                   (#{macros-only-env 4411}# #{r 22882}#)))
                             (begin
                               (if #{rec? 22880}# #{new-w 22986}# #{w 22883}#)
                               (map (lambda (#{x 23025}#)
                                      (cons 'macro
                                            (#{eval-local-transformer 4456}#
                                              (#{expand 4450}#
                                                #{x 23025}#
                                                #{trans-r 23024}#
                                                (values
                                                  (if #{rec? 22880}#
                                                    #{new-w 22986}#
                                                    #{w 22883}#))
                                                #{mod 22885}#)
                                              #{mod 22885}#)))
                                    #{val 22893}#)))
                           #{r 22882}#)
                         #{new-w 22986}#
                         #{s 22884}#
                         #{mod 22885}#)))))
               #{tmp 22888}#)
             (syntax-violation
               #f
               "bad local syntax definition"
               (#{wrap 4443}#
                 (begin
                   (if (if (pair? #{e 22881}#) #{s 22884}# #f)
                     (set-source-properties! #{e 22881}# #{s 22884}#))
                   #{e 22881}#)
                 #{w 22883}#
                 #{mod 22885}#))))))
     (#{eval-local-transformer 4456}#
       (lambda (#{expanded 23321}# #{mod 23322}#)
         (let ((#{p 23323}# (primitive-eval #{expanded 23321}#)))
           (if (procedure? #{p 23323}#)
             #{p 23323}#
             (syntax-violation
               #f
               "nonprocedure transformer"
               #{p 23323}#)))))
     (#{ellipsis? 4458}#
       (lambda (#{x 5119}#)
         (if (if (if (vector? #{x 5119}#)
                   (if (= (vector-length #{x 5119}#) 4)
                     (eq? (vector-ref #{x 5119}# 0) 'syntax-object)
                     #f)
                   #f)
               (symbol? (vector-ref #{x 5119}# 1))
               #f)
           (if (eq? (if (if (vector? #{x 5119}#)
                          (if (= (vector-length #{x 5119}#) 4)
                            (eq? (vector-ref #{x 5119}# 0) 'syntax-object)
                            #f)
                          #f)
                      (vector-ref #{x 5119}# 1)
                      #{x 5119}#)
                    (if (if (= (vector-length
                                 '#(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i2288"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-application
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         with-transformer-environment
                                         transformer-environment
                                         resolve-identifier
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-application
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-sequence
                                         make-application
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i473"
                                        "i471"
                                        "i469"
                                        "i467"
                                        "i465"
                                        "i463"
                                        "i461"
                                        "i459"
                                        "i457"
                                        "i455"
                                        "i453"
                                        "i451"
                                        "i449"
                                        "i447"
                                        "i445"
                                        "i443"
                                        "i441"
                                        "i439"
                                        "i437"
                                        "i435"
                                        "i433"
                                        "i431"
                                        "i429"
                                        "i427"
                                        "i425"
                                        "i423"
                                        "i421"
                                        "i419"
                                        "i417"
                                        "i415"
                                        "i413"
                                        "i411"
                                        "i409"
                                        "i407"
                                        "i405"
                                        "i403"
                                        "i401"
                                        "i399"
                                        "i398"
                                        "i396"
                                        "i393"
                                        "i392"
                                        "i391"
                                        "i389"
                                        "i388"
                                        "i386"
                                        "i384"
                                        "i382"
                                        "i380"
                                        "i378"
                                        "i376"
                                        "i374"
                                        "i372"
                                        "i369"
                                        "i367"
                                        "i366"
                                        "i364"
                                        "i362"
                                        "i360"
                                        "i358"
                                        "i357"
                                        "i356"
                                        "i355"
                                        "i353"
                                        "i352"
                                        "i349"
                                        "i347"
                                        "i345"
                                        "i343"
                                        "i341"
                                        "i339"
                                        "i337"
                                        "i336"
                                        "i335"
                                        "i333"
                                        "i331"
                                        "i330"
                                        "i327"
                                        "i326"
                                        "i324"
                                        "i322"
                                        "i320"
                                        "i318"
                                        "i316"
                                        "i314"
                                        "i312"
                                        "i310"
                                        "i308"
                                        "i305"
                                        "i303"
                                        "i301"
                                        "i299"
                                        "i297"
                                        "i295"
                                        "i293"
                                        "i291"
                                        "i289"
                                        "i287"
                                        "i285"
                                        "i283"
                                        "i281"
                                        "i279"
                                        "i277"
                                        "i275"
                                        "i273"
                                        "i271"
                                        "i269"
                                        "i267"
                                        "i265"
                                        "i263"
                                        "i261"
                                        "i260"
                                        "i257"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i252"
                                        "i251"
                                        "i249"
                                        "i247"
                                        "i245"
                                        "i242"
                                        "i240"
                                        "i238"
                                        "i236"
                                        "i234"
                                        "i232"
                                        "i230"
                                        "i228"
                                        "i226"
                                        "i224"
                                        "i222"
                                        "i220"
                                        "i218"
                                        "i216"
                                        "i214"
                                        "i212"
                                        "i210"
                                        "i208"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i46" "i45" "i44")))
                                    (hygiene guile)))
                               4)
                          #t
                          #f)
                      '...
                      '#(syntax-object
                         ...
                         ((top)
                          #(ribcage () () ())
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i2288"))
                          #(ribcage
                            (lambda-var-list
                              gen-var
                              strip
                              expand-lambda-case
                              lambda*-formals
                              expand-simple-lambda
                              lambda-formals
                              ellipsis?
                              expand-void
                              eval-local-transformer
                              expand-local-syntax
                              expand-body
                              expand-macro
                              expand-application
                              expand-expr
                              expand
                              syntax-type
                              parse-when-list
                              expand-install-global
                              expand-top-sequence
                              expand-sequence
                              source-wrap
                              wrap
                              bound-id-member?
                              distinct-bound-ids?
                              valid-bound-ids?
                              bound-id=?
                              free-id=?
                              with-transformer-environment
                              transformer-environment
                              resolve-identifier
                              id-var-name
                              same-marks?
                              join-marks
                              join-wraps
                              smart-append
                              make-binding-wrap
                              extend-ribcage!
                              make-empty-ribcage
                              new-mark
                              anti-mark
                              the-anti-mark
                              top-marked?
                              top-wrap
                              empty-wrap
                              set-ribcage-labels!
                              set-ribcage-marks!
                              set-ribcage-symnames!
                              ribcage-labels
                              ribcage-marks
                              ribcage-symnames
                              ribcage?
                              make-ribcage
                              gen-labels
                              gen-label
                              make-rename
                              rename-marks
                              rename-new
                              rename-old
                              subst-rename?
                              wrap-subst
                              wrap-marks
                              make-wrap
                              id-sym-name&marks
                              id-sym-name
                              id?
                              nonsymbol-id?
                              global-extend
                              lookup
                              macros-only-env
                              extend-var-env
                              extend-env
                              null-env
                              binding-value
                              binding-type
                              make-binding
                              arg-check
                              source-annotation
                              no-source
                              set-syntax-object-module!
                              set-syntax-object-wrap!
                              set-syntax-object-expression!
                              syntax-object-module
                              syntax-object-wrap
                              syntax-object-expression
                              syntax-object?
                              make-syntax-object
                              build-lexical-var
                              build-letrec
                              build-named-let
                              build-let
                              build-sequence
                              build-data
                              build-primref
                              build-lambda-case
                              build-case-lambda
                              build-simple-lambda
                              build-global-definition
                              build-global-assignment
                              build-global-reference
                              analyze-variable
                              build-lexical-assignment
                              build-lexical-reference
                              build-dynlet
                              build-conditional
                              build-application
                              build-void
                              maybe-name-value!
                              decorate-source
                              get-global-definition-hook
                              put-global-definition-hook
                              gensym-hook
                              local-eval-hook
                              top-level-eval-hook
                              fx<
                              fx=
                              fx-
                              fx+
                              set-lambda-meta!
                              lambda-meta
                              lambda?
                              make-dynlet
                              make-letrec
                              make-let
                              make-lambda-case
                              make-lambda
                              make-sequence
                              make-application
                              make-conditional
                              make-toplevel-define
                              make-toplevel-set
                              make-toplevel-ref
                              make-module-set
                              make-module-ref
                              make-lexical-set
                              make-lexical-ref
                              make-primitive-ref
                              make-const
                              make-void)
                            ((top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top))
                            ("i473"
                             "i471"
                             "i469"
                             "i467"
                             "i465"
                             "i463"
                             "i461"
                             "i459"
                             "i457"
                             "i455"
                             "i453"
                             "i451"
                             "i449"
                             "i447"
                             "i445"
                             "i443"
                             "i441"
                             "i439"
                             "i437"
                             "i435"
                             "i433"
                             "i431"
                             "i429"
                             "i427"
                             "i425"
                             "i423"
                             "i421"
                             "i419"
                             "i417"
                             "i415"
                             "i413"
                             "i411"
                             "i409"
                             "i407"
                             "i405"
                             "i403"
                             "i401"
                             "i399"
                             "i398"
                             "i396"
                             "i393"
                             "i392"
                             "i391"
                             "i389"
                             "i388"
                             "i386"
                             "i384"
                             "i382"
                             "i380"
                             "i378"
                             "i376"
                             "i374"
                             "i372"
                             "i369"
                             "i367"
                             "i366"
                             "i364"
                             "i362"
                             "i360"
                             "i358"
                             "i357"
                             "i356"
                             "i355"
                             "i353"
                             "i352"
                             "i349"
                             "i347"
                             "i345"
                             "i343"
                             "i341"
                             "i339"
                             "i337"
                             "i336"
                             "i335"
                             "i333"
                             "i331"
                             "i330"
                             "i327"
                             "i326"
                             "i324"
                             "i322"
                             "i320"
                             "i318"
                             "i316"
                             "i314"
                             "i312"
                             "i310"
                             "i308"
                             "i305"
                             "i303"
                             "i301"
                             "i299"
                             "i297"
                             "i295"
                             "i293"
                             "i291"
                             "i289"
                             "i287"
                             "i285"
                             "i283"
                             "i281"
                             "i279"
                             "i277"
                             "i275"
                             "i273"
                             "i271"
                             "i269"
                             "i267"
                             "i265"
                             "i263"
                             "i261"
                             "i260"
                             "i257"
                             "i255"
                             "i254"
                             "i253"
                             "i252"
                             "i251"
                             "i249"
                             "i247"
                             "i245"
                             "i242"
                             "i240"
                             "i238"
                             "i236"
                             "i234"
                             "i232"
                             "i230"
                             "i228"
                             "i226"
                             "i224"
                             "i222"
                             "i220"
                             "i218"
                             "i216"
                             "i214"
                             "i212"
                             "i210"
                             "i208"))
                          #(ribcage
                            (define-structure
                              define-expansion-accessors
                              define-expansion-constructors)
                            ((top) (top) (top))
                            ("i46" "i45" "i44")))
                         (hygiene guile))))
             (eq? (#{id-var-name 4434}# #{x 5119}# '(()))
                  (#{id-var-name 4434}#
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i2288"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            with-transformer-environment
                            transformer-environment
                            resolve-identifier
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            gensym-hook
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("i473"
                           "i471"
                           "i469"
                           "i467"
                           "i465"
                           "i463"
                           "i461"
                           "i459"
                           "i457"
                           "i455"
                           "i453"
                           "i451"
                           "i449"
                           "i447"
                           "i445"
                           "i443"
                           "i441"
                           "i439"
                           "i437"
                           "i435"
                           "i433"
                           "i431"
                           "i429"
                           "i427"
                           "i425"
                           "i423"
                           "i421"
                           "i419"
                           "i417"
                           "i415"
                           "i413"
                           "i411"
                           "i409"
                           "i407"
                           "i405"
                           "i403"
                           "i401"
                           "i399"
                           "i398"
                           "i396"
                           "i393"
                           "i392"
                           "i391"
                           "i389"
                           "i388"
                           "i386"
                           "i384"
                           "i382"
                           "i380"
                           "i378"
                           "i376"
                           "i374"
                           "i372"
                           "i369"
                           "i367"
                           "i366"
                           "i364"
                           "i362"
                           "i360"
                           "i358"
                           "i357"
                           "i356"
                           "i355"
                           "i353"
                           "i352"
                           "i349"
                           "i347"
                           "i345"
                           "i343"
                           "i341"
                           "i339"
                           "i337"
                           "i336"
                           "i335"
                           "i333"
                           "i331"
                           "i330"
                           "i327"
                           "i326"
                           "i324"
                           "i322"
                           "i320"
                           "i318"
                           "i316"
                           "i314"
                           "i312"
                           "i310"
                           "i308"
                           "i305"
                           "i303"
                           "i301"
                           "i299"
                           "i297"
                           "i295"
                           "i293"
                           "i291"
                           "i289"
                           "i287"
                           "i285"
                           "i283"
                           "i281"
                           "i279"
                           "i277"
                           "i275"
                           "i273"
                           "i271"
                           "i269"
                           "i267"
                           "i265"
                           "i263"
                           "i261"
                           "i260"
                           "i257"
                           "i255"
                           "i254"
                           "i253"
                           "i252"
                           "i251"
                           "i249"
                           "i247"
                           "i245"
                           "i242"
                           "i240"
                           "i238"
                           "i236"
                           "i234"
                           "i232"
                           "i230"
                           "i228"
                           "i226"
                           "i224"
                           "i222"
                           "i220"
                           "i218"
                           "i216"
                           "i214"
                           "i212"
                           "i210"
                           "i208"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("i46" "i45" "i44")))
                       (hygiene guile))
                    '(())))
             #f)
           #f)))
     (#{lambda-formals 4459}#
       (lambda (#{orig-args 23328}#)
         (letrec*
           ((#{req 23329}#
              (lambda (#{args 23333}# #{rreq 23334}#)
                (let ((#{tmp 23336}# ($sc-dispatch #{args 23333}# '())))
                  (if #{tmp 23336}#
                    (@apply
                      (lambda ()
                        (#{check 23330}# (reverse #{rreq 23334}#) #f))
                      #{tmp 23336}#)
                    (let ((#{tmp 23459}#
                            ($sc-dispatch #{args 23333}# '(any . any))))
                      (if (if #{tmp 23459}#
                            (@apply
                              (lambda (#{a 23463}# #{b 23464}#)
                                (if (symbol? #{a 23463}#)
                                  #t
                                  (if (if (vector? #{a 23463}#)
                                        (if (= (vector-length #{a 23463}#) 4)
                                          (eq? (vector-ref #{a 23463}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{a 23463}# 1))
                                    #f)))
                              #{tmp 23459}#)
                            #f)
                        (@apply
                          (lambda (#{a 23491}# #{b 23492}#)
                            (#{req 23329}#
                              #{b 23492}#
                              (cons #{a 23491}# #{rreq 23334}#)))
                          #{tmp 23459}#)
                        (let ((#{tmp 23493}# (list #{args 23333}#)))
                          (if (@apply
                                (lambda (#{r 23495}#)
                                  (if (symbol? #{r 23495}#)
                                    #t
                                    (if (if (vector? #{r 23495}#)
                                          (if (= (vector-length #{r 23495}#) 4)
                                            (eq? (vector-ref #{r 23495}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{r 23495}# 1))
                                      #f)))
                                #{tmp 23493}#)
                            (@apply
                              (lambda (#{r 23525}#)
                                (#{check 23330}#
                                  (reverse #{rreq 23334}#)
                                  #{r 23525}#))
                              #{tmp 23493}#)
                            (syntax-violation
                              'lambda
                              "invalid argument list"
                              #{orig-args 23328}#
                              #{args 23333}#)))))))))
            (#{check 23330}#
              (lambda (#{req 23656}# #{rest 23657}#)
                (if (#{distinct-bound-ids? 4441}#
                      (if #{rest 23657}#
                        (cons #{rest 23657}# #{req 23656}#)
                        #{req 23656}#))
                  (values #{req 23656}# #f #{rest 23657}# #f)
                  (syntax-violation
                    'lambda
                    "duplicate identifier in argument list"
                    #{orig-args 23328}#)))))
           (#{req 23329}# #{orig-args 23328}# '()))))
     (#{expand-simple-lambda 4460}#
       (lambda (#{e 23773}#
                #{r 23774}#
                #{w 23775}#
                #{s 23776}#
                #{mod 23777}#
                #{req 23778}#
                #{rest 23779}#
                #{meta 23780}#
                #{body 23781}#)
         (let ((#{ids 23782}#
                 (if #{rest 23779}#
                   (append #{req 23778}# (list #{rest 23779}#))
                   #{req 23778}#)))
           (let ((#{vars 23783}#
                   (map #{gen-var 4464}# #{ids 23782}#)))
             (let ((#{labels 23784}#
                     (#{gen-labels 4418}# #{ids 23782}#)))
               (#{build-simple-lambda 4391}#
                 #{s 23776}#
                 (map syntax->datum #{req 23778}#)
                 (if #{rest 23779}#
                   (syntax->datum #{rest 23779}#)
                   #f)
                 #{vars 23783}#
                 #{meta 23780}#
                 (#{expand-body 4454}#
                   #{body 23781}#
                   (#{wrap 4443}#
                     (begin
                       (if (if (pair? #{e 23773}#) #{s 23776}# #f)
                         (set-source-properties! #{e 23773}# #{s 23776}#))
                       #{e 23773}#)
                     #{w 23775}#
                     #{mod 23777}#)
                   (#{extend-var-env 4410}#
                     #{labels 23784}#
                     #{vars 23783}#
                     #{r 23774}#)
                   (#{make-binding-wrap 4429}#
                     #{ids 23782}#
                     #{labels 23784}#
                     #{w 23775}#)
                   #{mod 23777}#)))))))
     (#{lambda*-formals 4461}#
       (lambda (#{orig-args 24084}#)
         (letrec*
           ((#{req 24085}#
              (lambda (#{args 24092}# #{rreq 24093}#)
                (let ((#{tmp 24095}# ($sc-dispatch #{args 24092}# '())))
                  (if #{tmp 24095}#
                    (@apply
                      (lambda ()
                        (#{check 24089}#
                          (reverse #{rreq 24093}#)
                          '()
                          #f
                          '()))
                      #{tmp 24095}#)
                    (let ((#{tmp 24101}#
                            ($sc-dispatch #{args 24092}# '(any . any))))
                      (if (if #{tmp 24101}#
                            (@apply
                              (lambda (#{a 24105}# #{b 24106}#)
                                (if (symbol? #{a 24105}#)
                                  #t
                                  (if (if (vector? #{a 24105}#)
                                        (if (= (vector-length #{a 24105}#) 4)
                                          (eq? (vector-ref #{a 24105}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{a 24105}# 1))
                                    #f)))
                              #{tmp 24101}#)
                            #f)
                        (@apply
                          (lambda (#{a 24133}# #{b 24134}#)
                            (#{req 24085}#
                              #{b 24134}#
                              (cons #{a 24133}# #{rreq 24093}#)))
                          #{tmp 24101}#)
                        (let ((#{tmp 24135}#
                                ($sc-dispatch #{args 24092}# '(any . any))))
                          (if (if #{tmp 24135}#
                                (@apply
                                  (lambda (#{a 24139}# #{b 24140}#)
                                    (eq? (syntax->datum #{a 24139}#)
                                         #:optional))
                                  #{tmp 24135}#)
                                #f)
                            (@apply
                              (lambda (#{a 24141}# #{b 24142}#)
                                (#{opt 24086}#
                                  #{b 24142}#
                                  (reverse #{rreq 24093}#)
                                  '()))
                              #{tmp 24135}#)
                            (let ((#{tmp 24145}#
                                    ($sc-dispatch
                                      #{args 24092}#
                                      '(any . any))))
                              (if (if #{tmp 24145}#
                                    (@apply
                                      (lambda (#{a 24149}# #{b 24150}#)
                                        (eq? (syntax->datum #{a 24149}#)
                                             #:key))
                                      #{tmp 24145}#)
                                    #f)
                                (@apply
                                  (lambda (#{a 24151}# #{b 24152}#)
                                    (#{key 24087}#
                                      #{b 24152}#
                                      (reverse #{rreq 24093}#)
                                      '()
                                      '()))
                                  #{tmp 24145}#)
                                (let ((#{tmp 24155}#
                                        ($sc-dispatch
                                          #{args 24092}#
                                          '(any any))))
                                  (if (if #{tmp 24155}#
                                        (@apply
                                          (lambda (#{a 24159}# #{b 24160}#)
                                            (eq? (syntax->datum #{a 24159}#)
                                                 #:rest))
                                          #{tmp 24155}#)
                                        #f)
                                    (@apply
                                      (lambda (#{a 24161}# #{b 24162}#)
                                        (#{rest 24088}#
                                          #{b 24162}#
                                          (reverse #{rreq 24093}#)
                                          '()
                                          '()))
                                      #{tmp 24155}#)
                                    (let ((#{tmp 24165}#
                                            (list #{args 24092}#)))
                                      (if (@apply
                                            (lambda (#{r 24167}#)
                                              (if (symbol? #{r 24167}#)
                                                #t
                                                (if (if (vector? #{r 24167}#)
                                                      (if (= (vector-length
                                                               #{r 24167}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{r 24167}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref #{r 24167}# 1))
                                                  #f)))
                                            #{tmp 24165}#)
                                        (@apply
                                          (lambda (#{r 24197}#)
                                            (#{rest 24088}#
                                              #{r 24197}#
                                              (reverse #{rreq 24093}#)
                                              '()
                                              '()))
                                          #{tmp 24165}#)
                                        (syntax-violation
                                          'lambda*
                                          "invalid argument list"
                                          #{orig-args 24084}#
                                          #{args 24092}#)))))))))))))))
            (#{opt 24086}#
              (lambda (#{args 24216}# #{req 24217}# #{ropt 24218}#)
                (let ((#{tmp 24220}# ($sc-dispatch #{args 24216}# '())))
                  (if #{tmp 24220}#
                    (@apply
                      (lambda ()
                        (#{check 24089}#
                          #{req 24217}#
                          (reverse #{ropt 24218}#)
                          #f
                          '()))
                      #{tmp 24220}#)
                    (let ((#{tmp 24226}#
                            ($sc-dispatch #{args 24216}# '(any . any))))
                      (if (if #{tmp 24226}#
                            (@apply
                              (lambda (#{a 24230}# #{b 24231}#)
                                (if (symbol? #{a 24230}#)
                                  #t
                                  (if (if (vector? #{a 24230}#)
                                        (if (= (vector-length #{a 24230}#) 4)
                                          (eq? (vector-ref #{a 24230}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{a 24230}# 1))
                                    #f)))
                              #{tmp 24226}#)
                            #f)
                        (@apply
                          (lambda (#{a 24258}# #{b 24259}#)
                            (#{opt 24086}#
                              #{b 24259}#
                              #{req 24217}#
                              (cons (cons #{a 24258}#
                                          '(#(syntax-object
                                              #f
                                              ((top)
                                               #(ribcage
                                                 #(a b)
                                                 #((top) (top))
                                                 #("i2427" "i2428"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(args req ropt)
                                                 #((top) (top) (top))
                                                 #("i2417" "i2418" "i2419"))
                                               #(ribcage
                                                 (check rest key opt req)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i2363"
                                                  "i2361"
                                                  "i2359"
                                                  "i2357"
                                                  "i2355"))
                                               #(ribcage
                                                 #(orig-args)
                                                 #((top))
                                                 #("i2354"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-application
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   with-transformer-environment
                                                   transformer-environment
                                                   resolve-identifier
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i473"
                                                  "i471"
                                                  "i469"
                                                  "i467"
                                                  "i465"
                                                  "i463"
                                                  "i461"
                                                  "i459"
                                                  "i457"
                                                  "i455"
                                                  "i453"
                                                  "i451"
                                                  "i449"
                                                  "i447"
                                                  "i445"
                                                  "i443"
                                                  "i441"
                                                  "i439"
                                                  "i437"
                                                  "i435"
                                                  "i433"
                                                  "i431"
                                                  "i429"
                                                  "i427"
                                                  "i425"
                                                  "i423"
                                                  "i421"
                                                  "i419"
                                                  "i417"
                                                  "i415"
                                                  "i413"
                                                  "i411"
                                                  "i409"
                                                  "i407"
                                                  "i405"
                                                  "i403"
                                                  "i401"
                                                  "i399"
                                                  "i398"
                                                  "i396"
                                                  "i393"
                                                  "i392"
                                                  "i391"
                                                  "i389"
                                                  "i388"
                                                  "i386"
                                                  "i384"
                                                  "i382"
                                                  "i380"
                                                  "i378"
                                                  "i376"
                                                  "i374"
                                                  "i372"
                                                  "i369"
                                                  "i367"
                                                  "i366"
                                                  "i364"
                                                  "i362"
                                                  "i360"
                                                  "i358"
                                                  "i357"
                                                  "i356"
                                                  "i355"
                                                  "i353"
                                                  "i352"
                                                  "i349"
                                                  "i347"
                                                  "i345"
                                                  "i343"
                                                  "i341"
                                                  "i339"
                                                  "i337"
                                                  "i336"
                                                  "i335"
                                                  "i333"
                                                  "i331"
                                                  "i330"
                                                  "i327"
                                                  "i326"
                                                  "i324"
                                                  "i322"
                                                  "i320"
                                                  "i318"
                                                  "i316"
                                                  "i314"
                                                  "i312"
                                                  "i310"
                                                  "i308"
                                                  "i305"
                                                  "i303"
                                                  "i301"
                                                  "i299"
                                                  "i297"
                                                  "i295"
                                                  "i293"
                                                  "i291"
                                                  "i289"
                                                  "i287"
                                                  "i285"
                                                  "i283"
                                                  "i281"
                                                  "i279"
                                                  "i277"
                                                  "i275"
                                                  "i273"
                                                  "i271"
                                                  "i269"
                                                  "i267"
                                                  "i265"
                                                  "i263"
                                                  "i261"
                                                  "i260"
                                                  "i257"
                                                  "i255"
                                                  "i254"
                                                  "i253"
                                                  "i252"
                                                  "i251"
                                                  "i249"
                                                  "i247"
                                                  "i245"
                                                  "i242"
                                                  "i240"
                                                  "i238"
                                                  "i236"
                                                  "i234"
                                                  "i232"
                                                  "i230"
                                                  "i228"
                                                  "i226"
                                                  "i224"
                                                  "i222"
                                                  "i220"
                                                  "i218"
                                                  "i216"
                                                  "i214"
                                                  "i212"
                                                  "i210"
                                                  "i208"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i46" "i45" "i44")))
                                              (hygiene guile))))
                                    #{ropt 24218}#)))
                          #{tmp 24226}#)
                        (let ((#{tmp 24260}#
                                ($sc-dispatch
                                  #{args 24216}#
                                  '((any any) . any))))
                          (if (if #{tmp 24260}#
                                (@apply
                                  (lambda (#{a 24264}#
                                           #{init 24265}#
                                           #{b 24266}#)
                                    (if (symbol? #{a 24264}#)
                                      #t
                                      (if (if (vector? #{a 24264}#)
                                            (if (= (vector-length #{a 24264}#)
                                                   4)
                                              (eq? (vector-ref #{a 24264}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{a 24264}# 1))
                                        #f)))
                                  #{tmp 24260}#)
                                #f)
                            (@apply
                              (lambda (#{a 24293}# #{init 24294}# #{b 24295}#)
                                (#{opt 24086}#
                                  #{b 24295}#
                                  #{req 24217}#
                                  (cons (list #{a 24293}# #{init 24294}#)
                                        #{ropt 24218}#)))
                              #{tmp 24260}#)
                            (let ((#{tmp 24296}#
                                    ($sc-dispatch
                                      #{args 24216}#
                                      '(any . any))))
                              (if (if #{tmp 24296}#
                                    (@apply
                                      (lambda (#{a 24300}# #{b 24301}#)
                                        (eq? (syntax->datum #{a 24300}#)
                                             #:key))
                                      #{tmp 24296}#)
                                    #f)
                                (@apply
                                  (lambda (#{a 24302}# #{b 24303}#)
                                    (#{key 24087}#
                                      #{b 24303}#
                                      #{req 24217}#
                                      (reverse #{ropt 24218}#)
                                      '()))
                                  #{tmp 24296}#)
                                (let ((#{tmp 24306}#
                                        ($sc-dispatch
                                          #{args 24216}#
                                          '(any any))))
                                  (if (if #{tmp 24306}#
                                        (@apply
                                          (lambda (#{a 24310}# #{b 24311}#)
                                            (eq? (syntax->datum #{a 24310}#)
                                                 #:rest))
                                          #{tmp 24306}#)
                                        #f)
                                    (@apply
                                      (lambda (#{a 24312}# #{b 24313}#)
                                        (#{rest 24088}#
                                          #{b 24313}#
                                          #{req 24217}#
                                          (reverse #{ropt 24218}#)
                                          '()))
                                      #{tmp 24306}#)
                                    (let ((#{tmp 24316}#
                                            (list #{args 24216}#)))
                                      (if (@apply
                                            (lambda (#{r 24318}#)
                                              (if (symbol? #{r 24318}#)
                                                #t
                                                (if (if (vector? #{r 24318}#)
                                                      (if (= (vector-length
                                                               #{r 24318}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{r 24318}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref #{r 24318}# 1))
                                                  #f)))
                                            #{tmp 24316}#)
                                        (@apply
                                          (lambda (#{r 24348}#)
                                            (#{rest 24088}#
                                              #{r 24348}#
                                              #{req 24217}#
                                              (reverse #{ropt 24218}#)
                                              '()))
                                          #{tmp 24316}#)
                                        (syntax-violation
                                          'lambda*
                                          "invalid optional argument list"
                                          #{orig-args 24084}#
                                          #{args 24216}#)))))))))))))))
            (#{key 24087}#
              (lambda (#{args 24367}#
                       #{req 24368}#
                       #{opt 24369}#
                       #{rkey 24370}#)
                (let ((#{tmp 24372}# ($sc-dispatch #{args 24367}# '())))
                  (if #{tmp 24372}#
                    (@apply
                      (lambda ()
                        (#{check 24089}#
                          #{req 24368}#
                          #{opt 24369}#
                          #f
                          (cons #f (reverse #{rkey 24370}#))))
                      #{tmp 24372}#)
                    (let ((#{tmp 24378}#
                            ($sc-dispatch #{args 24367}# '(any . any))))
                      (if (if #{tmp 24378}#
                            (@apply
                              (lambda (#{a 24382}# #{b 24383}#)
                                (if (symbol? #{a 24382}#)
                                  #t
                                  (if (if (vector? #{a 24382}#)
                                        (if (= (vector-length #{a 24382}#) 4)
                                          (eq? (vector-ref #{a 24382}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{a 24382}# 1))
                                    #f)))
                              #{tmp 24378}#)
                            #f)
                        (@apply
                          (lambda (#{a 24410}# #{b 24411}#)
                            (let ((#{tmp 24412}#
                                    (symbol->keyword
                                      (syntax->datum #{a 24410}#))))
                              (#{key 24087}#
                                #{b 24411}#
                                #{req 24368}#
                                #{opt 24369}#
                                (cons (cons #{tmp 24412}#
                                            (cons #{a 24410}#
                                                  '(#(syntax-object
                                                      #f
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(k)
                                                         #((top))
                                                         #("i2490"))
                                                       #(ribcage
                                                         #(a b)
                                                         #((top) (top))
                                                         #("i2484" "i2485"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(args req opt rkey)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i2473"
                                                           "i2474"
                                                           "i2475"
                                                           "i2476"))
                                                       #(ribcage
                                                         (check rest
                                                                key
                                                                opt
                                                                req)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i2363"
                                                          "i2361"
                                                          "i2359"
                                                          "i2357"
                                                          "i2355"))
                                                       #(ribcage
                                                         #(orig-args)
                                                         #((top))
                                                         #("i2354"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i473"
                                                          "i471"
                                                          "i469"
                                                          "i467"
                                                          "i465"
                                                          "i463"
                                                          "i461"
                                                          "i459"
                                                          "i457"
                                                          "i455"
                                                          "i453"
                                                          "i451"
                                                          "i449"
                                                          "i447"
                                                          "i445"
                                                          "i443"
                                                          "i441"
                                                          "i439"
                                                          "i437"
                                                          "i435"
                                                          "i433"
                                                          "i431"
                                                          "i429"
                                                          "i427"
                                                          "i425"
                                                          "i423"
                                                          "i421"
                                                          "i419"
                                                          "i417"
                                                          "i415"
                                                          "i413"
                                                          "i411"
                                                          "i409"
                                                          "i407"
                                                          "i405"
                                                          "i403"
                                                          "i401"
                                                          "i399"
                                                          "i398"
                                                          "i396"
                                                          "i393"
                                                          "i392"
                                                          "i391"
                                                          "i389"
                                                          "i388"
                                                          "i386"
                                                          "i384"
                                                          "i382"
                                                          "i380"
                                                          "i378"
                                                          "i376"
                                                          "i374"
                                                          "i372"
                                                          "i369"
                                                          "i367"
                                                          "i366"
                                                          "i364"
                                                          "i362"
                                                          "i360"
                                                          "i358"
                                                          "i357"
                                                          "i356"
                                                          "i355"
                                                          "i353"
                                                          "i352"
                                                          "i349"
                                                          "i347"
                                                          "i345"
                                                          "i343"
                                                          "i341"
                                                          "i339"
                                                          "i337"
                                                          "i336"
                                                          "i335"
                                                          "i333"
                                                          "i331"
                                                          "i330"
                                                          "i327"
                                                          "i326"
                                                          "i324"
                                                          "i322"
                                                          "i320"
                                                          "i318"
                                                          "i316"
                                                          "i314"
                                                          "i312"
                                                          "i310"
                                                          "i308"
                                                          "i305"
                                                          "i303"
                                                          "i301"
                                                          "i299"
                                                          "i297"
                                                          "i295"
                                                          "i293"
                                                          "i291"
                                                          "i289"
                                                          "i287"
                                                          "i285"
                                                          "i283"
                                                          "i281"
                                                          "i279"
                                                          "i277"
                                                          "i275"
                                                          "i273"
                                                          "i271"
                                                          "i269"
                                                          "i267"
                                                          "i265"
                                                          "i263"
                                                          "i261"
                                                          "i260"
                                                          "i257"
                                                          "i255"
                                                          "i254"
                                                          "i253"
                                                          "i252"
                                                          "i251"
                                                          "i249"
                                                          "i247"
                                                          "i245"
                                                          "i242"
                                                          "i240"
                                                          "i238"
                                                          "i236"
                                                          "i234"
                                                          "i232"
                                                          "i230"
                                                          "i228"
                                                          "i226"
                                                          "i224"
                                                          "i222"
                                                          "i220"
                                                          "i218"
                                                          "i216"
                                                          "i214"
                                                          "i212"
                                                          "i210"
                                                          "i208"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("i46" "i45" "i44")))
                                                      (hygiene guile)))))
                                      #{rkey 24370}#))))
                          #{tmp 24378}#)
                        (let ((#{tmp 24415}#
                                ($sc-dispatch
                                  #{args 24367}#
                                  '((any any) . any))))
                          (if (if #{tmp 24415}#
                                (@apply
                                  (lambda (#{a 24419}#
                                           #{init 24420}#
                                           #{b 24421}#)
                                    (if (symbol? #{a 24419}#)
                                      #t
                                      (if (if (vector? #{a 24419}#)
                                            (if (= (vector-length #{a 24419}#)
                                                   4)
                                              (eq? (vector-ref #{a 24419}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{a 24419}# 1))
                                        #f)))
                                  #{tmp 24415}#)
                                #f)
                            (@apply
                              (lambda (#{a 24448}# #{init 24449}# #{b 24450}#)
                                (let ((#{tmp 24451}#
                                        (symbol->keyword
                                          (syntax->datum #{a 24448}#))))
                                  (#{key 24087}#
                                    #{b 24450}#
                                    #{req 24368}#
                                    #{opt 24369}#
                                    (cons (list #{tmp 24451}#
                                                #{a 24448}#
                                                #{init 24449}#)
                                          #{rkey 24370}#))))
                              #{tmp 24415}#)
                            (let ((#{tmp 24454}#
                                    ($sc-dispatch
                                      #{args 24367}#
                                      '((any any any) . any))))
                              (if (if #{tmp 24454}#
                                    (@apply
                                      (lambda (#{a 24458}#
                                               #{init 24459}#
                                               #{k 24460}#
                                               #{b 24461}#)
                                        (if (if (symbol? #{a 24458}#)
                                              #t
                                              (if (if (vector? #{a 24458}#)
                                                    (if (= (vector-length
                                                             #{a 24458}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{a 24458}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{a 24458}# 1))
                                                #f))
                                          (keyword?
                                            (syntax->datum #{k 24460}#))
                                          #f))
                                      #{tmp 24454}#)
                                    #f)
                                (@apply
                                  (lambda (#{a 24488}#
                                           #{init 24489}#
                                           #{k 24490}#
                                           #{b 24491}#)
                                    (#{key 24087}#
                                      #{b 24491}#
                                      #{req 24368}#
                                      #{opt 24369}#
                                      (cons (list #{k 24490}#
                                                  #{a 24488}#
                                                  #{init 24489}#)
                                            #{rkey 24370}#)))
                                  #{tmp 24454}#)
                                (let ((#{tmp 24492}#
                                        ($sc-dispatch #{args 24367}# '(any))))
                                  (if (if #{tmp 24492}#
                                        (@apply
                                          (lambda (#{aok 24496}#)
                                            (eq? (syntax->datum #{aok 24496}#)
                                                 #:allow-other-keys))
                                          #{tmp 24492}#)
                                        #f)
                                    (@apply
                                      (lambda (#{aok 24497}#)
                                        (#{check 24089}#
                                          #{req 24368}#
                                          #{opt 24369}#
                                          #f
                                          (cons #t (reverse #{rkey 24370}#))))
                                      #{tmp 24492}#)
                                    (let ((#{tmp 24500}#
                                            ($sc-dispatch
                                              #{args 24367}#
                                              '(any any any))))
                                      (if (if #{tmp 24500}#
                                            (@apply
                                              (lambda (#{aok 24504}#
                                                       #{a 24505}#
                                                       #{b 24506}#)
                                                (if (eq? (syntax->datum
                                                           #{aok 24504}#)
                                                         #:allow-other-keys)
                                                  (eq? (syntax->datum
                                                         #{a 24505}#)
                                                       #:rest)
                                                  #f))
                                              #{tmp 24500}#)
                                            #f)
                                        (@apply
                                          (lambda (#{aok 24507}#
                                                   #{a 24508}#
                                                   #{b 24509}#)
                                            (#{rest 24088}#
                                              #{b 24509}#
                                              #{req 24368}#
                                              #{opt 24369}#
                                              (cons #t
                                                    (reverse #{rkey 24370}#))))
                                          #{tmp 24500}#)
                                        (let ((#{tmp 24512}#
                                                ($sc-dispatch
                                                  #{args 24367}#
                                                  '(any . any))))
                                          (if (if #{tmp 24512}#
                                                (@apply
                                                  (lambda (#{aok 24516}#
                                                           #{r 24517}#)
                                                    (if (eq? (syntax->datum
                                                               #{aok 24516}#)
                                                             #:allow-other-keys)
                                                      (if (symbol? #{r 24517}#)
                                                        #t
                                                        (if (if (vector?
                                                                  #{r 24517}#)
                                                              (if (= (vector-length
                                                                       #{r 24517}#)
                                                                     4)
                                                                (eq? (vector-ref
                                                                       #{r 24517}#
                                                                       0)
                                                                     'syntax-object)
                                                                #f)
                                                              #f)
                                                          (symbol?
                                                            (vector-ref
                                                              #{r 24517}#
                                                              1))
                                                          #f))
                                                      #f))
                                                  #{tmp 24512}#)
                                                #f)
                                            (@apply
                                              (lambda (#{aok 24544}#
                                                       #{r 24545}#)
                                                (#{rest 24088}#
                                                  #{r 24545}#
                                                  #{req 24368}#
                                                  #{opt 24369}#
                                                  (cons #t
                                                        (reverse
                                                          #{rkey 24370}#))))
                                              #{tmp 24512}#)
                                            (let ((#{tmp 24548}#
                                                    ($sc-dispatch
                                                      #{args 24367}#
                                                      '(any any))))
                                              (if (if #{tmp 24548}#
                                                    (@apply
                                                      (lambda (#{a 24552}#
                                                               #{b 24553}#)
                                                        (eq? (syntax->datum
                                                               #{a 24552}#)
                                                             #:rest))
                                                      #{tmp 24548}#)
                                                    #f)
                                                (@apply
                                                  (lambda (#{a 24554}#
                                                           #{b 24555}#)
                                                    (#{rest 24088}#
                                                      #{b 24555}#
                                                      #{req 24368}#
                                                      #{opt 24369}#
                                                      (cons #f
                                                            (reverse
                                                              #{rkey 24370}#))))
                                                  #{tmp 24548}#)
                                                (let ((#{tmp 24558}#
                                                        (list #{args 24367}#)))
                                                  (if (@apply
                                                        (lambda (#{r 24560}#)
                                                          (if (symbol?
                                                                #{r 24560}#)
                                                            #t
                                                            (if (if (vector?
                                                                      #{r 24560}#)
                                                                  (if (= (vector-length
                                                                           #{r 24560}#)
                                                                         4)
                                                                    (eq? (vector-ref
                                                                           #{r 24560}#
                                                                           0)
                                                                         'syntax-object)
                                                                    #f)
                                                                  #f)
                                                              (symbol?
                                                                (vector-ref
                                                                  #{r 24560}#
                                                                  1))
                                                              #f)))
                                                        #{tmp 24558}#)
                                                    (@apply
                                                      (lambda (#{r 24590}#)
                                                        (#{rest 24088}#
                                                          #{r 24590}#
                                                          #{req 24368}#
                                                          #{opt 24369}#
                                                          (cons #f
                                                                (reverse
                                                                  #{rkey 24370}#))))
                                                      #{tmp 24558}#)
                                                    (syntax-violation
                                                      'lambda*
                                                      "invalid keyword argument list"
                                                      #{orig-args 24084}#
                                                      #{args 24367}#)))))))))))))))))))))
            (#{rest 24088}#
              (lambda (#{args 24618}#
                       #{req 24619}#
                       #{opt 24620}#
                       #{kw 24621}#)
                (let ((#{tmp 24623}# (list #{args 24618}#)))
                  (if (@apply
                        (lambda (#{r 24625}#)
                          (if (symbol? #{r 24625}#)
                            #t
                            (if (if (vector? #{r 24625}#)
                                  (if (= (vector-length #{r 24625}#) 4)
                                    (eq? (vector-ref #{r 24625}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{r 24625}# 1))
                              #f)))
                        #{tmp 24623}#)
                    (@apply
                      (lambda (#{r 24655}#)
                        (#{check 24089}#
                          #{req 24619}#
                          #{opt 24620}#
                          #{r 24655}#
                          #{kw 24621}#))
                      #{tmp 24623}#)
                    (syntax-violation
                      'lambda*
                      "invalid rest argument"
                      #{orig-args 24084}#
                      #{args 24618}#)))))
            (#{check 24089}#
              (lambda (#{req 24659}#
                       #{opt 24660}#
                       #{rest 24661}#
                       #{kw 24662}#)
                (if (#{distinct-bound-ids? 4441}#
                      (append
                        #{req 24659}#
                        (map car #{opt 24660}#)
                        (if #{rest 24661}# (list #{rest 24661}#) '())
                        (if (pair? #{kw 24662}#)
                          (map cadr (cdr #{kw 24662}#))
                          '())))
                  (values
                    #{req 24659}#
                    #{opt 24660}#
                    #{rest 24661}#
                    #{kw 24662}#)
                  (syntax-violation
                    'lambda*
                    "duplicate identifier in argument list"
                    #{orig-args 24084}#)))))
           (#{req 24085}# #{orig-args 24084}# '()))))
     (#{expand-lambda-case 4462}#
       (lambda (#{e 24778}#
                #{r 24779}#
                #{w 24780}#
                #{s 24781}#
                #{mod 24782}#
                #{get-formals 24783}#
                #{clauses 24784}#)
         (letrec*
           ((#{parse-req 24785}#
              (lambda (#{req 24918}#
                       #{opt 24919}#
                       #{rest 24920}#
                       #{kw 24921}#
                       #{body 24922}#)
                (let ((#{vars 24923}#
                        (map #{gen-var 4464}# #{req 24918}#))
                      (#{labels 24924}#
                        (#{gen-labels 4418}# #{req 24918}#)))
                  (let ((#{r* 24925}#
                          (#{extend-var-env 4410}#
                            #{labels 24924}#
                            #{vars 24923}#
                            #{r 24779}#))
                        (#{w* 24926}#
                          (#{make-binding-wrap 4429}#
                            #{req 24918}#
                            #{labels 24924}#
                            #{w 24780}#)))
                    (#{parse-opt 24786}#
                      (map syntax->datum #{req 24918}#)
                      #{opt 24919}#
                      #{rest 24920}#
                      #{kw 24921}#
                      #{body 24922}#
                      (reverse #{vars 24923}#)
                      #{r* 24925}#
                      #{w* 24926}#
                      '()
                      '())))))
            (#{parse-opt 24786}#
              (lambda (#{req 25140}#
                       #{opt 25141}#
                       #{rest 25142}#
                       #{kw 25143}#
                       #{body 25144}#
                       #{vars 25145}#
                       #{r* 25146}#
                       #{w* 25147}#
                       #{out 25148}#
                       #{inits 25149}#)
                (if (pair? #{opt 25141}#)
                  (let ((#{tmp 25150}# (car #{opt 25141}#)))
                    (let ((#{tmp 25151}#
                            ($sc-dispatch #{tmp 25150}# '(any any))))
                      (if #{tmp 25151}#
                        (@apply
                          (lambda (#{id 25153}# #{i 25154}#)
                            (let ((#{v 25155}#
                                    (let ((#{id 25163}#
                                            (if (if (vector? #{id 25153}#)
                                                  (if (= (vector-length
                                                           #{id 25153}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{id 25153}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref #{id 25153}# 1)
                                              #{id 25153}#)))
                                      (gensym
                                        (string-append
                                          (symbol->string #{id 25163}#)
                                          " ")))))
                              (let ((#{l 25156}#
                                      (#{gen-labels 4418}#
                                        (list #{v 25155}#))))
                                (let ((#{r** 25157}#
                                        (#{extend-var-env 4410}#
                                          #{l 25156}#
                                          (list #{v 25155}#)
                                          #{r* 25146}#)))
                                  (let ((#{w** 25158}#
                                          (#{make-binding-wrap 4429}#
                                            (list #{id 25153}#)
                                            #{l 25156}#
                                            #{w* 25147}#)))
                                    (#{parse-opt 24786}#
                                      #{req 25140}#
                                      (cdr #{opt 25141}#)
                                      #{rest 25142}#
                                      #{kw 25143}#
                                      #{body 25144}#
                                      (cons #{v 25155}# #{vars 25145}#)
                                      #{r** 25157}#
                                      #{w** 25158}#
                                      (cons (syntax->datum #{id 25153}#)
                                            #{out 25148}#)
                                      (cons (#{expand 4450}#
                                              #{i 25154}#
                                              #{r* 25146}#
                                              #{w* 25147}#
                                              #{mod 24782}#)
                                            #{inits 25149}#)))))))
                          #{tmp 25151}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 25150}#))))
                  (if #{rest 25142}#
                    (let ((#{v 25428}#
                            (let ((#{id 25438}#
                                    (if (if (vector? #{rest 25142}#)
                                          (if (= (vector-length #{rest 25142}#)
                                                 4)
                                            (eq? (vector-ref #{rest 25142}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref #{rest 25142}# 1)
                                      #{rest 25142}#)))
                              (gensym
                                (string-append
                                  (symbol->string #{id 25438}#)
                                  " ")))))
                      (let ((#{l 25429}#
                              (#{gen-labels 4418}# (list #{v 25428}#))))
                        (let ((#{r* 25430}#
                                (#{extend-var-env 4410}#
                                  #{l 25429}#
                                  (list #{v 25428}#)
                                  #{r* 25146}#)))
                          (let ((#{w* 25431}#
                                  (#{make-binding-wrap 4429}#
                                    (list #{rest 25142}#)
                                    #{l 25429}#
                                    #{w* 25147}#)))
                            (#{parse-kw 24787}#
                              #{req 25140}#
                              (if (pair? #{out 25148}#)
                                (reverse #{out 25148}#)
                                #f)
                              (syntax->datum #{rest 25142}#)
                              (if (pair? #{kw 25143}#)
                                (cdr #{kw 25143}#)
                                #{kw 25143}#)
                              #{body 25144}#
                              (cons #{v 25428}# #{vars 25145}#)
                              #{r* 25430}#
                              #{w* 25431}#
                              (if (pair? #{kw 25143}#) (car #{kw 25143}#) #f)
                              '()
                              #{inits 25149}#)))))
                    (#{parse-kw 24787}#
                      #{req 25140}#
                      (if (pair? #{out 25148}#)
                        (reverse #{out 25148}#)
                        #f)
                      #f
                      (if (pair? #{kw 25143}#)
                        (cdr #{kw 25143}#)
                        #{kw 25143}#)
                      #{body 25144}#
                      #{vars 25145}#
                      #{r* 25146}#
                      #{w* 25147}#
                      (if (pair? #{kw 25143}#) (car #{kw 25143}#) #f)
                      '()
                      #{inits 25149}#)))))
            (#{parse-kw 24787}#
              (lambda (#{req 25636}#
                       #{opt 25637}#
                       #{rest 25638}#
                       #{kw 25639}#
                       #{body 25640}#
                       #{vars 25641}#
                       #{r* 25642}#
                       #{w* 25643}#
                       #{aok 25644}#
                       #{out 25645}#
                       #{inits 25646}#)
                (if (pair? #{kw 25639}#)
                  (let ((#{tmp 25647}# (car #{kw 25639}#)))
                    (let ((#{tmp 25648}#
                            ($sc-dispatch #{tmp 25647}# '(any any any))))
                      (if #{tmp 25648}#
                        (@apply
                          (lambda (#{k 25650}# #{id 25651}# #{i 25652}#)
                            (let ((#{v 25653}#
                                    (let ((#{id 25661}#
                                            (if (if (vector? #{id 25651}#)
                                                  (if (= (vector-length
                                                           #{id 25651}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{id 25651}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref #{id 25651}# 1)
                                              #{id 25651}#)))
                                      (gensym
                                        (string-append
                                          (symbol->string #{id 25661}#)
                                          " ")))))
                              (let ((#{l 25654}#
                                      (#{gen-labels 4418}#
                                        (list #{v 25653}#))))
                                (let ((#{r** 25655}#
                                        (#{extend-var-env 4410}#
                                          #{l 25654}#
                                          (list #{v 25653}#)
                                          #{r* 25642}#)))
                                  (let ((#{w** 25656}#
                                          (#{make-binding-wrap 4429}#
                                            (list #{id 25651}#)
                                            #{l 25654}#
                                            #{w* 25643}#)))
                                    (#{parse-kw 24787}#
                                      #{req 25636}#
                                      #{opt 25637}#
                                      #{rest 25638}#
                                      (cdr #{kw 25639}#)
                                      #{body 25640}#
                                      (cons #{v 25653}# #{vars 25641}#)
                                      #{r** 25655}#
                                      #{w** 25656}#
                                      #{aok 25644}#
                                      (cons (list (syntax->datum #{k 25650}#)
                                                  (syntax->datum #{id 25651}#)
                                                  #{v 25653}#)
                                            #{out 25645}#)
                                      (cons (#{expand 4450}#
                                              #{i 25652}#
                                              #{r* 25642}#
                                              #{w* 25643}#
                                              #{mod 24782}#)
                                            #{inits 25646}#)))))))
                          #{tmp 25648}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 25647}#))))
                  (#{parse-body 24788}#
                    #{req 25636}#
                    #{opt 25637}#
                    #{rest 25638}#
                    (if (if #{aok 25644}#
                          #{aok 25644}#
                          (pair? #{out 25645}#))
                      (cons #{aok 25644}# (reverse #{out 25645}#))
                      #f)
                    #{body 25640}#
                    (reverse #{vars 25641}#)
                    #{r* 25642}#
                    #{w* 25643}#
                    (reverse #{inits 25646}#)
                    '()))))
            (#{parse-body 24788}#
              (lambda (#{req 25935}#
                       #{opt 25936}#
                       #{rest 25937}#
                       #{kw 25938}#
                       #{body 25939}#
                       #{vars 25940}#
                       #{r* 25941}#
                       #{w* 25942}#
                       #{inits 25943}#
                       #{meta 25944}#)
                (let ((#{tmp 25946}#
                        ($sc-dispatch
                          #{body 25939}#
                          '(any any . each-any))))
                  (if (if #{tmp 25946}#
                        (@apply
                          (lambda (#{docstring 25950}#
                                   #{e1 25951}#
                                   #{e2 25952}#)
                            (string? (syntax->datum #{docstring 25950}#)))
                          #{tmp 25946}#)
                        #f)
                    (@apply
                      (lambda (#{docstring 25953}# #{e1 25954}# #{e2 25955}#)
                        (#{parse-body 24788}#
                          #{req 25935}#
                          #{opt 25936}#
                          #{rest 25937}#
                          #{kw 25938}#
                          (cons #{e1 25954}# #{e2 25955}#)
                          #{vars 25940}#
                          #{r* 25941}#
                          #{w* 25942}#
                          #{inits 25943}#
                          (append
                            #{meta 25944}#
                            (list (cons 'documentation
                                        (syntax->datum
                                          #{docstring 25953}#))))))
                      #{tmp 25946}#)
                    (let ((#{tmp 25956}#
                            ($sc-dispatch
                              #{body 25939}#
                              '(#(vector #(each (any . any)))
                                any
                                .
                                each-any))))
                      (if #{tmp 25956}#
                        (@apply
                          (lambda (#{k 25960}#
                                   #{v 25961}#
                                   #{e1 25962}#
                                   #{e2 25963}#)
                            (#{parse-body 24788}#
                              #{req 25935}#
                              #{opt 25936}#
                              #{rest 25937}#
                              #{kw 25938}#
                              (cons #{e1 25962}# #{e2 25963}#)
                              #{vars 25940}#
                              #{r* 25941}#
                              #{w* 25942}#
                              #{inits 25943}#
                              (append
                                #{meta 25944}#
                                (syntax->datum
                                  (map cons #{k 25960}# #{v 25961}#)))))
                          #{tmp 25956}#)
                        (let ((#{tmp 25964}#
                                ($sc-dispatch
                                  #{body 25939}#
                                  '(any . each-any))))
                          (if #{tmp 25964}#
                            (@apply
                              (lambda (#{e1 25968}# #{e2 25969}#)
                                (values
                                  #{meta 25944}#
                                  #{req 25935}#
                                  #{opt 25936}#
                                  #{rest 25937}#
                                  #{kw 25938}#
                                  #{inits 25943}#
                                  #{vars 25940}#
                                  (#{expand-body 4454}#
                                    (cons #{e1 25968}# #{e2 25969}#)
                                    (#{wrap 4443}#
                                      (begin
                                        (if (if (pair? #{e 24778}#)
                                              #{s 24781}#
                                              #f)
                                          (set-source-properties!
                                            #{e 24778}#
                                            #{s 24781}#))
                                        #{e 24778}#)
                                      #{w 24780}#
                                      #{mod 24782}#)
                                    #{r* 25941}#
                                    #{w* 25942}#
                                    #{mod 24782}#)))
                              #{tmp 25964}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{body 25939}#))))))))))
           (let ((#{tmp 24790}#
                   ($sc-dispatch #{clauses 24784}# '())))
             (if #{tmp 24790}#
               (@apply
                 (lambda () (values '() #f))
                 #{tmp 24790}#)
               (let ((#{tmp 24794}#
                       ($sc-dispatch
                         #{clauses 24784}#
                         '((any any . each-any)
                           .
                           #(each (any any . each-any))))))
                 (if #{tmp 24794}#
                   (@apply
                     (lambda (#{args 24798}#
                              #{e1 24799}#
                              #{e2 24800}#
                              #{args* 24801}#
                              #{e1* 24802}#
                              #{e2* 24803}#)
                       (call-with-values
                         (lambda ()
                           (#{get-formals 24783}# #{args 24798}#))
                         (lambda (#{req 24804}#
                                  #{opt 24805}#
                                  #{rest 24806}#
                                  #{kw 24807}#)
                           (call-with-values
                             (lambda ()
                               (#{parse-req 24785}#
                                 #{req 24804}#
                                 #{opt 24805}#
                                 #{rest 24806}#
                                 #{kw 24807}#
                                 (cons #{e1 24799}# #{e2 24800}#)))
                             (lambda (#{meta 24874}#
                                      #{req 24875}#
                                      #{opt 24876}#
                                      #{rest 24877}#
                                      #{kw 24878}#
                                      #{inits 24879}#
                                      #{vars 24880}#
                                      #{body 24881}#)
                               (call-with-values
                                 (lambda ()
                                   (#{expand-lambda-case 4462}#
                                     #{e 24778}#
                                     #{r 24779}#
                                     #{w 24780}#
                                     #{s 24781}#
                                     #{mod 24782}#
                                     #{get-formals 24783}#
                                     (map (lambda (#{tmp 2833 24882}#
                                                   #{tmp 2832 24883}#
                                                   #{tmp 2831 24884}#)
                                            (cons #{tmp 2831 24884}#
                                                  (cons #{tmp 2832 24883}#
                                                        #{tmp 2833 24882}#)))
                                          #{e2* 24803}#
                                          #{e1* 24802}#
                                          #{args* 24801}#)))
                                 (lambda (#{meta* 24885}# #{else* 24886}#)
                                   (values
                                     (append #{meta 24874}# #{meta* 24885}#)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #{s 24781}#
                                       #{req 24875}#
                                       #{opt 24876}#
                                       #{rest 24877}#
                                       #{kw 24878}#
                                       #{inits 24879}#
                                       #{vars 24880}#
                                       #{body 24881}#
                                       #{else* 24886}#)))))))))
                     #{tmp 24794}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{clauses 24784}#))))))))
     (#{strip 4463}#
       (lambda (#{x 26006}# #{w 26007}#)
         (if (memq 'top (car #{w 26007}#))
           #{x 26006}#
           (letrec*
             ((#{f 26008}#
                (lambda (#{x 26011}#)
                  (if (if (vector? #{x 26011}#)
                        (if (= (vector-length #{x 26011}#) 4)
                          (eq? (vector-ref #{x 26011}# 0) 'syntax-object)
                          #f)
                        #f)
                    (#{strip 4463}#
                      (vector-ref #{x 26011}# 1)
                      (vector-ref #{x 26011}# 2))
                    (if (pair? #{x 26011}#)
                      (let ((#{a 26030}# (#{f 26008}# (car #{x 26011}#)))
                            (#{d 26031}# (#{f 26008}# (cdr #{x 26011}#))))
                        (if (if (eq? #{a 26030}# (car #{x 26011}#))
                              (eq? #{d 26031}# (cdr #{x 26011}#))
                              #f)
                          #{x 26011}#
                          (cons #{a 26030}# #{d 26031}#)))
                      (if (vector? #{x 26011}#)
                        (let ((#{old 26034}# (vector->list #{x 26011}#)))
                          (let ((#{new 26035}#
                                  (map #{f 26008}# #{old 26034}#)))
                            (letrec*
                              ((#{lp 26036}#
                                 (lambda (#{l1 26112}# #{l2 26113}#)
                                   (if (null? #{l1 26112}#)
                                     #{x 26011}#
                                     (if (eq? (car #{l1 26112}#)
                                              (car #{l2 26113}#))
                                       (#{lp 26036}#
                                         (cdr #{l1 26112}#)
                                         (cdr #{l2 26113}#))
                                       (list->vector #{new 26035}#))))))
                              (#{lp 26036}# #{old 26034}# #{new 26035}#))))
                        #{x 26011}#))))))
             (#{f 26008}# #{x 26006}#)))))
     (#{gen-var 4464}#
       (lambda (#{id 24930}#)
         (let ((#{id 24931}#
                 (if (if (vector? #{id 24930}#)
                       (if (= (vector-length #{id 24930}#) 4)
                         (eq? (vector-ref #{id 24930}# 0) 'syntax-object)
                         #f)
                       #f)
                   (vector-ref #{id 24930}# 1)
                   #{id 24930}#)))
           (gensym
             (string-append (symbol->string #{id 24931}#) " "))))))
    (begin
      (set! #{transformer-environment 4436}#
        (make-fluid
          (lambda (#{k 14155}#)
            (error "called outside the dynamic extent of a syntax transformer"))))
      (module-define!
        (current-module)
        'letrec-syntax
        (make-syntax-transformer
          'letrec-syntax
          'local-syntax
          #t))
      (module-define!
        (current-module)
        'let-syntax
        (make-syntax-transformer
          'let-syntax
          'local-syntax
          #f))
      (#{global-extend 4413}#
        'core
        'syntax-parameterize
        (lambda (#{e 4585}#
                 #{r 4586}#
                 #{w 4587}#
                 #{s 4588}#
                 #{mod 4589}#)
          (let ((#{tmp 4591}#
                  ($sc-dispatch
                    #{e 4585}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 4591}#
                  (@apply
                    (lambda (#{var 4595}#
                             #{val 4596}#
                             #{e1 4597}#
                             #{e2 4598}#)
                      (#{valid-bound-ids? 4440}# #{var 4595}#))
                    #{tmp 4591}#)
                  #f)
              (@apply
                (lambda (#{var 4676}#
                         #{val 4677}#
                         #{e1 4678}#
                         #{e2 4679}#)
                  (let ((#{names 4680}#
                          (map (lambda (#{x 4730}#)
                                 (#{id-var-name 4434}# #{x 4730}# #{w 4587}#))
                               #{var 4676}#)))
                    (begin
                      (for-each
                        (lambda (#{id 4681}# #{n 4682}#)
                          (let ((#{atom-key 4683}#
                                  (car (let ((#{t 4690}#
                                               (assq #{n 4682}# #{r 4586}#)))
                                         (if #{t 4690}#
                                           (cdr #{t 4690}#)
                                           (if (symbol? #{n 4682}#)
                                             (let ((#{t 4695}#
                                                     (#{get-global-definition-hook 4378}#
                                                       #{n 4682}#
                                                       #{mod 4589}#)))
                                               (if #{t 4695}#
                                                 #{t 4695}#
                                                 '(global)))
                                             '(displaced-lexical)))))))
                            (if (eqv? #{atom-key 4683}# 'displaced-lexical)
                              (syntax-violation
                                'syntax-parameterize
                                "identifier out of context"
                                #{e 4585}#
                                (#{wrap 4443}#
                                  (begin
                                    (if (if (pair? #{id 4681}#) #{s 4588}# #f)
                                      (set-source-properties!
                                        #{id 4681}#
                                        #{s 4588}#))
                                    #{id 4681}#)
                                  #{w 4587}#
                                  #{mod 4589}#)))))
                        #{var 4676}#
                        #{names 4680}#)
                      (#{expand-body 4454}#
                        (cons #{e1 4678}# #{e2 4679}#)
                        (#{wrap 4443}#
                          (begin
                            (if (if (pair? #{e 4585}#) #{s 4588}# #f)
                              (set-source-properties! #{e 4585}# #{s 4588}#))
                            #{e 4585}#)
                          #{w 4587}#
                          #{mod 4589}#)
                        (#{extend-env 4409}#
                          #{names 4680}#
                          (let ((#{trans-r 4816}#
                                  (#{macros-only-env 4411}# #{r 4586}#)))
                            (map (lambda (#{x 4817}#)
                                   (cons 'macro
                                         (#{eval-local-transformer 4456}#
                                           (#{expand 4450}#
                                             #{x 4817}#
                                             #{trans-r 4816}#
                                             #{w 4587}#
                                             #{mod 4589}#)
                                           #{mod 4589}#)))
                                 #{val 4677}#))
                          #{r 4586}#)
                        #{w 4587}#
                        #{mod 4589}#))))
                #{tmp 4591}#)
              (syntax-violation
                'syntax-parameterize
                "bad syntax"
                (#{wrap 4443}#
                  (begin
                    (if (if (pair? #{e 4585}#) #{s 4588}# #f)
                      (set-source-properties! #{e 4585}# #{s 4588}#))
                    #{e 4585}#)
                  #{w 4587}#
                  #{mod 4589}#))))))
      (module-define!
        (current-module)
        'quote
        (make-syntax-transformer
          'quote
          'core
          (lambda (#{e 5026}#
                   #{r 5027}#
                   #{w 5028}#
                   #{s 5029}#
                   #{mod 5030}#)
            (let ((#{tmp 5032}# ($sc-dispatch #{e 5026}# '(_ any))))
              (if #{tmp 5032}#
                (@apply
                  (lambda (#{e 5035}#)
                    (let ((#{exp 5039}#
                            (#{strip 4463}# #{e 5035}# #{w 5028}#)))
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 1)
                        #{s 5029}#
                        #{exp 5039}#)))
                  #{tmp 5032}#)
                (syntax-violation
                  'quote
                  "bad syntax"
                  (#{wrap 4443}#
                    (begin
                      (if (if (pair? #{e 5026}#) #{s 5029}# #f)
                        (set-source-properties! #{e 5026}# #{s 5029}#))
                      #{e 5026}#)
                    #{w 5028}#
                    #{mod 5030}#)))))))
      (#{global-extend 4413}#
        'core
        'syntax
        (letrec*
          ((#{gen-syntax 5259}#
             (lambda (#{src 5361}#
                      #{e 5362}#
                      #{r 5363}#
                      #{maps 5364}#
                      #{ellipsis? 5365}#
                      #{mod 5366}#)
               (if (if (symbol? #{e 5362}#)
                     #t
                     (if (if (vector? #{e 5362}#)
                           (if (= (vector-length #{e 5362}#) 4)
                             (eq? (vector-ref #{e 5362}# 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref #{e 5362}# 1))
                       #f))
                 (let ((#{label 5393}#
                         (#{id-var-name 4434}# #{e 5362}# '(()))))
                   (let ((#{b 5394}#
                           (let ((#{t 5401}# (assq #{label 5393}# #{r 5363}#)))
                             (if #{t 5401}#
                               (cdr #{t 5401}#)
                               (if (symbol? #{label 5393}#)
                                 (let ((#{t 5407}#
                                         (#{get-global-definition-hook 4378}#
                                           #{label 5393}#
                                           #{mod 5366}#)))
                                   (if #{t 5407}# #{t 5407}# '(global)))
                                 '(displaced-lexical))))))
                     (if (eq? (car #{b 5394}#) 'syntax)
                       (call-with-values
                         (lambda ()
                           (let ((#{var.lev 5416}# (cdr #{b 5394}#)))
                             (#{gen-ref 5260}#
                               #{src 5361}#
                               (car #{var.lev 5416}#)
                               (cdr #{var.lev 5416}#)
                               #{maps 5364}#)))
                         (lambda (#{var 5420}# #{maps 5421}#)
                           (values (list 'ref #{var 5420}#) #{maps 5421}#)))
                       (if (#{ellipsis? 5365}# #{e 5362}#)
                         (syntax-violation
                           'syntax
                           "misplaced ellipsis"
                           #{src 5361}#)
                         (values (list 'quote #{e 5362}#) #{maps 5364}#)))))
                 (let ((#{tmp 5423}#
                         ($sc-dispatch #{e 5362}# '(any any))))
                   (if (if #{tmp 5423}#
                         (@apply
                           (lambda (#{dots 5427}# #{e 5428}#)
                             (#{ellipsis? 5365}# #{dots 5427}#))
                           #{tmp 5423}#)
                         #f)
                     (@apply
                       (lambda (#{dots 5429}# #{e 5430}#)
                         (#{gen-syntax 5259}#
                           #{src 5361}#
                           #{e 5430}#
                           #{r 5363}#
                           #{maps 5364}#
                           (lambda (#{x 5431}#) #f)
                           #{mod 5366}#))
                       #{tmp 5423}#)
                     (let ((#{tmp 5432}#
                             ($sc-dispatch #{e 5362}# '(any any . any))))
                       (if (if #{tmp 5432}#
                             (@apply
                               (lambda (#{x 5436}# #{dots 5437}# #{y 5438}#)
                                 (#{ellipsis? 5365}# #{dots 5437}#))
                               #{tmp 5432}#)
                             #f)
                         (@apply
                           (lambda (#{x 5439}# #{dots 5440}# #{y 5441}#)
                             (letrec*
                               ((#{f 5442}#
                                  (lambda (#{y 5450}# #{k 5451}#)
                                    (let ((#{tmp 5453}#
                                            ($sc-dispatch
                                              #{y 5450}#
                                              '(any . any))))
                                      (if (if #{tmp 5453}#
                                            (@apply
                                              (lambda (#{dots 5457}#
                                                       #{y 5458}#)
                                                (#{ellipsis? 5365}#
                                                  #{dots 5457}#))
                                              #{tmp 5453}#)
                                            #f)
                                        (@apply
                                          (lambda (#{dots 5459}# #{y 5460}#)
                                            (#{f 5442}#
                                              #{y 5460}#
                                              (lambda (#{maps 5461}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{k 5451}#
                                                      (cons '()
                                                            #{maps 5461}#)))
                                                  (lambda (#{x 5462}#
                                                           #{maps 5463}#)
                                                    (if (null? (car #{maps 5463}#))
                                                      (syntax-violation
                                                        'syntax
                                                        "extra ellipsis"
                                                        #{src 5361}#)
                                                      (values
                                                        (let ((#{map-env 5467}#
                                                                (car #{maps 5463}#)))
                                                          (list 'apply
                                                                '(primitive
                                                                   append)
                                                                (#{gen-map 5262}#
                                                                  #{x 5462}#
                                                                  #{map-env 5467}#)))
                                                        (cdr #{maps 5463}#))))))))
                                          #{tmp 5453}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{gen-syntax 5259}#
                                              #{src 5361}#
                                              #{y 5450}#
                                              #{r 5363}#
                                              #{maps 5364}#
                                              #{ellipsis? 5365}#
                                              #{mod 5366}#))
                                          (lambda (#{y 5470}# #{maps 5471}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{k 5451}# #{maps 5471}#))
                                              (lambda (#{x 5472}#
                                                       #{maps 5473}#)
                                                (values
                                                  (if (equal? #{y 5470}# ''())
                                                    #{x 5472}#
                                                    (list 'append
                                                          #{x 5472}#
                                                          #{y 5470}#))
                                                  #{maps 5473}#))))))))))
                               (#{f 5442}#
                                 #{y 5441}#
                                 (lambda (#{maps 5445}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5259}#
                                         #{src 5361}#
                                         #{x 5439}#
                                         #{r 5363}#
                                         (cons '() #{maps 5445}#)
                                         #{ellipsis? 5365}#
                                         #{mod 5366}#))
                                     (lambda (#{x 5446}# #{maps 5447}#)
                                       (if (null? (car #{maps 5447}#))
                                         (syntax-violation
                                           'syntax
                                           "extra ellipsis"
                                           #{src 5361}#)
                                         (values
                                           (#{gen-map 5262}#
                                             #{x 5446}#
                                             (car #{maps 5447}#))
                                           (cdr #{maps 5447}#)))))))))
                           #{tmp 5432}#)
                         (let ((#{tmp 5489}#
                                 ($sc-dispatch #{e 5362}# '(any . any))))
                           (if #{tmp 5489}#
                             (@apply
                               (lambda (#{x 5493}# #{y 5494}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 5259}#
                                       #{src 5361}#
                                       #{x 5493}#
                                       #{r 5363}#
                                       #{maps 5364}#
                                       #{ellipsis? 5365}#
                                       #{mod 5366}#))
                                   (lambda (#{x 5495}# #{maps 5496}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{gen-syntax 5259}#
                                           #{src 5361}#
                                           #{y 5494}#
                                           #{r 5363}#
                                           #{maps 5496}#
                                           #{ellipsis? 5365}#
                                           #{mod 5366}#))
                                       (lambda (#{y 5497}# #{maps 5498}#)
                                         (values
                                           (let ((#{atom-key 5503}#
                                                   (car #{y 5497}#)))
                                             (if (eqv? #{atom-key 5503}#
                                                       'quote)
                                               (if (eq? (car #{x 5495}#)
                                                        'quote)
                                                 (list 'quote
                                                       (cons (car (cdr #{x 5495}#))
                                                             (car (cdr #{y 5497}#))))
                                                 (if (eq? (car (cdr #{y 5497}#))
                                                          '())
                                                   (list 'list #{x 5495}#)
                                                   (list 'cons
                                                         #{x 5495}#
                                                         #{y 5497}#)))
                                               (if (eqv? #{atom-key 5503}#
                                                         'list)
                                                 (cons 'list
                                                       (cons #{x 5495}#
                                                             (cdr #{y 5497}#)))
                                                 (list 'cons
                                                       #{x 5495}#
                                                       #{y 5497}#))))
                                           #{maps 5498}#))))))
                               #{tmp 5489}#)
                             (let ((#{tmp 5532}#
                                     ($sc-dispatch
                                       #{e 5362}#
                                       '#(vector (any . each-any)))))
                               (if #{tmp 5532}#
                                 (@apply
                                   (lambda (#{e1 5536}# #{e2 5537}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{gen-syntax 5259}#
                                           #{src 5361}#
                                           (cons #{e1 5536}# #{e2 5537}#)
                                           #{r 5363}#
                                           #{maps 5364}#
                                           #{ellipsis? 5365}#
                                           #{mod 5366}#))
                                       (lambda (#{e 5538}# #{maps 5539}#)
                                         (values
                                           (if (eq? (car #{e 5538}#) 'list)
                                             (cons 'vector (cdr #{e 5538}#))
                                             (if (eq? (car #{e 5538}#) 'quote)
                                               (list 'quote
                                                     (list->vector
                                                       (car (cdr #{e 5538}#))))
                                               (list 'list->vector
                                                     #{e 5538}#)))
                                           #{maps 5539}#))))
                                   #{tmp 5532}#)
                                 (values
                                   (list 'quote #{e 5362}#)
                                   #{maps 5364}#))))))))))))
           (#{gen-ref 5260}#
             (lambda (#{src 5566}#
                      #{var 5567}#
                      #{level 5568}#
                      #{maps 5569}#)
               (if (= #{level 5568}# 0)
                 (values #{var 5567}# #{maps 5569}#)
                 (if (null? #{maps 5569}#)
                   (syntax-violation
                     'syntax
                     "missing ellipsis"
                     #{src 5566}#)
                   (call-with-values
                     (lambda ()
                       (#{gen-ref 5260}#
                         #{src 5566}#
                         #{var 5567}#
                         (#{1-}# #{level 5568}#)
                         (cdr #{maps 5569}#)))
                     (lambda (#{outer-var 5570}# #{outer-maps 5571}#)
                       (let ((#{b 5572}#
                               (assq #{outer-var 5570}# (car #{maps 5569}#))))
                         (if #{b 5572}#
                           (values (cdr #{b 5572}#) #{maps 5569}#)
                           (let ((#{inner-var 5574}#
                                   (gensym
                                     (string-append
                                       (symbol->string 'tmp)
                                       " "))))
                             (values
                               #{inner-var 5574}#
                               (cons (cons (cons #{outer-var 5570}#
                                                 #{inner-var 5574}#)
                                           (car #{maps 5569}#))
                                     #{outer-maps 5571}#)))))))))))
           (#{gen-map 5262}#
             (lambda (#{e 5588}# #{map-env 5589}#)
               (let ((#{formals 5590}# (map cdr #{map-env 5589}#))
                     (#{actuals 5591}#
                       (map (lambda (#{x 5593}#)
                              (list 'ref (car #{x 5593}#)))
                            #{map-env 5589}#)))
                 (if (eq? (car #{e 5588}#) 'ref)
                   (car #{actuals 5591}#)
                   (if (and-map
                         (lambda (#{x 5594}#)
                           (if (eq? (car #{x 5594}#) 'ref)
                             (memq (car (cdr #{x 5594}#)) #{formals 5590}#)
                             #f))
                         (cdr #{e 5588}#))
                     (cons 'map
                           (cons (list 'primitive (car #{e 5588}#))
                                 (map (let ((#{r 5596}#
                                              (map cons
                                                   #{formals 5590}#
                                                   #{actuals 5591}#)))
                                        (lambda (#{x 5597}#)
                                          (cdr (assq (car (cdr #{x 5597}#))
                                                     #{r 5596}#))))
                                      (cdr #{e 5588}#))))
                     (cons 'map
                           (cons (list 'lambda #{formals 5590}# #{e 5588}#)
                                 #{actuals 5591}#)))))))
           (#{regen 5266}#
             (lambda (#{x 5599}#)
               (let ((#{atom-key 5600}# (car #{x 5599}#)))
                 (if (eqv? #{atom-key 5600}# 'ref)
                   (let ((#{name 5610}# (car (cdr #{x 5599}#)))
                         (#{var 5611}# (car (cdr #{x 5599}#))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 3)
                       #f
                       #{name 5610}#
                       #{var 5611}#))
                   (if (eqv? #{atom-key 5600}# 'primitive)
                     (let ((#{name 5623}# (car (cdr #{x 5599}#))))
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           #{name 5623}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           #{name 5623}#
                           #f)))
                     (if (eqv? #{atom-key 5600}# 'quote)
                       (let ((#{exp 5641}# (car (cdr #{x 5599}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 1)
                           #f
                           #{exp 5641}#))
                       (if (eqv? #{atom-key 5600}# 'lambda)
                         (if (list? (car (cdr #{x 5599}#)))
                           (let ((#{req 5652}# (car (cdr #{x 5599}#)))
                                 (#{vars 5654}# (car (cdr #{x 5599}#)))
                                 (#{exp 5656}#
                                   (#{regen 5266}#
                                     (car (cdr (cdr #{x 5599}#))))))
                             (let ((#{body 5661}#
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       #{req 5652}#
                                       #f
                                       #f
                                       #f
                                       '()
                                       #{vars 5654}#
                                       #{exp 5656}#
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 #{body 5661}#)))
                           (error "how did we get here" #{x 5599}#))
                         (let ((#{fun-exp 5677}#
                                 (let ((#{name 5686}# (car #{x 5599}#)))
                                   (if (equal?
                                         (module-name (current-module))
                                         '(guile))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 7)
                                       #f
                                       #{name 5686}#)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 5)
                                       #f
                                       '(guile)
                                       #{name 5686}#
                                       #f))))
                               (#{arg-exps 5678}#
                                 (map #{regen 5266}# (cdr #{x 5599}#))))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 11)
                             #f
                             #{fun-exp 5677}#
                             #{arg-exps 5678}#))))))))))
          (lambda (#{e 5267}#
                   #{r 5268}#
                   #{w 5269}#
                   #{s 5270}#
                   #{mod 5271}#)
            (let ((#{e 5272}#
                    (#{wrap 4443}#
                      (begin
                        (if (if (pair? #{e 5267}#) #{s 5270}# #f)
                          (set-source-properties! #{e 5267}# #{s 5270}#))
                        #{e 5267}#)
                      #{w 5269}#
                      #{mod 5271}#)))
              (let ((#{tmp 5274}# ($sc-dispatch #{e 5272}# '(_ any))))
                (if #{tmp 5274}#
                  (@apply
                    (lambda (#{x 5299}#)
                      (call-with-values
                        (lambda ()
                          (#{gen-syntax 5259}#
                            #{e 5272}#
                            #{x 5299}#
                            #{r 5268}#
                            '()
                            #{ellipsis? 4458}#
                            #{mod 5271}#))
                        (lambda (#{e 5353}# #{maps 5354}#)
                          (#{regen 5266}# #{e 5353}#))))
                    #{tmp 5274}#)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    #{e 5272}#)))))))
      (#{global-extend 4413}#
        'core
        'lambda
        (lambda (#{e 5879}#
                 #{r 5880}#
                 #{w 5881}#
                 #{s 5882}#
                 #{mod 5883}#)
          (let ((#{tmp 5885}#
                  ($sc-dispatch #{e 5879}# '(_ any any . each-any))))
            (if #{tmp 5885}#
              (@apply
                (lambda (#{args 5889}# #{e1 5890}# #{e2 5891}#)
                  (call-with-values
                    (lambda ()
                      (#{lambda-formals 4459}# #{args 5889}#))
                    (lambda (#{req 5894}#
                             #{opt 5895}#
                             #{rest 5896}#
                             #{kw 5897}#)
                      (letrec*
                        ((#{lp 5898}#
                           (lambda (#{body 5901}# #{meta 5902}#)
                             (let ((#{tmp 5904}#
                                     ($sc-dispatch
                                       #{body 5901}#
                                       '(any any . each-any))))
                               (if (if #{tmp 5904}#
                                     (@apply
                                       (lambda (#{docstring 5908}#
                                                #{e1 5909}#
                                                #{e2 5910}#)
                                         (string?
                                           (syntax->datum #{docstring 5908}#)))
                                       #{tmp 5904}#)
                                     #f)
                                 (@apply
                                   (lambda (#{docstring 5911}#
                                            #{e1 5912}#
                                            #{e2 5913}#)
                                     (#{lp 5898}#
                                       (cons #{e1 5912}# #{e2 5913}#)
                                       (append
                                         #{meta 5902}#
                                         (list (cons 'documentation
                                                     (syntax->datum
                                                       #{docstring 5911}#))))))
                                   #{tmp 5904}#)
                                 (let ((#{tmp 5914}#
                                         ($sc-dispatch
                                           #{body 5901}#
                                           '(#(vector #(each (any . any)))
                                             any
                                             .
                                             each-any))))
                                   (if #{tmp 5914}#
                                     (@apply
                                       (lambda (#{k 5918}#
                                                #{v 5919}#
                                                #{e1 5920}#
                                                #{e2 5921}#)
                                         (#{lp 5898}#
                                           (cons #{e1 5920}# #{e2 5921}#)
                                           (append
                                             #{meta 5902}#
                                             (syntax->datum
                                               (map cons
                                                    #{k 5918}#
                                                    #{v 5919}#)))))
                                       #{tmp 5914}#)
                                     (#{expand-simple-lambda 4460}#
                                       #{e 5879}#
                                       #{r 5880}#
                                       #{w 5881}#
                                       #{s 5882}#
                                       #{mod 5883}#
                                       #{req 5894}#
                                       #{rest 5896}#
                                       #{meta 5902}#
                                       #{body 5901}#))))))))
                        (#{lp 5898}# (cons #{e1 5890}# #{e2 5891}#) '())))))
                #{tmp 5885}#)
              (syntax-violation
                'lambda
                "bad lambda"
                #{e 5879}#)))))
      (#{global-extend 4413}#
        'core
        'lambda*
        (lambda (#{e 6212}#
                 #{r 6213}#
                 #{w 6214}#
                 #{s 6215}#
                 #{mod 6216}#)
          (let ((#{tmp 6218}#
                  ($sc-dispatch #{e 6212}# '(_ any any . each-any))))
            (if #{tmp 6218}#
              (@apply
                (lambda (#{args 6222}# #{e1 6223}# #{e2 6224}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case 4462}#
                        #{e 6212}#
                        #{r 6213}#
                        #{w 6214}#
                        #{s 6215}#
                        #{mod 6216}#
                        #{lambda*-formals 4461}#
                        (list (cons #{args 6222}#
                                    (cons #{e1 6223}# #{e2 6224}#)))))
                    (lambda (#{meta 6227}# #{lcase 6228}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s 6215}#
                        #{meta 6227}#
                        #{lcase 6228}#))))
                #{tmp 6218}#)
              (syntax-violation
                'lambda
                "bad lambda*"
                #{e 6212}#)))))
      (#{global-extend 4413}#
        'core
        'case-lambda
        (lambda (#{e 6398}#
                 #{r 6399}#
                 #{w 6400}#
                 #{s 6401}#
                 #{mod 6402}#)
          (let ((#{tmp 6404}#
                  ($sc-dispatch
                    #{e 6398}#
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if #{tmp 6404}#
              (@apply
                (lambda (#{args 6408}#
                         #{e1 6409}#
                         #{e2 6410}#
                         #{args* 6411}#
                         #{e1* 6412}#
                         #{e2* 6413}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case 4462}#
                        #{e 6398}#
                        #{r 6399}#
                        #{w 6400}#
                        #{s 6401}#
                        #{mod 6402}#
                        #{lambda-formals 4459}#
                        (cons (cons #{args 6408}#
                                    (cons #{e1 6409}# #{e2 6410}#))
                              (map (lambda (#{tmp 3332 6416}#
                                            #{tmp 3331 6417}#
                                            #{tmp 3330 6418}#)
                                     (cons #{tmp 3330 6418}#
                                           (cons #{tmp 3331 6417}#
                                                 #{tmp 3332 6416}#)))
                                   #{e2* 6413}#
                                   #{e1* 6412}#
                                   #{args* 6411}#))))
                    (lambda (#{meta 6419}# #{lcase 6420}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s 6401}#
                        #{meta 6419}#
                        #{lcase 6420}#))))
                #{tmp 6404}#)
              (syntax-violation
                'case-lambda
                "bad case-lambda"
                #{e 6398}#)))))
      (#{global-extend 4413}#
        'core
        'case-lambda*
        (lambda (#{e 6582}#
                 #{r 6583}#
                 #{w 6584}#
                 #{s 6585}#
                 #{mod 6586}#)
          (let ((#{tmp 6588}#
                  ($sc-dispatch
                    #{e 6582}#
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if #{tmp 6588}#
              (@apply
                (lambda (#{args 6592}#
                         #{e1 6593}#
                         #{e2 6594}#
                         #{args* 6595}#
                         #{e1* 6596}#
                         #{e2* 6597}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case 4462}#
                        #{e 6582}#
                        #{r 6583}#
                        #{w 6584}#
                        #{s 6585}#
                        #{mod 6586}#
                        #{lambda*-formals 4461}#
                        (cons (cons #{args 6592}#
                                    (cons #{e1 6593}# #{e2 6594}#))
                              (map (lambda (#{tmp 3367 6600}#
                                            #{tmp 3366 6601}#
                                            #{tmp 3365 6602}#)
                                     (cons #{tmp 3365 6602}#
                                           (cons #{tmp 3366 6601}#
                                                 #{tmp 3367 6600}#)))
                                   #{e2* 6597}#
                                   #{e1* 6596}#
                                   #{args* 6595}#))))
                    (lambda (#{meta 6603}# #{lcase 6604}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s 6585}#
                        #{meta 6603}#
                        #{lcase 6604}#))))
                #{tmp 6588}#)
              (syntax-violation
                'case-lambda
                "bad case-lambda*"
                #{e 6582}#)))))
      (#{global-extend 4413}#
        'core
        'let
        (letrec*
          ((#{expand-let 6795}#
             (lambda (#{e 6944}#
                      #{r 6945}#
                      #{w 6946}#
                      #{s 6947}#
                      #{mod 6948}#
                      #{constructor 6949}#
                      #{ids 6950}#
                      #{vals 6951}#
                      #{exps 6952}#)
               (if (not (#{valid-bound-ids? 4440}# #{ids 6950}#))
                 (syntax-violation
                   'let
                   "duplicate bound variable"
                   #{e 6944}#)
                 (let ((#{labels 7030}#
                         (#{gen-labels 4418}# #{ids 6950}#))
                       (#{new-vars 7031}#
                         (map #{gen-var 4464}# #{ids 6950}#)))
                   (let ((#{nw 7032}#
                           (#{make-binding-wrap 4429}#
                             #{ids 6950}#
                             #{labels 7030}#
                             #{w 6946}#))
                         (#{nr 7033}#
                           (#{extend-var-env 4410}#
                             #{labels 7030}#
                             #{new-vars 7031}#
                             #{r 6945}#)))
                     (#{constructor 6949}#
                       #{s 6947}#
                       (map syntax->datum #{ids 6950}#)
                       #{new-vars 7031}#
                       (map (lambda (#{x 7050}#)
                              (#{expand 4450}#
                                #{x 7050}#
                                #{r 6945}#
                                #{w 6946}#
                                #{mod 6948}#))
                            #{vals 6951}#)
                       (#{expand-body 4454}#
                         #{exps 6952}#
                         (#{source-wrap 4444}#
                           #{e 6944}#
                           #{nw 7032}#
                           #{s 6947}#
                           #{mod 6948}#)
                         #{nr 7033}#
                         #{nw 7032}#
                         #{mod 6948}#))))))))
          (lambda (#{e 6796}#
                   #{r 6797}#
                   #{w 6798}#
                   #{s 6799}#
                   #{mod 6800}#)
            (let ((#{tmp 6802}#
                    ($sc-dispatch
                      #{e 6796}#
                      '(_ #(each (any any)) any . each-any))))
              (if (if #{tmp 6802}#
                    (@apply
                      (lambda (#{id 6806}#
                               #{val 6807}#
                               #{e1 6808}#
                               #{e2 6809}#)
                        (and-map #{id? 4415}# #{id 6806}#))
                      #{tmp 6802}#)
                    #f)
                (@apply
                  (lambda (#{id 6825}#
                           #{val 6826}#
                           #{e1 6827}#
                           #{e2 6828}#)
                    (#{expand-let 6795}#
                      #{e 6796}#
                      #{r 6797}#
                      #{w 6798}#
                      #{s 6799}#
                      #{mod 6800}#
                      #{build-let 4397}#
                      #{id 6825}#
                      #{val 6826}#
                      (cons #{e1 6827}# #{e2 6828}#)))
                  #{tmp 6802}#)
                (let ((#{tmp 6858}#
                        ($sc-dispatch
                          #{e 6796}#
                          '(_ any #(each (any any)) any . each-any))))
                  (if (if #{tmp 6858}#
                        (@apply
                          (lambda (#{f 6862}#
                                   #{id 6863}#
                                   #{val 6864}#
                                   #{e1 6865}#
                                   #{e2 6866}#)
                            (if (if (symbol? #{f 6862}#)
                                  #t
                                  (if (if (vector? #{f 6862}#)
                                        (if (= (vector-length #{f 6862}#) 4)
                                          (eq? (vector-ref #{f 6862}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{f 6862}# 1))
                                    #f))
                              (and-map #{id? 4415}# #{id 6863}#)
                              #f))
                          #{tmp 6858}#)
                        #f)
                    (@apply
                      (lambda (#{f 6908}#
                               #{id 6909}#
                               #{val 6910}#
                               #{e1 6911}#
                               #{e2 6912}#)
                        (#{expand-let 6795}#
                          #{e 6796}#
                          #{r 6797}#
                          #{w 6798}#
                          #{s 6799}#
                          #{mod 6800}#
                          #{build-named-let 4398}#
                          (cons #{f 6908}# #{id 6909}#)
                          #{val 6910}#
                          (cons #{e1 6911}# #{e2 6912}#)))
                      #{tmp 6858}#)
                    (syntax-violation
                      'let
                      "bad let"
                      (#{wrap 4443}#
                        (begin
                          (if (if (pair? #{e 6796}#) #{s 6799}# #f)
                            (set-source-properties! #{e 6796}# #{s 6799}#))
                          #{e 6796}#)
                        #{w 6798}#
                        #{mod 6800}#)))))))))
      (#{global-extend 4413}#
        'core
        'letrec
        (lambda (#{e 7492}#
                 #{r 7493}#
                 #{w 7494}#
                 #{s 7495}#
                 #{mod 7496}#)
          (let ((#{tmp 7498}#
                  ($sc-dispatch
                    #{e 7492}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 7498}#
                  (@apply
                    (lambda (#{id 7502}#
                             #{val 7503}#
                             #{e1 7504}#
                             #{e2 7505}#)
                      (and-map #{id? 4415}# #{id 7502}#))
                    #{tmp 7498}#)
                  #f)
              (@apply
                (lambda (#{id 7521}#
                         #{val 7522}#
                         #{e1 7523}#
                         #{e2 7524}#)
                  (if (not (#{valid-bound-ids? 4440}# #{id 7521}#))
                    (syntax-violation
                      'letrec
                      "duplicate bound variable"
                      #{e 7492}#)
                    (let ((#{labels 7614}#
                            (#{gen-labels 4418}# #{id 7521}#))
                          (#{new-vars 7615}#
                            (map #{gen-var 4464}# #{id 7521}#)))
                      (let ((#{w 7616}#
                              (#{make-binding-wrap 4429}#
                                #{id 7521}#
                                #{labels 7614}#
                                #{w 7494}#))
                            (#{r 7617}#
                              (#{extend-var-env 4410}#
                                #{labels 7614}#
                                #{new-vars 7615}#
                                #{r 7493}#)))
                        (#{build-letrec 4399}#
                          #{s 7495}#
                          #f
                          (map syntax->datum #{id 7521}#)
                          #{new-vars 7615}#
                          (map (lambda (#{x 7704}#)
                                 (#{expand 4450}#
                                   #{x 7704}#
                                   #{r 7617}#
                                   #{w 7616}#
                                   #{mod 7496}#))
                               #{val 7522}#)
                          (#{expand-body 4454}#
                            (cons #{e1 7523}# #{e2 7524}#)
                            (#{wrap 4443}#
                              (begin
                                (if (if (pair? #{e 7492}#) #{s 7495}# #f)
                                  (set-source-properties!
                                    #{e 7492}#
                                    #{s 7495}#))
                                #{e 7492}#)
                              #{w 7616}#
                              #{mod 7496}#)
                            #{r 7617}#
                            #{w 7616}#
                            #{mod 7496}#))))))
                #{tmp 7498}#)
              (syntax-violation
                'letrec
                "bad letrec"
                (#{wrap 4443}#
                  (begin
                    (if (if (pair? #{e 7492}#) #{s 7495}# #f)
                      (set-source-properties! #{e 7492}# #{s 7495}#))
                    #{e 7492}#)
                  #{w 7494}#
                  #{mod 7496}#))))))
      (#{global-extend 4413}#
        'core
        'letrec*
        (lambda (#{e 8121}#
                 #{r 8122}#
                 #{w 8123}#
                 #{s 8124}#
                 #{mod 8125}#)
          (let ((#{tmp 8127}#
                  ($sc-dispatch
                    #{e 8121}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 8127}#
                  (@apply
                    (lambda (#{id 8131}#
                             #{val 8132}#
                             #{e1 8133}#
                             #{e2 8134}#)
                      (and-map #{id? 4415}# #{id 8131}#))
                    #{tmp 8127}#)
                  #f)
              (@apply
                (lambda (#{id 8150}#
                         #{val 8151}#
                         #{e1 8152}#
                         #{e2 8153}#)
                  (if (not (#{valid-bound-ids? 4440}# #{id 8150}#))
                    (syntax-violation
                      'letrec*
                      "duplicate bound variable"
                      #{e 8121}#)
                    (let ((#{labels 8243}#
                            (#{gen-labels 4418}# #{id 8150}#))
                          (#{new-vars 8244}#
                            (map #{gen-var 4464}# #{id 8150}#)))
                      (let ((#{w 8245}#
                              (#{make-binding-wrap 4429}#
                                #{id 8150}#
                                #{labels 8243}#
                                #{w 8123}#))
                            (#{r 8246}#
                              (#{extend-var-env 4410}#
                                #{labels 8243}#
                                #{new-vars 8244}#
                                #{r 8122}#)))
                        (#{build-letrec 4399}#
                          #{s 8124}#
                          #t
                          (map syntax->datum #{id 8150}#)
                          #{new-vars 8244}#
                          (map (lambda (#{x 8333}#)
                                 (#{expand 4450}#
                                   #{x 8333}#
                                   #{r 8246}#
                                   #{w 8245}#
                                   #{mod 8125}#))
                               #{val 8151}#)
                          (#{expand-body 4454}#
                            (cons #{e1 8152}# #{e2 8153}#)
                            (#{wrap 4443}#
                              (begin
                                (if (if (pair? #{e 8121}#) #{s 8124}# #f)
                                  (set-source-properties!
                                    #{e 8121}#
                                    #{s 8124}#))
                                #{e 8121}#)
                              #{w 8245}#
                              #{mod 8125}#)
                            #{r 8246}#
                            #{w 8245}#
                            #{mod 8125}#))))))
                #{tmp 8127}#)
              (syntax-violation
                'letrec*
                "bad letrec*"
                (#{wrap 4443}#
                  (begin
                    (if (if (pair? #{e 8121}#) #{s 8124}# #f)
                      (set-source-properties! #{e 8121}# #{s 8124}#))
                    #{e 8121}#)
                  #{w 8123}#
                  #{mod 8125}#))))))
      (#{global-extend 4413}#
        'core
        'set!
        (lambda (#{e 8789}#
                 #{r 8790}#
                 #{w 8791}#
                 #{s 8792}#
                 #{mod 8793}#)
          (let ((#{tmp 8795}#
                  ($sc-dispatch #{e 8789}# '(_ any any))))
            (if (if #{tmp 8795}#
                  (@apply
                    (lambda (#{id 8799}# #{val 8800}#)
                      (if (symbol? #{id 8799}#)
                        #t
                        (if (if (vector? #{id 8799}#)
                              (if (= (vector-length #{id 8799}#) 4)
                                (eq? (vector-ref #{id 8799}# 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref #{id 8799}# 1))
                          #f)))
                    #{tmp 8795}#)
                  #f)
              (@apply
                (lambda (#{id 8827}# #{val 8828}#)
                  (let ((#{n 8829}#
                          (#{id-var-name 4434}# #{id 8827}# #{w 8791}#))
                        (#{id-mod 8830}#
                          (if (if (vector? #{id 8827}#)
                                (if (= (vector-length #{id 8827}#) 4)
                                  (eq? (vector-ref #{id 8827}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (vector-ref #{id 8827}# 3)
                            #{mod 8793}#)))
                    (let ((#{b 8831}#
                            (let ((#{t 8872}# (assq #{n 8829}# #{r 8790}#)))
                              (if #{t 8872}#
                                (cdr #{t 8872}#)
                                (if (symbol? #{n 8829}#)
                                  (let ((#{t 8877}#
                                          (#{get-global-definition-hook 4378}#
                                            #{n 8829}#
                                            #{id-mod 8830}#)))
                                    (if #{t 8877}# #{t 8877}# '(global)))
                                  '(displaced-lexical))))))
                      (let ((#{atom-key 8832}# (car #{b 8831}#)))
                        (if (eqv? #{atom-key 8832}# 'lexical)
                          (#{build-lexical-assignment 4386}#
                            #{s 8792}#
                            (syntax->datum #{id 8827}#)
                            (cdr #{b 8831}#)
                            (#{expand 4450}#
                              #{val 8828}#
                              #{r 8790}#
                              #{w 8791}#
                              #{mod 8793}#))
                          (if (eqv? #{atom-key 8832}# 'global)
                            (#{build-global-assignment 4389}#
                              #{s 8792}#
                              #{n 8829}#
                              (#{expand 4450}#
                                #{val 8828}#
                                #{r 8790}#
                                #{w 8791}#
                                #{mod 8793}#)
                              #{id-mod 8830}#)
                            (if (eqv? #{atom-key 8832}# 'macro)
                              (let ((#{p 9191}# (cdr #{b 8831}#)))
                                (if (procedure-property
                                      #{p 9191}#
                                      'variable-transformer)
                                  (#{expand 4450}#
                                    (#{expand-macro 4453}#
                                      #{p 9191}#
                                      #{e 8789}#
                                      #{r 8790}#
                                      #{w 8791}#
                                      #{s 8792}#
                                      #f
                                      #{mod 8793}#)
                                    #{r 8790}#
                                    '(())
                                    #{mod 8793}#)
                                  (syntax-violation
                                    'set!
                                    "not a variable transformer"
                                    (#{wrap 4443}#
                                      #{e 8789}#
                                      #{w 8791}#
                                      #{mod 8793}#)
                                    (#{wrap 4443}#
                                      #{id 8827}#
                                      #{w 8791}#
                                      #{id-mod 8830}#))))
                              (if (eqv? #{atom-key 8832}# 'displaced-lexical)
                                (syntax-violation
                                  'set!
                                  "identifier out of context"
                                  (#{wrap 4443}#
                                    #{id 8827}#
                                    #{w 8791}#
                                    #{mod 8793}#))
                                (syntax-violation
                                  'set!
                                  "bad set!"
                                  (#{wrap 4443}#
                                    (begin
                                      (if (if (pair? #{e 8789}#) #{s 8792}# #f)
                                        (set-source-properties!
                                          #{e 8789}#
                                          #{s 8792}#))
                                      #{e 8789}#)
                                    #{w 8791}#
                                    #{mod 8793}#))))))))))
                #{tmp 8795}#)
              (let ((#{tmp 9286}#
                      ($sc-dispatch
                        #{e 8789}#
                        '(_ (any . each-any) any))))
                (if #{tmp 9286}#
                  (@apply
                    (lambda (#{head 9290}# #{tail 9291}# #{val 9292}#)
                      (call-with-values
                        (lambda ()
                          (#{syntax-type 4449}#
                            #{head 9290}#
                            #{r 8790}#
                            '(())
                            #f
                            #f
                            #{mod 8793}#
                            #t))
                        (lambda (#{type 9295}#
                                 #{value 9296}#
                                 #{ee 9297}#
                                 #{ww 9298}#
                                 #{ss 9299}#
                                 #{modmod 9300}#)
                          (if (eqv? #{type 9295}# 'module-ref)
                            (let ((#{val 9304}#
                                    (#{expand 4450}#
                                      #{val 9292}#
                                      #{r 8790}#
                                      #{w 8791}#
                                      #{mod 8793}#)))
                              (call-with-values
                                (lambda ()
                                  (#{value 9296}#
                                    (cons #{head 9290}# #{tail 9291}#)
                                    #{r 8790}#
                                    #{w 8791}#))
                                (lambda (#{e 9305}#
                                         #{r 9306}#
                                         #{w 9307}#
                                         #{s* 9308}#
                                         #{mod 9309}#)
                                  (let ((#{tmp 9311}# (list #{e 9305}#)))
                                    (if (@apply
                                          (lambda (#{e 9313}#)
                                            (if (symbol? #{e 9313}#)
                                              #t
                                              (if (if (vector? #{e 9313}#)
                                                    (if (= (vector-length
                                                             #{e 9313}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{e 9313}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{e 9313}# 1))
                                                #f)))
                                          #{tmp 9311}#)
                                      (@apply
                                        (lambda (#{e 9343}#)
                                          (#{build-global-assignment 4389}#
                                            #{s 8792}#
                                            (syntax->datum #{e 9343}#)
                                            #{val 9304}#
                                            #{mod 9309}#))
                                        #{tmp 9311}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 9305}#))))))
                            (#{build-application 4382}#
                              #{s 8792}#
                              (let ((#{e 9568}#
                                      (list '#(syntax-object
                                               setter
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(type value ee ww ss modmod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i3613"
                                                    "i3614"
                                                    "i3615"
                                                    "i3616"
                                                    "i3617"
                                                    "i3618"))
                                                #(ribcage
                                                  #(head tail val)
                                                  #((top) (top) (top))
                                                  #("i3599" "i3600" "i3601"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e r w s mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i3563"
                                                    "i3564"
                                                    "i3565"
                                                    "i3566"
                                                    "i3567"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i473"
                                                   "i471"
                                                   "i469"
                                                   "i467"
                                                   "i465"
                                                   "i463"
                                                   "i461"
                                                   "i459"
                                                   "i457"
                                                   "i455"
                                                   "i453"
                                                   "i451"
                                                   "i449"
                                                   "i447"
                                                   "i445"
                                                   "i443"
                                                   "i441"
                                                   "i439"
                                                   "i437"
                                                   "i435"
                                                   "i433"
                                                   "i431"
                                                   "i429"
                                                   "i427"
                                                   "i425"
                                                   "i423"
                                                   "i421"
                                                   "i419"
                                                   "i417"
                                                   "i415"
                                                   "i413"
                                                   "i411"
                                                   "i409"
                                                   "i407"
                                                   "i405"
                                                   "i403"
                                                   "i401"
                                                   "i399"
                                                   "i398"
                                                   "i396"
                                                   "i393"
                                                   "i392"
                                                   "i391"
                                                   "i389"
                                                   "i388"
                                                   "i386"
                                                   "i384"
                                                   "i382"
                                                   "i380"
                                                   "i378"
                                                   "i376"
                                                   "i374"
                                                   "i372"
                                                   "i369"
                                                   "i367"
                                                   "i366"
                                                   "i364"
                                                   "i362"
                                                   "i360"
                                                   "i358"
                                                   "i357"
                                                   "i356"
                                                   "i355"
                                                   "i353"
                                                   "i352"
                                                   "i349"
                                                   "i347"
                                                   "i345"
                                                   "i343"
                                                   "i341"
                                                   "i339"
                                                   "i337"
                                                   "i336"
                                                   "i335"
                                                   "i333"
                                                   "i331"
                                                   "i330"
                                                   "i327"
                                                   "i326"
                                                   "i324"
                                                   "i322"
                                                   "i320"
                                                   "i318"
                                                   "i316"
                                                   "i314"
                                                   "i312"
                                                   "i310"
                                                   "i308"
                                                   "i305"
                                                   "i303"
                                                   "i301"
                                                   "i299"
                                                   "i297"
                                                   "i295"
                                                   "i293"
                                                   "i291"
                                                   "i289"
                                                   "i287"
                                                   "i285"
                                                   "i283"
                                                   "i281"
                                                   "i279"
                                                   "i277"
                                                   "i275"
                                                   "i273"
                                                   "i271"
                                                   "i269"
                                                   "i267"
                                                   "i265"
                                                   "i263"
                                                   "i261"
                                                   "i260"
                                                   "i257"
                                                   "i255"
                                                   "i254"
                                                   "i253"
                                                   "i252"
                                                   "i251"
                                                   "i249"
                                                   "i247"
                                                   "i245"
                                                   "i242"
                                                   "i240"
                                                   "i238"
                                                   "i236"
                                                   "i234"
                                                   "i232"
                                                   "i230"
                                                   "i228"
                                                   "i226"
                                                   "i224"
                                                   "i222"
                                                   "i220"
                                                   "i218"
                                                   "i216"
                                                   "i214"
                                                   "i212"
                                                   "i210"
                                                   "i208"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("i46" "i45" "i44")))
                                               (hygiene guile))
                                            #{head 9290}#)))
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type 4449}#
                                      #{e 9568}#
                                      #{r 8790}#
                                      #{w 8791}#
                                      (#{source-annotation 4408}# #{e 9568}#)
                                      #f
                                      #{mod 8793}#
                                      #f))
                                  (lambda (#{type 9575}#
                                           #{value 9576}#
                                           #{e 9577}#
                                           #{w 9578}#
                                           #{s 9579}#
                                           #{mod 9580}#)
                                    (#{expand-expr 4451}#
                                      #{type 9575}#
                                      #{value 9576}#
                                      #{e 9577}#
                                      #{r 8790}#
                                      #{w 9578}#
                                      #{s 9579}#
                                      #{mod 9580}#))))
                              (map (lambda (#{e 9584}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{syntax-type 4449}#
                                           #{e 9584}#
                                           #{r 8790}#
                                           #{w 8791}#
                                           (#{source-annotation 4408}#
                                             #{e 9584}#)
                                           #f
                                           #{mod 8793}#
                                           #f))
                                       (lambda (#{type 9599}#
                                                #{value 9600}#
                                                #{e 9601}#
                                                #{w 9602}#
                                                #{s 9603}#
                                                #{mod 9604}#)
                                         (#{expand-expr 4451}#
                                           #{type 9599}#
                                           #{value 9600}#
                                           #{e 9601}#
                                           #{r 8790}#
                                           #{w 9602}#
                                           #{s 9603}#
                                           #{mod 9604}#))))
                                   (append
                                     #{tail 9291}#
                                     (list #{val 9292}#))))))))
                    #{tmp 9286}#)
                  (syntax-violation
                    'set!
                    "bad set!"
                    (#{wrap 4443}#
                      (begin
                        (if (if (pair? #{e 8789}#) #{s 8792}# #f)
                          (set-source-properties! #{e 8789}# #{s 8792}#))
                        #{e 8789}#)
                      #{w 8791}#
                      #{mod 8793}#))))))))
      (module-define!
        (current-module)
        '@
        (make-syntax-transformer
          '@
          'module-ref
          (lambda (#{e 9647}# #{r 9648}# #{w 9649}#)
            (let ((#{tmp 9651}#
                    ($sc-dispatch #{e 9647}# '(_ each-any any))))
              (if (if #{tmp 9651}#
                    (@apply
                      (lambda (#{mod 9654}# #{id 9655}#)
                        (if (and-map #{id? 4415}# #{mod 9654}#)
                          (if (symbol? #{id 9655}#)
                            #t
                            (if (if (vector? #{id 9655}#)
                                  (if (= (vector-length #{id 9655}#) 4)
                                    (eq? (vector-ref #{id 9655}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{id 9655}# 1))
                              #f))
                          #f))
                      #{tmp 9651}#)
                    #f)
                (@apply
                  (lambda (#{mod 9695}# #{id 9696}#)
                    (values
                      (syntax->datum #{id 9696}#)
                      #{r 9648}#
                      #{w 9649}#
                      #f
                      (syntax->datum
                        (cons '#(syntax-object
                                 public
                                 ((top)
                                  #(ribcage
                                    #(mod id)
                                    #((top) (top))
                                    #("i3660" "i3661"))
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(e r w)
                                    #((top) (top) (top))
                                    #("i3648" "i3649" "i3650"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      expand-lambda-case
                                      lambda*-formals
                                      expand-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      expand-void
                                      eval-local-transformer
                                      expand-local-syntax
                                      expand-body
                                      expand-macro
                                      expand-application
                                      expand-expr
                                      expand
                                      syntax-type
                                      parse-when-list
                                      expand-install-global
                                      expand-top-sequence
                                      expand-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      with-transformer-environment
                                      transformer-environment
                                      resolve-identifier
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-application
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-sequence
                                      make-application
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("i473"
                                     "i471"
                                     "i469"
                                     "i467"
                                     "i465"
                                     "i463"
                                     "i461"
                                     "i459"
                                     "i457"
                                     "i455"
                                     "i453"
                                     "i451"
                                     "i449"
                                     "i447"
                                     "i445"
                                     "i443"
                                     "i441"
                                     "i439"
                                     "i437"
                                     "i435"
                                     "i433"
                                     "i431"
                                     "i429"
                                     "i427"
                                     "i425"
                                     "i423"
                                     "i421"
                                     "i419"
                                     "i417"
                                     "i415"
                                     "i413"
                                     "i411"
                                     "i409"
                                     "i407"
                                     "i405"
                                     "i403"
                                     "i401"
                                     "i399"
                                     "i398"
                                     "i396"
                                     "i393"
                                     "i392"
                                     "i391"
                                     "i389"
                                     "i388"
                                     "i386"
                                     "i384"
                                     "i382"
                                     "i380"
                                     "i378"
                                     "i376"
                                     "i374"
                                     "i372"
                                     "i369"
                                     "i367"
                                     "i366"
                                     "i364"
                                     "i362"
                                     "i360"
                                     "i358"
                                     "i357"
                                     "i356"
                                     "i355"
                                     "i353"
                                     "i352"
                                     "i349"
                                     "i347"
                                     "i345"
                                     "i343"
                                     "i341"
                                     "i339"
                                     "i337"
                                     "i336"
                                     "i335"
                                     "i333"
                                     "i331"
                                     "i330"
                                     "i327"
                                     "i326"
                                     "i324"
                                     "i322"
                                     "i320"
                                     "i318"
                                     "i316"
                                     "i314"
                                     "i312"
                                     "i310"
                                     "i308"
                                     "i305"
                                     "i303"
                                     "i301"
                                     "i299"
                                     "i297"
                                     "i295"
                                     "i293"
                                     "i291"
                                     "i289"
                                     "i287"
                                     "i285"
                                     "i283"
                                     "i281"
                                     "i279"
                                     "i277"
                                     "i275"
                                     "i273"
                                     "i271"
                                     "i269"
                                     "i267"
                                     "i265"
                                     "i263"
                                     "i261"
                                     "i260"
                                     "i257"
                                     "i255"
                                     "i254"
                                     "i253"
                                     "i252"
                                     "i251"
                                     "i249"
                                     "i247"
                                     "i245"
                                     "i242"
                                     "i240"
                                     "i238"
                                     "i236"
                                     "i234"
                                     "i232"
                                     "i230"
                                     "i228"
                                     "i226"
                                     "i224"
                                     "i222"
                                     "i220"
                                     "i218"
                                     "i216"
                                     "i214"
                                     "i212"
                                     "i210"
                                     "i208"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("i46" "i45" "i44")))
                                 (hygiene guile))
                              #{mod 9695}#))))
                  #{tmp 9651}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 9647}#))))))
      (#{global-extend 4413}#
        'module-ref
        '@@
        (lambda (#{e 9788}# #{r 9789}# #{w 9790}#)
          (letrec*
            ((#{remodulate 9791}#
               (lambda (#{x 9826}# #{mod 9827}#)
                 (if (pair? #{x 9826}#)
                   (cons (#{remodulate 9791}#
                           (car #{x 9826}#)
                           #{mod 9827}#)
                         (#{remodulate 9791}#
                           (cdr #{x 9826}#)
                           #{mod 9827}#))
                   (if (if (vector? #{x 9826}#)
                         (if (= (vector-length #{x 9826}#) 4)
                           (eq? (vector-ref #{x 9826}# 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((#{expression 9841}#
                             (#{remodulate 9791}#
                               (vector-ref #{x 9826}# 1)
                               #{mod 9827}#))
                           (#{wrap 9842}# (vector-ref #{x 9826}# 2)))
                       (vector
                         'syntax-object
                         #{expression 9841}#
                         #{wrap 9842}#
                         #{mod 9827}#))
                     (if (vector? #{x 9826}#)
                       (let ((#{n 9850}# (vector-length #{x 9826}#)))
                         (let ((#{v 9851}# (make-vector #{n 9850}#)))
                           (letrec*
                             ((#{loop 9852}#
                                (lambda (#{i 9899}#)
                                  (if (= #{i 9899}# #{n 9850}#)
                                    #{v 9851}#
                                    (begin
                                      (vector-set!
                                        #{v 9851}#
                                        #{i 9899}#
                                        (#{remodulate 9791}#
                                          (vector-ref #{x 9826}# #{i 9899}#)
                                          #{mod 9827}#))
                                      (#{loop 9852}# (#{1+}# #{i 9899}#)))))))
                             (#{loop 9852}# 0))))
                       #{x 9826}#))))))
            (let ((#{tmp 9793}#
                    ($sc-dispatch #{e 9788}# '(_ each-any any))))
              (if (if #{tmp 9793}#
                    (@apply
                      (lambda (#{mod 9797}# #{exp 9798}#)
                        (and-map #{id? 4415}# #{mod 9797}#))
                      #{tmp 9793}#)
                    #f)
                (@apply
                  (lambda (#{mod 9814}# #{exp 9815}#)
                    (let ((#{mod 9816}#
                            (syntax->datum
                              (cons '#(syntax-object
                                       private
                                       ((top)
                                        #(ribcage
                                          #(mod exp)
                                          #((top) (top))
                                          #("i3704" "i3705"))
                                        #(ribcage
                                          (remodulate)
                                          ((top))
                                          ("i3671"))
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("i3668" "i3669" "i3670"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-application
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            with-transformer-environment
                                            transformer-environment
                                            resolve-identifier
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i473"
                                           "i471"
                                           "i469"
                                           "i467"
                                           "i465"
                                           "i463"
                                           "i461"
                                           "i459"
                                           "i457"
                                           "i455"
                                           "i453"
                                           "i451"
                                           "i449"
                                           "i447"
                                           "i445"
                                           "i443"
                                           "i441"
                                           "i439"
                                           "i437"
                                           "i435"
                                           "i433"
                                           "i431"
                                           "i429"
                                           "i427"
                                           "i425"
                                           "i423"
                                           "i421"
                                           "i419"
                                           "i417"
                                           "i415"
                                           "i413"
                                           "i411"
                                           "i409"
                                           "i407"
                                           "i405"
                                           "i403"
                                           "i401"
                                           "i399"
                                           "i398"
                                           "i396"
                                           "i393"
                                           "i392"
                                           "i391"
                                           "i389"
                                           "i388"
                                           "i386"
                                           "i384"
                                           "i382"
                                           "i380"
                                           "i378"
                                           "i376"
                                           "i374"
                                           "i372"
                                           "i369"
                                           "i367"
                                           "i366"
                                           "i364"
                                           "i362"
                                           "i360"
                                           "i358"
                                           "i357"
                                           "i356"
                                           "i355"
                                           "i353"
                                           "i352"
                                           "i349"
                                           "i347"
                                           "i345"
                                           "i343"
                                           "i341"
                                           "i339"
                                           "i337"
                                           "i336"
                                           "i335"
                                           "i333"
                                           "i331"
                                           "i330"
                                           "i327"
                                           "i326"
                                           "i324"
                                           "i322"
                                           "i320"
                                           "i318"
                                           "i316"
                                           "i314"
                                           "i312"
                                           "i310"
                                           "i308"
                                           "i305"
                                           "i303"
                                           "i301"
                                           "i299"
                                           "i297"
                                           "i295"
                                           "i293"
                                           "i291"
                                           "i289"
                                           "i287"
                                           "i285"
                                           "i283"
                                           "i281"
                                           "i279"
                                           "i277"
                                           "i275"
                                           "i273"
                                           "i271"
                                           "i269"
                                           "i267"
                                           "i265"
                                           "i263"
                                           "i261"
                                           "i260"
                                           "i257"
                                           "i255"
                                           "i254"
                                           "i253"
                                           "i252"
                                           "i251"
                                           "i249"
                                           "i247"
                                           "i245"
                                           "i242"
                                           "i240"
                                           "i238"
                                           "i236"
                                           "i234"
                                           "i232"
                                           "i230"
                                           "i228"
                                           "i226"
                                           "i224"
                                           "i222"
                                           "i220"
                                           "i218"
                                           "i216"
                                           "i214"
                                           "i212"
                                           "i210"
                                           "i208"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("i46" "i45" "i44")))
                                       (hygiene guile))
                                    #{mod 9814}#))))
                      (values
                        (#{remodulate 9791}# #{exp 9815}# #{mod 9816}#)
                        #{r 9789}#
                        #{w 9790}#
                        (#{source-annotation 4408}# #{exp 9815}#)
                        #{mod 9816}#)))
                  #{tmp 9793}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 9788}#))))))
      (#{global-extend 4413}#
        'core
        'if
        (lambda (#{e 10000}#
                 #{r 10001}#
                 #{w 10002}#
                 #{s 10003}#
                 #{mod 10004}#)
          (let ((#{tmp 10006}#
                  ($sc-dispatch #{e 10000}# '(_ any any))))
            (if #{tmp 10006}#
              (@apply
                (lambda (#{test 10010}# #{then 10011}#)
                  (#{build-conditional 4383}#
                    #{s 10003}#
                    (#{expand 4450}#
                      #{test 10010}#
                      #{r 10001}#
                      #{w 10002}#
                      #{mod 10004}#)
                    (#{expand 4450}#
                      #{then 10011}#
                      #{r 10001}#
                      #{w 10002}#
                      #{mod 10004}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 0)
                      #f)))
                #{tmp 10006}#)
              (let ((#{tmp 10236}#
                      ($sc-dispatch #{e 10000}# '(_ any any any))))
                (if #{tmp 10236}#
                  (@apply
                    (lambda (#{test 10240}# #{then 10241}# #{else 10242}#)
                      (#{build-conditional 4383}#
                        #{s 10003}#
                        (#{expand 4450}#
                          #{test 10240}#
                          #{r 10001}#
                          #{w 10002}#
                          #{mod 10004}#)
                        (#{expand 4450}#
                          #{then 10241}#
                          #{r 10001}#
                          #{w 10002}#
                          #{mod 10004}#)
                        (#{expand 4450}#
                          #{else 10242}#
                          #{r 10001}#
                          #{w 10002}#
                          #{mod 10004}#)))
                    #{tmp 10236}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{e 10000}#)))))))
      (#{global-extend 4413}#
        'core
        'with-fluids
        (lambda (#{e 10641}#
                 #{r 10642}#
                 #{w 10643}#
                 #{s 10644}#
                 #{mod 10645}#)
          (let ((#{tmp 10647}#
                  ($sc-dispatch
                    #{e 10641}#
                    '(_ #(each (any any)) any . each-any))))
            (if #{tmp 10647}#
              (@apply
                (lambda (#{fluid 10651}#
                         #{val 10652}#
                         #{b 10653}#
                         #{b* 10654}#)
                  (#{build-dynlet 4384}#
                    #{s 10644}#
                    (map (lambda (#{x 10735}#)
                           (#{expand 4450}#
                             #{x 10735}#
                             #{r 10642}#
                             #{w 10643}#
                             #{mod 10645}#))
                         #{fluid 10651}#)
                    (map (lambda (#{x 10805}#)
                           (#{expand 4450}#
                             #{x 10805}#
                             #{r 10642}#
                             #{w 10643}#
                             #{mod 10645}#))
                         #{val 10652}#)
                    (#{expand-body 4454}#
                      (cons #{b 10653}# #{b* 10654}#)
                      (#{wrap 4443}#
                        (begin
                          (if (if (pair? #{e 10641}#) #{s 10644}# #f)
                            (set-source-properties! #{e 10641}# #{s 10644}#))
                          #{e 10641}#)
                        #{w 10643}#
                        #{mod 10645}#)
                      #{r 10642}#
                      #{w 10643}#
                      #{mod 10645}#)))
                #{tmp 10647}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 10641}#)))))
      (module-define!
        (current-module)
        'begin
        (make-syntax-transformer 'begin 'begin '()))
      (module-define!
        (current-module)
        'define
        (make-syntax-transformer 'define 'define '()))
      (module-define!
        (current-module)
        'define-syntax
        (make-syntax-transformer
          'define-syntax
          'define-syntax
          '()))
      (module-define!
        (current-module)
        'define-syntax-parameter
        (make-syntax-transformer
          'define-syntax-parameter
          'define-syntax-parameter
          '()))
      (module-define!
        (current-module)
        'eval-when
        (make-syntax-transformer
          'eval-when
          'eval-when
          '()))
      (#{global-extend 4413}#
        'core
        'syntax-case
        (letrec*
          ((#{convert-pattern 11173}#
             (lambda (#{pattern 12770}# #{keys 12771}#)
               (letrec*
                 ((#{cvt* 12772}#
                    (lambda (#{p* 13396}# #{n 13397}# #{ids 13398}#)
                      (if (not (pair? #{p* 13396}#))
                        (#{cvt 12774}#
                          #{p* 13396}#
                          #{n 13397}#
                          #{ids 13398}#)
                        (call-with-values
                          (lambda ()
                            (#{cvt* 12772}#
                              (cdr #{p* 13396}#)
                              #{n 13397}#
                              #{ids 13398}#))
                          (lambda (#{y 13401}# #{ids 13402}#)
                            (call-with-values
                              (lambda ()
                                (#{cvt 12774}#
                                  (car #{p* 13396}#)
                                  #{n 13397}#
                                  #{ids 13402}#))
                              (lambda (#{x 13405}# #{ids 13406}#)
                                (values
                                  (cons #{x 13405}# #{y 13401}#)
                                  #{ids 13406}#))))))))
                  (#{v-reverse 12773}#
                    (lambda (#{x 13407}#)
                      (letrec*
                        ((#{loop 13408}#
                           (lambda (#{r 13488}# #{x 13489}#)
                             (if (not (pair? #{x 13489}#))
                               (values #{r 13488}# #{x 13489}#)
                               (#{loop 13408}#
                                 (cons (car #{x 13489}#) #{r 13488}#)
                                 (cdr #{x 13489}#))))))
                        (#{loop 13408}# '() #{x 13407}#))))
                  (#{cvt 12774}#
                    (lambda (#{p 12777}# #{n 12778}# #{ids 12779}#)
                      (if (if (symbol? #{p 12777}#)
                            #t
                            (if (if (vector? #{p 12777}#)
                                  (if (= (vector-length #{p 12777}#) 4)
                                    (eq? (vector-ref #{p 12777}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{p 12777}# 1))
                              #f))
                        (if (#{bound-id-member? 4442}#
                              #{p 12777}#
                              #{keys 12771}#)
                          (values
                            (vector 'free-id #{p 12777}#)
                            #{ids 12779}#)
                          (if (if (eq? (if (if (vector? #{p 12777}#)
                                             (if (= (vector-length #{p 12777}#)
                                                    4)
                                               (eq? (vector-ref #{p 12777}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (vector-ref #{p 12777}# 1)
                                         #{p 12777}#)
                                       (if (if (= (vector-length
                                                    '#(syntax-object
                                                       _
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p n ids)
                                                          #((top) (top) (top))
                                                          #("i3805"
                                                            "i3806"
                                                            "i3807"))
                                                        #(ribcage
                                                          (cvt v-reverse cvt*)
                                                          ((top) (top) (top))
                                                          ("i3778"
                                                           "i3776"
                                                           "i3774"))
                                                        #(ribcage
                                                          #(pattern keys)
                                                          #((top) (top))
                                                          #("i3772" "i3773"))
                                                        #(ribcage
                                                          (gen-syntax-case
                                                            gen-clause
                                                            build-dispatch-call
                                                            convert-pattern)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i3768"
                                                           "i3766"
                                                           "i3764"
                                                           "i3762"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i473"
                                                           "i471"
                                                           "i469"
                                                           "i467"
                                                           "i465"
                                                           "i463"
                                                           "i461"
                                                           "i459"
                                                           "i457"
                                                           "i455"
                                                           "i453"
                                                           "i451"
                                                           "i449"
                                                           "i447"
                                                           "i445"
                                                           "i443"
                                                           "i441"
                                                           "i439"
                                                           "i437"
                                                           "i435"
                                                           "i433"
                                                           "i431"
                                                           "i429"
                                                           "i427"
                                                           "i425"
                                                           "i423"
                                                           "i421"
                                                           "i419"
                                                           "i417"
                                                           "i415"
                                                           "i413"
                                                           "i411"
                                                           "i409"
                                                           "i407"
                                                           "i405"
                                                           "i403"
                                                           "i401"
                                                           "i399"
                                                           "i398"
                                                           "i396"
                                                           "i393"
                                                           "i392"
                                                           "i391"
                                                           "i389"
                                                           "i388"
                                                           "i386"
                                                           "i384"
                                                           "i382"
                                                           "i380"
                                                           "i378"
                                                           "i376"
                                                           "i374"
                                                           "i372"
                                                           "i369"
                                                           "i367"
                                                           "i366"
                                                           "i364"
                                                           "i362"
                                                           "i360"
                                                           "i358"
                                                           "i357"
                                                           "i356"
                                                           "i355"
                                                           "i353"
                                                           "i352"
                                                           "i349"
                                                           "i347"
                                                           "i345"
                                                           "i343"
                                                           "i341"
                                                           "i339"
                                                           "i337"
                                                           "i336"
                                                           "i335"
                                                           "i333"
                                                           "i331"
                                                           "i330"
                                                           "i327"
                                                           "i326"
                                                           "i324"
                                                           "i322"
                                                           "i320"
                                                           "i318"
                                                           "i316"
                                                           "i314"
                                                           "i312"
                                                           "i310"
                                                           "i308"
                                                           "i305"
                                                           "i303"
                                                           "i301"
                                                           "i299"
                                                           "i297"
                                                           "i295"
                                                           "i293"
                                                           "i291"
                                                           "i289"
                                                           "i287"
                                                           "i285"
                                                           "i283"
                                                           "i281"
                                                           "i279"
                                                           "i277"
                                                           "i275"
                                                           "i273"
                                                           "i271"
                                                           "i269"
                                                           "i267"
                                                           "i265"
                                                           "i263"
                                                           "i261"
                                                           "i260"
                                                           "i257"
                                                           "i255"
                                                           "i254"
                                                           "i253"
                                                           "i252"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i242"
                                                           "i240"
                                                           "i238"
                                                           "i236"
                                                           "i234"
                                                           "i232"
                                                           "i230"
                                                           "i228"
                                                           "i226"
                                                           "i224"
                                                           "i222"
                                                           "i220"
                                                           "i218"
                                                           "i216"
                                                           "i214"
                                                           "i212"
                                                           "i210"
                                                           "i208"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("i46" "i45" "i44")))
                                                       (hygiene guile)))
                                                  4)
                                             #t
                                             #f)
                                         '_
                                         '#(syntax-object
                                            _
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(p n ids)
                                               #((top) (top) (top))
                                               #("i3805" "i3806" "i3807"))
                                             #(ribcage
                                               (cvt v-reverse cvt*)
                                               ((top) (top) (top))
                                               ("i3778" "i3776" "i3774"))
                                             #(ribcage
                                               #(pattern keys)
                                               #((top) (top))
                                               #("i3772" "i3773"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("i3768"
                                                "i3766"
                                                "i3764"
                                                "i3762"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i473"
                                                "i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i398"
                                                "i396"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i389"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i372"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i356"
                                                "i355"
                                                "i353"
                                                "i352"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i336"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i330"
                                                "i327"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i310"
                                                "i308"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i260"
                                                "i257"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i252"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))))
                                (eq? (#{id-var-name 4434}# #{p 12777}# '(()))
                                     (#{id-var-name 4434}#
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("i3805" "i3806" "i3807"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("i3778" "i3776" "i3774"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("i3772" "i3773"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3768" "i3766" "i3764" "i3762"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               with-transformer-environment
                                               transformer-environment
                                               resolve-identifier
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i473"
                                              "i471"
                                              "i469"
                                              "i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))
                                       '(())))
                                #f)
                            (values '_ #{ids 12779}#)
                            (values
                              'any
                              (cons (cons #{p 12777}# #{n 12778}#)
                                    #{ids 12779}#))))
                        (let ((#{tmp 13099}#
                                ($sc-dispatch #{p 12777}# '(any any))))
                          (if (if #{tmp 13099}#
                                (@apply
                                  (lambda (#{x 13103}# #{dots 13104}#)
                                    (if (if (if (vector? #{dots 13104}#)
                                              (if (= (vector-length
                                                       #{dots 13104}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{dots 13104}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (symbol?
                                            (vector-ref #{dots 13104}# 1))
                                          #f)
                                      (if (eq? (if (if (vector? #{dots 13104}#)
                                                     (if (= (vector-length
                                                              #{dots 13104}#)
                                                            4)
                                                       (eq? (vector-ref
                                                              #{dots 13104}#
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref #{dots 13104}# 1)
                                                 #{dots 13104}#)
                                               (if (if (= (vector-length
                                                            '#(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i2288"))
                                                                #(ribcage
                                                                  (lambda-var-list
                                                                    gen-var
                                                                    strip
                                                                    expand-lambda-case
                                                                    lambda*-formals
                                                                    expand-simple-lambda
                                                                    lambda-formals
                                                                    ellipsis?
                                                                    expand-void
                                                                    eval-local-transformer
                                                                    expand-local-syntax
                                                                    expand-body
                                                                    expand-macro
                                                                    expand-application
                                                                    expand-expr
                                                                    expand
                                                                    syntax-type
                                                                    parse-when-list
                                                                    expand-install-global
                                                                    expand-top-sequence
                                                                    expand-sequence
                                                                    source-wrap
                                                                    wrap
                                                                    bound-id-member?
                                                                    distinct-bound-ids?
                                                                    valid-bound-ids?
                                                                    bound-id=?
                                                                    free-id=?
                                                                    with-transformer-environment
                                                                    transformer-environment
                                                                    resolve-identifier
                                                                    id-var-name
                                                                    same-marks?
                                                                    join-marks
                                                                    join-wraps
                                                                    smart-append
                                                                    make-binding-wrap
                                                                    extend-ribcage!
                                                                    make-empty-ribcage
                                                                    new-mark
                                                                    anti-mark
                                                                    the-anti-mark
                                                                    top-marked?
                                                                    top-wrap
                                                                    empty-wrap
                                                                    set-ribcage-labels!
                                                                    set-ribcage-marks!
                                                                    set-ribcage-symnames!
                                                                    ribcage-labels
                                                                    ribcage-marks
                                                                    ribcage-symnames
                                                                    ribcage?
                                                                    make-ribcage
                                                                    gen-labels
                                                                    gen-label
                                                                    make-rename
                                                                    rename-marks
                                                                    rename-new
                                                                    rename-old
                                                                    subst-rename?
                                                                    wrap-subst
                                                                    wrap-marks
                                                                    make-wrap
                                                                    id-sym-name&marks
                                                                    id-sym-name
                                                                    id?
                                                                    nonsymbol-id?
                                                                    global-extend
                                                                    lookup
                                                                    macros-only-env
                                                                    extend-var-env
                                                                    extend-env
                                                                    null-env
                                                                    binding-value
                                                                    binding-type
                                                                    make-binding
                                                                    arg-check
                                                                    source-annotation
                                                                    no-source
                                                                    set-syntax-object-module!
                                                                    set-syntax-object-wrap!
                                                                    set-syntax-object-expression!
                                                                    syntax-object-module
                                                                    syntax-object-wrap
                                                                    syntax-object-expression
                                                                    syntax-object?
                                                                    make-syntax-object
                                                                    build-lexical-var
                                                                    build-letrec
                                                                    build-named-let
                                                                    build-let
                                                                    build-sequence
                                                                    build-data
                                                                    build-primref
                                                                    build-lambda-case
                                                                    build-case-lambda
                                                                    build-simple-lambda
                                                                    build-global-definition
                                                                    build-global-assignment
                                                                    build-global-reference
                                                                    analyze-variable
                                                                    build-lexical-assignment
                                                                    build-lexical-reference
                                                                    build-dynlet
                                                                    build-conditional
                                                                    build-application
                                                                    build-void
                                                                    maybe-name-value!
                                                                    decorate-source
                                                                    get-global-definition-hook
                                                                    put-global-definition-hook
                                                                    gensym-hook
                                                                    local-eval-hook
                                                                    top-level-eval-hook
                                                                    fx<
                                                                    fx=
                                                                    fx-
                                                                    fx+
                                                                    set-lambda-meta!
                                                                    lambda-meta
                                                                    lambda?
                                                                    make-dynlet
                                                                    make-letrec
                                                                    make-let
                                                                    make-lambda-case
                                                                    make-lambda
                                                                    make-sequence
                                                                    make-application
                                                                    make-conditional
                                                                    make-toplevel-define
                                                                    make-toplevel-set
                                                                    make-toplevel-ref
                                                                    make-module-set
                                                                    make-module-ref
                                                                    make-lexical-set
                                                                    make-lexical-ref
                                                                    make-primitive-ref
                                                                    make-const
                                                                    make-void)
                                                                  ((top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                  ("i473"
                                                                   "i471"
                                                                   "i469"
                                                                   "i467"
                                                                   "i465"
                                                                   "i463"
                                                                   "i461"
                                                                   "i459"
                                                                   "i457"
                                                                   "i455"
                                                                   "i453"
                                                                   "i451"
                                                                   "i449"
                                                                   "i447"
                                                                   "i445"
                                                                   "i443"
                                                                   "i441"
                                                                   "i439"
                                                                   "i437"
                                                                   "i435"
                                                                   "i433"
                                                                   "i431"
                                                                   "i429"
                                                                   "i427"
                                                                   "i425"
                                                                   "i423"
                                                                   "i421"
                                                                   "i419"
                                                                   "i417"
                                                                   "i415"
                                                                   "i413"
                                                                   "i411"
                                                                   "i409"
                                                                   "i407"
                                                                   "i405"
                                                                   "i403"
                                                                   "i401"
                                                                   "i399"
                                                                   "i398"
                                                                   "i396"
                                                                   "i393"
                                                                   "i392"
                                                                   "i391"
                                                                   "i389"
                                                                   "i388"
                                                                   "i386"
                                                                   "i384"
                                                                   "i382"
                                                                   "i380"
                                                                   "i378"
                                                                   "i376"
                                                                   "i374"
                                                                   "i372"
                                                                   "i369"
                                                                   "i367"
                                                                   "i366"
                                                                   "i364"
                                                                   "i362"
                                                                   "i360"
                                                                   "i358"
                                                                   "i357"
                                                                   "i356"
                                                                   "i355"
                                                                   "i353"
                                                                   "i352"
                                                                   "i349"
                                                                   "i347"
                                                                   "i345"
                                                                   "i343"
                                                                   "i341"
                                                                   "i339"
                                                                   "i337"
                                                                   "i336"
                                                                   "i335"
                                                                   "i333"
                                                                   "i331"
                                                                   "i330"
                                                                   "i327"
                                                                   "i326"
                                                                   "i324"
                                                                   "i322"
                                                                   "i320"
                                                                   "i318"
                                                                   "i316"
                                                                   "i314"
                                                                   "i312"
                                                                   "i310"
                                                                   "i308"
                                                                   "i305"
                                                                   "i303"
                                                                   "i301"
                                                                   "i299"
                                                                   "i297"
                                                                   "i295"
                                                                   "i293"
                                                                   "i291"
                                                                   "i289"
                                                                   "i287"
                                                                   "i285"
                                                                   "i283"
                                                                   "i281"
                                                                   "i279"
                                                                   "i277"
                                                                   "i275"
                                                                   "i273"
                                                                   "i271"
                                                                   "i269"
                                                                   "i267"
                                                                   "i265"
                                                                   "i263"
                                                                   "i261"
                                                                   "i260"
                                                                   "i257"
                                                                   "i255"
                                                                   "i254"
                                                                   "i253"
                                                                   "i252"
                                                                   "i251"
                                                                   "i249"
                                                                   "i247"
                                                                   "i245"
                                                                   "i242"
                                                                   "i240"
                                                                   "i238"
                                                                   "i236"
                                                                   "i234"
                                                                   "i232"
                                                                   "i230"
                                                                   "i228"
                                                                   "i226"
                                                                   "i224"
                                                                   "i222"
                                                                   "i220"
                                                                   "i218"
                                                                   "i216"
                                                                   "i214"
                                                                   "i212"
                                                                   "i210"
                                                                   "i208"))
                                                                #(ribcage
                                                                  (define-structure
                                                                    define-expansion-accessors
                                                                    define-expansion-constructors)
                                                                  ((top)
                                                                   (top)
                                                                   (top))
                                                                  ("i46"
                                                                   "i45"
                                                                   "i44")))
                                                               (hygiene
                                                                 guile)))
                                                          4)
                                                     #t
                                                     #f)
                                                 '...
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i2288"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         with-transformer-environment
                                                         transformer-environment
                                                         resolve-identifier
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i473"
                                                        "i471"
                                                        "i469"
                                                        "i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i399"
                                                        "i398"
                                                        "i396"
                                                        "i393"
                                                        "i392"
                                                        "i391"
                                                        "i389"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i372"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i358"
                                                        "i357"
                                                        "i356"
                                                        "i355"
                                                        "i353"
                                                        "i352"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i336"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i330"
                                                        "i327"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i310"
                                                        "i308"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i260"
                                                        "i257"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i252"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile))))
                                        (eq? (#{id-var-name 4434}#
                                               #{dots 13104}#
                                               '(()))
                                             (#{id-var-name 4434}#
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i2288"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       with-transformer-environment
                                                       transformer-environment
                                                       resolve-identifier
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i473"
                                                      "i471"
                                                      "i469"
                                                      "i467"
                                                      "i465"
                                                      "i463"
                                                      "i461"
                                                      "i459"
                                                      "i457"
                                                      "i455"
                                                      "i453"
                                                      "i451"
                                                      "i449"
                                                      "i447"
                                                      "i445"
                                                      "i443"
                                                      "i441"
                                                      "i439"
                                                      "i437"
                                                      "i435"
                                                      "i433"
                                                      "i431"
                                                      "i429"
                                                      "i427"
                                                      "i425"
                                                      "i423"
                                                      "i421"
                                                      "i419"
                                                      "i417"
                                                      "i415"
                                                      "i413"
                                                      "i411"
                                                      "i409"
                                                      "i407"
                                                      "i405"
                                                      "i403"
                                                      "i401"
                                                      "i399"
                                                      "i398"
                                                      "i396"
                                                      "i393"
                                                      "i392"
                                                      "i391"
                                                      "i389"
                                                      "i388"
                                                      "i386"
                                                      "i384"
                                                      "i382"
                                                      "i380"
                                                      "i378"
                                                      "i376"
                                                      "i374"
                                                      "i372"
                                                      "i369"
                                                      "i367"
                                                      "i366"
                                                      "i364"
                                                      "i362"
                                                      "i360"
                                                      "i358"
                                                      "i357"
                                                      "i356"
                                                      "i355"
                                                      "i353"
                                                      "i352"
                                                      "i349"
                                                      "i347"
                                                      "i345"
                                                      "i343"
                                                      "i341"
                                                      "i339"
                                                      "i337"
                                                      "i336"
                                                      "i335"
                                                      "i333"
                                                      "i331"
                                                      "i330"
                                                      "i327"
                                                      "i326"
                                                      "i324"
                                                      "i322"
                                                      "i320"
                                                      "i318"
                                                      "i316"
                                                      "i314"
                                                      "i312"
                                                      "i310"
                                                      "i308"
                                                      "i305"
                                                      "i303"
                                                      "i301"
                                                      "i299"
                                                      "i297"
                                                      "i295"
                                                      "i293"
                                                      "i291"
                                                      "i289"
                                                      "i287"
                                                      "i285"
                                                      "i283"
                                                      "i281"
                                                      "i279"
                                                      "i277"
                                                      "i275"
                                                      "i273"
                                                      "i271"
                                                      "i269"
                                                      "i267"
                                                      "i265"
                                                      "i263"
                                                      "i261"
                                                      "i260"
                                                      "i257"
                                                      "i255"
                                                      "i254"
                                                      "i253"
                                                      "i252"
                                                      "i251"
                                                      "i249"
                                                      "i247"
                                                      "i245"
                                                      "i242"
                                                      "i240"
                                                      "i238"
                                                      "i236"
                                                      "i234"
                                                      "i232"
                                                      "i230"
                                                      "i228"
                                                      "i226"
                                                      "i224"
                                                      "i222"
                                                      "i220"
                                                      "i218"
                                                      "i216"
                                                      "i214"
                                                      "i212"
                                                      "i210"
                                                      "i208"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("i46" "i45" "i44")))
                                                  (hygiene guile))
                                               '(())))
                                        #f)
                                      #f))
                                  #{tmp 13099}#)
                                #f)
                            (@apply
                              (lambda (#{x 13204}# #{dots 13205}#)
                                (call-with-values
                                  (lambda ()
                                    (#{cvt 12774}#
                                      #{x 13204}#
                                      (#{1+}# #{n 12778}#)
                                      #{ids 12779}#))
                                  (lambda (#{p 13206}# #{ids 13207}#)
                                    (values
                                      (if (eq? #{p 13206}# 'any)
                                        'each-any
                                        (vector 'each #{p 13206}#))
                                      #{ids 13207}#))))
                              #{tmp 13099}#)
                            (let ((#{tmp 13208}#
                                    ($sc-dispatch
                                      #{p 12777}#
                                      '(any any . any))))
                              (if (if #{tmp 13208}#
                                    (@apply
                                      (lambda (#{x 13212}#
                                               #{dots 13213}#
                                               #{ys 13214}#)
                                        (if (if (if (vector? #{dots 13213}#)
                                                  (if (= (vector-length
                                                           #{dots 13213}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{dots 13213}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{dots 13213}# 1))
                                              #f)
                                          (if (eq? (if (if (vector?
                                                             #{dots 13213}#)
                                                         (if (= (vector-length
                                                                  #{dots 13213}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{dots 13213}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{dots 13213}#
                                                       1)
                                                     #{dots 13213}#)
                                                   (if (if (= (vector-length
                                                                '#(syntax-object
                                                                   ...
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(x)
                                                                      #((top))
                                                                      #("i2288"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        expand-lambda-case
                                                                        lambda*-formals
                                                                        expand-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        expand-void
                                                                        eval-local-transformer
                                                                        expand-local-syntax
                                                                        expand-body
                                                                        expand-macro
                                                                        expand-application
                                                                        expand-expr
                                                                        expand
                                                                        syntax-type
                                                                        parse-when-list
                                                                        expand-install-global
                                                                        expand-top-sequence
                                                                        expand-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        with-transformer-environment
                                                                        transformer-environment
                                                                        resolve-identifier
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i473"
                                                                       "i471"
                                                                       "i469"
                                                                       "i467"
                                                                       "i465"
                                                                       "i463"
                                                                       "i461"
                                                                       "i459"
                                                                       "i457"
                                                                       "i455"
                                                                       "i453"
                                                                       "i451"
                                                                       "i449"
                                                                       "i447"
                                                                       "i445"
                                                                       "i443"
                                                                       "i441"
                                                                       "i439"
                                                                       "i437"
                                                                       "i435"
                                                                       "i433"
                                                                       "i431"
                                                                       "i429"
                                                                       "i427"
                                                                       "i425"
                                                                       "i423"
                                                                       "i421"
                                                                       "i419"
                                                                       "i417"
                                                                       "i415"
                                                                       "i413"
                                                                       "i411"
                                                                       "i409"
                                                                       "i407"
                                                                       "i405"
                                                                       "i403"
                                                                       "i401"
                                                                       "i399"
                                                                       "i398"
                                                                       "i396"
                                                                       "i393"
                                                                       "i392"
                                                                       "i391"
                                                                       "i389"
                                                                       "i388"
                                                                       "i386"
                                                                       "i384"
                                                                       "i382"
                                                                       "i380"
                                                                       "i378"
                                                                       "i376"
                                                                       "i374"
                                                                       "i372"
                                                                       "i369"
                                                                       "i367"
                                                                       "i366"
                                                                       "i364"
                                                                       "i362"
                                                                       "i360"
                                                                       "i358"
                                                                       "i357"
                                                                       "i356"
                                                                       "i355"
                                                                       "i353"
                                                                       "i352"
                                                                       "i349"
                                                                       "i347"
                                                                       "i345"
                                                                       "i343"
                                                                       "i341"
                                                                       "i339"
                                                                       "i337"
                                                                       "i336"
                                                                       "i335"
                                                                       "i333"
                                                                       "i331"
                                                                       "i330"
                                                                       "i327"
                                                                       "i326"
                                                                       "i324"
                                                                       "i322"
                                                                       "i320"
                                                                       "i318"
                                                                       "i316"
                                                                       "i314"
                                                                       "i312"
                                                                       "i310"
                                                                       "i308"
                                                                       "i305"
                                                                       "i303"
                                                                       "i301"
                                                                       "i299"
                                                                       "i297"
                                                                       "i295"
                                                                       "i293"
                                                                       "i291"
                                                                       "i289"
                                                                       "i287"
                                                                       "i285"
                                                                       "i283"
                                                                       "i281"
                                                                       "i279"
                                                                       "i277"
                                                                       "i275"
                                                                       "i273"
                                                                       "i271"
                                                                       "i269"
                                                                       "i267"
                                                                       "i265"
                                                                       "i263"
                                                                       "i261"
                                                                       "i260"
                                                                       "i257"
                                                                       "i255"
                                                                       "i254"
                                                                       "i253"
                                                                       "i252"
                                                                       "i251"
                                                                       "i249"
                                                                       "i247"
                                                                       "i245"
                                                                       "i242"
                                                                       "i240"
                                                                       "i238"
                                                                       "i236"
                                                                       "i234"
                                                                       "i232"
                                                                       "i230"
                                                                       "i228"
                                                                       "i226"
                                                                       "i224"
                                                                       "i222"
                                                                       "i220"
                                                                       "i218"
                                                                       "i216"
                                                                       "i214"
                                                                       "i212"
                                                                       "i210"
                                                                       "i208"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors)
                                                                      ((top)
                                                                       (top)
                                                                       (top))
                                                                      ("i46"
                                                                       "i45"
                                                                       "i44")))
                                                                   (hygiene
                                                                     guile)))
                                                              4)
                                                         #t
                                                         #f)
                                                     '...
                                                     '#(syntax-object
                                                        ...
                                                        ((top)
                                                         #(ribcage () () ())
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i2288"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             with-transformer-environment
                                                             transformer-environment
                                                             resolve-identifier
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i473"
                                                            "i471"
                                                            "i469"
                                                            "i467"
                                                            "i465"
                                                            "i463"
                                                            "i461"
                                                            "i459"
                                                            "i457"
                                                            "i455"
                                                            "i453"
                                                            "i451"
                                                            "i449"
                                                            "i447"
                                                            "i445"
                                                            "i443"
                                                            "i441"
                                                            "i439"
                                                            "i437"
                                                            "i435"
                                                            "i433"
                                                            "i431"
                                                            "i429"
                                                            "i427"
                                                            "i425"
                                                            "i423"
                                                            "i421"
                                                            "i419"
                                                            "i417"
                                                            "i415"
                                                            "i413"
                                                            "i411"
                                                            "i409"
                                                            "i407"
                                                            "i405"
                                                            "i403"
                                                            "i401"
                                                            "i399"
                                                            "i398"
                                                            "i396"
                                                            "i393"
                                                            "i392"
                                                            "i391"
                                                            "i389"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i382"
                                                            "i380"
                                                            "i378"
                                                            "i376"
                                                            "i374"
                                                            "i372"
                                                            "i369"
                                                            "i367"
                                                            "i366"
                                                            "i364"
                                                            "i362"
                                                            "i360"
                                                            "i358"
                                                            "i357"
                                                            "i356"
                                                            "i355"
                                                            "i353"
                                                            "i352"
                                                            "i349"
                                                            "i347"
                                                            "i345"
                                                            "i343"
                                                            "i341"
                                                            "i339"
                                                            "i337"
                                                            "i336"
                                                            "i335"
                                                            "i333"
                                                            "i331"
                                                            "i330"
                                                            "i327"
                                                            "i326"
                                                            "i324"
                                                            "i322"
                                                            "i320"
                                                            "i318"
                                                            "i316"
                                                            "i314"
                                                            "i312"
                                                            "i310"
                                                            "i308"
                                                            "i305"
                                                            "i303"
                                                            "i301"
                                                            "i299"
                                                            "i297"
                                                            "i295"
                                                            "i293"
                                                            "i291"
                                                            "i289"
                                                            "i287"
                                                            "i285"
                                                            "i283"
                                                            "i281"
                                                            "i279"
                                                            "i277"
                                                            "i275"
                                                            "i273"
                                                            "i271"
                                                            "i269"
                                                            "i267"
                                                            "i265"
                                                            "i263"
                                                            "i261"
                                                            "i260"
                                                            "i257"
                                                            "i255"
                                                            "i254"
                                                            "i253"
                                                            "i252"
                                                            "i251"
                                                            "i249"
                                                            "i247"
                                                            "i245"
                                                            "i242"
                                                            "i240"
                                                            "i238"
                                                            "i236"
                                                            "i234"
                                                            "i232"
                                                            "i230"
                                                            "i228"
                                                            "i226"
                                                            "i224"
                                                            "i222"
                                                            "i220"
                                                            "i218"
                                                            "i216"
                                                            "i214"
                                                            "i212"
                                                            "i210"
                                                            "i208"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i46"
                                                            "i45"
                                                            "i44")))
                                                        (hygiene guile))))
                                            (eq? (#{id-var-name 4434}#
                                                   #{dots 13213}#
                                                   '(()))
                                                 (#{id-var-name 4434}#
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i2288"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i473"
                                                          "i471"
                                                          "i469"
                                                          "i467"
                                                          "i465"
                                                          "i463"
                                                          "i461"
                                                          "i459"
                                                          "i457"
                                                          "i455"
                                                          "i453"
                                                          "i451"
                                                          "i449"
                                                          "i447"
                                                          "i445"
                                                          "i443"
                                                          "i441"
                                                          "i439"
                                                          "i437"
                                                          "i435"
                                                          "i433"
                                                          "i431"
                                                          "i429"
                                                          "i427"
                                                          "i425"
                                                          "i423"
                                                          "i421"
                                                          "i419"
                                                          "i417"
                                                          "i415"
                                                          "i413"
                                                          "i411"
                                                          "i409"
                                                          "i407"
                                                          "i405"
                                                          "i403"
                                                          "i401"
                                                          "i399"
                                                          "i398"
                                                          "i396"
                                                          "i393"
                                                          "i392"
                                                          "i391"
                                                          "i389"
                                                          "i388"
                                                          "i386"
                                                          "i384"
                                                          "i382"
                                                          "i380"
                                                          "i378"
                                                          "i376"
                                                          "i374"
                                                          "i372"
                                                          "i369"
                                                          "i367"
                                                          "i366"
                                                          "i364"
                                                          "i362"
                                                          "i360"
                                                          "i358"
                                                          "i357"
                                                          "i356"
                                                          "i355"
                                                          "i353"
                                                          "i352"
                                                          "i349"
                                                          "i347"
                                                          "i345"
                                                          "i343"
                                                          "i341"
                                                          "i339"
                                                          "i337"
                                                          "i336"
                                                          "i335"
                                                          "i333"
                                                          "i331"
                                                          "i330"
                                                          "i327"
                                                          "i326"
                                                          "i324"
                                                          "i322"
                                                          "i320"
                                                          "i318"
                                                          "i316"
                                                          "i314"
                                                          "i312"
                                                          "i310"
                                                          "i308"
                                                          "i305"
                                                          "i303"
                                                          "i301"
                                                          "i299"
                                                          "i297"
                                                          "i295"
                                                          "i293"
                                                          "i291"
                                                          "i289"
                                                          "i287"
                                                          "i285"
                                                          "i283"
                                                          "i281"
                                                          "i279"
                                                          "i277"
                                                          "i275"
                                                          "i273"
                                                          "i271"
                                                          "i269"
                                                          "i267"
                                                          "i265"
                                                          "i263"
                                                          "i261"
                                                          "i260"
                                                          "i257"
                                                          "i255"
                                                          "i254"
                                                          "i253"
                                                          "i252"
                                                          "i251"
                                                          "i249"
                                                          "i247"
                                                          "i245"
                                                          "i242"
                                                          "i240"
                                                          "i238"
                                                          "i236"
                                                          "i234"
                                                          "i232"
                                                          "i230"
                                                          "i228"
                                                          "i226"
                                                          "i224"
                                                          "i222"
                                                          "i220"
                                                          "i218"
                                                          "i216"
                                                          "i214"
                                                          "i212"
                                                          "i210"
                                                          "i208"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("i46" "i45" "i44")))
                                                      (hygiene guile))
                                                   '(())))
                                            #f)
                                          #f))
                                      #{tmp 13208}#)
                                    #f)
                                (@apply
                                  (lambda (#{x 13314}#
                                           #{dots 13315}#
                                           #{ys 13316}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt* 12772}#
                                          #{ys 13316}#
                                          #{n 12778}#
                                          #{ids 12779}#))
                                      (lambda (#{ys 13319}# #{ids 13320}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt 12774}#
                                              #{x 13314}#
                                              (#{1+}# #{n 12778}#)
                                              #{ids 13320}#))
                                          (lambda (#{x 13321}# #{ids 13322}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{v-reverse 12773}#
                                                  #{ys 13319}#))
                                              (lambda (#{ys 13355}#
                                                       #{e 13356}#)
                                                (values
                                                  (vector
                                                    'each+
                                                    #{x 13321}#
                                                    #{ys 13355}#
                                                    #{e 13356}#)
                                                  #{ids 13322}#))))))))
                                  #{tmp 13208}#)
                                (let ((#{tmp 13357}#
                                        ($sc-dispatch
                                          #{p 12777}#
                                          '(any . any))))
                                  (if #{tmp 13357}#
                                    (@apply
                                      (lambda (#{x 13361}# #{y 13362}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt 12774}#
                                              #{y 13362}#
                                              #{n 12778}#
                                              #{ids 12779}#))
                                          (lambda (#{y 13363}# #{ids 13364}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{cvt 12774}#
                                                  #{x 13361}#
                                                  #{n 12778}#
                                                  #{ids 13364}#))
                                              (lambda (#{x 13365}#
                                                       #{ids 13366}#)
                                                (values
                                                  (cons #{x 13365}#
                                                        #{y 13363}#)
                                                  #{ids 13366}#))))))
                                      #{tmp 13357}#)
                                    (let ((#{tmp 13367}#
                                            ($sc-dispatch #{p 12777}# '())))
                                      (if #{tmp 13367}#
                                        (@apply
                                          (lambda ()
                                            (values '() #{ids 12779}#))
                                          #{tmp 13367}#)
                                        (let ((#{tmp 13371}#
                                                ($sc-dispatch
                                                  #{p 12777}#
                                                  '#(vector each-any))))
                                          (if #{tmp 13371}#
                                            (@apply
                                              (lambda (#{x 13375}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{cvt 12774}#
                                                      #{x 13375}#
                                                      #{n 12778}#
                                                      #{ids 12779}#))
                                                  (lambda (#{p 13376}#
                                                           #{ids 13377}#)
                                                    (values
                                                      (vector
                                                        'vector
                                                        #{p 13376}#)
                                                      #{ids 13377}#))))
                                              #{tmp 13371}#)
                                            (values
                                              (vector
                                                'atom
                                                (#{strip 4463}#
                                                  #{p 12777}#
                                                  '(())))
                                              #{ids 12779}#)))))))))))))))
                 (#{cvt 12774}# #{pattern 12770}# 0 '()))))
           (#{build-dispatch-call 11174}#
             (lambda (#{pvars 13490}#
                      #{exp 13491}#
                      #{y 13492}#
                      #{r 13493}#
                      #{mod 13494}#)
               (let ((#{ids 13495}# (map car #{pvars 13490}#)))
                 (begin
                   (map cdr #{pvars 13490}#)
                   (let ((#{labels 13497}#
                           (#{gen-labels 4418}# #{ids 13495}#))
                         (#{new-vars 13498}#
                           (map #{gen-var 4464}# #{ids 13495}#)))
                     (#{build-application 4382}#
                       #f
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'apply)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'apply
                           #f))
                       (list (#{build-simple-lambda 4391}#
                               #f
                               (map syntax->datum #{ids 13495}#)
                               #f
                               #{new-vars 13498}#
                               '()
                               (#{expand 4450}#
                                 #{exp 13491}#
                                 (#{extend-env 4409}#
                                   #{labels 13497}#
                                   (map (lambda (#{var 13823}# #{level 13824}#)
                                          (cons 'syntax
                                                (cons #{var 13823}#
                                                      #{level 13824}#)))
                                        #{new-vars 13498}#
                                        (map cdr #{pvars 13490}#))
                                   #{r 13493}#)
                                 (#{make-binding-wrap 4429}#
                                   #{ids 13495}#
                                   #{labels 13497}#
                                   '(()))
                                 #{mod 13494}#))
                             #{y 13492}#)))))))
           (#{gen-clause 11175}#
             (lambda (#{x 12142}#
                      #{keys 12143}#
                      #{clauses 12144}#
                      #{r 12145}#
                      #{pat 12146}#
                      #{fender 12147}#
                      #{exp 12148}#
                      #{mod 12149}#)
               (call-with-values
                 (lambda ()
                   (#{convert-pattern 11173}#
                     #{pat 12146}#
                     #{keys 12143}#))
                 (lambda (#{p 12304}# #{pvars 12305}#)
                   (if (not (#{distinct-bound-ids? 4441}#
                              (map car #{pvars 12305}#)))
                     (syntax-violation
                       'syntax-case
                       "duplicate pattern variable"
                       #{pat 12146}#)
                     (if (not (and-map
                                (lambda (#{x 12421}#)
                                  (not (let ((#{x 12425}# (car #{x 12421}#)))
                                         (if (if (if (vector? #{x 12425}#)
                                                   (if (= (vector-length
                                                            #{x 12425}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{x 12425}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (symbol?
                                                 (vector-ref #{x 12425}# 1))
                                               #f)
                                           (if (eq? (if (if (vector?
                                                              #{x 12425}#)
                                                          (if (= (vector-length
                                                                   #{x 12425}#)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   #{x 12425}#
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (vector-ref
                                                        #{x 12425}#
                                                        1)
                                                      #{x 12425}#)
                                                    (if (if (= (vector-length
                                                                 '#(syntax-object
                                                                    ...
                                                                    ((top)
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("i2288"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i473"
                                                                        "i471"
                                                                        "i469"
                                                                        "i467"
                                                                        "i465"
                                                                        "i463"
                                                                        "i461"
                                                                        "i459"
                                                                        "i457"
                                                                        "i455"
                                                                        "i453"
                                                                        "i451"
                                                                        "i449"
                                                                        "i447"
                                                                        "i445"
                                                                        "i443"
                                                                        "i441"
                                                                        "i439"
                                                                        "i437"
                                                                        "i435"
                                                                        "i433"
                                                                        "i431"
                                                                        "i429"
                                                                        "i427"
                                                                        "i425"
                                                                        "i423"
                                                                        "i421"
                                                                        "i419"
                                                                        "i417"
                                                                        "i415"
                                                                        "i413"
                                                                        "i411"
                                                                        "i409"
                                                                        "i407"
                                                                        "i405"
                                                                        "i403"
                                                                        "i401"
                                                                        "i399"
                                                                        "i398"
                                                                        "i396"
                                                                        "i393"
                                                                        "i392"
                                                                        "i391"
                                                                        "i389"
                                                                        "i388"
                                                                        "i386"
                                                                        "i384"
                                                                        "i382"
                                                                        "i380"
                                                                        "i378"
                                                                        "i376"
                                                                        "i374"
                                                                        "i372"
                                                                        "i369"
                                                                        "i367"
                                                                        "i366"
                                                                        "i364"
                                                                        "i362"
                                                                        "i360"
                                                                        "i358"
                                                                        "i357"
                                                                        "i356"
                                                                        "i355"
                                                                        "i353"
                                                                        "i352"
                                                                        "i349"
                                                                        "i347"
                                                                        "i345"
                                                                        "i343"
                                                                        "i341"
                                                                        "i339"
                                                                        "i337"
                                                                        "i336"
                                                                        "i335"
                                                                        "i333"
                                                                        "i331"
                                                                        "i330"
                                                                        "i327"
                                                                        "i326"
                                                                        "i324"
                                                                        "i322"
                                                                        "i320"
                                                                        "i318"
                                                                        "i316"
                                                                        "i314"
                                                                        "i312"
                                                                        "i310"
                                                                        "i308"
                                                                        "i305"
                                                                        "i303"
                                                                        "i301"
                                                                        "i299"
                                                                        "i297"
                                                                        "i295"
                                                                        "i293"
                                                                        "i291"
                                                                        "i289"
                                                                        "i287"
                                                                        "i285"
                                                                        "i283"
                                                                        "i281"
                                                                        "i279"
                                                                        "i277"
                                                                        "i275"
                                                                        "i273"
                                                                        "i271"
                                                                        "i269"
                                                                        "i267"
                                                                        "i265"
                                                                        "i263"
                                                                        "i261"
                                                                        "i260"
                                                                        "i257"
                                                                        "i255"
                                                                        "i254"
                                                                        "i253"
                                                                        "i252"
                                                                        "i251"
                                                                        "i249"
                                                                        "i247"
                                                                        "i245"
                                                                        "i242"
                                                                        "i240"
                                                                        "i238"
                                                                        "i236"
                                                                        "i234"
                                                                        "i232"
                                                                        "i230"
                                                                        "i228"
                                                                        "i226"
                                                                        "i224"
                                                                        "i222"
                                                                        "i220"
                                                                        "i218"
                                                                        "i216"
                                                                        "i214"
                                                                        "i212"
                                                                        "i210"
                                                                        "i208"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("i46"
                                                                        "i45"
                                                                        "i44")))
                                                                    (hygiene
                                                                      guile)))
                                                               4)
                                                          #t
                                                          #f)
                                                      '...
                                                      '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i2288"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              with-transformer-environment
                                                              transformer-environment
                                                              resolve-identifier
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i473"
                                                             "i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))))
                                             (eq? (#{id-var-name 4434}#
                                                    #{x 12425}#
                                                    '(()))
                                                  (#{id-var-name 4434}#
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i2288"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i473"
                                                           "i471"
                                                           "i469"
                                                           "i467"
                                                           "i465"
                                                           "i463"
                                                           "i461"
                                                           "i459"
                                                           "i457"
                                                           "i455"
                                                           "i453"
                                                           "i451"
                                                           "i449"
                                                           "i447"
                                                           "i445"
                                                           "i443"
                                                           "i441"
                                                           "i439"
                                                           "i437"
                                                           "i435"
                                                           "i433"
                                                           "i431"
                                                           "i429"
                                                           "i427"
                                                           "i425"
                                                           "i423"
                                                           "i421"
                                                           "i419"
                                                           "i417"
                                                           "i415"
                                                           "i413"
                                                           "i411"
                                                           "i409"
                                                           "i407"
                                                           "i405"
                                                           "i403"
                                                           "i401"
                                                           "i399"
                                                           "i398"
                                                           "i396"
                                                           "i393"
                                                           "i392"
                                                           "i391"
                                                           "i389"
                                                           "i388"
                                                           "i386"
                                                           "i384"
                                                           "i382"
                                                           "i380"
                                                           "i378"
                                                           "i376"
                                                           "i374"
                                                           "i372"
                                                           "i369"
                                                           "i367"
                                                           "i366"
                                                           "i364"
                                                           "i362"
                                                           "i360"
                                                           "i358"
                                                           "i357"
                                                           "i356"
                                                           "i355"
                                                           "i353"
                                                           "i352"
                                                           "i349"
                                                           "i347"
                                                           "i345"
                                                           "i343"
                                                           "i341"
                                                           "i339"
                                                           "i337"
                                                           "i336"
                                                           "i335"
                                                           "i333"
                                                           "i331"
                                                           "i330"
                                                           "i327"
                                                           "i326"
                                                           "i324"
                                                           "i322"
                                                           "i320"
                                                           "i318"
                                                           "i316"
                                                           "i314"
                                                           "i312"
                                                           "i310"
                                                           "i308"
                                                           "i305"
                                                           "i303"
                                                           "i301"
                                                           "i299"
                                                           "i297"
                                                           "i295"
                                                           "i293"
                                                           "i291"
                                                           "i289"
                                                           "i287"
                                                           "i285"
                                                           "i283"
                                                           "i281"
                                                           "i279"
                                                           "i277"
                                                           "i275"
                                                           "i273"
                                                           "i271"
                                                           "i269"
                                                           "i267"
                                                           "i265"
                                                           "i263"
                                                           "i261"
                                                           "i260"
                                                           "i257"
                                                           "i255"
                                                           "i254"
                                                           "i253"
                                                           "i252"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i242"
                                                           "i240"
                                                           "i238"
                                                           "i236"
                                                           "i234"
                                                           "i232"
                                                           "i230"
                                                           "i228"
                                                           "i226"
                                                           "i224"
                                                           "i222"
                                                           "i220"
                                                           "i218"
                                                           "i216"
                                                           "i214"
                                                           "i212"
                                                           "i210"
                                                           "i208"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("i46" "i45" "i44")))
                                                       (hygiene guile))
                                                    '(())))
                                             #f)
                                           #f))))
                                #{pvars 12305}#))
                       (syntax-violation
                         'syntax-case
                         "misplaced ellipsis"
                         #{pat 12146}#)
                       (let ((#{y 12501}#
                               (gensym
                                 (string-append (symbol->string 'tmp) " "))))
                         (#{build-application 4382}#
                           #f
                           (let ((#{req 12644}# (list 'tmp))
                                 (#{vars 12646}# (list #{y 12501}#))
                                 (#{exp 12648}#
                                   (let ((#{y 12665}#
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 3)
                                             #f
                                             'tmp
                                             #{y 12501}#)))
                                     (let ((#{test-exp 12669}#
                                             (let ((#{tmp 12678}#
                                                     ($sc-dispatch
                                                       #{fender 12147}#
                                                       '#(atom #t))))
                                               (if #{tmp 12678}#
                                                 (@apply
                                                   (lambda () #{y 12665}#)
                                                   #{tmp 12678}#)
                                                 (let ((#{then-exp 12696}#
                                                         (#{build-dispatch-call 11174}#
                                                           #{pvars 12305}#
                                                           #{fender 12147}#
                                                           #{y 12665}#
                                                           #{r 12145}#
                                                           #{mod 12149}#))
                                                       (#{else-exp 12697}#
                                                         (make-struct/no-tail
                                                           (vector-ref
                                                             %expanded-vtables
                                                             1)
                                                           #f
                                                           #f)))
                                                   (make-struct/no-tail
                                                     (vector-ref
                                                       %expanded-vtables
                                                       10)
                                                     #f
                                                     #{y 12665}#
                                                     #{then-exp 12696}#
                                                     #{else-exp 12697}#)))))
                                           (#{then-exp 12670}#
                                             (#{build-dispatch-call 11174}#
                                               #{pvars 12305}#
                                               #{exp 12148}#
                                               #{y 12665}#
                                               #{r 12145}#
                                               #{mod 12149}#))
                                           (#{else-exp 12671}#
                                             (#{gen-syntax-case 11176}#
                                               #{x 12142}#
                                               #{keys 12143}#
                                               #{clauses 12144}#
                                               #{r 12145}#
                                               #{mod 12149}#)))
                                       (make-struct/no-tail
                                         (vector-ref %expanded-vtables 10)
                                         #f
                                         #{test-exp 12669}#
                                         #{then-exp 12670}#
                                         #{else-exp 12671}#)))))
                             (let ((#{body 12653}#
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       #{req 12644}#
                                       #f
                                       #f
                                       #f
                                       '()
                                       #{vars 12646}#
                                       #{exp 12648}#
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 #{body 12653}#)))
                           (list (if (eq? #{p 12304}# 'any)
                                   (let ((#{fun-exp 12719}#
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               'list)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               'list
                                               #f)))
                                         (#{arg-exps 12720}#
                                           (list #{x 12142}#)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       #{fun-exp 12719}#
                                       #{arg-exps 12720}#))
                                   (let ((#{fun-exp 12743}#
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               '$sc-dispatch)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               '$sc-dispatch
                                               #f)))
                                         (#{arg-exps 12744}#
                                           (list #{x 12142}#
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     1)
                                                   #f
                                                   #{p 12304}#))))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       #{fun-exp 12743}#
                                       #{arg-exps 12744}#))))))))))))
           (#{gen-syntax-case 11176}#
             (lambda (#{x 11575}#
                      #{keys 11576}#
                      #{clauses 11577}#
                      #{r 11578}#
                      #{mod 11579}#)
               (if (null? #{clauses 11577}#)
                 (let ((#{fun-exp 11584}#
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'syntax-violation)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'syntax-violation
                             #f)))
                       (#{arg-exps 11585}#
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #f)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 "source expression failed to match any pattern")
                               #{x 11575}#)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     #{fun-exp 11584}#
                     #{arg-exps 11585}#))
                 (let ((#{tmp 11618}# (car #{clauses 11577}#)))
                   (let ((#{tmp 11619}#
                           ($sc-dispatch #{tmp 11618}# '(any any))))
                     (if #{tmp 11619}#
                       (@apply
                         (lambda (#{pat 11621}# #{exp 11622}#)
                           (if (if (if (symbol? #{pat 11621}#)
                                     #t
                                     (if (if (vector? #{pat 11621}#)
                                           (if (= (vector-length #{pat 11621}#)
                                                  4)
                                             (eq? (vector-ref #{pat 11621}# 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (symbol? (vector-ref #{pat 11621}# 1))
                                       #f))
                                 (and-map
                                   (lambda (#{x 11649}#)
                                     (not (if (eq? (if (if (vector?
                                                             #{pat 11621}#)
                                                         (if (= (vector-length
                                                                  #{pat 11621}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{pat 11621}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{pat 11621}#
                                                       1)
                                                     #{pat 11621}#)
                                                   (if (if (vector?
                                                             #{x 11649}#)
                                                         (if (= (vector-length
                                                                  #{x 11649}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{x 11649}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref #{x 11649}# 1)
                                                     #{x 11649}#))
                                            (eq? (#{id-var-name 4434}#
                                                   #{pat 11621}#
                                                   '(()))
                                                 (#{id-var-name 4434}#
                                                   #{x 11649}#
                                                   '(())))
                                            #f)))
                                   (cons '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("i3969" "i3970"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("i3958"
                                                 "i3959"
                                                 "i3960"
                                                 "i3961"
                                                 "i3962"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("i3768"
                                                "i3766"
                                                "i3764"
                                                "i3762"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i473"
                                                "i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i398"
                                                "i396"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i389"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i372"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i356"
                                                "i355"
                                                "i353"
                                                "i352"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i336"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i330"
                                                "i327"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i310"
                                                "i308"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i260"
                                                "i257"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i252"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))
                                         #{keys 11576}#))
                                 #f)
                             (if (if (eq? (if (if (= (vector-length
                                                       '#(syntax-object
                                                          pad
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("i3969"
                                                               "i3970"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i3958"
                                                               "i3959"
                                                               "i3960"
                                                               "i3961"
                                                               "i3962"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("i3768"
                                                              "i3766"
                                                              "i3764"
                                                              "i3762"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               gensym-hook
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("i473"
                                                              "i471"
                                                              "i469"
                                                              "i467"
                                                              "i465"
                                                              "i463"
                                                              "i461"
                                                              "i459"
                                                              "i457"
                                                              "i455"
                                                              "i453"
                                                              "i451"
                                                              "i449"
                                                              "i447"
                                                              "i445"
                                                              "i443"
                                                              "i441"
                                                              "i439"
                                                              "i437"
                                                              "i435"
                                                              "i433"
                                                              "i431"
                                                              "i429"
                                                              "i427"
                                                              "i425"
                                                              "i423"
                                                              "i421"
                                                              "i419"
                                                              "i417"
                                                              "i415"
                                                              "i413"
                                                              "i411"
                                                              "i409"
                                                              "i407"
                                                              "i405"
                                                              "i403"
                                                              "i401"
                                                              "i399"
                                                              "i398"
                                                              "i396"
                                                              "i393"
                                                              "i392"
                                                              "i391"
                                                              "i389"
                                                              "i388"
                                                              "i386"
                                                              "i384"
                                                              "i382"
                                                              "i380"
                                                              "i378"
                                                              "i376"
                                                              "i374"
                                                              "i372"
                                                              "i369"
                                                              "i367"
                                                              "i366"
                                                              "i364"
                                                              "i362"
                                                              "i360"
                                                              "i358"
                                                              "i357"
                                                              "i356"
                                                              "i355"
                                                              "i353"
                                                              "i352"
                                                              "i349"
                                                              "i347"
                                                              "i345"
                                                              "i343"
                                                              "i341"
                                                              "i339"
                                                              "i337"
                                                              "i336"
                                                              "i335"
                                                              "i333"
                                                              "i331"
                                                              "i330"
                                                              "i327"
                                                              "i326"
                                                              "i324"
                                                              "i322"
                                                              "i320"
                                                              "i318"
                                                              "i316"
                                                              "i314"
                                                              "i312"
                                                              "i310"
                                                              "i308"
                                                              "i305"
                                                              "i303"
                                                              "i301"
                                                              "i299"
                                                              "i297"
                                                              "i295"
                                                              "i293"
                                                              "i291"
                                                              "i289"
                                                              "i287"
                                                              "i285"
                                                              "i283"
                                                              "i281"
                                                              "i279"
                                                              "i277"
                                                              "i275"
                                                              "i273"
                                                              "i271"
                                                              "i269"
                                                              "i267"
                                                              "i265"
                                                              "i263"
                                                              "i261"
                                                              "i260"
                                                              "i257"
                                                              "i255"
                                                              "i254"
                                                              "i253"
                                                              "i252"
                                                              "i251"
                                                              "i249"
                                                              "i247"
                                                              "i245"
                                                              "i242"
                                                              "i240"
                                                              "i238"
                                                              "i236"
                                                              "i234"
                                                              "i232"
                                                              "i230"
                                                              "i228"
                                                              "i226"
                                                              "i224"
                                                              "i222"
                                                              "i220"
                                                              "i218"
                                                              "i216"
                                                              "i214"
                                                              "i212"
                                                              "i210"
                                                              "i208"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("i46"
                                                              "i45"
                                                              "i44")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            'pad
                                            '#(syntax-object
                                               pad
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("i3969" "i3970"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i3958"
                                                    "i3959"
                                                    "i3960"
                                                    "i3961"
                                                    "i3962"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("i3768"
                                                   "i3766"
                                                   "i3764"
                                                   "i3762"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i473"
                                                   "i471"
                                                   "i469"
                                                   "i467"
                                                   "i465"
                                                   "i463"
                                                   "i461"
                                                   "i459"
                                                   "i457"
                                                   "i455"
                                                   "i453"
                                                   "i451"
                                                   "i449"
                                                   "i447"
                                                   "i445"
                                                   "i443"
                                                   "i441"
                                                   "i439"
                                                   "i437"
                                                   "i435"
                                                   "i433"
                                                   "i431"
                                                   "i429"
                                                   "i427"
                                                   "i425"
                                                   "i423"
                                                   "i421"
                                                   "i419"
                                                   "i417"
                                                   "i415"
                                                   "i413"
                                                   "i411"
                                                   "i409"
                                                   "i407"
                                                   "i405"
                                                   "i403"
                                                   "i401"
                                                   "i399"
                                                   "i398"
                                                   "i396"
                                                   "i393"
                                                   "i392"
                                                   "i391"
                                                   "i389"
                                                   "i388"
                                                   "i386"
                                                   "i384"
                                                   "i382"
                                                   "i380"
                                                   "i378"
                                                   "i376"
                                                   "i374"
                                                   "i372"
                                                   "i369"
                                                   "i367"
                                                   "i366"
                                                   "i364"
                                                   "i362"
                                                   "i360"
                                                   "i358"
                                                   "i357"
                                                   "i356"
                                                   "i355"
                                                   "i353"
                                                   "i352"
                                                   "i349"
                                                   "i347"
                                                   "i345"
                                                   "i343"
                                                   "i341"
                                                   "i339"
                                                   "i337"
                                                   "i336"
                                                   "i335"
                                                   "i333"
                                                   "i331"
                                                   "i330"
                                                   "i327"
                                                   "i326"
                                                   "i324"
                                                   "i322"
                                                   "i320"
                                                   "i318"
                                                   "i316"
                                                   "i314"
                                                   "i312"
                                                   "i310"
                                                   "i308"
                                                   "i305"
                                                   "i303"
                                                   "i301"
                                                   "i299"
                                                   "i297"
                                                   "i295"
                                                   "i293"
                                                   "i291"
                                                   "i289"
                                                   "i287"
                                                   "i285"
                                                   "i283"
                                                   "i281"
                                                   "i279"
                                                   "i277"
                                                   "i275"
                                                   "i273"
                                                   "i271"
                                                   "i269"
                                                   "i267"
                                                   "i265"
                                                   "i263"
                                                   "i261"
                                                   "i260"
                                                   "i257"
                                                   "i255"
                                                   "i254"
                                                   "i253"
                                                   "i252"
                                                   "i251"
                                                   "i249"
                                                   "i247"
                                                   "i245"
                                                   "i242"
                                                   "i240"
                                                   "i238"
                                                   "i236"
                                                   "i234"
                                                   "i232"
                                                   "i230"
                                                   "i228"
                                                   "i226"
                                                   "i224"
                                                   "i222"
                                                   "i220"
                                                   "i218"
                                                   "i216"
                                                   "i214"
                                                   "i212"
                                                   "i210"
                                                   "i208"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("i46" "i45" "i44")))
                                               (hygiene guile)))
                                          (if (if (= (vector-length
                                                       '#(syntax-object
                                                          _
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("i3969"
                                                               "i3970"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i3958"
                                                               "i3959"
                                                               "i3960"
                                                               "i3961"
                                                               "i3962"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("i3768"
                                                              "i3766"
                                                              "i3764"
                                                              "i3762"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               gensym-hook
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("i473"
                                                              "i471"
                                                              "i469"
                                                              "i467"
                                                              "i465"
                                                              "i463"
                                                              "i461"
                                                              "i459"
                                                              "i457"
                                                              "i455"
                                                              "i453"
                                                              "i451"
                                                              "i449"
                                                              "i447"
                                                              "i445"
                                                              "i443"
                                                              "i441"
                                                              "i439"
                                                              "i437"
                                                              "i435"
                                                              "i433"
                                                              "i431"
                                                              "i429"
                                                              "i427"
                                                              "i425"
                                                              "i423"
                                                              "i421"
                                                              "i419"
                                                              "i417"
                                                              "i415"
                                                              "i413"
                                                              "i411"
                                                              "i409"
                                                              "i407"
                                                              "i405"
                                                              "i403"
                                                              "i401"
                                                              "i399"
                                                              "i398"
                                                              "i396"
                                                              "i393"
                                                              "i392"
                                                              "i391"
                                                              "i389"
                                                              "i388"
                                                              "i386"
                                                              "i384"
                                                              "i382"
                                                              "i380"
                                                              "i378"
                                                              "i376"
                                                              "i374"
                                                              "i372"
                                                              "i369"
                                                              "i367"
                                                              "i366"
                                                              "i364"
                                                              "i362"
                                                              "i360"
                                                              "i358"
                                                              "i357"
                                                              "i356"
                                                              "i355"
                                                              "i353"
                                                              "i352"
                                                              "i349"
                                                              "i347"
                                                              "i345"
                                                              "i343"
                                                              "i341"
                                                              "i339"
                                                              "i337"
                                                              "i336"
                                                              "i335"
                                                              "i333"
                                                              "i331"
                                                              "i330"
                                                              "i327"
                                                              "i326"
                                                              "i324"
                                                              "i322"
                                                              "i320"
                                                              "i318"
                                                              "i316"
                                                              "i314"
                                                              "i312"
                                                              "i310"
                                                              "i308"
                                                              "i305"
                                                              "i303"
                                                              "i301"
                                                              "i299"
                                                              "i297"
                                                              "i295"
                                                              "i293"
                                                              "i291"
                                                              "i289"
                                                              "i287"
                                                              "i285"
                                                              "i283"
                                                              "i281"
                                                              "i279"
                                                              "i277"
                                                              "i275"
                                                              "i273"
                                                              "i271"
                                                              "i269"
                                                              "i267"
                                                              "i265"
                                                              "i263"
                                                              "i261"
                                                              "i260"
                                                              "i257"
                                                              "i255"
                                                              "i254"
                                                              "i253"
                                                              "i252"
                                                              "i251"
                                                              "i249"
                                                              "i247"
                                                              "i245"
                                                              "i242"
                                                              "i240"
                                                              "i238"
                                                              "i236"
                                                              "i234"
                                                              "i232"
                                                              "i230"
                                                              "i228"
                                                              "i226"
                                                              "i224"
                                                              "i222"
                                                              "i220"
                                                              "i218"
                                                              "i216"
                                                              "i214"
                                                              "i212"
                                                              "i210"
                                                              "i208"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("i46"
                                                              "i45"
                                                              "i44")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            '_
                                            '#(syntax-object
                                               _
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("i3969" "i3970"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i3958"
                                                    "i3959"
                                                    "i3960"
                                                    "i3961"
                                                    "i3962"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("i3768"
                                                   "i3766"
                                                   "i3764"
                                                   "i3762"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i473"
                                                   "i471"
                                                   "i469"
                                                   "i467"
                                                   "i465"
                                                   "i463"
                                                   "i461"
                                                   "i459"
                                                   "i457"
                                                   "i455"
                                                   "i453"
                                                   "i451"
                                                   "i449"
                                                   "i447"
                                                   "i445"
                                                   "i443"
                                                   "i441"
                                                   "i439"
                                                   "i437"
                                                   "i435"
                                                   "i433"
                                                   "i431"
                                                   "i429"
                                                   "i427"
                                                   "i425"
                                                   "i423"
                                                   "i421"
                                                   "i419"
                                                   "i417"
                                                   "i415"
                                                   "i413"
                                                   "i411"
                                                   "i409"
                                                   "i407"
                                                   "i405"
                                                   "i403"
                                                   "i401"
                                                   "i399"
                                                   "i398"
                                                   "i396"
                                                   "i393"
                                                   "i392"
                                                   "i391"
                                                   "i389"
                                                   "i388"
                                                   "i386"
                                                   "i384"
                                                   "i382"
                                                   "i380"
                                                   "i378"
                                                   "i376"
                                                   "i374"
                                                   "i372"
                                                   "i369"
                                                   "i367"
                                                   "i366"
                                                   "i364"
                                                   "i362"
                                                   "i360"
                                                   "i358"
                                                   "i357"
                                                   "i356"
                                                   "i355"
                                                   "i353"
                                                   "i352"
                                                   "i349"
                                                   "i347"
                                                   "i345"
                                                   "i343"
                                                   "i341"
                                                   "i339"
                                                   "i337"
                                                   "i336"
                                                   "i335"
                                                   "i333"
                                                   "i331"
                                                   "i330"
                                                   "i327"
                                                   "i326"
                                                   "i324"
                                                   "i322"
                                                   "i320"
                                                   "i318"
                                                   "i316"
                                                   "i314"
                                                   "i312"
                                                   "i310"
                                                   "i308"
                                                   "i305"
                                                   "i303"
                                                   "i301"
                                                   "i299"
                                                   "i297"
                                                   "i295"
                                                   "i293"
                                                   "i291"
                                                   "i289"
                                                   "i287"
                                                   "i285"
                                                   "i283"
                                                   "i281"
                                                   "i279"
                                                   "i277"
                                                   "i275"
                                                   "i273"
                                                   "i271"
                                                   "i269"
                                                   "i267"
                                                   "i265"
                                                   "i263"
                                                   "i261"
                                                   "i260"
                                                   "i257"
                                                   "i255"
                                                   "i254"
                                                   "i253"
                                                   "i252"
                                                   "i251"
                                                   "i249"
                                                   "i247"
                                                   "i245"
                                                   "i242"
                                                   "i240"
                                                   "i238"
                                                   "i236"
                                                   "i234"
                                                   "i232"
                                                   "i230"
                                                   "i228"
                                                   "i226"
                                                   "i224"
                                                   "i222"
                                                   "i220"
                                                   "i218"
                                                   "i216"
                                                   "i214"
                                                   "i212"
                                                   "i210"
                                                   "i208"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("i46" "i45" "i44")))
                                               (hygiene guile))))
                                   (eq? (#{id-var-name 4434}#
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i3969" "i3970"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3958"
                                                  "i3959"
                                                  "i3960"
                                                  "i3961"
                                                  "i3962"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i3768"
                                                 "i3766"
                                                 "i3764"
                                                 "i3762"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i473"
                                                 "i471"
                                                 "i469"
                                                 "i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile))
                                          '(()))
                                        (#{id-var-name 4434}#
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i3969" "i3970"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3958"
                                                  "i3959"
                                                  "i3960"
                                                  "i3961"
                                                  "i3962"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i3768"
                                                 "i3766"
                                                 "i3764"
                                                 "i3762"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i473"
                                                 "i471"
                                                 "i469"
                                                 "i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile))
                                          '(())))
                                   #f)
                               (#{expand 4450}#
                                 #{exp 11622}#
                                 #{r 11578}#
                                 '(())
                                 #{mod 11579}#)
                               (let ((#{labels 11825}#
                                       (list (symbol->string (gensym "i"))))
                                     (#{var 11826}#
                                       (let ((#{id 11864}#
                                               (if (if (vector? #{pat 11621}#)
                                                     (if (= (vector-length
                                                              #{pat 11621}#)
                                                            4)
                                                       (eq? (vector-ref
                                                              #{pat 11621}#
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref #{pat 11621}# 1)
                                                 #{pat 11621}#)))
                                         (gensym
                                           (string-append
                                             (symbol->string #{id 11864}#)
                                             " ")))))
                                 (#{build-application 4382}#
                                   #f
                                   (#{build-simple-lambda 4391}#
                                     #f
                                     (list (syntax->datum #{pat 11621}#))
                                     #f
                                     (list #{var 11826}#)
                                     '()
                                     (#{expand 4450}#
                                       #{exp 11622}#
                                       (#{extend-env 4409}#
                                         #{labels 11825}#
                                         (list (cons 'syntax
                                                     (cons #{var 11826}# 0)))
                                         #{r 11578}#)
                                       (#{make-binding-wrap 4429}#
                                         (list #{pat 11621}#)
                                         #{labels 11825}#
                                         '(()))
                                       #{mod 11579}#))
                                   (list #{x 11575}#))))
                             (#{gen-clause 11175}#
                               #{x 11575}#
                               #{keys 11576}#
                               (cdr #{clauses 11577}#)
                               #{r 11578}#
                               #{pat 11621}#
                               #t
                               #{exp 11622}#
                               #{mod 11579}#)))
                         #{tmp 11619}#)
                       (let ((#{tmp 12134}#
                               ($sc-dispatch #{tmp 11618}# '(any any any))))
                         (if #{tmp 12134}#
                           (@apply
                             (lambda (#{pat 12136}#
                                      #{fender 12137}#
                                      #{exp 12138}#)
                               (#{gen-clause 11175}#
                                 #{x 11575}#
                                 #{keys 11576}#
                                 (cdr #{clauses 11577}#)
                                 #{r 11578}#
                                 #{pat 12136}#
                                 #{fender 12137}#
                                 #{exp 12138}#
                                 #{mod 11579}#))
                             #{tmp 12134}#)
                           (syntax-violation
                             'syntax-case
                             "invalid clause"
                             (car #{clauses 11577}#)))))))))))
          (lambda (#{e 11177}#
                   #{r 11178}#
                   #{w 11179}#
                   #{s 11180}#
                   #{mod 11181}#)
            (let ((#{e 11182}#
                    (#{wrap 4443}#
                      (begin
                        (if (if (pair? #{e 11177}#) #{s 11180}# #f)
                          (set-source-properties! #{e 11177}# #{s 11180}#))
                        #{e 11177}#)
                      #{w 11179}#
                      #{mod 11181}#)))
              (let ((#{tmp 11184}#
                      ($sc-dispatch
                        #{e 11182}#
                        '(_ any each-any . each-any))))
                (if #{tmp 11184}#
                  (@apply
                    (lambda (#{val 11209}# #{key 11210}# #{m 11211}#)
                      (if (and-map
                            (lambda (#{x 11212}#)
                              (if (if (symbol? #{x 11212}#)
                                    #t
                                    (if (if (vector? #{x 11212}#)
                                          (if (= (vector-length #{x 11212}#) 4)
                                            (eq? (vector-ref #{x 11212}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{x 11212}# 1))
                                      #f))
                                (not (if (if (if (vector? #{x 11212}#)
                                               (if (= (vector-length
                                                        #{x 11212}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 11212}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol? (vector-ref #{x 11212}# 1))
                                           #f)
                                       (if (eq? (if (if (vector? #{x 11212}#)
                                                      (if (= (vector-length
                                                               #{x 11212}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{x 11212}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{x 11212}# 1)
                                                  #{x 11212}#)
                                                (if (if (= (vector-length
                                                             '#(syntax-object
                                                                ...
                                                                ((top)
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i2288"))
                                                                 #(ribcage
                                                                   (lambda-var-list
                                                                     gen-var
                                                                     strip
                                                                     expand-lambda-case
                                                                     lambda*-formals
                                                                     expand-simple-lambda
                                                                     lambda-formals
                                                                     ellipsis?
                                                                     expand-void
                                                                     eval-local-transformer
                                                                     expand-local-syntax
                                                                     expand-body
                                                                     expand-macro
                                                                     expand-application
                                                                     expand-expr
                                                                     expand
                                                                     syntax-type
                                                                     parse-when-list
                                                                     expand-install-global
                                                                     expand-top-sequence
                                                                     expand-sequence
                                                                     source-wrap
                                                                     wrap
                                                                     bound-id-member?
                                                                     distinct-bound-ids?
                                                                     valid-bound-ids?
                                                                     bound-id=?
                                                                     free-id=?
                                                                     with-transformer-environment
                                                                     transformer-environment
                                                                     resolve-identifier
                                                                     id-var-name
                                                                     same-marks?
                                                                     join-marks
                                                                     join-wraps
                                                                     smart-append
                                                                     make-binding-wrap
                                                                     extend-ribcage!
                                                                     make-empty-ribcage
                                                                     new-mark
                                                                     anti-mark
                                                                     the-anti-mark
                                                                     top-marked?
                                                                     top-wrap
                                                                     empty-wrap
                                                                     set-ribcage-labels!
                                                                     set-ribcage-marks!
                                                                     set-ribcage-symnames!
                                                                     ribcage-labels
                                                                     ribcage-marks
                                                                     ribcage-symnames
                                                                     ribcage?
                                                                     make-ribcage
                                                                     gen-labels
                                                                     gen-label
                                                                     make-rename
                                                                     rename-marks
                                                                     rename-new
                                                                     rename-old
                                                                     subst-rename?
                                                                     wrap-subst
                                                                     wrap-marks
                                                                     make-wrap
                                                                     id-sym-name&marks
                                                                     id-sym-name
                                                                     id?
                                                                     nonsymbol-id?
                                                                     global-extend
                                                                     lookup
                                                                     macros-only-env
                                                                     extend-var-env
                                                                     extend-env
                                                                     null-env
                                                                     binding-value
                                                                     binding-type
                                                                     make-binding
                                                                     arg-check
                                                                     source-annotation
                                                                     no-source
                                                                     set-syntax-object-module!
                                                                     set-syntax-object-wrap!
                                                                     set-syntax-object-expression!
                                                                     syntax-object-module
                                                                     syntax-object-wrap
                                                                     syntax-object-expression
                                                                     syntax-object?
                                                                     make-syntax-object
                                                                     build-lexical-var
                                                                     build-letrec
                                                                     build-named-let
                                                                     build-let
                                                                     build-sequence
                                                                     build-data
                                                                     build-primref
                                                                     build-lambda-case
                                                                     build-case-lambda
                                                                     build-simple-lambda
                                                                     build-global-definition
                                                                     build-global-assignment
                                                                     build-global-reference
                                                                     analyze-variable
                                                                     build-lexical-assignment
                                                                     build-lexical-reference
                                                                     build-dynlet
                                                                     build-conditional
                                                                     build-application
                                                                     build-void
                                                                     maybe-name-value!
                                                                     decorate-source
                                                                     get-global-definition-hook
                                                                     put-global-definition-hook
                                                                     gensym-hook
                                                                     local-eval-hook
                                                                     top-level-eval-hook
                                                                     fx<
                                                                     fx=
                                                                     fx-
                                                                     fx+
                                                                     set-lambda-meta!
                                                                     lambda-meta
                                                                     lambda?
                                                                     make-dynlet
                                                                     make-letrec
                                                                     make-let
                                                                     make-lambda-case
                                                                     make-lambda
                                                                     make-sequence
                                                                     make-application
                                                                     make-conditional
                                                                     make-toplevel-define
                                                                     make-toplevel-set
                                                                     make-toplevel-ref
                                                                     make-module-set
                                                                     make-module-ref
                                                                     make-lexical-set
                                                                     make-lexical-ref
                                                                     make-primitive-ref
                                                                     make-const
                                                                     make-void)
                                                                   ((top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                   ("i473"
                                                                    "i471"
                                                                    "i469"
                                                                    "i467"
                                                                    "i465"
                                                                    "i463"
                                                                    "i461"
                                                                    "i459"
                                                                    "i457"
                                                                    "i455"
                                                                    "i453"
                                                                    "i451"
                                                                    "i449"
                                                                    "i447"
                                                                    "i445"
                                                                    "i443"
                                                                    "i441"
                                                                    "i439"
                                                                    "i437"
                                                                    "i435"
                                                                    "i433"
                                                                    "i431"
                                                                    "i429"
                                                                    "i427"
                                                                    "i425"
                                                                    "i423"
                                                                    "i421"
                                                                    "i419"
                                                                    "i417"
                                                                    "i415"
                                                                    "i413"
                                                                    "i411"
                                                                    "i409"
                                                                    "i407"
                                                                    "i405"
                                                                    "i403"
                                                                    "i401"
                                                                    "i399"
                                                                    "i398"
                                                                    "i396"
                                                                    "i393"
                                                                    "i392"
                                                                    "i391"
                                                                    "i389"
                                                                    "i388"
                                                                    "i386"
                                                                    "i384"
                                                                    "i382"
                                                                    "i380"
                                                                    "i378"
                                                                    "i376"
                                                                    "i374"
                                                                    "i372"
                                                                    "i369"
                                                                    "i367"
                                                                    "i366"
                                                                    "i364"
                                                                    "i362"
                                                                    "i360"
                                                                    "i358"
                                                                    "i357"
                                                                    "i356"
                                                                    "i355"
                                                                    "i353"
                                                                    "i352"
                                                                    "i349"
                                                                    "i347"
                                                                    "i345"
                                                                    "i343"
                                                                    "i341"
                                                                    "i339"
                                                                    "i337"
                                                                    "i336"
                                                                    "i335"
                                                                    "i333"
                                                                    "i331"
                                                                    "i330"
                                                                    "i327"
                                                                    "i326"
                                                                    "i324"
                                                                    "i322"
                                                                    "i320"
                                                                    "i318"
                                                                    "i316"
                                                                    "i314"
                                                                    "i312"
                                                                    "i310"
                                                                    "i308"
                                                                    "i305"
                                                                    "i303"
                                                                    "i301"
                                                                    "i299"
                                                                    "i297"
                                                                    "i295"
                                                                    "i293"
                                                                    "i291"
                                                                    "i289"
                                                                    "i287"
                                                                    "i285"
                                                                    "i283"
                                                                    "i281"
                                                                    "i279"
                                                                    "i277"
                                                                    "i275"
                                                                    "i273"
                                                                    "i271"
                                                                    "i269"
                                                                    "i267"
                                                                    "i265"
                                                                    "i263"
                                                                    "i261"
                                                                    "i260"
                                                                    "i257"
                                                                    "i255"
                                                                    "i254"
                                                                    "i253"
                                                                    "i252"
                                                                    "i251"
                                                                    "i249"
                                                                    "i247"
                                                                    "i245"
                                                                    "i242"
                                                                    "i240"
                                                                    "i238"
                                                                    "i236"
                                                                    "i234"
                                                                    "i232"
                                                                    "i230"
                                                                    "i228"
                                                                    "i226"
                                                                    "i224"
                                                                    "i222"
                                                                    "i220"
                                                                    "i218"
                                                                    "i216"
                                                                    "i214"
                                                                    "i212"
                                                                    "i210"
                                                                    "i208"))
                                                                 #(ribcage
                                                                   (define-structure
                                                                     define-expansion-accessors
                                                                     define-expansion-constructors)
                                                                   ((top)
                                                                    (top)
                                                                    (top))
                                                                   ("i46"
                                                                    "i45"
                                                                    "i44")))
                                                                (hygiene
                                                                  guile)))
                                                           4)
                                                      #t
                                                      #f)
                                                  '...
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i2288"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          with-transformer-environment
                                                          transformer-environment
                                                          resolve-identifier
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i473"
                                                         "i471"
                                                         "i469"
                                                         "i467"
                                                         "i465"
                                                         "i463"
                                                         "i461"
                                                         "i459"
                                                         "i457"
                                                         "i455"
                                                         "i453"
                                                         "i451"
                                                         "i449"
                                                         "i447"
                                                         "i445"
                                                         "i443"
                                                         "i441"
                                                         "i439"
                                                         "i437"
                                                         "i435"
                                                         "i433"
                                                         "i431"
                                                         "i429"
                                                         "i427"
                                                         "i425"
                                                         "i423"
                                                         "i421"
                                                         "i419"
                                                         "i417"
                                                         "i415"
                                                         "i413"
                                                         "i411"
                                                         "i409"
                                                         "i407"
                                                         "i405"
                                                         "i403"
                                                         "i401"
                                                         "i399"
                                                         "i398"
                                                         "i396"
                                                         "i393"
                                                         "i392"
                                                         "i391"
                                                         "i389"
                                                         "i388"
                                                         "i386"
                                                         "i384"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i372"
                                                         "i369"
                                                         "i367"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i357"
                                                         "i356"
                                                         "i355"
                                                         "i353"
                                                         "i352"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i336"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i330"
                                                         "i327"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i283"
                                                         "i281"
                                                         "i279"
                                                         "i277"
                                                         "i275"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i260"
                                                         "i257"
                                                         "i255"
                                                         "i254"
                                                         "i253"
                                                         "i252"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i242"
                                                         "i240"
                                                         "i238"
                                                         "i236"
                                                         "i234"
                                                         "i232"
                                                         "i230"
                                                         "i228"
                                                         "i226"
                                                         "i224"
                                                         "i222"
                                                         "i220"
                                                         "i218"
                                                         "i216"
                                                         "i214"
                                                         "i212"
                                                         "i210"
                                                         "i208"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i46" "i45" "i44")))
                                                     (hygiene guile))))
                                         (eq? (#{id-var-name 4434}#
                                                #{x 11212}#
                                                '(()))
                                              (#{id-var-name 4434}#
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i2288"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        with-transformer-environment
                                                        transformer-environment
                                                        resolve-identifier
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i473"
                                                       "i471"
                                                       "i469"
                                                       "i467"
                                                       "i465"
                                                       "i463"
                                                       "i461"
                                                       "i459"
                                                       "i457"
                                                       "i455"
                                                       "i453"
                                                       "i451"
                                                       "i449"
                                                       "i447"
                                                       "i445"
                                                       "i443"
                                                       "i441"
                                                       "i439"
                                                       "i437"
                                                       "i435"
                                                       "i433"
                                                       "i431"
                                                       "i429"
                                                       "i427"
                                                       "i425"
                                                       "i423"
                                                       "i421"
                                                       "i419"
                                                       "i417"
                                                       "i415"
                                                       "i413"
                                                       "i411"
                                                       "i409"
                                                       "i407"
                                                       "i405"
                                                       "i403"
                                                       "i401"
                                                       "i399"
                                                       "i398"
                                                       "i396"
                                                       "i393"
                                                       "i392"
                                                       "i391"
                                                       "i389"
                                                       "i388"
                                                       "i386"
                                                       "i384"
                                                       "i382"
                                                       "i380"
                                                       "i378"
                                                       "i376"
                                                       "i374"
                                                       "i372"
                                                       "i369"
                                                       "i367"
                                                       "i366"
                                                       "i364"
                                                       "i362"
                                                       "i360"
                                                       "i358"
                                                       "i357"
                                                       "i356"
                                                       "i355"
                                                       "i353"
                                                       "i352"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i336"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i330"
                                                       "i327"
                                                       "i326"
                                                       "i324"
                                                       "i322"
                                                       "i320"
                                                       "i318"
                                                       "i316"
                                                       "i314"
                                                       "i312"
                                                       "i310"
                                                       "i308"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i293"
                                                       "i291"
                                                       "i289"
                                                       "i287"
                                                       "i285"
                                                       "i283"
                                                       "i281"
                                                       "i279"
                                                       "i277"
                                                       "i275"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i260"
                                                       "i257"
                                                       "i255"
                                                       "i254"
                                                       "i253"
                                                       "i252"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i242"
                                                       "i240"
                                                       "i238"
                                                       "i236"
                                                       "i234"
                                                       "i232"
                                                       "i230"
                                                       "i228"
                                                       "i226"
                                                       "i224"
                                                       "i222"
                                                       "i220"
                                                       "i218"
                                                       "i216"
                                                       "i214"
                                                       "i212"
                                                       "i210"
                                                       "i208"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("i46" "i45" "i44")))
                                                   (hygiene guile))
                                                '(())))
                                         #f)
                                       #f))
                                #f))
                            #{key 11210}#)
                        (let ((#{x 11338}#
                                (gensym
                                  (string-append (symbol->string 'tmp) " "))))
                          (#{build-application 4382}#
                            #{s 11180}#
                            (let ((#{req 11468}# (list 'tmp))
                                  (#{vars 11470}# (list #{x 11338}#))
                                  (#{exp 11472}#
                                    (#{gen-syntax-case 11176}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        #{x 11338}#)
                                      #{key 11210}#
                                      #{m 11211}#
                                      #{r 11178}#
                                      #{mod 11181}#)))
                              (let ((#{body 11477}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 14)
                                        #f
                                        #{req 11468}#
                                        #f
                                        #f
                                        #f
                                        '()
                                        #{vars 11470}#
                                        #{exp 11472}#
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 13)
                                  #f
                                  '()
                                  #{body 11477}#)))
                            (list (#{expand 4450}#
                                    #{val 11209}#
                                    #{r 11178}#
                                    '(())
                                    #{mod 11181}#))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          #{e 11182}#)))
                    #{tmp 11184}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{e 11182}#)))))))
      (set! macroexpand
        (lambda*
          (#{x 13915}#
            #:optional
            (#{m 13916}# 'e)
            (#{esew 13917}# '(eval)))
          (#{expand-top-sequence 4446}#
            (list #{x 13915}#)
            '()
            '((top))
            #f
            #{m 13916}#
            #{esew 13917}#
            (cons 'hygiene (module-name (current-module))))))
      (set! identifier?
        (lambda (#{x 13920}#)
          (if (if (vector? #{x 13920}#)
                (if (= (vector-length #{x 13920}#) 4)
                  (eq? (vector-ref #{x 13920}# 0) 'syntax-object)
                  #f)
                #f)
            (symbol? (vector-ref #{x 13920}# 1))
            #f)))
      (set! datum->syntax
        (lambda (#{id 13945}# #{datum 13946}#)
          (let ((#{wrap 13951}# (vector-ref #{id 13945}# 2))
                (#{module 13952}# (vector-ref #{id 13945}# 3)))
            (vector
              'syntax-object
              #{datum 13946}#
              #{wrap 13951}#
              #{module 13952}#))))
      (set! syntax->datum
        (lambda (#{x 13959}#)
          (#{strip 4463}# #{x 13959}# '(()))))
      (set! syntax-source
        (lambda (#{x 13962}#)
          (#{source-annotation 4408}# #{x 13962}#)))
      (set! syntax-local-binding
        (lambda (#{id 14115}#)
          (begin
            (if (not (if (if (vector? #{id 14115}#)
                           (if (= (vector-length #{id 14115}#) 4)
                             (eq? (vector-ref #{id 14115}# 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref #{id 14115}# 1))
                       #f))
              (syntax-violation
                'syntax-local-value
                "invalid argument"
                #{id 14115}#))
            ((fluid-ref #{transformer-environment 4436}#)
             (lambda (#{e 14156}#
                      #{r 14157}#
                      #{w 14158}#
                      #{s 14159}#
                      #{rib 14160}#
                      #{mod 14161}#)
               (call-with-values
                 (lambda ()
                   (let ((#{id 14164}# (vector-ref #{id 14115}# 1))
                         (#{w 14165}#
                           (let ((#{w 14176}# (vector-ref #{id 14115}# 2)))
                             (let ((#{ms 14177}# (car #{w 14176}#))
                                   (#{s 14178}# (cdr #{w 14176}#)))
                               (if (if (pair? #{ms 14177}#)
                                     (eq? (car #{ms 14177}#) #f)
                                     #f)
                                 (cons (cdr #{ms 14177}#)
                                       (if #{rib 14160}#
                                         (cons #{rib 14160}# (cdr #{s 14178}#))
                                         (cdr #{s 14178}#)))
                                 (cons #{ms 14177}#
                                       (if #{rib 14160}#
                                         (cons #{rib 14160}# #{s 14178}#)
                                         #{s 14178}#))))))
                         (#{mod 14167}# (vector-ref #{id 14115}# 3)))
                     (let ((#{n 14170}#
                             (#{id-var-name 4434}# #{id 14164}# #{w 14165}#)))
                       (if (symbol? #{n 14170}#)
                         (let ((#{mod 14184}#
                                 (if (if (vector? #{id 14164}#)
                                       (if (= (vector-length #{id 14164}#) 4)
                                         (eq? (vector-ref #{id 14164}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (vector-ref #{id 14164}# 3)
                                   #{mod 14167}#)))
                           (let ((#{b 14185}#
                                   (let ((#{t 14186}#
                                           (#{get-global-definition-hook 4378}#
                                             #{n 14170}#
                                             #{mod 14184}#)))
                                     (if #{t 14186}# #{t 14186}# '(global)))))
                             (if (eq? (car #{b 14185}#) 'global)
                               (values 'global #{n 14170}# #{mod 14184}#)
                               (values
                                 (car #{b 14185}#)
                                 (cdr #{b 14185}#)
                                 #{mod 14184}#))))
                         (if (string? #{n 14170}#)
                           (let ((#{mod 14212}#
                                   (if (if (vector? #{id 14164}#)
                                         (if (= (vector-length #{id 14164}#) 4)
                                           (eq? (vector-ref #{id 14164}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (vector-ref #{id 14164}# 3)
                                     #{mod 14167}#)))
                             (let ((#{b 14213}#
                                     (let ((#{t 14214}#
                                             (assq-ref
                                               #{r 14157}#
                                               #{n 14170}#)))
                                       (if #{t 14214}#
                                         #{t 14214}#
                                         '(displaced-lexical)))))
                               (values
                                 (car #{b 14213}#)
                                 (cdr #{b 14213}#)
                                 #{mod 14212}#)))
                           (error "unexpected id-var-name"
                                  #{id 14164}#
                                  #{w 14165}#
                                  #{n 14170}#))))))
                 (lambda (#{type 14227}# #{value 14228}# #{mod 14229}#)
                   (if (eqv? #{type 14227}# 'lexical)
                     (values 'lexical #{value 14228}#)
                     (if (eqv? #{type 14227}# 'macro)
                       (values 'macro #{value 14228}#)
                       (if (eqv? #{type 14227}# 'syntax)
                         (values 'pattern-variable #{value 14228}#)
                         (if (eqv? #{type 14227}# 'displaced-lexical)
                           (values 'displaced-lexical #f)
                           (if (eqv? #{type 14227}# 'global)
                             (values
                               'global
                               (cons #{value 14228}# #{mod 14229}#))
                             (values 'other #f)))))))))))))
      (set! generate-temporaries
        (lambda (#{ls 14240}#)
          (begin
            (if (not (list? #{ls 14240}#))
              (syntax-violation
                'generate-temporaries
                "invalid argument"
                #{ls 14240}#))
            (let ((#{mod 14248}#
                    (cons 'hygiene (module-name (current-module)))))
              (map (lambda (#{x 14249}#)
                     (#{wrap 4443}# (gensym) '((top)) #{mod 14248}#))
                   #{ls 14240}#)))))
      (set! free-identifier=?
        (lambda (#{x 14253}# #{y 14254}#)
          (begin
            (if (not (if (if (vector? #{x 14253}#)
                           (if (= (vector-length #{x 14253}#) 4)
                             (eq? (vector-ref #{x 14253}# 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref #{x 14253}# 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                #{x 14253}#))
            (if (not (if (if (vector? #{y 14254}#)
                           (if (= (vector-length #{y 14254}#) 4)
                             (eq? (vector-ref #{y 14254}# 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref #{y 14254}# 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                #{y 14254}#))
            (if (eq? (if (if (vector? #{x 14253}#)
                           (if (= (vector-length #{x 14253}#) 4)
                             (eq? (vector-ref #{x 14253}# 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{x 14253}# 1)
                       #{x 14253}#)
                     (if (if (vector? #{y 14254}#)
                           (if (= (vector-length #{y 14254}#) 4)
                             (eq? (vector-ref #{y 14254}# 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{y 14254}# 1)
                       #{y 14254}#))
              (eq? (#{id-var-name 4434}# #{x 14253}# '(()))
                   (#{id-var-name 4434}# #{y 14254}# '(())))
              #f))))
      (set! bound-identifier=?
        (lambda (#{x 14404}# #{y 14405}#)
          (begin
            (if (not (if (if (vector? #{x 14404}#)
                           (if (= (vector-length #{x 14404}#) 4)
                             (eq? (vector-ref #{x 14404}# 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref #{x 14404}# 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                #{x 14404}#))
            (if (not (if (if (vector? #{y 14405}#)
                           (if (= (vector-length #{y 14405}#) 4)
                             (eq? (vector-ref #{y 14405}# 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref #{y 14405}# 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                #{y 14405}#))
            (if (if (if (vector? #{x 14404}#)
                      (if (= (vector-length #{x 14404}#) 4)
                        (eq? (vector-ref #{x 14404}# 0) 'syntax-object)
                        #f)
                      #f)
                  (if (vector? #{y 14405}#)
                    (if (= (vector-length #{y 14405}#) 4)
                      (eq? (vector-ref #{y 14405}# 0) 'syntax-object)
                      #f)
                    #f)
                  #f)
              (if (eq? (vector-ref #{x 14404}# 1)
                       (vector-ref #{y 14405}# 1))
                (#{same-marks? 4433}#
                  (car (vector-ref #{x 14404}# 2))
                  (car (vector-ref #{y 14405}# 2)))
                #f)
              (eq? #{x 14404}# #{y 14405}#)))))
      (set! syntax-violation
        (lambda*
          (#{who 14538}#
            #{message 14539}#
            #{form 14540}#
            #:optional
            (#{subform 14541}# #f))
          (begin
            (if (not (if (not #{who 14538}#)
                       (not #{who 14538}#)
                       (let ((#{t 14559}# (string? #{who 14538}#)))
                         (if #{t 14559}#
                           #{t 14559}#
                           (symbol? #{who 14538}#)))))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                #{who 14538}#))
            (if (not (string? #{message 14539}#))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                #{message 14539}#))
            (throw 'syntax-error
                   #{who 14538}#
                   #{message 14539}#
                   (#{source-annotation 4408}#
                     (if #{form 14540}#
                       #{form 14540}#
                       #{subform 14541}#))
                   (#{strip 4463}# #{form 14540}# '(()))
                   (if #{subform 14541}#
                     (#{strip 4463}# #{subform 14541}# '(()))
                     #f)))))
      (letrec*
        ((#{match-each 14762}#
           (lambda (#{e 15349}#
                    #{p 15350}#
                    #{w 15351}#
                    #{mod 15352}#)
             (if (pair? #{e 15349}#)
               (let ((#{first 15353}#
                       (#{match 14768}#
                         (car #{e 15349}#)
                         #{p 15350}#
                         #{w 15351}#
                         '()
                         #{mod 15352}#)))
                 (if #{first 15353}#
                   (let ((#{rest 15356}#
                           (#{match-each 14762}#
                             (cdr #{e 15349}#)
                             #{p 15350}#
                             #{w 15351}#
                             #{mod 15352}#)))
                     (if #{rest 15356}#
                       (cons #{first 15353}# #{rest 15356}#)
                       #f))
                   #f))
               (if (null? #{e 15349}#)
                 '()
                 (if (if (vector? #{e 15349}#)
                       (if (= (vector-length #{e 15349}#) 4)
                         (eq? (vector-ref #{e 15349}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match-each 14762}#
                     (vector-ref #{e 15349}# 1)
                     #{p 15350}#
                     (#{join-wraps 4431}#
                       #{w 15351}#
                       (vector-ref #{e 15349}# 2))
                     (vector-ref #{e 15349}# 3))
                   #f)))))
         (#{match-each-any 14764}#
           (lambda (#{e 15384}# #{w 15385}# #{mod 15386}#)
             (if (pair? #{e 15384}#)
               (let ((#{l 15387}#
                       (#{match-each-any 14764}#
                         (cdr #{e 15384}#)
                         #{w 15385}#
                         #{mod 15386}#)))
                 (if #{l 15387}#
                   (cons (#{wrap 4443}#
                           (car #{e 15384}#)
                           #{w 15385}#
                           #{mod 15386}#)
                         #{l 15387}#)
                   #f))
               (if (null? #{e 15384}#)
                 '()
                 (if (if (vector? #{e 15384}#)
                       (if (= (vector-length #{e 15384}#) 4)
                         (eq? (vector-ref #{e 15384}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match-each-any 14764}#
                     (vector-ref #{e 15384}# 1)
                     (#{join-wraps 4431}#
                       #{w 15385}#
                       (vector-ref #{e 15384}# 2))
                     #{mod 15386}#)
                   #f)))))
         (#{match-empty 14765}#
           (lambda (#{p 15411}# #{r 15412}#)
             (if (null? #{p 15411}#)
               #{r 15412}#
               (if (eq? #{p 15411}# '_)
                 #{r 15412}#
                 (if (eq? #{p 15411}# 'any)
                   (cons '() #{r 15412}#)
                   (if (pair? #{p 15411}#)
                     (#{match-empty 14765}#
                       (car #{p 15411}#)
                       (#{match-empty 14765}#
                         (cdr #{p 15411}#)
                         #{r 15412}#))
                     (if (eq? #{p 15411}# 'each-any)
                       (cons '() #{r 15412}#)
                       (let ((#{atom-key 15413}# (vector-ref #{p 15411}# 0)))
                         (if (eqv? #{atom-key 15413}# 'each)
                           (#{match-empty 14765}#
                             (vector-ref #{p 15411}# 1)
                             #{r 15412}#)
                           (if (eqv? #{atom-key 15413}# 'each+)
                             (#{match-empty 14765}#
                               (vector-ref #{p 15411}# 1)
                               (#{match-empty 14765}#
                                 (reverse (vector-ref #{p 15411}# 2))
                                 (#{match-empty 14765}#
                                   (vector-ref #{p 15411}# 3)
                                   #{r 15412}#)))
                             (if (if (eqv? #{atom-key 15413}# 'free-id)
                                   #t
                                   (eqv? #{atom-key 15413}# 'atom))
                               #{r 15412}#
                               (if (eqv? #{atom-key 15413}# 'vector)
                                 (#{match-empty 14765}#
                                   (vector-ref #{p 15411}# 1)
                                   #{r 15412}#)))))))))))))
         (#{combine 14766}#
           (lambda (#{r* 15432}# #{r 15433}#)
             (if (null? (car #{r* 15432}#))
               #{r 15433}#
               (cons (map car #{r* 15432}#)
                     (#{combine 14766}#
                       (map cdr #{r* 15432}#)
                       #{r 15433}#)))))
         (#{match* 14767}#
           (lambda (#{e 14797}#
                    #{p 14798}#
                    #{w 14799}#
                    #{r 14800}#
                    #{mod 14801}#)
             (if (null? #{p 14798}#)
               (if (null? #{e 14797}#) #{r 14800}# #f)
               (if (pair? #{p 14798}#)
                 (if (pair? #{e 14797}#)
                   (#{match 14768}#
                     (car #{e 14797}#)
                     (car #{p 14798}#)
                     #{w 14799}#
                     (#{match 14768}#
                       (cdr #{e 14797}#)
                       (cdr #{p 14798}#)
                       #{w 14799}#
                       #{r 14800}#
                       #{mod 14801}#)
                     #{mod 14801}#)
                   #f)
                 (if (eq? #{p 14798}# 'each-any)
                   (let ((#{l 14806}#
                           (#{match-each-any 14764}#
                             #{e 14797}#
                             #{w 14799}#
                             #{mod 14801}#)))
                     (if #{l 14806}#
                       (cons #{l 14806}# #{r 14800}#)
                       #f))
                   (let ((#{atom-key 14811}# (vector-ref #{p 14798}# 0)))
                     (if (eqv? #{atom-key 14811}# 'each)
                       (if (null? #{e 14797}#)
                         (#{match-empty 14765}#
                           (vector-ref #{p 14798}# 1)
                           #{r 14800}#)
                         (let ((#{l 14818}#
                                 (#{match-each 14762}#
                                   #{e 14797}#
                                   (vector-ref #{p 14798}# 1)
                                   #{w 14799}#
                                   #{mod 14801}#)))
                           (if #{l 14818}#
                             (letrec*
                               ((#{collect 14821}#
                                  (lambda (#{l 14872}#)
                                    (if (null? (car #{l 14872}#))
                                      #{r 14800}#
                                      (cons (map car #{l 14872}#)
                                            (#{collect 14821}#
                                              (map cdr #{l 14872}#)))))))
                               (#{collect 14821}# #{l 14818}#))
                             #f)))
                       (if (eqv? #{atom-key 14811}# 'each+)
                         (call-with-values
                           (lambda ()
                             (let ((#{x-pat 14881}# (vector-ref #{p 14798}# 1))
                                   (#{y-pat 14882}# (vector-ref #{p 14798}# 2))
                                   (#{z-pat 14883}#
                                     (vector-ref #{p 14798}# 3)))
                               (letrec*
                                 ((#{f 14887}#
                                    (lambda (#{e 14889}# #{w 14890}#)
                                      (if (pair? #{e 14889}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{f 14887}#
                                              (cdr #{e 14889}#)
                                              #{w 14890}#))
                                          (lambda (#{xr* 14891}#
                                                   #{y-pat 14892}#
                                                   #{r 14893}#)
                                            (if #{r 14893}#
                                              (if (null? #{y-pat 14892}#)
                                                (let ((#{xr 14894}#
                                                        (#{match 14768}#
                                                          (car #{e 14889}#)
                                                          #{x-pat 14881}#
                                                          #{w 14890}#
                                                          '()
                                                          #{mod 14801}#)))
                                                  (if #{xr 14894}#
                                                    (values
                                                      (cons #{xr 14894}#
                                                            #{xr* 14891}#)
                                                      #{y-pat 14892}#
                                                      #{r 14893}#)
                                                    (values #f #f #f)))
                                                (values
                                                  '()
                                                  (cdr #{y-pat 14892}#)
                                                  (#{match 14768}#
                                                    (car #{e 14889}#)
                                                    (car #{y-pat 14892}#)
                                                    #{w 14890}#
                                                    #{r 14893}#
                                                    #{mod 14801}#)))
                                              (values #f #f #f))))
                                        (if (if (vector? #{e 14889}#)
                                              (if (= (vector-length
                                                       #{e 14889}#)
                                                     4)
                                                (eq? (vector-ref #{e 14889}# 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (#{f 14887}#
                                            (vector-ref #{e 14889}# 1)
                                            (#{join-wraps 4431}#
                                              #{w 14890}#
                                              #{e 14889}#))
                                          (values
                                            '()
                                            #{y-pat 14882}#
                                            (#{match 14768}#
                                              #{e 14889}#
                                              #{z-pat 14883}#
                                              #{w 14890}#
                                              #{r 14800}#
                                              #{mod 14801}#)))))))
                                 (#{f 14887}# #{e 14797}# #{w 14799}#))))
                           (lambda (#{xr* 14920}# #{y-pat 14921}# #{r 14922}#)
                             (if #{r 14922}#
                               (if (null? #{y-pat 14921}#)
                                 (if (null? #{xr* 14920}#)
                                   (#{match-empty 14765}#
                                     (vector-ref #{p 14798}# 1)
                                     #{r 14922}#)
                                   (#{combine 14766}#
                                     #{xr* 14920}#
                                     #{r 14922}#))
                                 #f)
                               #f)))
                         (if (eqv? #{atom-key 14811}# 'free-id)
                           (if (if (symbol? #{e 14797}#)
                                 #t
                                 (if (if (vector? #{e 14797}#)
                                       (if (= (vector-length #{e 14797}#) 4)
                                         (eq? (vector-ref #{e 14797}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (symbol? (vector-ref #{e 14797}# 1))
                                   #f))
                             (if (let ((#{i 15253}#
                                         (#{wrap 4443}#
                                           #{e 14797}#
                                           #{w 14799}#
                                           #{mod 14801}#))
                                       (#{j 15254}#
                                         (vector-ref #{p 14798}# 1)))
                                   (if (eq? (if (if (vector? #{i 15253}#)
                                                  (if (= (vector-length
                                                           #{i 15253}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{i 15253}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref #{i 15253}# 1)
                                              #{i 15253}#)
                                            (if (if (vector? #{j 15254}#)
                                                  (if (= (vector-length
                                                           #{j 15254}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{j 15254}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref #{j 15254}# 1)
                                              #{j 15254}#))
                                     (eq? (#{id-var-name 4434}#
                                            #{i 15253}#
                                            '(()))
                                          (#{id-var-name 4434}#
                                            #{j 15254}#
                                            '(())))
                                     #f))
                               #{r 14800}#
                               #f)
                             #f)
                           (if (eqv? #{atom-key 14811}# 'atom)
                             (if (equal?
                                   (vector-ref #{p 14798}# 1)
                                   (#{strip 4463}# #{e 14797}# #{w 14799}#))
                               #{r 14800}#
                               #f)
                             (if (eqv? #{atom-key 14811}# 'vector)
                               (if (vector? #{e 14797}#)
                                 (#{match 14768}#
                                   (vector->list #{e 14797}#)
                                   (vector-ref #{p 14798}# 1)
                                   #{w 14799}#
                                   #{r 14800}#
                                   #{mod 14801}#)
                                 #f))))))))))))
         (#{match 14768}#
           (lambda (#{e 15314}#
                    #{p 15315}#
                    #{w 15316}#
                    #{r 15317}#
                    #{mod 15318}#)
             (if (not #{r 15317}#)
               #f
               (if (eq? #{p 15315}# '_)
                 #{r 15317}#
                 (if (eq? #{p 15315}# 'any)
                   (cons (#{wrap 4443}#
                           #{e 15314}#
                           #{w 15316}#
                           #{mod 15318}#)
                         #{r 15317}#)
                   (if (if (vector? #{e 15314}#)
                         (if (= (vector-length #{e 15314}#) 4)
                           (eq? (vector-ref #{e 15314}# 0) 'syntax-object)
                           #f)
                         #f)
                     (#{match* 14767}#
                       (vector-ref #{e 15314}# 1)
                       #{p 15315}#
                       (#{join-wraps 4431}#
                         #{w 15316}#
                         (vector-ref #{e 15314}# 2))
                       #{r 15317}#
                       (vector-ref #{e 15314}# 3))
                     (#{match* 14767}#
                       #{e 15314}#
                       #{p 15315}#
                       #{w 15316}#
                       #{r 15317}#
                       #{mod 15318}#))))))))
        (set! $sc-dispatch
          (lambda (#{e 14769}# #{p 14770}#)
            (if (eq? #{p 14770}# 'any)
              (list #{e 14769}#)
              (if (eq? #{p 14770}# '_)
                '()
                (if (if (vector? #{e 14769}#)
                      (if (= (vector-length #{e 14769}#) 4)
                        (eq? (vector-ref #{e 14769}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{match* 14767}#
                    (vector-ref #{e 14769}# 1)
                    #{p 14770}#
                    (vector-ref #{e 14769}# 2)
                    '()
                    (vector-ref #{e 14769}# 3))
                  (#{match* 14767}#
                    #{e 14769}#
                    #{p 14770}#
                    '(())
                    '()
                    #f))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 26694}#)
      (let ((#{tmp 26696}#
              ($sc-dispatch #{x 26694}# '(_ () any . each-any))))
        (if #{tmp 26696}#
          (@apply
            (lambda (#{e1 26700}# #{e2 26701}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i26667" "i26668"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i26664")))
                       (hygiene guile))
                    (cons '() (cons #{e1 26700}# #{e2 26701}#))))
            #{tmp 26696}#)
          (let ((#{tmp 26702}#
                  ($sc-dispatch
                    #{x 26694}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 26702}#
              (@apply
                (lambda (#{out 26706}#
                         #{in 26707}#
                         #{e1 26708}#
                         #{e2 26709}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i26673" "i26674" "i26675" "i26676"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i26664")))
                           (hygiene guile))
                        #{in 26707}#
                        '()
                        (list #{out 26706}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i26673"
                                            "i26674"
                                            "i26675"
                                            "i26676"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i26664")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 26708}# #{e2 26709}#))))))
                #{tmp 26702}#)
              (let ((#{tmp 26710}#
                      ($sc-dispatch
                        #{x 26694}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 26710}#
                  (@apply
                    (lambda (#{out 26714}#
                             #{in 26715}#
                             #{e1 26716}#
                             #{e2 26717}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i26683" "i26684" "i26685" "i26686"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i26664")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i26683" "i26684" "i26685" "i26686"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i26664")))
                                     (hygiene guile))
                                  #{in 26715}#)
                            '()
                            (list #{out 26714}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i26683"
                                                "i26684"
                                                "i26685"
                                                "i26686"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i26664")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 26716}#
                                                    #{e2 26717}#))))))
                    #{tmp 26710}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 26694}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 26771}#)
      (let ((#{tmp 26773}#
              ($sc-dispatch
                #{x 26771}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 26773}#
          (@apply
            (lambda (#{k 26777}#
                     #{keyword 26778}#
                     #{pattern 26779}#
                     #{template 26780}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i26734" "i26735" "i26736" "i26737"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i26731")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i26734" "i26735" "i26736" "i26737"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i26731")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i26734" "i26735" "i26736" "i26737"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i26731")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i26734" "i26735" "i26736" "i26737"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i26731")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i26734" "i26735" "i26736" "i26737"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i26731")))
                               (hygiene guile))
                            #{pattern 26779}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i26734" "i26735" "i26736" "i26737"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i26731")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i26734" "i26735" "i26736" "i26737"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i26731")))
                                   (hygiene guile))
                                (cons #{k 26777}#
                                      (map (lambda (#{tmp 26745 26781}#
                                                    #{tmp 26744 26782}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i26734"
                                                                 "i26735"
                                                                 "i26736"
                                                                 "i26737"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i26731")))
                                                            (hygiene guile))
                                                         #{tmp 26744 26782}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i26734"
                                                                 "i26735"
                                                                 "i26736"
                                                                 "i26737"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i26731")))
                                                            (hygiene guile))
                                                         #{tmp 26745 26781}#)))
                                           #{template 26780}#
                                           #{pattern 26779}#))))))
            #{tmp 26773}#)
          (let ((#{tmp 26783}#
                  ($sc-dispatch
                    #{x 26771}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 26783}#
                  (@apply
                    (lambda (#{k 26787}#
                             #{docstring 26788}#
                             #{keyword 26789}#
                             #{pattern 26790}#
                             #{template 26791}#)
                      (string? (syntax->datum #{docstring 26788}#)))
                    #{tmp 26783}#)
                  #f)
              (@apply
                (lambda (#{k 26792}#
                         #{docstring 26793}#
                         #{keyword 26794}#
                         #{pattern 26795}#
                         #{template 26796}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i26757" "i26758" "i26759" "i26760" "i26761"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i26731")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i26757" "i26758" "i26759" "i26760" "i26761"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i26731")))
                            (hygiene guile)))
                        #{docstring 26793}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i26757"
                                   "i26758"
                                   "i26759"
                                   "i26760"
                                   "i26761"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i26731")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i26757"
                                   "i26758"
                                   "i26759"
                                   "i26760"
                                   "i26761"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i26731")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i26757"
                                        "i26758"
                                        "i26759"
                                        "i26760"
                                        "i26761"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i26731")))
                                   (hygiene guile))
                                #{pattern 26795}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i26757"
                                      "i26758"
                                      "i26759"
                                      "i26760"
                                      "i26761"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i26731")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i26757"
                                            "i26758"
                                            "i26759"
                                            "i26760"
                                            "i26761"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i26731")))
                                       (hygiene guile))
                                    (cons #{k 26792}#
                                          (map (lambda (#{tmp 26770 26797}#
                                                        #{tmp 26769 26798}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i26757"
                                                                     "i26758"
                                                                     "i26759"
                                                                     "i26760"
                                                                     "i26761"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i26731")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 26769 26798}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i26757"
                                                                     "i26758"
                                                                     "i26759"
                                                                     "i26760"
                                                                     "i26761"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i26731")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 26770 26797}#)))
                                               #{template 26796}#
                                               #{pattern 26795}#))))))
                #{tmp 26783}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 26771}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 26835}#)
      (let ((#{tmp 26837}#
              ($sc-dispatch #{x 26835}# '(_ (any . any) any))))
        (if #{tmp 26837}#
          (@apply
            (lambda (#{name 26841}#
                     #{pattern 26842}#
                     #{template 26843}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i26812" "i26813" "i26814"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i26809")))
                       (hygiene guile))
                    #{name 26841}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i26812" "i26813" "i26814"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i26809")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i26812" "i26813" "i26814"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i26809")))
                                         (hygiene guile))
                                      #{pattern 26842}#)
                                #{template 26843}#))))
            #{tmp 26837}#)
          (let ((#{tmp 26844}#
                  ($sc-dispatch
                    #{x 26835}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 26844}#
                  (@apply
                    (lambda (#{name 26848}#
                             #{pattern 26849}#
                             #{docstring 26850}#
                             #{template 26851}#)
                      (string? (syntax->datum #{docstring 26850}#)))
                    #{tmp 26844}#)
                  #f)
              (@apply
                (lambda (#{name 26852}#
                         #{pattern 26853}#
                         #{docstring 26854}#
                         #{template 26855}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i26827" "i26828" "i26829" "i26830"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i26809")))
                           (hygiene guile))
                        #{name 26852}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i26827" "i26828" "i26829" "i26830"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i26809")))
                                 (hygiene guile))
                              '()
                              #{docstring 26854}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i26827"
                                                  "i26828"
                                                  "i26829"
                                                  "i26830"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i26809")))
                                             (hygiene guile))
                                          #{pattern 26853}#)
                                    #{template 26855}#))))
                #{tmp 26844}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 26835}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 26904}#)
      (let ((#{tmp 26906}#
              ($sc-dispatch
                #{x 26904}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 26906}#
              (@apply
                (lambda (#{let* 26910}#
                         #{x 26911}#
                         #{v 26912}#
                         #{e1 26913}#
                         #{e2 26914}#)
                  (and-map identifier? #{x 26911}#))
                #{tmp 26906}#)
              #f)
          (@apply
            (lambda (#{let* 26915}#
                     #{x 26916}#
                     #{v 26917}#
                     #{e1 26918}#
                     #{e2 26919}#)
              (letrec*
                ((#{f 26920}#
                   (lambda (#{bindings 26923}#)
                     (if (null? #{bindings 26923}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i26890" "i26891"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i26880"
                                     "i26881"
                                     "i26882"
                                     "i26883"
                                     "i26884"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i26866")))
                                (hygiene guile))
                             (cons '() (cons #{e1 26918}# #{e2 26919}#)))
                       (let ((#{tmp 26924}#
                               (list (#{f 26920}# (cdr #{bindings 26923}#))
                                     (car #{bindings 26923}#))))
                         (let ((#{tmp 26925}#
                                 ($sc-dispatch #{tmp 26924}# '(any any))))
                           (if #{tmp 26925}#
                             (@apply
                               (lambda (#{body 26927}# #{binding 26928}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i26900" "i26901"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i26890" "i26891"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i26880"
                                               "i26881"
                                               "i26882"
                                               "i26883"
                                               "i26884"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("i26866")))
                                          (hygiene guile))
                                       (list #{binding 26928}#)
                                       #{body 26927}#))
                               #{tmp 26925}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 26924}#))))))))
                (#{f 26920}# (map list #{x 26916}# #{v 26917}#))))
            #{tmp 26906}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 26904}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 26986}#)
      (let ((#{tmp 26988}#
              ($sc-dispatch
                #{orig-x 26986}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 26988}#
          (@apply
            (lambda (#{var 26992}#
                     #{init 26993}#
                     #{step 26994}#
                     #{e0 26995}#
                     #{e1 26996}#
                     #{c 26997}#)
              (let ((#{tmp 26998}#
                      (map (lambda (#{v 27001}# #{s 27002}#)
                             (let ((#{tmp 27004}#
                                     ($sc-dispatch #{s 27002}# '())))
                               (if #{tmp 27004}#
                                 (@apply (lambda () #{v 27001}#) #{tmp 27004}#)
                                 (let ((#{tmp 27007}#
                                         ($sc-dispatch #{s 27002}# '(any))))
                                   (if #{tmp 27007}#
                                     (@apply
                                       (lambda (#{e 27010}#) #{e 27010}#)
                                       #{tmp 27007}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 26986}#
                                       #{s 27002}#))))))
                           #{var 26992}#
                           #{step 26994}#)))
                (let ((#{tmp 26999}#
                        ($sc-dispatch #{tmp 26998}# 'each-any)))
                  (if #{tmp 26999}#
                    (@apply
                      (lambda (#{step 27016}#)
                        (let ((#{tmp 27018}# ($sc-dispatch #{e1 26996}# '())))
                          (if #{tmp 27018}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i26954"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i26939"
                                              "i26940"
                                              "i26941"
                                              "i26942"
                                              "i26943"
                                              "i26944"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i26936")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i26954"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i26939"
                                              "i26940"
                                              "i26941"
                                              "i26942"
                                              "i26943"
                                              "i26944"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i26936")))
                                         (hygiene guile))
                                      (map list #{var 26992}# #{init 26993}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i26954"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i26939"
                                                    "i26940"
                                                    "i26941"
                                                    "i26942"
                                                    "i26943"
                                                    "i26944"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i26936")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i26954"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i26939"
                                                          "i26940"
                                                          "i26941"
                                                          "i26942"
                                                          "i26943"
                                                          "i26944"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i26936")))
                                                     (hygiene guile))
                                                  #{e0 26995}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i26954"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i26939"
                                                          "i26940"
                                                          "i26941"
                                                          "i26942"
                                                          "i26943"
                                                          "i26944"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i26936")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 26997}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i26954"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i26939"
                                                                        "i26940"
                                                                        "i26941"
                                                                        "i26942"
                                                                        "i26943"
                                                                        "i26944"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i26936")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 27016}#)))))))
                              #{tmp 27018}#)
                            (let ((#{tmp 27022}#
                                    ($sc-dispatch
                                      #{e1 26996}#
                                      '(any . each-any))))
                              (if #{tmp 27022}#
                                (@apply
                                  (lambda (#{e1 27026}# #{e2 27027}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i26963" "i26964"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i26954"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i26939"
                                                  "i26940"
                                                  "i26941"
                                                  "i26942"
                                                  "i26943"
                                                  "i26944"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i26936")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i26963" "i26964"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i26954"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i26939"
                                                  "i26940"
                                                  "i26941"
                                                  "i26942"
                                                  "i26943"
                                                  "i26944"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i26936")))
                                             (hygiene guile))
                                          (map list
                                               #{var 26992}#
                                               #{init 26993}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i26963" "i26964"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i26954"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i26939"
                                                        "i26940"
                                                        "i26941"
                                                        "i26942"
                                                        "i26943"
                                                        "i26944"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i26936")))
                                                   (hygiene guile))
                                                #{e0 26995}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i26963"
                                                              "i26964"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i26954"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i26939"
                                                              "i26940"
                                                              "i26941"
                                                              "i26942"
                                                              "i26943"
                                                              "i26944"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i26936")))
                                                         (hygiene guile))
                                                      (cons #{e1 27026}#
                                                            #{e2 27027}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i26963"
                                                              "i26964"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i26954"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i26939"
                                                              "i26940"
                                                              "i26941"
                                                              "i26942"
                                                              "i26943"
                                                              "i26944"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i26936")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 26997}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i26963"
                                                                            "i26964"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i26954"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i26939"
                                                                            "i26940"
                                                                            "i26941"
                                                                            "i26942"
                                                                            "i26943"
                                                                            "i26944"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i26936")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 27016}#)))))))
                                  #{tmp 27022}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 26996}#))))))
                      #{tmp 26999}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 26998}#)))))
            #{tmp 26988}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 26986}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 27313}#
         (lambda (#{p 27337}# #{lev 27338}#)
           (let ((#{tmp 27340}#
                   ($sc-dispatch
                     #{p 27337}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i27059" "i27060"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i27055"
                               "i27053"
                               "i27051"
                               "i27049"
                               "i27047"
                               "i27045"
                               "i27043")))
                           (hygiene guile)))
                       any))))
             (if #{tmp 27340}#
               (@apply
                 (lambda (#{p 27344}#)
                   (if (= #{lev 27338}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i27063"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i27059" "i27060"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i27055"
                                  "i27053"
                                  "i27051"
                                  "i27049"
                                  "i27047"
                                  "i27045"
                                  "i27043")))
                              (hygiene guile))
                           #{p 27344}#)
                     (#{quasicons 27315}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i27063"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i27059" "i27060"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i27055"
                               "i27053"
                               "i27051"
                               "i27049"
                               "i27047"
                               "i27045"
                               "i27043")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i27063"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i27059" "i27060"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i27055"
                               "i27053"
                               "i27051"
                               "i27049"
                               "i27047"
                               "i27045"
                               "i27043")))
                           (hygiene guile)))
                       (#{quasi 27313}#
                         (list #{p 27344}#)
                         (#{1-}# #{lev 27338}#)))))
                 #{tmp 27340}#)
               (let ((#{tmp 27347}#
                       ($sc-dispatch
                         #{p 27337}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i27059" "i27060"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i27055"
                                   "i27053"
                                   "i27051"
                                   "i27049"
                                   "i27047"
                                   "i27045"
                                   "i27043")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 27347}#
                   (@apply
                     (lambda (#{p 27351}#)
                       (#{quasicons 27315}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i27066"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i27059" "i27060"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i27055"
                                 "i27053"
                                 "i27051"
                                 "i27049"
                                 "i27047"
                                 "i27045"
                                 "i27043")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i27066"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i27059" "i27060"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i27055"
                                 "i27053"
                                 "i27051"
                                 "i27049"
                                 "i27047"
                                 "i27045"
                                 "i27043")))
                             (hygiene guile)))
                         (#{quasi 27313}#
                           (list #{p 27351}#)
                           (#{1+}# #{lev 27338}#))))
                     #{tmp 27347}#)
                   (let ((#{tmp 27354}#
                           ($sc-dispatch #{p 27337}# '(any . any))))
                     (if #{tmp 27354}#
                       (@apply
                         (lambda (#{p 27358}# #{q 27359}#)
                           (let ((#{tmp 27361}#
                                   ($sc-dispatch
                                     #{p 27358}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i27069" "i27070"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i27059" "i27060"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i27055"
                                               "i27053"
                                               "i27051"
                                               "i27049"
                                               "i27047"
                                               "i27045"
                                               "i27043")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 27361}#
                               (@apply
                                 (lambda (#{p 27365}#)
                                   (if (= #{lev 27338}# 0)
                                     (#{quasilist* 27317}#
                                       (map (lambda (#{tmp 27077 27401}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i27075"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i27069" "i27070"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i27059" "i27060"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i27055"
                                                           "i27053"
                                                           "i27051"
                                                           "i27049"
                                                           "i27047"
                                                           "i27045"
                                                           "i27043")))
                                                       (hygiene guile))
                                                    #{tmp 27077 27401}#))
                                            #{p 27365}#)
                                       (#{quasi 27313}#
                                         #{q 27359}#
                                         #{lev 27338}#))
                                     (#{quasicons 27315}#
                                       (#{quasicons 27315}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i27075"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i27069" "i27070"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i27059" "i27060"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i27055"
                                                 "i27053"
                                                 "i27051"
                                                 "i27049"
                                                 "i27047"
                                                 "i27045"
                                                 "i27043")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i27075"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i27069" "i27070"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i27059" "i27060"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i27055"
                                                 "i27053"
                                                 "i27051"
                                                 "i27049"
                                                 "i27047"
                                                 "i27045"
                                                 "i27043")))
                                             (hygiene guile)))
                                         (#{quasi 27313}#
                                           #{p 27365}#
                                           (#{1-}# #{lev 27338}#)))
                                       (#{quasi 27313}#
                                         #{q 27359}#
                                         #{lev 27338}#))))
                                 #{tmp 27361}#)
                               (let ((#{tmp 27406}#
                                       ($sc-dispatch
                                         #{p 27358}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i27069" "i27070"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i27059" "i27060"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i27055"
                                                   "i27053"
                                                   "i27051"
                                                   "i27049"
                                                   "i27047"
                                                   "i27045"
                                                   "i27043")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 27406}#
                                   (@apply
                                     (lambda (#{p 27410}#)
                                       (if (= #{lev 27338}# 0)
                                         (#{quasiappend 27316}#
                                           (map (lambda (#{tmp 27082 27413}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i27080"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i27069"
                                                                "i27070"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i27059"
                                                                "i27060"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i27055"
                                                               "i27053"
                                                               "i27051"
                                                               "i27049"
                                                               "i27047"
                                                               "i27045"
                                                               "i27043")))
                                                           (hygiene guile))
                                                        #{tmp 27082 27413}#))
                                                #{p 27410}#)
                                           (#{quasi 27313}#
                                             #{q 27359}#
                                             #{lev 27338}#))
                                         (#{quasicons 27315}#
                                           (#{quasicons 27315}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i27080"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i27069" "i27070"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i27059" "i27060"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i27055"
                                                     "i27053"
                                                     "i27051"
                                                     "i27049"
                                                     "i27047"
                                                     "i27045"
                                                     "i27043")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i27080"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i27069" "i27070"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i27059" "i27060"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i27055"
                                                     "i27053"
                                                     "i27051"
                                                     "i27049"
                                                     "i27047"
                                                     "i27045"
                                                     "i27043")))
                                                 (hygiene guile)))
                                             (#{quasi 27313}#
                                               #{p 27410}#
                                               (#{1-}# #{lev 27338}#)))
                                           (#{quasi 27313}#
                                             #{q 27359}#
                                             #{lev 27338}#))))
                                     #{tmp 27406}#)
                                   (#{quasicons 27315}#
                                     (#{quasi 27313}#
                                       #{p 27358}#
                                       #{lev 27338}#)
                                     (#{quasi 27313}#
                                       #{q 27359}#
                                       #{lev 27338}#)))))))
                         #{tmp 27354}#)
                       (let ((#{tmp 27427}#
                               ($sc-dispatch #{p 27337}# '#(vector each-any))))
                         (if #{tmp 27427}#
                           (@apply
                             (lambda (#{x 27431}#)
                               (let ((#{x 27434}#
                                       (#{vquasi 27314}#
                                         #{x 27431}#
                                         #{lev 27338}#)))
                                 (let ((#{tmp 27436}#
                                         ($sc-dispatch
                                           #{x 27434}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 27436}#
                                     (@apply
                                       (lambda (#{x 27440}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i27187"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i27184"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i27055"
                                                      "i27053"
                                                      "i27051"
                                                      "i27049"
                                                      "i27047"
                                                      "i27045"
                                                      "i27043")))
                                                  (hygiene guile))
                                               (list->vector #{x 27440}#)))
                                       #{tmp 27436}#)
                                     (letrec*
                                       ((#{f 27442}#
                                          (lambda (#{y 27454}# #{k 27455}#)
                                            (let ((#{tmp 27457}#
                                                    ($sc-dispatch
                                                      #{y 27454}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 27457}#
                                                (@apply
                                                  (lambda (#{y 27460}#)
                                                    (#{k 27455}#
                                                      (map (lambda (#{tmp 27212 27461}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i27210"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i27192"
                                                                           "i27193"
                                                                           "i27194"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i27190"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i27184"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i27055"
                                                                          "i27053"
                                                                          "i27051"
                                                                          "i27049"
                                                                          "i27047"
                                                                          "i27045"
                                                                          "i27043")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 27212 27461}#))
                                                           #{y 27460}#)))
                                                  #{tmp 27457}#)
                                                (let ((#{tmp 27462}#
                                                        ($sc-dispatch
                                                          #{y 27454}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 27462}#
                                                    (@apply
                                                      (lambda (#{y 27465}#)
                                                        (#{k 27455}#
                                                          #{y 27465}#))
                                                      #{tmp 27462}#)
                                                    (let ((#{tmp 27466}#
                                                            ($sc-dispatch
                                                              #{y 27454}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 27466}#
                                                        (@apply
                                                          (lambda (#{y 27469}#
                                                                   #{z 27470}#)
                                                            (#{f 27442}#
                                                              #{z 27470}#
                                                              (lambda (#{ls 27471}#)
                                                                (#{k 27455}#
                                                                  (append
                                                                    #{y 27469}#
                                                                    #{ls 27471}#)))))
                                                          #{tmp 27466}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g27227}#)
                                                                    #((m27228
                                                                        top))
                                                                    #("i27231"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i27225"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i27192"
                                                                      "i27193"
                                                                      "i27194"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i27190"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i27184"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i27055"
                                                                     "i27053"
                                                                     "i27051"
                                                                     "i27049"
                                                                     "i27047"
                                                                     "i27045"
                                                                     "i27043")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 27434}#))))))))))
                                       (#{f 27442}#
                                         #{x 27434}#
                                         (lambda (#{ls 27444}#)
                                           (let ((#{tmp 27446}#
                                                   ($sc-dispatch
                                                     #{ls 27444}#
                                                     'each-any)))
                                             (if #{tmp 27446}#
                                               (@apply
                                                 (lambda (#{ g27200 27449}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g27200}#)
                                                               #((m27201 top))
                                                               #("i27205"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i27199"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i27190"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i27184"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i27055"
                                                                "i27053"
                                                                "i27051"
                                                                "i27049"
                                                                "i27047"
                                                                "i27045"
                                                                "i27043")))
                                                            (hygiene guile))
                                                         #{ g27200 27449}#))
                                                 #{tmp 27446}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 27444}#))))))))))
                             #{tmp 27427}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i27090"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i27059" "i27060"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i27055"
                                        "i27053"
                                        "i27051"
                                        "i27049"
                                        "i27047"
                                        "i27045"
                                        "i27043")))
                                    (hygiene guile))
                                 #{p 27337}#)))))))))))
       (#{vquasi 27314}#
         (lambda (#{p 27499}# #{lev 27500}#)
           (let ((#{tmp 27502}#
                   ($sc-dispatch #{p 27499}# '(any . any))))
             (if #{tmp 27502}#
               (@apply
                 (lambda (#{p 27506}# #{q 27507}#)
                   (let ((#{tmp 27509}#
                           ($sc-dispatch
                             #{p 27506}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i27098" "i27099"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i27094" "i27095"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i27055"
                                       "i27053"
                                       "i27051"
                                       "i27049"
                                       "i27047"
                                       "i27045"
                                       "i27043")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 27509}#
                       (@apply
                         (lambda (#{p 27513}#)
                           (if (= #{lev 27500}# 0)
                             (#{quasilist* 27317}#
                               (map (lambda (#{tmp 27106 27549}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i27104"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i27098" "i27099"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i27094" "i27095"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i27055"
                                                   "i27053"
                                                   "i27051"
                                                   "i27049"
                                                   "i27047"
                                                   "i27045"
                                                   "i27043")))
                                               (hygiene guile))
                                            #{tmp 27106 27549}#))
                                    #{p 27513}#)
                               (#{vquasi 27314}# #{q 27507}# #{lev 27500}#))
                             (#{quasicons 27315}#
                               (#{quasicons 27315}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i27104"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i27098" "i27099"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i27094" "i27095"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i27055"
                                         "i27053"
                                         "i27051"
                                         "i27049"
                                         "i27047"
                                         "i27045"
                                         "i27043")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i27104"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i27098" "i27099"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i27094" "i27095"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i27055"
                                         "i27053"
                                         "i27051"
                                         "i27049"
                                         "i27047"
                                         "i27045"
                                         "i27043")))
                                     (hygiene guile)))
                                 (#{quasi 27313}#
                                   #{p 27513}#
                                   (#{1-}# #{lev 27500}#)))
                               (#{vquasi 27314}# #{q 27507}# #{lev 27500}#))))
                         #{tmp 27509}#)
                       (let ((#{tmp 27556}#
                               ($sc-dispatch
                                 #{p 27506}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i27098" "i27099"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i27094" "i27095"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i27055"
                                           "i27053"
                                           "i27051"
                                           "i27049"
                                           "i27047"
                                           "i27045"
                                           "i27043")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 27556}#
                           (@apply
                             (lambda (#{p 27560}#)
                               (if (= #{lev 27500}# 0)
                                 (#{quasiappend 27316}#
                                   (map (lambda (#{tmp 27111 27563}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i27109"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i27098" "i27099"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i27094" "i27095"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i27055"
                                                       "i27053"
                                                       "i27051"
                                                       "i27049"
                                                       "i27047"
                                                       "i27045"
                                                       "i27043")))
                                                   (hygiene guile))
                                                #{tmp 27111 27563}#))
                                        #{p 27560}#)
                                   (#{vquasi 27314}#
                                     #{q 27507}#
                                     #{lev 27500}#))
                                 (#{quasicons 27315}#
                                   (#{quasicons 27315}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i27109"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i27098" "i27099"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i27094" "i27095"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i27055"
                                             "i27053"
                                             "i27051"
                                             "i27049"
                                             "i27047"
                                             "i27045"
                                             "i27043")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i27109"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i27098" "i27099"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i27094" "i27095"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i27055"
                                             "i27053"
                                             "i27051"
                                             "i27049"
                                             "i27047"
                                             "i27045"
                                             "i27043")))
                                         (hygiene guile)))
                                     (#{quasi 27313}#
                                       #{p 27560}#
                                       (#{1-}# #{lev 27500}#)))
                                   (#{vquasi 27314}#
                                     #{q 27507}#
                                     #{lev 27500}#))))
                             #{tmp 27556}#)
                           (#{quasicons 27315}#
                             (#{quasi 27313}# #{p 27506}# #{lev 27500}#)
                             (#{vquasi 27314}# #{q 27507}# #{lev 27500}#)))))))
                 #{tmp 27502}#)
               (let ((#{tmp 27581}# ($sc-dispatch #{p 27499}# '())))
                 (if #{tmp 27581}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i27094" "i27095"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i27055"
                               "i27053"
                               "i27051"
                               "i27049"
                               "i27047"
                               "i27045"
                               "i27043")))
                           (hygiene guile))
                         ()))
                     #{tmp 27581}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 27499}#)))))))
       (#{quasicons 27315}#
         (lambda (#{x 27594}# #{y 27595}#)
           (let ((#{tmp 27596}# (list #{x 27594}# #{y 27595}#)))
             (let ((#{tmp 27597}#
                     ($sc-dispatch #{tmp 27596}# '(any any))))
               (if #{tmp 27597}#
                 (@apply
                   (lambda (#{x 27599}# #{y 27600}#)
                     (let ((#{tmp 27602}#
                             ($sc-dispatch
                               #{y 27600}#
                               '(#(atom "quote") any))))
                       (if #{tmp 27602}#
                         (@apply
                           (lambda (#{dy 27606}#)
                             (let ((#{tmp 27608}#
                                     ($sc-dispatch
                                       #{x 27599}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 27608}#
                                 (@apply
                                   (lambda (#{dx 27612}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i27133"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i27129"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i27123" "i27124"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i27118" "i27119"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i27055"
                                                  "i27053"
                                                  "i27051"
                                                  "i27049"
                                                  "i27047"
                                                  "i27045"
                                                  "i27043")))
                                              (hygiene guile))
                                           (cons #{dx 27612}# #{dy 27606}#)))
                                   #{tmp 27608}#)
                                 (if (null? #{dy 27606}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i27135"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i27129"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i27123" "i27124"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i27118" "i27119"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i27055"
                                                "i27053"
                                                "i27051"
                                                "i27049"
                                                "i27047"
                                                "i27045"
                                                "i27043")))
                                            (hygiene guile))
                                         #{x 27599}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i27135"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i27129"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i27123" "i27124"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i27118" "i27119"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i27055"
                                                "i27053"
                                                "i27051"
                                                "i27049"
                                                "i27047"
                                                "i27045"
                                                "i27043")))
                                            (hygiene guile))
                                         #{x 27599}#
                                         #{y 27600}#)))))
                           #{tmp 27602}#)
                         (let ((#{tmp 27617}#
                                 ($sc-dispatch
                                   #{y 27600}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 27617}#
                             (@apply
                               (lambda (#{stuff 27621}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i27138"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i27123" "i27124"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i27118" "i27119"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i27055"
                                              "i27053"
                                              "i27051"
                                              "i27049"
                                              "i27047"
                                              "i27045"
                                              "i27043")))
                                          (hygiene guile))
                                       (cons #{x 27599}# #{stuff 27621}#)))
                               #{tmp 27617}#)
                             (let ((#{tmp 27622}#
                                     ($sc-dispatch
                                       #{y 27600}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 27622}#
                                 (@apply
                                   (lambda (#{stuff 27626}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i27141"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i27123" "i27124"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i27118" "i27119"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i27055"
                                                  "i27053"
                                                  "i27051"
                                                  "i27049"
                                                  "i27047"
                                                  "i27045"
                                                  "i27043")))
                                              (hygiene guile))
                                           (cons #{x 27599}# #{stuff 27626}#)))
                                   #{tmp 27622}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i27143"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i27123" "i27124"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i27118" "i27119"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i27055"
                                              "i27053"
                                              "i27051"
                                              "i27049"
                                              "i27047"
                                              "i27045"
                                              "i27043")))
                                          (hygiene guile))
                                       #{x 27599}#
                                       #{y 27600}#))))))))
                   #{tmp 27597}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 27596}#))))))
       (#{quasiappend 27316}#
         (lambda (#{x 27637}# #{y 27638}#)
           (let ((#{tmp 27640}#
                   ($sc-dispatch #{y 27638}# '(#(atom "quote") ()))))
             (if #{tmp 27640}#
               (@apply
                 (lambda ()
                   (if (null? #{x 27637}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i27147" "i27148"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i27055"
                             "i27053"
                             "i27051"
                             "i27049"
                             "i27047"
                             "i27045"
                             "i27043")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 27637}#))
                       (car #{x 27637}#)
                       (let ((#{tmp 27645}#
                               ($sc-dispatch #{x 27637}# 'each-any)))
                         (if #{tmp 27645}#
                           (@apply
                             (lambda (#{p 27649}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i27159"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i27147" "i27148"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i27055"
                                            "i27053"
                                            "i27051"
                                            "i27049"
                                            "i27047"
                                            "i27045"
                                            "i27043")))
                                        (hygiene guile))
                                     #{p 27649}#))
                             #{tmp 27645}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 27637}#))))))
                 #{tmp 27640}#)
               (if (null? #{x 27637}#)
                 #{y 27638}#
                 (let ((#{tmp 27657}# (list #{x 27637}# #{y 27638}#)))
                   (let ((#{tmp 27658}#
                           ($sc-dispatch #{tmp 27657}# '(each-any any))))
                     (if #{tmp 27658}#
                       (@apply
                         (lambda (#{p 27660}# #{y 27661}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i27170" "i27171"))
                                     #(ribcage #(_) #((top)) #("i27162"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i27147" "i27148"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i27055"
                                        "i27053"
                                        "i27051"
                                        "i27049"
                                        "i27047"
                                        "i27045"
                                        "i27043")))
                                    (hygiene guile))
                                 (append #{p 27660}# (list #{y 27661}#))))
                         #{tmp 27658}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 27657}#)))))))))
       (#{quasilist* 27317}#
         (lambda (#{x 27665}# #{y 27666}#)
           (letrec*
             ((#{f 27667}#
                (lambda (#{x 27756}#)
                  (if (null? #{x 27756}#)
                    #{y 27666}#
                    (#{quasicons 27315}#
                      (car #{x 27756}#)
                      (#{f 27667}# (cdr #{x 27756}#)))))))
             (#{f 27667}# #{x 27665}#))))
       (#{emit 27319}#
         (lambda (#{x 27759}#)
           (let ((#{tmp 27761}#
                   ($sc-dispatch #{x 27759}# '(#(atom "quote") any))))
             (if #{tmp 27761}#
               (@apply
                 (lambda (#{x 27765}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i27237"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i27234"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i27055"
                                "i27053"
                                "i27051"
                                "i27049"
                                "i27047"
                                "i27045"
                                "i27043")))
                            (hygiene guile))
                         #{x 27765}#))
                 #{tmp 27761}#)
               (let ((#{tmp 27766}#
                       ($sc-dispatch
                         #{x 27759}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 27766}#
                   (@apply
                     (lambda (#{x 27770}#)
                       (let ((#{tmp 27771}# (map #{emit 27319}# #{x 27770}#)))
                         (let ((#{tmp 27772}#
                                 ($sc-dispatch #{tmp 27771}# 'each-any)))
                           (if #{tmp 27772}#
                             (@apply
                               (lambda (#{ g27242 27774}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g27242}#)
                                             #((m27243 top))
                                             #("i27247"))
                                           #(ribcage #(x) #((top)) #("i27240"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i27234"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i27055"
                                              "i27053"
                                              "i27051"
                                              "i27049"
                                              "i27047"
                                              "i27045"
                                              "i27043")))
                                          (hygiene guile))
                                       #{ g27242 27774}#))
                               #{tmp 27772}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 27771}#)))))
                     #{tmp 27766}#)
                   (let ((#{tmp 27775}#
                           ($sc-dispatch
                             #{x 27759}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 27775}#
                       (@apply
                         (lambda (#{x 27779}# #{y 27780}#)
                           (letrec*
                             ((#{f 27781}#
                                (lambda (#{x* 27784}#)
                                  (if (null? #{x* 27784}#)
                                    (#{emit 27319}# #{y 27780}#)
                                    (let ((#{tmp 27785}#
                                            (list (#{emit 27319}#
                                                    (car #{x* 27784}#))
                                                  (#{f 27781}#
                                                    (cdr #{x* 27784}#)))))
                                      (let ((#{tmp 27786}#
                                              ($sc-dispatch
                                                #{tmp 27785}#
                                                '(any any))))
                                        (if #{tmp 27786}#
                                          (@apply
                                            (lambda (#{ g27262 27788}#
                                                     #{ g27261 27789}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g27262}#
                                                            #{ g27261}#)
                                                          #((m27263 top)
                                                            (m27263 top))
                                                          #("i27267" "i27268"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i27256" "i27257"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i27252" "i27253"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i27234"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i27055"
                                                           "i27053"
                                                           "i27051"
                                                           "i27049"
                                                           "i27047"
                                                           "i27045"
                                                           "i27043")))
                                                       (hygiene guile))
                                                    #{ g27262 27788}#
                                                    #{ g27261 27789}#))
                                            #{tmp 27786}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 27785}#))))))))
                             (#{f 27781}# #{x 27779}#)))
                         #{tmp 27775}#)
                       (let ((#{tmp 27790}#
                               ($sc-dispatch
                                 #{x 27759}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 27790}#
                           (@apply
                             (lambda (#{x 27794}#)
                               (let ((#{tmp 27795}#
                                       (map #{emit 27319}# #{x 27794}#)))
                                 (let ((#{tmp 27796}#
                                         ($sc-dispatch
                                           #{tmp 27795}#
                                           'each-any)))
                                   (if #{tmp 27796}#
                                     (@apply
                                       (lambda (#{ g27274 27798}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g27274}#)
                                                     #((m27275 top))
                                                     #("i27279"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i27272"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i27234"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i27055"
                                                      "i27053"
                                                      "i27051"
                                                      "i27049"
                                                      "i27047"
                                                      "i27045"
                                                      "i27043")))
                                                  (hygiene guile))
                                               #{ g27274 27798}#))
                                       #{tmp 27796}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 27795}#)))))
                             #{tmp 27790}#)
                           (let ((#{tmp 27799}#
                                   ($sc-dispatch
                                     #{x 27759}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 27799}#
                               (@apply
                                 (lambda (#{x 27803}#)
                                   (let ((#{tmp 27804}#
                                           (map #{emit 27319}# #{x 27803}#)))
                                     (let ((#{tmp 27805}#
                                             ($sc-dispatch
                                               #{tmp 27804}#
                                               'each-any)))
                                       (if #{tmp 27805}#
                                         (@apply
                                           (lambda (#{ g27286 27807}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g27286}#)
                                                         #((m27287 top))
                                                         #("i27291"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i27284"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i27234"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i27055"
                                                          "i27053"
                                                          "i27051"
                                                          "i27049"
                                                          "i27047"
                                                          "i27045"
                                                          "i27043")))
                                                      (hygiene guile))
                                                   #{ g27286 27807}#))
                                           #{tmp 27805}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 27804}#)))))
                                 #{tmp 27799}#)
                               (let ((#{tmp 27808}#
                                       ($sc-dispatch
                                         #{x 27759}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 27808}#
                                   (@apply
                                     (lambda (#{x 27812}#)
                                       (let ((#{tmp 27813}#
                                               (#{emit 27319}# #{x 27812}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g27298}#)
                                                     #((m27299 top))
                                                     #("i27302"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i27296"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i27234"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i27055"
                                                      "i27053"
                                                      "i27051"
                                                      "i27049"
                                                      "i27047"
                                                      "i27045"
                                                      "i27043")))
                                                  (hygiene guile))
                                               #{tmp 27813}#)))
                                     #{tmp 27808}#)
                                   (let ((#{tmp 27816}#
                                           ($sc-dispatch
                                             #{x 27759}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 27816}#
                                       (@apply
                                         (lambda (#{x 27820}#) #{x 27820}#)
                                         #{tmp 27816}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 27759}#))))))))))))))))))
      (lambda (#{x 27320}#)
        (let ((#{tmp 27322}#
                ($sc-dispatch #{x 27320}# '(_ any))))
          (if #{tmp 27322}#
            (@apply
              (lambda (#{e 27326}#)
                (#{emit 27319}# (#{quasi 27313}# #{e 27326}# 0)))
              #{tmp 27322}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 27320}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 27875}#)
      (letrec*
        ((#{read-file 27876}#
           (lambda (#{fn 27985}# #{k 27986}#)
             (let ((#{p 27987}# (open-input-file #{fn 27985}#)))
               (letrec*
                 ((#{f 27988}#
                    (lambda (#{x 28042}# #{result 28043}#)
                      (if (eof-object? #{x 28042}#)
                        (begin
                          (close-input-port #{p 27987}#)
                          (reverse #{result 28043}#))
                        (#{f 27988}#
                          (read #{p 27987}#)
                          (cons (datum->syntax #{k 27986}# #{x 28042}#)
                                #{result 28043}#))))))
                 (#{f 27988}# (read #{p 27987}#) '()))))))
        (let ((#{tmp 27878}#
                ($sc-dispatch #{x 27875}# '(any any))))
          (if #{tmp 27878}#
            (@apply
              (lambda (#{k 27882}# #{filename 27883}#)
                (let ((#{fn 27884}# (syntax->datum #{filename 27883}#)))
                  (let ((#{tmp 27885}#
                          (#{read-file 27876}#
                            #{fn 27884}#
                            #{filename 27883}#)))
                    (let ((#{tmp 27886}#
                            ($sc-dispatch #{tmp 27885}# 'each-any)))
                      (if #{tmp 27886}#
                        (@apply
                          (lambda (#{exp 27904}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i27872"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i27867"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i27863" "i27864"))
                                      #(ribcage (read-file) ((top)) ("i27847"))
                                      #(ribcage #(x) #((top)) #("i27846")))
                                     (hygiene guile))
                                  #{exp 27904}#))
                          #{tmp 27886}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 27885}#))))))
              #{tmp 27878}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 27875}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 28062}#)
      (let ((#{tmp 28064}#
              ($sc-dispatch #{x 28062}# '(any any))))
        (if #{tmp 28064}#
          (@apply
            (lambda (#{k 28068}# #{filename 28069}#)
              (let ((#{fn 28070}# (syntax->datum #{filename 28069}#)))
                (let ((#{tmp 28071}#
                        (datum->syntax
                          #{filename 28069}#
                          (let ((#{t 28074}# (%search-load-path #{fn 28070}#)))
                            (if #{t 28074}#
                              #{t 28074}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 28062}#
                                #{filename 28069}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i28056"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i28052"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i28048" "i28049"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28045")))
                           (hygiene guile))
                        #{tmp 28071}#))))
            #{tmp 28064}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 28062}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 28083}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 28083}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 28086}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 28086}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 28142}#)
      (let ((#{tmp 28144}#
              ($sc-dispatch
                #{x 28142}#
                '(_ any any . each-any))))
        (if #{tmp 28144}#
          (@apply
            (lambda (#{e 28148}# #{m1 28149}# #{m2 28150}#)
              (let ((#{tmp 28151}#
                      (letrec*
                        ((#{f 28193}#
                           (lambda (#{clause 28196}# #{clauses 28197}#)
                             (if (null? #{clauses 28197}#)
                               (let ((#{tmp 28199}#
                                       ($sc-dispatch
                                         #{clause 28196}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i28101"
                                                    "i28102"
                                                    "i28103"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i28091"
                                                    "i28092"
                                                    "i28093"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i28088")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 28199}#
                                   (@apply
                                     (lambda (#{e1 28203}# #{e2 28204}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i28110" "i28111"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i28101"
                                                     "i28102"
                                                     "i28103"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i28091"
                                                     "i28092"
                                                     "i28093"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i28088")))
                                                (hygiene guile))
                                             (cons #{e1 28203}# #{e2 28204}#)))
                                     #{tmp 28199}#)
                                   (let ((#{tmp 28205}#
                                           ($sc-dispatch
                                             #{clause 28196}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 28205}#
                                       (@apply
                                         (lambda (#{k 28209}#
                                                  #{e1 28210}#
                                                  #{e2 28211}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i28116"
                                                         "i28117"
                                                         "i28118"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i28101"
                                                         "i28102"
                                                         "i28103"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i28091"
                                                         "i28092"
                                                         "i28093"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i28088")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i28116"
                                                               "i28117"
                                                               "i28118"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i28101"
                                                               "i28102"
                                                               "i28103"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i28091"
                                                               "i28092"
                                                               "i28093"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i28088")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i28116"
                                                               "i28117"
                                                               "i28118"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i28101"
                                                               "i28102"
                                                               "i28103"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i28091"
                                                               "i28092"
                                                               "i28093"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i28088")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28116"
                                                                     "i28117"
                                                                     "i28118"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28101"
                                                                     "i28102"
                                                                     "i28103"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28091"
                                                                     "i28092"
                                                                     "i28093"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i28088")))
                                                                (hygiene
                                                                  guile))
                                                             #{k 28209}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i28116"
                                                               "i28117"
                                                               "i28118"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i28101"
                                                               "i28102"
                                                               "i28103"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i28091"
                                                               "i28092"
                                                               "i28093"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i28088")))
                                                          (hygiene guile))
                                                       (cons #{e1 28210}#
                                                             #{e2 28211}#))))
                                         #{tmp 28205}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 28142}#
                                         #{clause 28196}#)))))
                               (let ((#{tmp 28219}#
                                       (#{f 28193}#
                                         (car #{clauses 28197}#)
                                         (cdr #{clauses 28197}#))))
                                 (let ((#{tmp 28222}#
                                         ($sc-dispatch
                                           #{clause 28196}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 28222}#
                                     (@apply
                                       (lambda (#{k 28226}#
                                                #{e1 28227}#
                                                #{e2 28228}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i28132"
                                                       "i28133"
                                                       "i28134"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i28128"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i28101"
                                                       "i28102"
                                                       "i28103"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i28091"
                                                       "i28092"
                                                       "i28093"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28088")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i28132"
                                                             "i28133"
                                                             "i28134"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i28128"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i28101"
                                                             "i28102"
                                                             "i28103"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i28091"
                                                             "i28092"
                                                             "i28093"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i28088")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i28132"
                                                             "i28133"
                                                             "i28134"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i28128"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i28101"
                                                             "i28102"
                                                             "i28103"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i28091"
                                                             "i28092"
                                                             "i28093"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i28088")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i28132"
                                                                   "i28133"
                                                                   "i28134"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i28128"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i28101"
                                                                   "i28102"
                                                                   "i28103"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i28091"
                                                                   "i28092"
                                                                   "i28093"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i28088")))
                                                              (hygiene guile))
                                                           #{k 28226}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i28132"
                                                             "i28133"
                                                             "i28134"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i28128"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i28101"
                                                             "i28102"
                                                             "i28103"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i28091"
                                                             "i28092"
                                                             "i28093"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i28088")))
                                                        (hygiene guile))
                                                     (cons #{e1 28227}#
                                                           #{e2 28228}#))
                                               #{tmp 28219}#))
                                       #{tmp 28222}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 28142}#
                                       #{clause 28196}#))))))))
                        (#{f 28193}# #{m1 28149}# #{m2 28150}#))))
                (let ((#{body 28152}# #{tmp 28151}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i28099"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i28091" "i28092" "i28093"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28088")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i28099"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i28091" "i28092" "i28093"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i28088")))
                                       (hygiene guile))
                                    #{e 28148}#))
                        #{body 28152}#))))
            #{tmp 28144}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 28142}#))))))

(define make-variable-transformer
  (lambda (#{proc 28246}#)
    (if (procedure? #{proc 28246}#)
      (letrec*
        ((#{trans 28247}#
           (lambda (#{x 28253}#)
             (#{proc 28246}# #{x 28253}#))))
        (begin
          (set-procedure-property!
            #{trans 28247}#
            'variable-transformer
            #t)
          #{trans 28247}#))
      (error "variable transformer not a procedure"
             #{proc 28246}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 28285}#)
      (let ((#{tmp 28287}#
              ($sc-dispatch #{x 28285}# '(_ any))))
        (if #{tmp 28287}#
          (@apply
            (lambda (#{e 28291}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i28260"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28257")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i28260"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i28257")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i28260"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i28257")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i28260"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i28257")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i28260"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i28257")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i28260"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i28257")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i28260"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i28257")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i28260"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i28257")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i28260"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i28257")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i28260"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i28257")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i28260"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i28257")))
                                         (hygiene guile))
                                      #{e 28291}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i28260"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i28257")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i28260"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i28257")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i28260"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i28257")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i28260"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i28257")))
                                         (hygiene guile))
                                      (cons #{e 28291}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i28260"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i28257")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i28260"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i28257")))
                                                (hygiene guile)))))))))
            #{tmp 28287}#)
          (let ((#{tmp 28292}#
                  ($sc-dispatch
                    #{x 28285}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i28257")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 28292}#
                  (@apply
                    (lambda (#{id 28296}#
                             #{exp1 28297}#
                             #{var 28298}#
                             #{val 28299}#
                             #{exp2 28300}#)
                      (if (identifier? #{id 28296}#)
                        (identifier? #{var 28298}#)
                        #f))
                    #{tmp 28292}#)
                  #f)
              (@apply
                (lambda (#{id 28301}#
                         #{exp1 28302}#
                         #{var 28303}#
                         #{val 28304}#
                         #{exp2 28305}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i28275" "i28276" "i28277" "i28278" "i28279"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28257")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i28275"
                                      "i28276"
                                      "i28277"
                                      "i28278"
                                      "i28279"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i28257")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i28275"
                                       "i28276"
                                       "i28277"
                                       "i28278"
                                       "i28279"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i28257")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i28275"
                                         "i28276"
                                         "i28277"
                                         "i28278"
                                         "i28279"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i28257")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i28275"
                                         "i28276"
                                         "i28277"
                                         "i28278"
                                         "i28279"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i28257")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i28275"
                                            "i28276"
                                            "i28277"
                                            "i28278"
                                            "i28279"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i28257")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i28275"
                                            "i28276"
                                            "i28277"
                                            "i28278"
                                            "i28279"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i28257")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i28275"
                                             "i28276"
                                             "i28277"
                                             "i28278"
                                             "i28279"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i28257")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i28275"
                                                        "i28276"
                                                        "i28277"
                                                        "i28278"
                                                        "i28279"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i28257")))
                                                   (hygiene guile))
                                                #{var 28303}#
                                                #{val 28304}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i28275"
                                                        "i28276"
                                                        "i28277"
                                                        "i28278"
                                                        "i28279"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i28257")))
                                                   (hygiene guile))
                                                #{exp2 28305}#))
                                    (list (cons #{id 28301}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i28275"
                                                         "i28276"
                                                         "i28277"
                                                         "i28278"
                                                         "i28279"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i28257")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i28275"
                                                         "i28276"
                                                         "i28277"
                                                         "i28278"
                                                         "i28279"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i28257")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i28275"
                                                        "i28276"
                                                        "i28277"
                                                        "i28278"
                                                        "i28279"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i28257")))
                                                   (hygiene guile))
                                                (cons #{exp1 28302}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i28275"
                                                               "i28276"
                                                               "i28277"
                                                               "i28278"
                                                               "i28279"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i28257")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i28275"
                                                               "i28276"
                                                               "i28277"
                                                               "i28278"
                                                               "i28279"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i28257")))
                                                          (hygiene guile))))))
                                    (list #{id 28301}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i28275"
                                                        "i28276"
                                                        "i28277"
                                                        "i28278"
                                                        "i28279"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i28257")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i28275"
                                                              "i28276"
                                                              "i28277"
                                                              "i28278"
                                                              "i28279"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i28257")))
                                                         (hygiene guile))
                                                      #{id 28301}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i28275"
                                                        "i28276"
                                                        "i28277"
                                                        "i28278"
                                                        "i28279"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i28257")))
                                                   (hygiene guile))
                                                #{exp1 28302}#))))))
                #{tmp 28292}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 28285}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 28337}#)
      (let ((#{tmp 28339}#
              ($sc-dispatch
                #{x 28337}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 28339}#
          (@apply
            (lambda (#{id 28343}#
                     #{args 28344}#
                     #{b0 28345}#
                     #{b1 28346}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i28319" "i28320" "i28321" "i28322"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28316")))
                       (hygiene guile))
                    #{id 28343}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i28319" "i28320" "i28321" "i28322"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i28316")))
                             (hygiene guile))
                          (cons #{args 28344}#
                                (cons #{b0 28345}# #{b1 28346}#)))))
            #{tmp 28339}#)
          (let ((#{tmp 28347}#
                  ($sc-dispatch #{x 28337}# '(_ any any))))
            (if (if #{tmp 28347}#
                  (@apply
                    (lambda (#{id 28351}# #{val 28352}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i28329" "i28330"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28316")))
                           (hygiene guile))))
                    #{tmp 28347}#)
                  #f)
              (@apply
                (lambda (#{id 28353}# #{val 28354}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i28333" "i28334"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28316")))
                           (hygiene guile))
                        #{id 28353}#
                        #{val 28354}#))
                #{tmp 28347}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 28337}#))))))))

