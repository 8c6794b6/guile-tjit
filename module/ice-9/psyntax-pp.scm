(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{top-level-eval-hook 4302}#
     (lambda (#{x 36532}# #{mod 36533}#)
       (primitive-eval #{x 36532}#)))
   (#{maybe-name-value! 4307}#
     (lambda (#{name 19324}# #{val 19325}#)
       (if (if (struct? #{val 19325}#)
             (eq? (struct-vtable #{val 19325}#)
                  (vector-ref %expanded-vtables 14))
             #f)
         (let ((#{meta 19332}# (struct-ref #{val 19325}# 1)))
           (if (not (assq 'name #{meta 19332}#))
             (let ((#{v 19337}#
                     (cons (cons 'name #{name 19324}#) #{meta 19332}#)))
               (struct-set! #{val 19325}# 1 #{v 19337}#)))))))
   (#{build-call 4309}#
     (lambda (#{source 19069}#
              #{fun-exp 19070}#
              #{arg-exps 19071}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{source 19069}#
         #{fun-exp 19070}#
         #{arg-exps 19071}#)))
   (#{build-conditional 4310}#
     (lambda (#{source 19077}#
              #{test-exp 19078}#
              #{then-exp 19079}#
              #{else-exp 19080}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{source 19077}#
         #{test-exp 19078}#
         #{then-exp 19079}#
         #{else-exp 19080}#)))
   (#{build-dynlet 4311}#
     (lambda (#{source 19087}#
              #{fluids 19088}#
              #{vals 19089}#
              #{body 19090}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 18)
         #{source 19087}#
         #{fluids 19088}#
         #{vals 19089}#
         #{body 19090}#)))
   (#{build-lexical-reference 4312}#
     (lambda (#{type 36534}#
              #{source 36535}#
              #{name 36536}#
              #{var 36537}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{source 36535}#
         #{name 36536}#
         #{var 36537}#)))
   (#{build-lexical-assignment 4313}#
     (lambda (#{source 19097}#
              #{name 19098}#
              #{var 19099}#
              #{exp 19100}#)
       (begin
         (if (if (struct? #{exp 19100}#)
               (eq? (struct-vtable #{exp 19100}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 19116}# (struct-ref #{exp 19100}# 1)))
             (if (not (assq 'name #{meta 19116}#))
               (let ((#{v 19123}#
                       (cons (cons 'name #{name 19098}#) #{meta 19116}#)))
                 (struct-set! #{exp 19100}# 1 #{v 19123}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 4)
           #{source 19097}#
           #{name 19098}#
           #{var 19099}#
           #{exp 19100}#))))
   (#{analyze-variable 4314}#
     (lambda (#{mod 36543}#
              #{var 36544}#
              #{modref-cont 36545}#
              #{bare-cont 36546}#)
       (if (not #{mod 36543}#)
         (#{bare-cont 36546}# #{var 36544}#)
         (let ((#{kind 36547}# (car #{mod 36543}#))
               (#{mod 36548}# (cdr #{mod 36543}#)))
           (if (eqv? #{kind 36547}# 'public)
             (#{modref-cont 36545}#
               #{mod 36548}#
               #{var 36544}#
               #t)
             (if (eqv? #{kind 36547}# 'private)
               (if (not (equal?
                          #{mod 36548}#
                          (module-name (current-module))))
                 (#{modref-cont 36545}#
                   #{mod 36548}#
                   #{var 36544}#
                   #f)
                 (#{bare-cont 36546}# #{var 36544}#))
               (if (eqv? #{kind 36547}# 'bare)
                 (#{bare-cont 36546}# #{var 36544}#)
                 (if (eqv? #{kind 36547}# 'hygiene)
                   (if (if (not (equal?
                                  #{mod 36548}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 36548}#)
                           #{var 36544}#)
                         #f)
                     (#{modref-cont 36545}#
                       #{mod 36548}#
                       #{var 36544}#
                       #f)
                     (#{bare-cont 36546}# #{var 36544}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 36544}#
                     #{mod 36548}#)))))))))
   (#{build-global-reference 4315}#
     (lambda (#{source 36563}# #{var 36564}# #{mod 36565}#)
       (#{analyze-variable 4314}#
         #{mod 36565}#
         #{var 36564}#
         (lambda (#{mod 36568}# #{var 36569}# #{public? 36570}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 5)
             #{source 36563}#
             #{mod 36568}#
             #{var 36569}#
             #{public? 36570}#))
         (lambda (#{var 36577}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 7)
             #{source 36563}#
             #{var 36577}#)))))
   (#{build-global-assignment 4316}#
     (lambda (#{source 19132}#
              #{var 19133}#
              #{exp 19134}#
              #{mod 19135}#)
       (begin
         (if (if (struct? #{exp 19134}#)
               (eq? (struct-vtable #{exp 19134}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 19151}# (struct-ref #{exp 19134}# 1)))
             (if (not (assq 'name #{meta 19151}#))
               (let ((#{v 19158}#
                       (cons (cons 'name #{var 19133}#) #{meta 19151}#)))
                 (struct-set! #{exp 19134}# 1 #{v 19158}#)))))
         (#{analyze-variable 4314}#
           #{mod 19135}#
           #{var 19133}#
           (lambda (#{mod 19163}# #{var 19164}# #{public? 19165}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{source 19132}#
               #{mod 19163}#
               #{var 19164}#
               #{public? 19165}#
               #{exp 19134}#))
           (lambda (#{var 19173}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{source 19132}#
               #{var 19173}#
               #{exp 19134}#))))))
   (#{build-global-definition 4317}#
     (lambda (#{source 36582}# #{var 36583}# #{exp 36584}#)
       (begin
         (if (if (struct? #{exp 36584}#)
               (eq? (struct-vtable #{exp 36584}#)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((#{meta 36600}# (struct-ref #{exp 36584}# 1)))
             (if (not (assq 'name #{meta 36600}#))
               (let ((#{v 36607}#
                       (cons (cons 'name #{var 36583}#) #{meta 36600}#)))
                 (struct-set! #{exp 36584}# 1 #{v 36607}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 9)
           #{source 36582}#
           #{var 36583}#
           #{exp 36584}#))))
   (#{build-simple-lambda 4318}#
     (lambda (#{src 19179}#
              #{req 19180}#
              #{rest 19181}#
              #{vars 19182}#
              #{meta 19183}#
              #{exp 19184}#)
       (let ((#{body 19190}#
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 15)
                 #{src 19179}#
                 #{req 19180}#
                 #f
                 #{rest 19181}#
                 #f
                 '()
                 #{vars 19182}#
                 #{exp 19184}#
                 #f)))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 14)
           #{src 19179}#
           #{meta 19183}#
           #{body 19190}#))))
   (#{build-primcall 4321}#
     (lambda (#{src 19202}# #{name 19203}# #{args 19204}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 12)
         #{src 19202}#
         #{name 19203}#
         #{args 19204}#)))
   (#{build-sequence 4324}#
     (lambda (#{src 36615}# #{exps 36616}#)
       (if (null? (cdr #{exps 36616}#))
         (car #{exps 36616}#)
         (let ((#{head 36620}# (car #{exps 36616}#))
               (#{tail 36621}#
                 (#{build-sequence 4324}# #f (cdr #{exps 36616}#))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             #{src 36615}#
             #{head 36620}#
             #{tail 36621}#)))))
   (#{build-named-let 4326}#
     (lambda (#{src 19210}#
              #{ids 19211}#
              #{vars 19212}#
              #{val-exps 19213}#
              #{body-exp 19214}#)
       (let ((#{f 19215}# (car #{vars 19212}#))
             (#{f-name 19216}# (car #{ids 19211}#))
             (#{vars 19217}# (cdr #{vars 19212}#))
             (#{ids 19218}# (cdr #{ids 19211}#)))
         (let ((#{proc 19219}#
                 (let ((#{body 19239}#
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 15)
                           #{src 19210}#
                           #{ids 19218}#
                           #f
                           #f
                           #f
                           '()
                           #{vars 19217}#
                           #{body-exp 19214}#
                           #f)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 14)
                     #{src 19210}#
                     '()
                     #{body 19239}#))))
           (begin
             (if (if (struct? #{proc 19219}#)
                   (eq? (struct-vtable #{proc 19219}#)
                        (vector-ref %expanded-vtables 14))
                   #f)
               (let ((#{meta 19263}# (struct-ref #{proc 19219}# 1)))
                 (if (not (assq 'name #{meta 19263}#))
                   (let ((#{v 19270}#
                           (cons (cons 'name #{f-name 19216}#)
                                 #{meta 19263}#)))
                     (struct-set! #{proc 19219}# 1 #{v 19270}#)))))
             (for-each
               #{maybe-name-value! 4307}#
               #{ids 19218}#
               #{val-exps 19213}#)
             (let ((#{names 19294}# (list #{f-name 19216}#))
                   (#{gensyms 19295}# (list #{f 19215}#))
                   (#{vals 19296}# (list #{proc 19219}#))
                   (#{body 19297}#
                     (let ((#{fun-exp 19301}#
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 3)
                               #{src 19210}#
                               #{f-name 19216}#
                               #{f 19215}#)))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 11)
                         #{src 19210}#
                         #{fun-exp 19301}#
                         #{val-exps 19213}#))))
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 17)
                 #{src 19210}#
                 #f
                 #{names 19294}#
                 #{gensyms 19295}#
                 #{vals 19296}#
                 #{body 19297}#)))))))
   (#{build-letrec 4327}#
     (lambda (#{src 19317}#
              #{in-order? 19318}#
              #{ids 19319}#
              #{vars 19320}#
              #{val-exps 19321}#
              #{body-exp 19322}#)
       (if (null? #{vars 19320}#)
         #{body-exp 19322}#
         (begin
           (for-each
             #{maybe-name-value! 4307}#
             #{ids 19319}#
             #{val-exps 19321}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 17)
             #{src 19317}#
             #{in-order? 19318}#
             #{ids 19319}#
             #{vars 19320}#
             #{val-exps 19321}#
             #{body-exp 19322}#)))))
   (#{source-annotation 4336}#
     (lambda (#{x 19348}#)
       (if (if (vector? #{x 19348}#)
             (if (= (vector-length #{x 19348}#) 4)
               (eq? (vector-ref #{x 19348}# 0) 'syntax-object)
               #f)
             #f)
         (#{source-annotation 4336}#
           (vector-ref #{x 19348}# 1))
         (if (pair? #{x 19348}#)
           (let ((#{props 19363}# (source-properties #{x 19348}#)))
             (if (pair? #{props 19363}#) #{props 19363}# #f))
           #f))))
   (#{extend-env 4337}#
     (lambda (#{labels 19365}# #{bindings 19366}# #{r 19367}#)
       (if (null? #{labels 19365}#)
         #{r 19367}#
         (#{extend-env 4337}#
           (cdr #{labels 19365}#)
           (cdr #{bindings 19366}#)
           (cons (cons (car #{labels 19365}#)
                       (car #{bindings 19366}#))
                 #{r 19367}#)))))
   (#{extend-var-env 4338}#
     (lambda (#{labels 19368}# #{vars 19369}# #{r 19370}#)
       (if (null? #{labels 19368}#)
         #{r 19370}#
         (#{extend-var-env 4338}#
           (cdr #{labels 19368}#)
           (cdr #{vars 19369}#)
           (cons (cons (car #{labels 19368}#)
                       (cons 'lexical (car #{vars 19369}#)))
                 #{r 19370}#)))))
   (#{macros-only-env 4339}#
     (lambda (#{r 19371}#)
       (if (null? #{r 19371}#)
         '()
         (let ((#{a 19372}# (car #{r 19371}#)))
           (if (eq? (car (cdr #{a 19372}#)) 'macro)
             (cons #{a 19372}#
                   (#{macros-only-env 4339}# (cdr #{r 19371}#)))
             (#{macros-only-env 4339}# (cdr #{r 19371}#)))))))
   (#{global-extend 4341}#
     (lambda (#{type 19374}# #{sym 19375}# #{val 19376}#)
       (module-define!
         (current-module)
         #{sym 19375}#
         (make-syntax-transformer
           #{sym 19375}#
           #{type 19374}#
           #{val 19376}#))))
   (#{id? 4343}#
     (lambda (#{x 12386}#)
       (if (symbol? #{x 12386}#)
         #t
         (if (if (vector? #{x 12386}#)
               (if (= (vector-length #{x 12386}#) 4)
                 (eq? (vector-ref #{x 12386}# 0) 'syntax-object)
                 #f)
               #f)
           (symbol? (vector-ref #{x 12386}# 1))
           #f))))
   (#{gen-labels 4346}#
     (lambda (#{ls 19386}#)
       (if (null? #{ls 19386}#)
         '()
         (cons (symbol->string (gensym "i"))
               (#{gen-labels 4346}# (cdr #{ls 19386}#))))))
   (#{make-binding-wrap 4357}#
     (lambda (#{ids 19390}# #{labels 19391}# #{w 19392}#)
       (if (null? #{ids 19390}#)
         #{w 19392}#
         (cons (car #{w 19392}#)
               (cons (let ((#{labelvec 19393}#
                             (list->vector #{labels 19391}#)))
                       (let ((#{n 19394}# (vector-length #{labelvec 19393}#)))
                         (let ((#{symnamevec 19395}# (make-vector #{n 19394}#))
                               (#{marksvec 19396}# (make-vector #{n 19394}#)))
                           (begin
                             (letrec*
                               ((#{f 19397}#
                                  (lambda (#{ids 19592}# #{i 19593}#)
                                    (if (not (null? #{ids 19592}#))
                                      (call-with-values
                                        (lambda ()
                                          (let ((#{x 19596}#
                                                  (car #{ids 19592}#)))
                                            (if (if (vector? #{x 19596}#)
                                                  (if (= (vector-length
                                                           #{x 19596}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{x 19596}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (values
                                                (vector-ref #{x 19596}# 1)
                                                (let ((#{m1 19612}#
                                                        (car #{w 19392}#))
                                                      (#{m2 19613}#
                                                        (car (vector-ref
                                                               #{x 19596}#
                                                               2))))
                                                  (if (null? #{m2 19613}#)
                                                    #{m1 19612}#
                                                    (append
                                                      #{m1 19612}#
                                                      #{m2 19613}#))))
                                              (values
                                                #{x 19596}#
                                                (car #{w 19392}#)))))
                                        (lambda (#{symname 19633}#
                                                 #{marks 19634}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 19395}#
                                              #{i 19593}#
                                              #{symname 19633}#)
                                            (vector-set!
                                              #{marksvec 19396}#
                                              #{i 19593}#
                                              #{marks 19634}#)
                                            (#{f 19397}#
                                              (cdr #{ids 19592}#)
                                              (#{1+}# #{i 19593}#)))))))))
                               (#{f 19397}# #{ids 19390}# 0))
                             (vector
                               'ribcage
                               #{symnamevec 19395}#
                               #{marksvec 19396}#
                               #{labelvec 19393}#)))))
                     (cdr #{w 19392}#))))))
   (#{same-marks? 4361}#
     (lambda (#{x 36622}# #{y 36623}#)
       (if (eq? #{x 36622}# #{y 36623}#)
         (eq? #{x 36622}# #{y 36623}#)
         (if (not (null? #{x 36622}#))
           (if (not (null? #{y 36623}#))
             (if (eq? (car #{x 36622}#) (car #{y 36623}#))
               (#{same-marks? 4361}#
                 (cdr #{x 36622}#)
                 (cdr #{y 36623}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 4362}#
     (lambda (#{id 19641}# #{w 19642}#)
       (letrec*
         ((#{search 19643}#
            (lambda (#{sym 19704}# #{subst 19705}# #{marks 19706}#)
              (if (null? #{subst 19705}#)
                (values #f #{marks 19706}#)
                (let ((#{fst 19707}# (car #{subst 19705}#)))
                  (if (eq? #{fst 19707}# 'shift)
                    (#{search 19643}#
                      #{sym 19704}#
                      (cdr #{subst 19705}#)
                      (cdr #{marks 19706}#))
                    (let ((#{symnames 19709}# (vector-ref #{fst 19707}# 1)))
                      (if (vector? #{symnames 19709}#)
                        (#{search-vector-rib 19645}#
                          #{sym 19704}#
                          #{subst 19705}#
                          #{marks 19706}#
                          #{symnames 19709}#
                          #{fst 19707}#)
                        (#{search-list-rib 19644}#
                          #{sym 19704}#
                          #{subst 19705}#
                          #{marks 19706}#
                          #{symnames 19709}#
                          #{fst 19707}#))))))))
          (#{search-list-rib 19644}#
            (lambda (#{sym 19879}#
                     #{subst 19880}#
                     #{marks 19881}#
                     #{symnames 19882}#
                     #{ribcage 19883}#)
              (letrec*
                ((#{f 19884}#
                   (lambda (#{symnames 19887}# #{i 19888}#)
                     (if (null? #{symnames 19887}#)
                       (#{search 19643}#
                         #{sym 19879}#
                         (cdr #{subst 19880}#)
                         #{marks 19881}#)
                       (if (if (eq? (car #{symnames 19887}#) #{sym 19879}#)
                             (#{same-marks? 4361}#
                               #{marks 19881}#
                               (list-ref
                                 (vector-ref #{ribcage 19883}# 2)
                                 #{i 19888}#))
                             #f)
                         (values
                           (list-ref
                             (vector-ref #{ribcage 19883}# 3)
                             #{i 19888}#)
                           #{marks 19881}#)
                         (#{f 19884}#
                           (cdr #{symnames 19887}#)
                           (#{1+}# #{i 19888}#)))))))
                (#{f 19884}# #{symnames 19882}# 0))))
          (#{search-vector-rib 19645}#
            (lambda (#{sym 20038}#
                     #{subst 20039}#
                     #{marks 20040}#
                     #{symnames 20041}#
                     #{ribcage 20042}#)
              (let ((#{n 20043}# (vector-length #{symnames 20041}#)))
                (letrec*
                  ((#{f 20044}#
                     (lambda (#{i 20101}#)
                       (if (= #{i 20101}# #{n 20043}#)
                         (#{search 19643}#
                           #{sym 20038}#
                           (cdr #{subst 20039}#)
                           #{marks 20040}#)
                         (if (if (eq? (vector-ref
                                        #{symnames 20041}#
                                        #{i 20101}#)
                                      #{sym 20038}#)
                               (#{same-marks? 4361}#
                                 #{marks 20040}#
                                 (vector-ref
                                   (vector-ref #{ribcage 20042}# 2)
                                   #{i 20101}#))
                               #f)
                           (values
                             (vector-ref
                               (vector-ref #{ribcage 20042}# 3)
                               #{i 20101}#)
                             #{marks 20040}#)
                           (#{f 20044}# (#{1+}# #{i 20101}#)))))))
                  (#{f 20044}# 0))))))
         (if (symbol? #{id 19641}#)
           (let ((#{t 19646}#
                   (#{search 19643}#
                     #{id 19641}#
                     (cdr #{w 19642}#)
                     (car #{w 19642}#))))
             (if #{t 19646}# #{t 19646}# #{id 19641}#))
           (if (if (vector? #{id 19641}#)
                 (if (= (vector-length #{id 19641}#) 4)
                   (eq? (vector-ref #{id 19641}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{id 19661}# (vector-ref #{id 19641}# 1))
                   (#{w1 19662}# (vector-ref #{id 19641}# 2)))
               (let ((#{marks 19663}#
                       (let ((#{m1 19673}# (car #{w 19642}#))
                             (#{m2 19674}# (car #{w1 19662}#)))
                         (if (null? #{m2 19674}#)
                           #{m1 19673}#
                           (append #{m1 19673}# #{m2 19674}#)))))
                 (call-with-values
                   (lambda ()
                     (#{search 19643}#
                       #{id 19661}#
                       (cdr #{w 19642}#)
                       #{marks 19663}#))
                   (lambda (#{new-id 19690}# #{marks 19691}#)
                     (if #{new-id 19690}#
                       #{new-id 19690}#
                       (let ((#{t 19699}#
                               (#{search 19643}#
                                 #{id 19661}#
                                 (cdr #{w1 19662}#)
                                 #{marks 19691}#)))
                         (if #{t 19699}# #{t 19699}# #{id 19661}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 19641}#))))))
   (#{free-id=? 4363}#
     (lambda (#{i 20251}# #{j 20252}#)
       (let ((#{ni 20253}#
               (#{id-var-name 4362}# #{i 20251}# '(())))
             (#{nj 20254}#
               (#{id-var-name 4362}# #{j 20252}# '(()))))
         (if (eq? #{ni 20253}#
                  (if (if (vector? #{i 20251}#)
                        (if (= (vector-length #{i 20251}#) 4)
                          (eq? (vector-ref #{i 20251}# 0) 'syntax-object)
                          #f)
                        #f)
                    (vector-ref #{i 20251}# 1)
                    #{i 20251}#))
           (if (eq? #{nj 20254}#
                    (if (if (vector? #{j 20252}#)
                          (if (= (vector-length #{j 20252}#) 4)
                            (eq? (vector-ref #{j 20252}# 0) 'syntax-object)
                            #f)
                          #f)
                      (vector-ref #{j 20252}# 1)
                      #{j 20252}#))
             (if (let ((#{bi 20312}#
                         (let ((#{mod 20581}#
                                 (if (if (vector? #{i 20251}#)
                                       (if (= (vector-length #{i 20251}#) 4)
                                         (eq? (vector-ref #{i 20251}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (vector-ref #{i 20251}# 3)
                                   #f)))
                           (module-variable
                             (if #{mod 20581}#
                               (resolve-module (cdr #{mod 20581}#))
                               (current-module))
                             (if (if (vector? #{i 20251}#)
                                   (if (= (vector-length #{i 20251}#) 4)
                                     (eq? (vector-ref #{i 20251}# 0)
                                          'syntax-object)
                                     #f)
                                   #f)
                               (vector-ref #{i 20251}# 1)
                               #{i 20251}#)))))
                   (if #{bi 20312}#
                     (eq? #{bi 20312}#
                          (let ((#{mod 20425}#
                                  (if (if (vector? #{j 20252}#)
                                        (if (= (vector-length #{j 20252}#) 4)
                                          (eq? (vector-ref #{j 20252}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{j 20252}# 3)
                                    #f)))
                            (module-variable
                              (if #{mod 20425}#
                                (resolve-module (cdr #{mod 20425}#))
                                (current-module))
                              (if (if (vector? #{j 20252}#)
                                    (if (= (vector-length #{j 20252}#) 4)
                                      (eq? (vector-ref #{j 20252}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (vector-ref #{j 20252}# 1)
                                #{j 20252}#))))
                     (if (not (let ((#{mod 20503}#
                                      (if (if (vector? #{j 20252}#)
                                            (if (= (vector-length #{j 20252}#)
                                                   4)
                                              (eq? (vector-ref #{j 20252}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (vector-ref #{j 20252}# 3)
                                        #f)))
                                (module-variable
                                  (if #{mod 20503}#
                                    (resolve-module (cdr #{mod 20503}#))
                                    (current-module))
                                  (if (if (vector? #{j 20252}#)
                                        (if (= (vector-length #{j 20252}#) 4)
                                          (eq? (vector-ref #{j 20252}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{j 20252}# 1)
                                    #{j 20252}#))))
                       (eq? #{ni 20253}# #{nj 20254}#)
                       #f)))
               (eq? (let ((#{mod 20659}#
                            (if (if (vector? #{i 20251}#)
                                  (if (= (vector-length #{i 20251}#) 4)
                                    (eq? (vector-ref #{i 20251}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (vector-ref #{i 20251}# 3)
                              #f)))
                      (module-variable
                        (if #{mod 20659}#
                          (resolve-module (cdr #{mod 20659}#))
                          (current-module))
                        (if (if (vector? #{i 20251}#)
                              (if (= (vector-length #{i 20251}#) 4)
                                (eq? (vector-ref #{i 20251}# 0) 'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{i 20251}# 1)
                          #{i 20251}#)))
                    (let ((#{mod 20737}#
                            (if (if (vector? #{j 20252}#)
                                  (if (= (vector-length #{j 20252}#) 4)
                                    (eq? (vector-ref #{j 20252}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (vector-ref #{j 20252}# 3)
                              #f)))
                      (module-variable
                        (if #{mod 20737}#
                          (resolve-module (cdr #{mod 20737}#))
                          (current-module))
                        (if (if (vector? #{j 20252}#)
                              (if (= (vector-length #{j 20252}#) 4)
                                (eq? (vector-ref #{j 20252}# 0) 'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{j 20252}# 1)
                          #{j 20252}#))))
               #f)
             #f)
           (if (eq? #{ni 20253}# #{nj 20254}#)
             (not (eq? #{nj 20254}#
                       (if (if (vector? #{j 20252}#)
                             (if (= (vector-length #{j 20252}#) 4)
                               (eq? (vector-ref #{j 20252}# 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{j 20252}# 1)
                         #{j 20252}#)))
             #f)))))
   (#{bound-id=? 4364}#
     (lambda (#{i 20837}# #{j 20838}#)
       (if (if (if (vector? #{i 20837}#)
                 (if (= (vector-length #{i 20837}#) 4)
                   (eq? (vector-ref #{i 20837}# 0) 'syntax-object)
                   #f)
                 #f)
             (if (vector? #{j 20838}#)
               (if (= (vector-length #{j 20838}#) 4)
                 (eq? (vector-ref #{j 20838}# 0) 'syntax-object)
                 #f)
               #f)
             #f)
         (if (eq? (vector-ref #{i 20837}# 1)
                  (vector-ref #{j 20838}# 1))
           (#{same-marks? 4361}#
             (car (vector-ref #{i 20837}# 2))
             (car (vector-ref #{j 20838}# 2)))
           #f)
         (eq? #{i 20837}# #{j 20838}#))))
   (#{valid-bound-ids? 4365}#
     (lambda (#{ids 21007}#)
       (if (letrec*
             ((#{all-ids? 21008}#
                (lambda (#{ids 21198}#)
                  (if (null? #{ids 21198}#)
                    (null? #{ids 21198}#)
                    (if (let ((#{x 21209}# (car #{ids 21198}#)))
                          (if (symbol? #{x 21209}#)
                            #t
                            (if (if (vector? #{x 21209}#)
                                  (if (= (vector-length #{x 21209}#) 4)
                                    (eq? (vector-ref #{x 21209}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{x 21209}# 1))
                              #f)))
                      (#{all-ids? 21008}# (cdr #{ids 21198}#))
                      #f)))))
             (#{all-ids? 21008}# #{ids 21007}#))
         (#{distinct-bound-ids? 4366}# #{ids 21007}#)
         #f)))
   (#{distinct-bound-ids? 4366}#
     (lambda (#{ids 21330}#)
       (letrec*
         ((#{distinct? 21331}#
            (lambda (#{ids 21436}#)
              (if (null? #{ids 21436}#)
                (null? #{ids 21436}#)
                (if (not (#{bound-id-member? 4367}#
                           (car #{ids 21436}#)
                           (cdr #{ids 21436}#)))
                  (#{distinct? 21331}# (cdr #{ids 21436}#))
                  #f)))))
         (#{distinct? 21331}# #{ids 21330}#))))
   (#{bound-id-member? 4367}#
     (lambda (#{x 21532}# #{list 21533}#)
       (if (not (null? #{list 21533}#))
         (let ((#{t 21534}#
                 (#{bound-id=? 4364}#
                   #{x 21532}#
                   (car #{list 21533}#))))
           (if #{t 21534}#
             #{t 21534}#
             (#{bound-id-member? 4367}#
               #{x 21532}#
               (cdr #{list 21533}#))))
         #f)))
   (#{source-wrap 4369}#
     (lambda (#{x 21708}#
              #{w 21709}#
              #{s 21710}#
              #{defmod 21711}#)
       (let ((#{x 21715}#
               (begin
                 (if (if (pair? #{x 21708}#) #{s 21710}# #f)
                   (set-source-properties! #{x 21708}# #{s 21710}#))
                 #{x 21708}#)))
         (if (if (null? (car #{w 21709}#))
               (null? (cdr #{w 21709}#))
               #f)
           #{x 21715}#
           (if (if (vector? #{x 21715}#)
                 (if (= (vector-length #{x 21715}#) 4)
                   (eq? (vector-ref #{x 21715}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{expression 21747}# (vector-ref #{x 21715}# 1))
                   (#{wrap 21748}#
                     (let ((#{w2 21756}# (vector-ref #{x 21715}# 2)))
                       (let ((#{m1 21757}# (car #{w 21709}#))
                             (#{s1 21758}# (cdr #{w 21709}#)))
                         (if (null? #{m1 21757}#)
                           (if (null? #{s1 21758}#)
                             #{w2 21756}#
                             (cons (car #{w2 21756}#)
                                   (let ((#{m2 21773}# (cdr #{w2 21756}#)))
                                     (if (null? #{m2 21773}#)
                                       #{s1 21758}#
                                       (append #{s1 21758}# #{m2 21773}#)))))
                           (cons (let ((#{m2 21781}# (car #{w2 21756}#)))
                                   (if (null? #{m2 21781}#)
                                     #{m1 21757}#
                                     (append #{m1 21757}# #{m2 21781}#)))
                                 (let ((#{m2 21789}# (cdr #{w2 21756}#)))
                                   (if (null? #{m2 21789}#)
                                     #{s1 21758}#
                                     (append #{s1 21758}# #{m2 21789}#))))))))
                   (#{module 21749}# (vector-ref #{x 21715}# 3)))
               (vector
                 'syntax-object
                 #{expression 21747}#
                 #{wrap 21748}#
                 #{module 21749}#))
             (if (null? #{x 21715}#)
               #{x 21715}#
               (vector
                 'syntax-object
                 #{x 21715}#
                 #{w 21709}#
                 #{defmod 21711}#)))))))
   (#{chi-sequence 4370}#
     (lambda (#{body 36631}#
              #{r 36632}#
              #{w 36633}#
              #{s 36634}#
              #{mod 36635}#)
       (#{build-sequence 4324}#
         #{s 36634}#
         (letrec*
           ((#{dobody 36725}#
              (lambda (#{body 36810}#
                       #{r 36811}#
                       #{w 36812}#
                       #{mod 36813}#)
                (if (null? #{body 36810}#)
                  '()
                  (let ((#{first 36814}#
                          (#{chi 4375}#
                            (car #{body 36810}#)
                            #{r 36811}#
                            #{w 36812}#
                            #{mod 36813}#)))
                    (cons #{first 36814}#
                          (#{dobody 36725}#
                            (cdr #{body 36810}#)
                            #{r 36811}#
                            #{w 36812}#
                            #{mod 36813}#)))))))
           (#{dobody 36725}#
             #{body 36631}#
             #{r 36632}#
             #{w 36633}#
             #{mod 36635}#)))))
   (#{chi-top-sequence 4371}#
     (lambda (#{body 21804}#
              #{r 21805}#
              #{w 21806}#
              #{s 21807}#
              #{m 21808}#
              #{esew 21809}#
              #{mod 21810}#)
       (letrec*
         ((#{scan 21811}#
            (lambda (#{body 21958}#
                     #{r 21959}#
                     #{w 21960}#
                     #{s 21961}#
                     #{m 21962}#
                     #{esew 21963}#
                     #{mod 21964}#
                     #{exps 21965}#)
              (if (null? #{body 21958}#)
                #{exps 21965}#
                (call-with-values
                  (lambda ()
                    (call-with-values
                      (lambda ()
                        (let ((#{e 21966}# (car #{body 21958}#)))
                          (#{syntax-type 4374}#
                            #{e 21966}#
                            #{r 21959}#
                            #{w 21960}#
                            (let ((#{t 21970}#
                                    (#{source-annotation 4336}# #{e 21966}#)))
                              (if #{t 21970}# #{t 21970}# #{s 21961}#))
                            #f
                            #{mod 21964}#
                            #f)))
                      (lambda (#{type 22252}#
                               #{value 22253}#
                               #{e 22254}#
                               #{w 22255}#
                               #{s 22256}#
                               #{mod 22257}#)
                        (if (eqv? #{type 22252}# 'begin-form)
                          (let ((#{tmp 22262}#
                                  ($sc-dispatch #{e 22254}# '(_))))
                            (if #{tmp 22262}#
                              (@apply (lambda () #{exps 21965}#) #{tmp 22262}#)
                              (let ((#{tmp 22266}#
                                      ($sc-dispatch
                                        #{e 22254}#
                                        '(_ any . each-any))))
                                (if #{tmp 22266}#
                                  (@apply
                                    (lambda (#{e1 22270}# #{e2 22271}#)
                                      (#{scan 21811}#
                                        (cons #{e1 22270}# #{e2 22271}#)
                                        #{r 21959}#
                                        #{w 22255}#
                                        #{s 22256}#
                                        #{m 21962}#
                                        #{esew 21963}#
                                        #{mod 22257}#
                                        #{exps 21965}#))
                                    #{tmp 22266}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 22254}#)))))
                          (if (eqv? #{type 22252}# 'local-syntax-form)
                            (#{chi-local-syntax 4380}#
                              #{value 22253}#
                              #{e 22254}#
                              #{r 21959}#
                              #{w 22255}#
                              #{s 22256}#
                              #{mod 22257}#
                              (lambda (#{body 22286}#
                                       #{r 22287}#
                                       #{w 22288}#
                                       #{s 22289}#
                                       #{mod 22290}#)
                                (#{scan 21811}#
                                  #{body 22286}#
                                  #{r 22287}#
                                  #{w 22288}#
                                  #{s 22289}#
                                  #{m 21962}#
                                  #{esew 21963}#
                                  #{mod 22290}#
                                  #{exps 21965}#)))
                            (if (eqv? #{type 22252}# 'eval-when-form)
                              (let ((#{tmp 22295}#
                                      ($sc-dispatch
                                        #{e 22254}#
                                        '(_ each-any any . each-any))))
                                (if #{tmp 22295}#
                                  (@apply
                                    (lambda (#{x 22299}#
                                             #{e1 22300}#
                                             #{e2 22301}#)
                                      (let ((#{when-list 22302}#
                                              (#{chi-when-list 4373}#
                                                #{e 22254}#
                                                #{x 22299}#
                                                #{w 22255}#))
                                            (#{body 22303}#
                                              (cons #{e1 22300}#
                                                    #{e2 22301}#)))
                                        (if (eq? #{m 21962}# 'e)
                                          (if (memq 'eval #{when-list 22302}#)
                                            (#{scan 21811}#
                                              #{body 22303}#
                                              #{r 21959}#
                                              #{w 22255}#
                                              #{s 22256}#
                                              (if (memq 'expand
                                                        #{when-list 22302}#)
                                                'c&e
                                                'e)
                                              '(eval)
                                              #{mod 22257}#
                                              #{exps 21965}#)
                                            (begin
                                              (if (memq 'expand
                                                        #{when-list 22302}#)
                                                (let ((#{x 22310}#
                                                        (#{chi-top-sequence 4371}#
                                                          #{body 22303}#
                                                          #{r 21959}#
                                                          #{w 22255}#
                                                          #{s 22256}#
                                                          'e
                                                          '(eval)
                                                          #{mod 22257}#)))
                                                  (primitive-eval
                                                    #{x 22310}#)))
                                              (values #{exps 21965}#)))
                                          (if (memq 'load #{when-list 22302}#)
                                            (if (let ((#{t 22312}#
                                                        (memq 'compile
                                                              #{when-list 22302}#)))
                                                  (if #{t 22312}#
                                                    #{t 22312}#
                                                    (let ((#{t 22314}#
                                                            (memq 'expand
                                                                  #{when-list 22302}#)))
                                                      (if #{t 22314}#
                                                        #{t 22314}#
                                                        (if (eq? #{m 21962}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 22302}#)
                                                          #f)))))
                                              (#{scan 21811}#
                                                #{body 22303}#
                                                #{r 21959}#
                                                #{w 22255}#
                                                #{s 22256}#
                                                'c&e
                                                '(compile load)
                                                #{mod 22257}#
                                                #{exps 21965}#)
                                              (if (if (eq? #{m 21962}# 'c)
                                                    #t
                                                    (eq? #{m 21962}# 'c&e))
                                                (#{scan 21811}#
                                                  #{body 22303}#
                                                  #{r 21959}#
                                                  #{w 22255}#
                                                  #{s 22256}#
                                                  'c
                                                  '(load)
                                                  #{mod 22257}#
                                                  #{exps 21965}#)
                                                (values #{exps 21965}#)))
                                            (if (let ((#{t 22324}#
                                                        (memq 'compile
                                                              #{when-list 22302}#)))
                                                  (if #{t 22324}#
                                                    #{t 22324}#
                                                    (let ((#{t 22326}#
                                                            (memq 'expand
                                                                  #{when-list 22302}#)))
                                                      (if #{t 22326}#
                                                        #{t 22326}#
                                                        (if (eq? #{m 21962}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 22302}#)
                                                          #f)))))
                                              (begin
                                                (let ((#{x 22331}#
                                                        (#{chi-top-sequence 4371}#
                                                          #{body 22303}#
                                                          #{r 21959}#
                                                          #{w 22255}#
                                                          #{s 22256}#
                                                          'e
                                                          '(eval)
                                                          #{mod 22257}#)))
                                                  (primitive-eval #{x 22331}#))
                                                (values #{exps 21965}#))
                                              (values #{exps 21965}#))))))
                                    #{tmp 22295}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 22254}#)))
                              (if (eqv? #{type 22252}# 'define-syntax-form)
                                (let ((#{n 22342}#
                                        (#{id-var-name 4362}#
                                          #{value 22253}#
                                          #{w 22255}#))
                                      (#{r 22343}#
                                        (#{macros-only-env 4339}#
                                          #{r 21959}#)))
                                  (if (eqv? #{m 21962}# 'c)
                                    (if (memq 'compile #{esew 21963}#)
                                      (let ((#{e 22347}#
                                              (#{chi-install-global 4372}#
                                                #{n 22342}#
                                                (#{chi 4375}#
                                                  #{e 22254}#
                                                  #{r 22343}#
                                                  #{w 22255}#
                                                  #{mod 22257}#))))
                                        (begin
                                          (#{top-level-eval-hook 4302}#
                                            #{e 22347}#
                                            #{mod 22257}#)
                                          (if (memq 'load #{esew 21963}#)
                                            (values
                                              (cons #{e 22347}#
                                                    #{exps 21965}#))
                                            (values #{exps 21965}#))))
                                      (if (memq 'load #{esew 21963}#)
                                        (values
                                          (cons (#{chi-install-global 4372}#
                                                  #{n 22342}#
                                                  (#{chi 4375}#
                                                    #{e 22254}#
                                                    #{r 22343}#
                                                    #{w 22255}#
                                                    #{mod 22257}#))
                                                #{exps 21965}#))
                                        (values #{exps 21965}#)))
                                    (if (eqv? #{m 21962}# 'c&e)
                                      (let ((#{e 22789}#
                                              (#{chi-install-global 4372}#
                                                #{n 22342}#
                                                (#{chi 4375}#
                                                  #{e 22254}#
                                                  #{r 22343}#
                                                  #{w 22255}#
                                                  #{mod 22257}#))))
                                        (begin
                                          (#{top-level-eval-hook 4302}#
                                            #{e 22789}#
                                            #{mod 22257}#)
                                          (values
                                            (cons #{e 22789}#
                                                  #{exps 21965}#))))
                                      (begin
                                        (if (memq 'eval #{esew 21963}#)
                                          (#{top-level-eval-hook 4302}#
                                            (#{chi-install-global 4372}#
                                              #{n 22342}#
                                              (#{chi 4375}#
                                                #{e 22254}#
                                                #{r 22343}#
                                                #{w 22255}#
                                                #{mod 22257}#))
                                            #{mod 22257}#))
                                        (values #{exps 21965}#)))))
                                (if (eqv? #{type 22252}# 'define-form)
                                  (let ((#{n 23433}#
                                          (#{id-var-name 4362}#
                                            #{value 22253}#
                                            #{w 22255}#)))
                                    (let ((#{type 23434}#
                                            (car (let ((#{t 24426}#
                                                         (assq #{n 23433}#
                                                               #{r 21959}#)))
                                                   (if #{t 24426}#
                                                     (cdr #{t 24426}#)
                                                     (if (symbol? #{n 23433}#)
                                                       (let ((#{t 24431}#
                                                               (begin
                                                                 (if (if (not #{mod 22257}#)
                                                                       (current-module)
                                                                       #f)
                                                                   (warn "module system is booted, we should have a module"
                                                                         #{n 23433}#))
                                                                 (let ((#{v 24468}#
                                                                         (module-variable
                                                                           (if #{mod 22257}#
                                                                             (resolve-module
                                                                               (cdr #{mod 22257}#))
                                                                             (current-module))
                                                                           #{n 23433}#)))
                                                                   (if #{v 24468}#
                                                                     (if (variable-bound?
                                                                           #{v 24468}#)
                                                                       (let ((#{val 24477}#
                                                                               (variable-ref
                                                                                 #{v 24468}#)))
                                                                         (if (macro?
                                                                               #{val 24477}#)
                                                                           (if (macro-type
                                                                                 #{val 24477}#)
                                                                             (cons (macro-type
                                                                                     #{val 24477}#)
                                                                                   (macro-binding
                                                                                     #{val 24477}#))
                                                                             #f)
                                                                           #f))
                                                                       #f)
                                                                     #f)))))
                                                         (if #{t 24431}#
                                                           #{t 24431}#
                                                           '(global)))
                                                       '(displaced-lexical)))))))
                                      (if (let ((#{t 23468}# #{type 23434}#))
                                            (if (eqv? #{t 23468}# 'global)
                                              #t
                                              (if (eqv? #{t 23468}# 'core)
                                                #t
                                                (if (eqv? #{t 23468}# 'macro)
                                                  #t
                                                  (eqv? #{t 23468}#
                                                        'module-ref)))))
                                        (begin
                                          (if (if (if (eq? #{m 21962}# 'c)
                                                    #t
                                                    (eq? #{m 21962}# 'c&e))
                                                (if (not (module-local-variable
                                                           (current-module)
                                                           #{n 23433}#))
                                                  (current-module)
                                                  #f)
                                                #f)
                                            (let ((#{old 23632}#
                                                    (module-variable
                                                      (current-module)
                                                      #{n 23433}#)))
                                              (if (if (variable? #{old 23632}#)
                                                    (variable-bound?
                                                      #{old 23632}#)
                                                    #f)
                                                (module-define!
                                                  (current-module)
                                                  #{n 23433}#
                                                  (variable-ref #{old 23632}#))
                                                (module-add!
                                                  (current-module)
                                                  #{n 23433}#
                                                  (make-undefined-variable)))))
                                          (values
                                            (cons (if (eq? #{m 21962}# 'c&e)
                                                    (let ((#{x 23634}#
                                                            (#{build-global-definition 4317}#
                                                              #{s 22256}#
                                                              #{n 23433}#
                                                              (#{chi 4375}#
                                                                #{e 22254}#
                                                                #{r 21959}#
                                                                #{w 22255}#
                                                                #{mod 22257}#))))
                                                      (begin
                                                        (#{top-level-eval-hook 4302}#
                                                          #{x 23634}#
                                                          #{mod 22257}#)
                                                        #{x 23634}#))
                                                    (lambda ()
                                                      (#{build-global-definition 4317}#
                                                        #{s 22256}#
                                                        #{n 23433}#
                                                        (#{chi 4375}#
                                                          #{e 22254}#
                                                          #{r 21959}#
                                                          #{w 22255}#
                                                          #{mod 22257}#))))
                                                  #{exps 21965}#)))
                                        (if (let ((#{t 24161}# #{type 23434}#))
                                              (eqv? #{t 24161}#
                                                    'displaced-lexical))
                                          (syntax-violation
                                            #f
                                            "identifier out of context"
                                            #{e 22254}#
                                            (if (if (null? (car #{w 22255}#))
                                                  (null? (cdr #{w 22255}#))
                                                  #f)
                                              #{value 22253}#
                                              (if (if (vector? #{value 22253}#)
                                                    (if (= (vector-length
                                                             #{value 22253}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{value 22253}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (let ((#{expression 24253}#
                                                        (vector-ref
                                                          #{value 22253}#
                                                          1))
                                                      (#{wrap 24254}#
                                                        (let ((#{w2 24264}#
                                                                (vector-ref
                                                                  #{value 22253}#
                                                                  2)))
                                                          (let ((#{m1 24265}#
                                                                  (car #{w 22255}#))
                                                                (#{s1 24266}#
                                                                  (cdr #{w 22255}#)))
                                                            (if (null? #{m1 24265}#)
                                                              (if (null? #{s1 24266}#)
                                                                #{w2 24264}#
                                                                (cons (car #{w2 24264}#)
                                                                      (let ((#{m2 24283}#
                                                                              (cdr #{w2 24264}#)))
                                                                        (if (null? #{m2 24283}#)
                                                                          #{s1 24266}#
                                                                          (append
                                                                            #{s1 24266}#
                                                                            #{m2 24283}#)))))
                                                              (cons (let ((#{m2 24291}#
                                                                            (car #{w2 24264}#)))
                                                                      (if (null? #{m2 24291}#)
                                                                        #{m1 24265}#
                                                                        (append
                                                                          #{m1 24265}#
                                                                          #{m2 24291}#)))
                                                                    (let ((#{m2 24299}#
                                                                            (cdr #{w2 24264}#)))
                                                                      (if (null? #{m2 24299}#)
                                                                        #{s1 24266}#
                                                                        (append
                                                                          #{s1 24266}#
                                                                          #{m2 24299}#))))))))
                                                      (#{module 24255}#
                                                        (vector-ref
                                                          #{value 22253}#
                                                          3)))
                                                  (vector
                                                    'syntax-object
                                                    #{expression 24253}#
                                                    #{wrap 24254}#
                                                    #{module 24255}#))
                                                (if (null? #{value 22253}#)
                                                  #{value 22253}#
                                                  (vector
                                                    'syntax-object
                                                    #{value 22253}#
                                                    #{w 22255}#
                                                    #{mod 22257}#)))))
                                          (syntax-violation
                                            #f
                                            "cannot define keyword at top level"
                                            #{e 22254}#
                                            (if (if (null? (car #{w 22255}#))
                                                  (null? (cdr #{w 22255}#))
                                                  #f)
                                              #{value 22253}#
                                              (if (if (vector? #{value 22253}#)
                                                    (if (= (vector-length
                                                             #{value 22253}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{value 22253}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (let ((#{expression 24351}#
                                                        (vector-ref
                                                          #{value 22253}#
                                                          1))
                                                      (#{wrap 24352}#
                                                        (let ((#{w2 24362}#
                                                                (vector-ref
                                                                  #{value 22253}#
                                                                  2)))
                                                          (let ((#{m1 24363}#
                                                                  (car #{w 22255}#))
                                                                (#{s1 24364}#
                                                                  (cdr #{w 22255}#)))
                                                            (if (null? #{m1 24363}#)
                                                              (if (null? #{s1 24364}#)
                                                                #{w2 24362}#
                                                                (cons (car #{w2 24362}#)
                                                                      (let ((#{m2 24381}#
                                                                              (cdr #{w2 24362}#)))
                                                                        (if (null? #{m2 24381}#)
                                                                          #{s1 24364}#
                                                                          (append
                                                                            #{s1 24364}#
                                                                            #{m2 24381}#)))))
                                                              (cons (let ((#{m2 24389}#
                                                                            (car #{w2 24362}#)))
                                                                      (if (null? #{m2 24389}#)
                                                                        #{m1 24363}#
                                                                        (append
                                                                          #{m1 24363}#
                                                                          #{m2 24389}#)))
                                                                    (let ((#{m2 24397}#
                                                                            (cdr #{w2 24362}#)))
                                                                      (if (null? #{m2 24397}#)
                                                                        #{s1 24364}#
                                                                        (append
                                                                          #{s1 24364}#
                                                                          #{m2 24397}#))))))))
                                                      (#{module 24353}#
                                                        (vector-ref
                                                          #{value 22253}#
                                                          3)))
                                                  (vector
                                                    'syntax-object
                                                    #{expression 24351}#
                                                    #{wrap 24352}#
                                                    #{module 24353}#))
                                                (if (null? #{value 22253}#)
                                                  #{value 22253}#
                                                  (vector
                                                    'syntax-object
                                                    #{value 22253}#
                                                    #{w 22255}#
                                                    #{mod 22257}#)))))))))
                                  (values
                                    (cons (if (eq? #{m 21962}# 'c&e)
                                            (let ((#{x 24488}#
                                                    (#{chi-expr 4376}#
                                                      #{type 22252}#
                                                      #{value 22253}#
                                                      #{e 22254}#
                                                      #{r 21959}#
                                                      #{w 22255}#
                                                      #{s 22256}#
                                                      #{mod 22257}#)))
                                              (begin
                                                (primitive-eval #{x 24488}#)
                                                #{x 24488}#))
                                            (lambda ()
                                              (#{chi-expr 4376}#
                                                #{type 22252}#
                                                #{value 22253}#
                                                #{e 22254}#
                                                #{r 21959}#
                                                #{w 22255}#
                                                #{s 22256}#
                                                #{mod 22257}#)))
                                          #{exps 21965}#))))))))))
                  (lambda (#{exps 24497}#)
                    (#{scan 21811}#
                      (cdr #{body 21958}#)
                      #{r 21959}#
                      #{w 21960}#
                      #{s 21961}#
                      #{m 21962}#
                      #{esew 21963}#
                      #{mod 21964}#
                      #{exps 24497}#)))))))
         (call-with-values
           (lambda ()
             (#{scan 21811}#
               #{body 21804}#
               #{r 21805}#
               #{w 21806}#
               #{s 21807}#
               #{m 21808}#
               #{esew 21809}#
               #{mod 21810}#
               '()))
           (lambda (#{exps 21814}#)
             (if (null? #{exps 21814}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 0)
                 #{s 21807}#)
               (#{build-sequence 4324}#
                 #{s 21807}#
                 (letrec*
                   ((#{lp 21858}#
                      (lambda (#{in 21954}# #{out 21955}#)
                        (if (null? #{in 21954}#)
                          #{out 21955}#
                          (let ((#{e 21956}# (car #{in 21954}#)))
                            (#{lp 21858}#
                              (cdr #{in 21954}#)
                              (cons (if (procedure? #{e 21956}#)
                                      (#{e 21956}#)
                                      #{e 21956}#)
                                    #{out 21955}#)))))))
                   (#{lp 21858}# #{exps 21814}# '())))))))))
   (#{chi-install-global 4372}#
     (lambda (#{name 24498}# #{e 24499}#)
       (let ((#{exp 24505}#
               (let ((#{args 24516}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #{name 24498}#)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               'macro)
                             #{e 24499}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'make-syntax-transformer
                   #{args 24516}#))))
         (begin
           (if (if (struct? #{exp 24505}#)
                 (eq? (struct-vtable #{exp 24505}#)
                      (vector-ref %expanded-vtables 14))
                 #f)
             (let ((#{meta 24543}# (struct-ref #{exp 24505}# 1)))
               (if (not (assq 'name #{meta 24543}#))
                 (let ((#{v 24550}#
                         (cons (cons 'name #{name 24498}#) #{meta 24543}#)))
                   (struct-set! #{exp 24505}# 1 #{v 24550}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #f
             #{name 24498}#
             #{exp 24505}#)))))
   (#{chi-when-list 4373}#
     (lambda (#{e 24561}# #{when-list 24562}# #{w 24563}#)
       (letrec*
         ((#{f 24564}#
            (lambda (#{when-list 24764}# #{situations 24765}#)
              (if (null? #{when-list 24764}#)
                #{situations 24765}#
                (#{f 24564}#
                  (cdr #{when-list 24764}#)
                  (cons (let ((#{x 24766}#
                                (syntax->datum (car #{when-list 24764}#))))
                          (if (if (eq? #{x 24766}# 'compile)
                                #t
                                (if (eq? #{x 24766}# 'load)
                                  #t
                                  (if (eq? #{x 24766}# 'eval)
                                    #t
                                    (eq? #{x 24766}# 'expand))))
                            #{x 24766}#
                            (syntax-violation
                              'eval-when
                              "invalid situation"
                              #{e 24561}#
                              (let ((#{x 24785}# (car #{when-list 24764}#)))
                                (if (if (null? (car #{w 24563}#))
                                      (null? (cdr #{w 24563}#))
                                      #f)
                                  #{x 24785}#
                                  (if (if (vector? #{x 24785}#)
                                        (if (= (vector-length #{x 24785}#) 4)
                                          (eq? (vector-ref #{x 24785}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 24803}#
                                            (vector-ref #{x 24785}# 1))
                                          (#{wrap 24804}#
                                            (let ((#{w2 24812}#
                                                    (vector-ref
                                                      #{x 24785}#
                                                      2)))
                                              (let ((#{m1 24813}#
                                                      (car #{w 24563}#))
                                                    (#{s1 24814}#
                                                      (cdr #{w 24563}#)))
                                                (if (null? #{m1 24813}#)
                                                  (if (null? #{s1 24814}#)
                                                    #{w2 24812}#
                                                    (cons (car #{w2 24812}#)
                                                          (let ((#{m2 24829}#
                                                                  (cdr #{w2 24812}#)))
                                                            (if (null? #{m2 24829}#)
                                                              #{s1 24814}#
                                                              (append
                                                                #{s1 24814}#
                                                                #{m2 24829}#)))))
                                                  (cons (let ((#{m2 24837}#
                                                                (car #{w2 24812}#)))
                                                          (if (null? #{m2 24837}#)
                                                            #{m1 24813}#
                                                            (append
                                                              #{m1 24813}#
                                                              #{m2 24837}#)))
                                                        (let ((#{m2 24845}#
                                                                (cdr #{w2 24812}#)))
                                                          (if (null? #{m2 24845}#)
                                                            #{s1 24814}#
                                                            (append
                                                              #{s1 24814}#
                                                              #{m2 24845}#))))))))
                                          (#{module 24805}#
                                            (vector-ref #{x 24785}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 24803}#
                                        #{wrap 24804}#
                                        #{module 24805}#))
                                    (if (null? #{x 24785}#)
                                      #{x 24785}#
                                      (vector
                                        'syntax-object
                                        #{x 24785}#
                                        #{w 24563}#
                                        #f))))))))
                        #{situations 24765}#))))))
         (#{f 24564}# #{when-list 24562}# '()))))
   (#{syntax-type 4374}#
     (lambda (#{e 24860}#
              #{r 24861}#
              #{w 24862}#
              #{s 24863}#
              #{rib 24864}#
              #{mod 24865}#
              #{for-car? 24866}#)
       (if (symbol? #{e 24860}#)
         (let ((#{n 24867}#
                 (#{id-var-name 4362}# #{e 24860}# #{w 24862}#)))
           (let ((#{b 24868}#
                   (let ((#{t 25443}# (assq #{n 24867}# #{r 24861}#)))
                     (if #{t 25443}#
                       (cdr #{t 25443}#)
                       (if (symbol? #{n 24867}#)
                         (let ((#{t 25448}#
                                 (begin
                                   (if (if (not #{mod 24865}#)
                                         (current-module)
                                         #f)
                                     (warn "module system is booted, we should have a module"
                                           #{n 24867}#))
                                   (let ((#{v 25485}#
                                           (module-variable
                                             (if #{mod 24865}#
                                               (resolve-module
                                                 (cdr #{mod 24865}#))
                                               (current-module))
                                             #{n 24867}#)))
                                     (if #{v 25485}#
                                       (if (variable-bound? #{v 25485}#)
                                         (let ((#{val 25494}#
                                                 (variable-ref #{v 25485}#)))
                                           (if (macro? #{val 25494}#)
                                             (if (macro-type #{val 25494}#)
                                               (cons (macro-type #{val 25494}#)
                                                     (macro-binding
                                                       #{val 25494}#))
                                               #f)
                                             #f))
                                         #f)
                                       #f)))))
                           (if #{t 25448}# #{t 25448}# '(global)))
                         '(displaced-lexical))))))
             (let ((#{type 24869}# (car #{b 24868}#)))
               (if (let ((#{t 24903}# #{type 24869}#))
                     (eqv? #{t 24903}# 'lexical))
                 (values
                   #{type 24869}#
                   (cdr #{b 24868}#)
                   #{e 24860}#
                   #{w 24862}#
                   #{s 24863}#
                   #{mod 24865}#)
                 (if (let ((#{t 25060}# #{type 24869}#))
                       (eqv? #{t 25060}# 'global))
                   (values
                     #{type 24869}#
                     #{n 24867}#
                     #{e 24860}#
                     #{w 24862}#
                     #{s 24863}#
                     #{mod 24865}#)
                   (if (let ((#{t 25186}# #{type 24869}#))
                         (eqv? #{t 25186}# 'macro))
                     (if #{for-car? 24866}#
                       (values
                         #{type 24869}#
                         (cdr #{b 24868}#)
                         #{e 24860}#
                         #{w 24862}#
                         #{s 24863}#
                         #{mod 24865}#)
                       (#{syntax-type 4374}#
                         (#{chi-macro 4378}#
                           (cdr #{b 24868}#)
                           #{e 24860}#
                           #{r 24861}#
                           #{w 24862}#
                           #{s 24863}#
                           #{rib 24864}#
                           #{mod 24865}#)
                         #{r 24861}#
                         '(())
                         #{s 24863}#
                         #{rib 24864}#
                         #{mod 24865}#
                         #f))
                     (values
                       #{type 24869}#
                       (cdr #{b 24868}#)
                       #{e 24860}#
                       #{w 24862}#
                       #{s 24863}#
                       #{mod 24865}#)))))))
         (if (pair? #{e 24860}#)
           (let ((#{first 25505}# (car #{e 24860}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 4374}#
                   #{first 25505}#
                   #{r 24861}#
                   #{w 24862}#
                   #{s 24863}#
                   #{rib 24864}#
                   #{mod 24865}#
                   #t))
               (lambda (#{ftype 25507}#
                        #{fval 25508}#
                        #{fe 25509}#
                        #{fw 25510}#
                        #{fs 25511}#
                        #{fmod 25512}#)
                 (if (eqv? #{ftype 25507}# 'lexical)
                   (values
                     'lexical-call
                     #{fval 25508}#
                     #{e 24860}#
                     #{w 24862}#
                     #{s 24863}#
                     #{mod 24865}#)
                   (if (eqv? #{ftype 25507}# 'global)
                     (values
                       'global-call
                       (vector
                         'syntax-object
                         #{fval 25508}#
                         #{w 24862}#
                         #{fmod 25512}#)
                       #{e 24860}#
                       #{w 24862}#
                       #{s 24863}#
                       #{mod 24865}#)
                     (if (eqv? #{ftype 25507}# 'macro)
                       (#{syntax-type 4374}#
                         (#{chi-macro 4378}#
                           #{fval 25508}#
                           #{e 24860}#
                           #{r 24861}#
                           #{w 24862}#
                           #{s 24863}#
                           #{rib 24864}#
                           #{mod 24865}#)
                         #{r 24861}#
                         '(())
                         #{s 24863}#
                         #{rib 24864}#
                         #{mod 24865}#
                         #{for-car? 24866}#)
                       (if (eqv? #{ftype 25507}# 'module-ref)
                         (call-with-values
                           (lambda ()
                             (#{fval 25508}#
                               #{e 24860}#
                               #{r 24861}#
                               #{w 24862}#))
                           (lambda (#{e 25533}#
                                    #{r 25534}#
                                    #{w 25535}#
                                    #{s 25536}#
                                    #{mod 25537}#)
                             (#{syntax-type 4374}#
                               #{e 25533}#
                               #{r 25534}#
                               #{w 25535}#
                               #{s 25536}#
                               #{rib 24864}#
                               #{mod 25537}#
                               #{for-car? 24866}#)))
                         (if (eqv? #{ftype 25507}# 'core)
                           (values
                             'core-form
                             #{fval 25508}#
                             #{e 24860}#
                             #{w 24862}#
                             #{s 24863}#
                             #{mod 24865}#)
                           (if (eqv? #{ftype 25507}# 'local-syntax)
                             (values
                               'local-syntax-form
                               #{fval 25508}#
                               #{e 24860}#
                               #{w 24862}#
                               #{s 24863}#
                               #{mod 24865}#)
                             (if (eqv? #{ftype 25507}# 'begin)
                               (values
                                 'begin-form
                                 #f
                                 #{e 24860}#
                                 #{w 24862}#
                                 #{s 24863}#
                                 #{mod 24865}#)
                               (if (eqv? #{ftype 25507}# 'eval-when)
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 24860}#
                                   #{w 24862}#
                                   #{s 24863}#
                                   #{mod 24865}#)
                                 (if (eqv? #{ftype 25507}# 'define)
                                   (let ((#{tmp 25554}#
                                           ($sc-dispatch
                                             #{e 24860}#
                                             '(_ any any))))
                                     (if (if #{tmp 25554}#
                                           (@apply
                                             (lambda (#{name 25558}#
                                                      #{val 25559}#)
                                               (if (symbol? #{name 25558}#)
                                                 #t
                                                 (if (if (vector?
                                                           #{name 25558}#)
                                                       (if (= (vector-length
                                                                #{name 25558}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{name 25558}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (symbol?
                                                     (vector-ref
                                                       #{name 25558}#
                                                       1))
                                                   #f)))
                                             #{tmp 25554}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 25586}# #{val 25587}#)
                                           (values
                                             'define-form
                                             #{name 25586}#
                                             #{val 25587}#
                                             #{w 24862}#
                                             #{s 24863}#
                                             #{mod 24865}#))
                                         #{tmp 25554}#)
                                       (let ((#{tmp 25588}#
                                               ($sc-dispatch
                                                 #{e 24860}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 25588}#
                                               (@apply
                                                 (lambda (#{name 25592}#
                                                          #{args 25593}#
                                                          #{e1 25594}#
                                                          #{e2 25595}#)
                                                   (if (if (symbol?
                                                             #{name 25592}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 25592}#)
                                                               (if (= (vector-length
                                                                        #{name 25592}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 25592}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 25592}#
                                                               1))
                                                           #f))
                                                     (#{valid-bound-ids? 4365}#
                                                       (#{lambda-var-list 4390}#
                                                         #{args 25593}#))
                                                     #f))
                                                 #{tmp 25588}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 26071}#
                                                      #{args 26072}#
                                                      #{e1 26073}#
                                                      #{e2 26074}#)
                                               (values
                                                 'define-form
                                                 (if (if (null? (car #{w 24862}#))
                                                       (null? (cdr #{w 24862}#))
                                                       #f)
                                                   #{name 26071}#
                                                   (if (if (vector?
                                                             #{name 26071}#)
                                                         (if (= (vector-length
                                                                  #{name 26071}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 26071}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (let ((#{expression 26104}#
                                                             (vector-ref
                                                               #{name 26071}#
                                                               1))
                                                           (#{wrap 26105}#
                                                             (let ((#{w2 26115}#
                                                                     (vector-ref
                                                                       #{name 26071}#
                                                                       2)))
                                                               (let ((#{m1 26116}#
                                                                       (car #{w 24862}#))
                                                                     (#{s1 26117}#
                                                                       (cdr #{w 24862}#)))
                                                                 (if (null? #{m1 26116}#)
                                                                   (if (null? #{s1 26117}#)
                                                                     #{w2 26115}#
                                                                     (cons (car #{w2 26115}#)
                                                                           (let ((#{m2 26134}#
                                                                                   (cdr #{w2 26115}#)))
                                                                             (if (null? #{m2 26134}#)
                                                                               #{s1 26117}#
                                                                               (append
                                                                                 #{s1 26117}#
                                                                                 #{m2 26134}#)))))
                                                                   (cons (let ((#{m2 26142}#
                                                                                 (car #{w2 26115}#)))
                                                                           (if (null? #{m2 26142}#)
                                                                             #{m1 26116}#
                                                                             (append
                                                                               #{m1 26116}#
                                                                               #{m2 26142}#)))
                                                                         (let ((#{m2 26150}#
                                                                                 (cdr #{w2 26115}#)))
                                                                           (if (null? #{m2 26150}#)
                                                                             #{s1 26117}#
                                                                             (append
                                                                               #{s1 26117}#
                                                                               #{m2 26150}#))))))))
                                                           (#{module 26106}#
                                                             (vector-ref
                                                               #{name 26071}#
                                                               3)))
                                                       (vector
                                                         'syntax-object
                                                         #{expression 26104}#
                                                         #{wrap 26105}#
                                                         #{module 26106}#))
                                                     (if (null? #{name 26071}#)
                                                       #{name 26071}#
                                                       (vector
                                                         'syntax-object
                                                         #{name 26071}#
                                                         #{w 24862}#
                                                         #{mod 24865}#))))
                                                 (let ((#{e 26176}#
                                                         (cons '#(syntax-object
                                                                  lambda
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(name
                                                                       args
                                                                       e1
                                                                       e2)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1888"
                                                                       "i1889"
                                                                       "i1890"
                                                                       "i1891"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(ftype
                                                                       fval
                                                                       fe
                                                                       fw
                                                                       fs
                                                                       fmod)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1841"
                                                                       "i1842"
                                                                       "i1843"
                                                                       "i1844"
                                                                       "i1845"
                                                                       "i1846"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(first)
                                                                     #((top))
                                                                     #("i1833"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(e
                                                                       r
                                                                       w
                                                                       s
                                                                       rib
                                                                       mod
                                                                       for-car?)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1805"
                                                                       "i1806"
                                                                       "i1807"
                                                                       "i1808"
                                                                       "i1809"
                                                                       "i1810"
                                                                       "i1811"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       chi-lambda-case
                                                                       lambda*-formals
                                                                       chi-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       chi-void
                                                                       eval-local-transformer
                                                                       chi-local-syntax
                                                                       chi-body
                                                                       chi-macro
                                                                       chi-call
                                                                       chi-expr
                                                                       chi
                                                                       syntax-type
                                                                       chi-when-list
                                                                       chi-install-global
                                                                       chi-top-sequence
                                                                       chi-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-primcall
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-call
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-seq
                                                                       make-primcall
                                                                       make-call
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i471"
                                                                      "i469"
                                                                      "i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i402"
                                                                      "i400"
                                                                      "i397"
                                                                      "i396"
                                                                      "i395"
                                                                      "i393"
                                                                      "i392"
                                                                      "i390"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i373"
                                                                      "i371"
                                                                      "i370"
                                                                      "i368"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i361"
                                                                      "i360"
                                                                      "i359"
                                                                      "i357"
                                                                      "i356"
                                                                      "i353"
                                                                      "i351"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i340"
                                                                      "i339"
                                                                      "i337"
                                                                      "i335"
                                                                      "i334"
                                                                      "i331"
                                                                      "i330"
                                                                      "i328"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i309"
                                                                      "i307"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i262"
                                                                      "i259"
                                                                      "i257"
                                                                      "i256"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i244"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile))
                                                               (let ((#{x 26180}#
                                                                       (cons #{args 26072}#
                                                                             (cons #{e1 26073}#
                                                                                   #{e2 26074}#))))
                                                                 (if (if (null? (car #{w 24862}#))
                                                                       (null? (cdr #{w 24862}#))
                                                                       #f)
                                                                   #{x 26180}#
                                                                   (if (if (vector?
                                                                             #{x 26180}#)
                                                                         (if (= (vector-length
                                                                                  #{x 26180}#)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  #{x 26180}#
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((#{expression 26198}#
                                                                             (vector-ref
                                                                               #{x 26180}#
                                                                               1))
                                                                           (#{wrap 26199}#
                                                                             (let ((#{w2 26207}#
                                                                                     (vector-ref
                                                                                       #{x 26180}#
                                                                                       2)))
                                                                               (let ((#{m1 26208}#
                                                                                       (car #{w 24862}#))
                                                                                     (#{s1 26209}#
                                                                                       (cdr #{w 24862}#)))
                                                                                 (if (null? #{m1 26208}#)
                                                                                   (if (null? #{s1 26209}#)
                                                                                     #{w2 26207}#
                                                                                     (cons (car #{w2 26207}#)
                                                                                           (let ((#{m2 26224}#
                                                                                                   (cdr #{w2 26207}#)))
                                                                                             (if (null? #{m2 26224}#)
                                                                                               #{s1 26209}#
                                                                                               (append
                                                                                                 #{s1 26209}#
                                                                                                 #{m2 26224}#)))))
                                                                                   (cons (let ((#{m2 26232}#
                                                                                                 (car #{w2 26207}#)))
                                                                                           (if (null? #{m2 26232}#)
                                                                                             #{m1 26208}#
                                                                                             (append
                                                                                               #{m1 26208}#
                                                                                               #{m2 26232}#)))
                                                                                         (let ((#{m2 26240}#
                                                                                                 (cdr #{w2 26207}#)))
                                                                                           (if (null? #{m2 26240}#)
                                                                                             #{s1 26209}#
                                                                                             (append
                                                                                               #{s1 26209}#
                                                                                               #{m2 26240}#))))))))
                                                                           (#{module 26200}#
                                                                             (vector-ref
                                                                               #{x 26180}#
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         #{expression 26198}#
                                                                         #{wrap 26199}#
                                                                         #{module 26200}#))
                                                                     (if (null? #{x 26180}#)
                                                                       #{x 26180}#
                                                                       (vector
                                                                         'syntax-object
                                                                         #{x 26180}#
                                                                         #{w 24862}#
                                                                         #{mod 24865}#))))))))
                                                   (begin
                                                     (if (if (pair? #{e 26176}#)
                                                           #{s 24863}#
                                                           #f)
                                                       (set-source-properties!
                                                         #{e 26176}#
                                                         #{s 24863}#))
                                                     #{e 26176}#))
                                                 '(())
                                                 #{s 24863}#
                                                 #{mod 24865}#))
                                             #{tmp 25588}#)
                                           (let ((#{tmp 26259}#
                                                   ($sc-dispatch
                                                     #{e 24860}#
                                                     '(_ any))))
                                             (if (if #{tmp 26259}#
                                                   (@apply
                                                     (lambda (#{name 26263}#)
                                                       (if (symbol?
                                                             #{name 26263}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 26263}#)
                                                               (if (= (vector-length
                                                                        #{name 26263}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 26263}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 26263}#
                                                               1))
                                                           #f)))
                                                     #{tmp 26259}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 26290}#)
                                                   (values
                                                     'define-form
                                                     (if (if (null? (car #{w 24862}#))
                                                           (null? (cdr #{w 24862}#))
                                                           #f)
                                                       #{name 26290}#
                                                       (if (if (vector?
                                                                 #{name 26290}#)
                                                             (if (= (vector-length
                                                                      #{name 26290}#)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      #{name 26290}#
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (let ((#{expression 26320}#
                                                                 (vector-ref
                                                                   #{name 26290}#
                                                                   1))
                                                               (#{wrap 26321}#
                                                                 (let ((#{w2 26331}#
                                                                         (vector-ref
                                                                           #{name 26290}#
                                                                           2)))
                                                                   (let ((#{m1 26332}#
                                                                           (car #{w 24862}#))
                                                                         (#{s1 26333}#
                                                                           (cdr #{w 24862}#)))
                                                                     (if (null? #{m1 26332}#)
                                                                       (if (null? #{s1 26333}#)
                                                                         #{w2 26331}#
                                                                         (cons (car #{w2 26331}#)
                                                                               (let ((#{m2 26350}#
                                                                                       (cdr #{w2 26331}#)))
                                                                                 (if (null? #{m2 26350}#)
                                                                                   #{s1 26333}#
                                                                                   (append
                                                                                     #{s1 26333}#
                                                                                     #{m2 26350}#)))))
                                                                       (cons (let ((#{m2 26358}#
                                                                                     (car #{w2 26331}#)))
                                                                               (if (null? #{m2 26358}#)
                                                                                 #{m1 26332}#
                                                                                 (append
                                                                                   #{m1 26332}#
                                                                                   #{m2 26358}#)))
                                                                             (let ((#{m2 26366}#
                                                                                     (cdr #{w2 26331}#)))
                                                                               (if (null? #{m2 26366}#)
                                                                                 #{s1 26333}#
                                                                                 (append
                                                                                   #{s1 26333}#
                                                                                   #{m2 26366}#))))))))
                                                               (#{module 26322}#
                                                                 (vector-ref
                                                                   #{name 26290}#
                                                                   3)))
                                                           (vector
                                                             'syntax-object
                                                             #{expression 26320}#
                                                             #{wrap 26321}#
                                                             #{module 26322}#))
                                                         (if (null? #{name 26290}#)
                                                           #{name 26290}#
                                                           (vector
                                                             'syntax-object
                                                             #{name 26290}#
                                                             #{w 24862}#
                                                             #{mod 24865}#))))
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1901"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1841"
                                                              "i1842"
                                                              "i1843"
                                                              "i1844"
                                                              "i1845"
                                                              "i1846"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1833"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1805"
                                                              "i1806"
                                                              "i1807"
                                                              "i1808"
                                                              "i1809"
                                                              "i1810"
                                                              "i1811"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i402"
                                                             "i400"
                                                             "i397"
                                                             "i396"
                                                             "i395"
                                                             "i393"
                                                             "i392"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i373"
                                                             "i371"
                                                             "i370"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i361"
                                                             "i360"
                                                             "i359"
                                                             "i357"
                                                             "i356"
                                                             "i353"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1901"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1841"
                                                              "i1842"
                                                              "i1843"
                                                              "i1844"
                                                              "i1845"
                                                              "i1846"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1833"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1805"
                                                              "i1806"
                                                              "i1807"
                                                              "i1808"
                                                              "i1809"
                                                              "i1810"
                                                              "i1811"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i402"
                                                             "i400"
                                                             "i397"
                                                             "i396"
                                                             "i395"
                                                             "i393"
                                                             "i392"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i373"
                                                             "i371"
                                                             "i370"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i361"
                                                             "i360"
                                                             "i359"
                                                             "i357"
                                                             "i356"
                                                             "i353"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1901"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1841"
                                                              "i1842"
                                                              "i1843"
                                                              "i1844"
                                                              "i1845"
                                                              "i1846"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1833"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1805"
                                                              "i1806"
                                                              "i1807"
                                                              "i1808"
                                                              "i1809"
                                                              "i1810"
                                                              "i1811"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i402"
                                                             "i400"
                                                             "i397"
                                                             "i396"
                                                             "i395"
                                                             "i393"
                                                             "i392"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i373"
                                                             "i371"
                                                             "i370"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i361"
                                                             "i360"
                                                             "i359"
                                                             "i357"
                                                             "i356"
                                                             "i353"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i340"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i334"
                                                             "i331"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i262"
                                                             "i259"
                                                             "i257"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i244"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 24863}#
                                                     #{mod 24865}#))
                                                 #{tmp 26259}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 24860}#)))))))
                                   (if (eqv? #{ftype 25507}# 'define-syntax)
                                     (let ((#{tmp 26405}#
                                             ($sc-dispatch
                                               #{e 24860}#
                                               '(_ any any))))
                                       (if (if #{tmp 26405}#
                                             (@apply
                                               (lambda (#{name 26409}#
                                                        #{val 26410}#)
                                                 (if (symbol? #{name 26409}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 26409}#)
                                                         (if (= (vector-length
                                                                  #{name 26409}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 26409}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 26409}#
                                                         1))
                                                     #f)))
                                               #{tmp 26405}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 26437}#
                                                    #{val 26438}#)
                                             (values
                                               'define-syntax-form
                                               #{name 26437}#
                                               #{val 26438}#
                                               #{w 24862}#
                                               #{s 24863}#
                                               #{mod 24865}#))
                                           #{tmp 26405}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{e 24860}#)))
                                     (values
                                       'call
                                       #f
                                       #{e 24860}#
                                       #{w 24862}#
                                       #{s 24863}#
                                       #{mod 24865}#))))))))))))))
           (if (if (vector? #{e 24860}#)
                 (if (= (vector-length #{e 24860}#) 4)
                   (eq? (vector-ref #{e 24860}# 0) 'syntax-object)
                   #f)
                 #f)
             (#{syntax-type 4374}#
               (vector-ref #{e 24860}# 1)
               #{r 24861}#
               (let ((#{w2 26463}# (vector-ref #{e 24860}# 2)))
                 (let ((#{m1 26464}# (car #{w 24862}#))
                       (#{s1 26465}# (cdr #{w 24862}#)))
                   (if (null? #{m1 26464}#)
                     (if (null? #{s1 26465}#)
                       #{w2 26463}#
                       (cons (car #{w2 26463}#)
                             (let ((#{m2 26476}# (cdr #{w2 26463}#)))
                               (if (null? #{m2 26476}#)
                                 #{s1 26465}#
                                 (append #{s1 26465}# #{m2 26476}#)))))
                     (cons (let ((#{m2 26484}# (car #{w2 26463}#)))
                             (if (null? #{m2 26484}#)
                               #{m1 26464}#
                               (append #{m1 26464}# #{m2 26484}#)))
                           (let ((#{m2 26492}# (cdr #{w2 26463}#)))
                             (if (null? #{m2 26492}#)
                               #{s1 26465}#
                               (append #{s1 26465}# #{m2 26492}#)))))))
               (let ((#{t 26497}#
                       (#{source-annotation 4336}# #{e 24860}#)))
                 (if #{t 26497}# #{t 26497}# #{s 24863}#))
               #{rib 24864}#
               (let ((#{t 26779}# (vector-ref #{e 24860}# 3)))
                 (if #{t 26779}# #{t 26779}# #{mod 24865}#))
               #{for-car? 24866}#)
             (if (self-evaluating? #{e 24860}#)
               (values
                 'constant
                 #f
                 #{e 24860}#
                 #{w 24862}#
                 #{s 24863}#
                 #{mod 24865}#)
               (values
                 'other
                 #f
                 #{e 24860}#
                 #{w 24862}#
                 #{s 24863}#
                 #{mod 24865}#)))))))
   (#{chi 4375}#
     (lambda (#{e 26788}#
              #{r 26789}#
              #{w 26790}#
              #{mod 26791}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 4374}#
             #{e 26788}#
             #{r 26789}#
             #{w 26790}#
             (#{source-annotation 4336}# #{e 26788}#)
             #f
             #{mod 26791}#
             #f))
         (lambda (#{type 26983}#
                  #{value 26984}#
                  #{e 26985}#
                  #{w 26986}#
                  #{s 26987}#
                  #{mod 26988}#)
           (#{chi-expr 4376}#
             #{type 26983}#
             #{value 26984}#
             #{e 26985}#
             #{r 26789}#
             #{w 26986}#
             #{s 26987}#
             #{mod 26988}#)))))
   (#{chi-expr 4376}#
     (lambda (#{type 26991}#
              #{value 26992}#
              #{e 26993}#
              #{r 26994}#
              #{w 26995}#
              #{s 26996}#
              #{mod 26997}#)
       (if (eqv? #{type 26991}# 'lexical)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{s 26996}#
           #{e 26993}#
           #{value 26992}#)
         (if (if (eqv? #{type 26991}# 'core)
               #t
               (eqv? #{type 26991}# 'core-form))
           (#{value 26992}#
             #{e 26993}#
             #{r 26994}#
             #{w 26995}#
             #{s 26996}#
             #{mod 26997}#)
           (if (eqv? #{type 26991}# 'module-ref)
             (call-with-values
               (lambda ()
                 (#{value 26992}#
                   #{e 26993}#
                   #{r 26994}#
                   #{w 26995}#))
               (lambda (#{e 27023}#
                        #{r 27024}#
                        #{w 27025}#
                        #{s 27026}#
                        #{mod 27027}#)
                 (#{chi 4375}#
                   #{e 27023}#
                   #{r 27024}#
                   #{w 27025}#
                   #{mod 27027}#)))
             (if (eqv? #{type 26991}# 'lexical-call)
               (#{chi-call 4377}#
                 (let ((#{id 27204}# (car #{e 26993}#)))
                   (#{build-lexical-reference 4312}#
                     'fun
                     (#{source-annotation 4336}# #{id 27204}#)
                     (if (if (vector? #{id 27204}#)
                           (if (= (vector-length #{id 27204}#) 4)
                             (eq? (vector-ref #{id 27204}# 0) 'syntax-object)
                             #f)
                           #f)
                       (syntax->datum #{id 27204}#)
                       #{id 27204}#)
                     #{value 26992}#))
                 #{e 26993}#
                 #{r 26994}#
                 #{w 26995}#
                 #{s 26996}#
                 #{mod 26997}#)
               (if (eqv? #{type 26991}# 'global-call)
                 (#{chi-call 4377}#
                   (#{build-global-reference 4315}#
                     (#{source-annotation 4336}# (car #{e 26993}#))
                     (if (if (vector? #{value 26992}#)
                           (if (= (vector-length #{value 26992}#) 4)
                             (eq? (vector-ref #{value 26992}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 26992}# 1)
                       #{value 26992}#)
                     (if (if (vector? #{value 26992}#)
                           (if (= (vector-length #{value 26992}#) 4)
                             (eq? (vector-ref #{value 26992}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 26992}# 3)
                       #{mod 26997}#))
                   #{e 26993}#
                   #{r 26994}#
                   #{w 26995}#
                   #{s 26996}#
                   #{mod 26997}#)
                 (if (eqv? #{type 26991}# 'constant)
                   (let ((#{exp 27897}#
                           (#{strip 4388}#
                             (let ((#{x 27910}#
                                     (begin
                                       (if (if (pair? #{e 26993}#)
                                             #{s 26996}#
                                             #f)
                                         (set-source-properties!
                                           #{e 26993}#
                                           #{s 26996}#))
                                       #{e 26993}#)))
                               (if (if (null? (car #{w 26995}#))
                                     (null? (cdr #{w 26995}#))
                                     #f)
                                 #{x 27910}#
                                 (if (if (vector? #{x 27910}#)
                                       (if (= (vector-length #{x 27910}#) 4)
                                         (eq? (vector-ref #{x 27910}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (let ((#{expression 27942}#
                                           (vector-ref #{x 27910}# 1))
                                         (#{wrap 27943}#
                                           (let ((#{w2 27951}#
                                                   (vector-ref #{x 27910}# 2)))
                                             (let ((#{m1 27952}#
                                                     (car #{w 26995}#))
                                                   (#{s1 27953}#
                                                     (cdr #{w 26995}#)))
                                               (if (null? #{m1 27952}#)
                                                 (if (null? #{s1 27953}#)
                                                   #{w2 27951}#
                                                   (cons (car #{w2 27951}#)
                                                         (let ((#{m2 27968}#
                                                                 (cdr #{w2 27951}#)))
                                                           (if (null? #{m2 27968}#)
                                                             #{s1 27953}#
                                                             (append
                                                               #{s1 27953}#
                                                               #{m2 27968}#)))))
                                                 (cons (let ((#{m2 27976}#
                                                               (car #{w2 27951}#)))
                                                         (if (null? #{m2 27976}#)
                                                           #{m1 27952}#
                                                           (append
                                                             #{m1 27952}#
                                                             #{m2 27976}#)))
                                                       (let ((#{m2 27984}#
                                                               (cdr #{w2 27951}#)))
                                                         (if (null? #{m2 27984}#)
                                                           #{s1 27953}#
                                                           (append
                                                             #{s1 27953}#
                                                             #{m2 27984}#))))))))
                                         (#{module 27944}#
                                           (vector-ref #{x 27910}# 3)))
                                     (vector
                                       'syntax-object
                                       #{expression 27942}#
                                       #{wrap 27943}#
                                       #{module 27944}#))
                                   (if (null? #{x 27910}#)
                                     #{x 27910}#
                                     (vector
                                       'syntax-object
                                       #{x 27910}#
                                       #{w 26995}#
                                       #{mod 26997}#)))))
                             '(()))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 1)
                       #{s 26996}#
                       #{exp 27897}#))
                   (if (eqv? #{type 26991}# 'global)
                     (#{analyze-variable 4314}#
                       #{mod 26997}#
                       #{value 26992}#
                       (lambda (#{mod 28009}# #{var 28010}# #{public? 28011}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #{s 26996}#
                           #{mod 28009}#
                           #{var 28010}#
                           #{public? 28011}#))
                       (lambda (#{var 28019}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #{s 26996}#
                           #{var 28019}#)))
                     (if (eqv? #{type 26991}# 'call)
                       (#{chi-call 4377}#
                         (#{chi 4375}#
                           (car #{e 26993}#)
                           #{r 26994}#
                           #{w 26995}#
                           #{mod 26997}#)
                         #{e 26993}#
                         #{r 26994}#
                         #{w 26995}#
                         #{s 26996}#
                         #{mod 26997}#)
                       (if (eqv? #{type 26991}# 'begin-form)
                         (let ((#{tmp 28193}#
                                 ($sc-dispatch
                                   #{e 26993}#
                                   '(_ any . each-any))))
                           (if #{tmp 28193}#
                             (@apply
                               (lambda (#{e1 28197}# #{e2 28198}#)
                                 (#{chi-sequence 4370}#
                                   (cons #{e1 28197}# #{e2 28198}#)
                                   #{r 26994}#
                                   #{w 26995}#
                                   #{s 26996}#
                                   #{mod 26997}#))
                               #{tmp 28193}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{e 26993}#)))
                         (if (eqv? #{type 26991}# 'local-syntax-form)
                           (#{chi-local-syntax 4380}#
                             #{value 26992}#
                             #{e 26993}#
                             #{r 26994}#
                             #{w 26995}#
                             #{s 26996}#
                             #{mod 26997}#
                             #{chi-sequence 4370}#)
                           (if (eqv? #{type 26991}# 'eval-when-form)
                             (let ((#{tmp 28374}#
                                     ($sc-dispatch
                                       #{e 26993}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 28374}#
                                 (@apply
                                   (lambda (#{x 28378}#
                                            #{e1 28379}#
                                            #{e2 28380}#)
                                     (let ((#{when-list 28381}#
                                             (#{chi-when-list 4373}#
                                               #{e 26993}#
                                               #{x 28378}#
                                               #{w 26995}#)))
                                       (if (memq 'eval #{when-list 28381}#)
                                         (#{chi-sequence 4370}#
                                           (cons #{e1 28379}# #{e2 28380}#)
                                           #{r 26994}#
                                           #{w 26995}#
                                           #{s 26996}#
                                           #{mod 26997}#)
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))))
                                   #{tmp 28374}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 26993}#)))
                             (if (if (eqv? #{type 26991}# 'define-form)
                                   #t
                                   (eqv? #{type 26991}# 'define-syntax-form))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 26993}#
                                 (if (if (null? (car #{w 26995}#))
                                       (null? (cdr #{w 26995}#))
                                       #f)
                                   #{value 26992}#
                                   (if (if (vector? #{value 26992}#)
                                         (if (= (vector-length #{value 26992}#)
                                                4)
                                           (eq? (vector-ref #{value 26992}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 28530}#
                                             (vector-ref #{value 26992}# 1))
                                           (#{wrap 28531}#
                                             (let ((#{w2 28541}#
                                                     (vector-ref
                                                       #{value 26992}#
                                                       2)))
                                               (let ((#{m1 28542}#
                                                       (car #{w 26995}#))
                                                     (#{s1 28543}#
                                                       (cdr #{w 26995}#)))
                                                 (if (null? #{m1 28542}#)
                                                   (if (null? #{s1 28543}#)
                                                     #{w2 28541}#
                                                     (cons (car #{w2 28541}#)
                                                           (let ((#{m2 28560}#
                                                                   (cdr #{w2 28541}#)))
                                                             (if (null? #{m2 28560}#)
                                                               #{s1 28543}#
                                                               (append
                                                                 #{s1 28543}#
                                                                 #{m2 28560}#)))))
                                                   (cons (let ((#{m2 28568}#
                                                                 (car #{w2 28541}#)))
                                                           (if (null? #{m2 28568}#)
                                                             #{m1 28542}#
                                                             (append
                                                               #{m1 28542}#
                                                               #{m2 28568}#)))
                                                         (let ((#{m2 28576}#
                                                                 (cdr #{w2 28541}#)))
                                                           (if (null? #{m2 28576}#)
                                                             #{s1 28543}#
                                                             (append
                                                               #{s1 28543}#
                                                               #{m2 28576}#))))))))
                                           (#{module 28532}#
                                             (vector-ref #{value 26992}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 28530}#
                                         #{wrap 28531}#
                                         #{module 28532}#))
                                     (if (null? #{value 26992}#)
                                       #{value 26992}#
                                       (vector
                                         'syntax-object
                                         #{value 26992}#
                                         #{w 26995}#
                                         #{mod 26997}#)))))
                               (if (eqv? #{type 26991}# 'syntax)
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (let ((#{x 28611}#
                                           (begin
                                             (if (if (pair? #{e 26993}#)
                                                   #{s 26996}#
                                                   #f)
                                               (set-source-properties!
                                                 #{e 26993}#
                                                 #{s 26996}#))
                                             #{e 26993}#)))
                                     (if (if (null? (car #{w 26995}#))
                                           (null? (cdr #{w 26995}#))
                                           #f)
                                       #{x 28611}#
                                       (if (if (vector? #{x 28611}#)
                                             (if (= (vector-length #{x 28611}#)
                                                    4)
                                               (eq? (vector-ref #{x 28611}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (let ((#{expression 28643}#
                                                 (vector-ref #{x 28611}# 1))
                                               (#{wrap 28644}#
                                                 (let ((#{w2 28652}#
                                                         (vector-ref
                                                           #{x 28611}#
                                                           2)))
                                                   (let ((#{m1 28653}#
                                                           (car #{w 26995}#))
                                                         (#{s1 28654}#
                                                           (cdr #{w 26995}#)))
                                                     (if (null? #{m1 28653}#)
                                                       (if (null? #{s1 28654}#)
                                                         #{w2 28652}#
                                                         (cons (car #{w2 28652}#)
                                                               (let ((#{m2 28669}#
                                                                       (cdr #{w2 28652}#)))
                                                                 (if (null? #{m2 28669}#)
                                                                   #{s1 28654}#
                                                                   (append
                                                                     #{s1 28654}#
                                                                     #{m2 28669}#)))))
                                                       (cons (let ((#{m2 28677}#
                                                                     (car #{w2 28652}#)))
                                                               (if (null? #{m2 28677}#)
                                                                 #{m1 28653}#
                                                                 (append
                                                                   #{m1 28653}#
                                                                   #{m2 28677}#)))
                                                             (let ((#{m2 28685}#
                                                                     (cdr #{w2 28652}#)))
                                                               (if (null? #{m2 28685}#)
                                                                 #{s1 28654}#
                                                                 (append
                                                                   #{s1 28654}#
                                                                   #{m2 28685}#))))))))
                                               (#{module 28645}#
                                                 (vector-ref #{x 28611}# 3)))
                                           (vector
                                             'syntax-object
                                             #{expression 28643}#
                                             #{wrap 28644}#
                                             #{module 28645}#))
                                         (if (null? #{x 28611}#)
                                           #{x 28611}#
                                           (vector
                                             'syntax-object
                                             #{x 28611}#
                                             #{w 26995}#
                                             #{mod 26997}#))))))
                                 (if (eqv? #{type 26991}# 'displaced-lexical)
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (let ((#{x 28712}#
                                             (begin
                                               (if (if (pair? #{e 26993}#)
                                                     #{s 26996}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 26993}#
                                                   #{s 26996}#))
                                               #{e 26993}#)))
                                       (if (if (null? (car #{w 26995}#))
                                             (null? (cdr #{w 26995}#))
                                             #f)
                                         #{x 28712}#
                                         (if (if (vector? #{x 28712}#)
                                               (if (= (vector-length
                                                        #{x 28712}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 28712}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((#{expression 28744}#
                                                   (vector-ref #{x 28712}# 1))
                                                 (#{wrap 28745}#
                                                   (let ((#{w2 28753}#
                                                           (vector-ref
                                                             #{x 28712}#
                                                             2)))
                                                     (let ((#{m1 28754}#
                                                             (car #{w 26995}#))
                                                           (#{s1 28755}#
                                                             (cdr #{w 26995}#)))
                                                       (if (null? #{m1 28754}#)
                                                         (if (null? #{s1 28755}#)
                                                           #{w2 28753}#
                                                           (cons (car #{w2 28753}#)
                                                                 (let ((#{m2 28770}#
                                                                         (cdr #{w2 28753}#)))
                                                                   (if (null? #{m2 28770}#)
                                                                     #{s1 28755}#
                                                                     (append
                                                                       #{s1 28755}#
                                                                       #{m2 28770}#)))))
                                                         (cons (let ((#{m2 28778}#
                                                                       (car #{w2 28753}#)))
                                                                 (if (null? #{m2 28778}#)
                                                                   #{m1 28754}#
                                                                   (append
                                                                     #{m1 28754}#
                                                                     #{m2 28778}#)))
                                                               (let ((#{m2 28786}#
                                                                       (cdr #{w2 28753}#)))
                                                                 (if (null? #{m2 28786}#)
                                                                   #{s1 28755}#
                                                                   (append
                                                                     #{s1 28755}#
                                                                     #{m2 28786}#))))))))
                                                 (#{module 28746}#
                                                   (vector-ref #{x 28712}# 3)))
                                             (vector
                                               'syntax-object
                                               #{expression 28744}#
                                               #{wrap 28745}#
                                               #{module 28746}#))
                                           (if (null? #{x 28712}#)
                                             #{x 28712}#
                                             (vector
                                               'syntax-object
                                               #{x 28712}#
                                               #{w 26995}#
                                               #{mod 26997}#))))))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (let ((#{x 28810}#
                                             (begin
                                               (if (if (pair? #{e 26993}#)
                                                     #{s 26996}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 26993}#
                                                   #{s 26996}#))
                                               #{e 26993}#)))
                                       (if (if (null? (car #{w 26995}#))
                                             (null? (cdr #{w 26995}#))
                                             #f)
                                         #{x 28810}#
                                         (if (if (vector? #{x 28810}#)
                                               (if (= (vector-length
                                                        #{x 28810}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 28810}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((#{expression 28842}#
                                                   (vector-ref #{x 28810}# 1))
                                                 (#{wrap 28843}#
                                                   (let ((#{w2 28851}#
                                                           (vector-ref
                                                             #{x 28810}#
                                                             2)))
                                                     (let ((#{m1 28852}#
                                                             (car #{w 26995}#))
                                                           (#{s1 28853}#
                                                             (cdr #{w 26995}#)))
                                                       (if (null? #{m1 28852}#)
                                                         (if (null? #{s1 28853}#)
                                                           #{w2 28851}#
                                                           (cons (car #{w2 28851}#)
                                                                 (let ((#{m2 28868}#
                                                                         (cdr #{w2 28851}#)))
                                                                   (if (null? #{m2 28868}#)
                                                                     #{s1 28853}#
                                                                     (append
                                                                       #{s1 28853}#
                                                                       #{m2 28868}#)))))
                                                         (cons (let ((#{m2 28876}#
                                                                       (car #{w2 28851}#)))
                                                                 (if (null? #{m2 28876}#)
                                                                   #{m1 28852}#
                                                                   (append
                                                                     #{m1 28852}#
                                                                     #{m2 28876}#)))
                                                               (let ((#{m2 28884}#
                                                                       (cdr #{w2 28851}#)))
                                                                 (if (null? #{m2 28884}#)
                                                                   #{s1 28853}#
                                                                   (append
                                                                     #{s1 28853}#
                                                                     #{m2 28884}#))))))))
                                                 (#{module 28844}#
                                                   (vector-ref #{x 28810}# 3)))
                                             (vector
                                               'syntax-object
                                               #{expression 28842}#
                                               #{wrap 28843}#
                                               #{module 28844}#))
                                           (if (null? #{x 28810}#)
                                             #{x 28810}#
                                             (vector
                                               'syntax-object
                                               #{x 28810}#
                                               #{w 26995}#
                                               #{mod 26997}#))))))))))))))))))))))
   (#{chi-call 4377}#
     (lambda (#{x 28899}#
              #{e 28900}#
              #{r 28901}#
              #{w 28902}#
              #{s 28903}#
              #{mod 28904}#)
       (let ((#{tmp 28906}#
               ($sc-dispatch #{e 28900}# '(any . each-any))))
         (if #{tmp 28906}#
           (@apply
             (lambda (#{e0 28910}# #{e1 28911}#)
               (#{build-call 4309}#
                 #{s 28903}#
                 #{x 28899}#
                 (map (lambda (#{e 29001}#)
                        (#{chi 4375}#
                          #{e 29001}#
                          #{r 28901}#
                          #{w 28902}#
                          #{mod 28904}#))
                      #{e1 28911}#)))
             #{tmp 28906}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 28900}#)))))
   (#{chi-macro 4378}#
     (lambda (#{p 29087}#
              #{e 29088}#
              #{r 29089}#
              #{w 29090}#
              #{s 29091}#
              #{rib 29092}#
              #{mod 29093}#)
       (letrec*
         ((#{rebuild-macro-output 29094}#
            (lambda (#{x 29201}# #{m 29202}#)
              (if (pair? #{x 29201}#)
                (let ((#{e 29206}#
                        (cons (#{rebuild-macro-output 29094}#
                                (car #{x 29201}#)
                                #{m 29202}#)
                              (#{rebuild-macro-output 29094}#
                                (cdr #{x 29201}#)
                                #{m 29202}#))))
                  (begin
                    (if (if (pair? #{e 29206}#) #{s 29091}# #f)
                      (set-source-properties! #{e 29206}# #{s 29091}#))
                    #{e 29206}#))
                (if (if (vector? #{x 29201}#)
                      (if (= (vector-length #{x 29201}#) 4)
                        (eq? (vector-ref #{x 29201}# 0) 'syntax-object)
                        #f)
                      #f)
                  (let ((#{w 29222}# (vector-ref #{x 29201}# 2)))
                    (let ((#{ms 29223}# (car #{w 29222}#))
                          (#{s 29224}# (cdr #{w 29222}#)))
                      (if (if (pair? #{ms 29223}#)
                            (eq? (car #{ms 29223}#) #f)
                            #f)
                        (let ((#{expression 29232}# (vector-ref #{x 29201}# 1))
                              (#{wrap 29233}#
                                (cons (cdr #{ms 29223}#)
                                      (if #{rib 29092}#
                                        (cons #{rib 29092}# (cdr #{s 29224}#))
                                        (cdr #{s 29224}#))))
                              (#{module 29234}# (vector-ref #{x 29201}# 3)))
                          (vector
                            'syntax-object
                            #{expression 29232}#
                            #{wrap 29233}#
                            #{module 29234}#))
                        (let ((#{expression 29244}#
                                (let ((#{e 29249}# (vector-ref #{x 29201}# 1)))
                                  (begin
                                    (if (if (pair? #{e 29249}#) #{s 29224}# #f)
                                      (set-source-properties!
                                        #{e 29249}#
                                        #{s 29224}#))
                                    #{e 29249}#)))
                              (#{wrap 29245}#
                                (cons (cons #{m 29202}# #{ms 29223}#)
                                      (if #{rib 29092}#
                                        (cons #{rib 29092}#
                                              (cons 'shift #{s 29224}#))
                                        (cons 'shift #{s 29224}#))))
                              (#{module 29246}# (vector-ref #{x 29201}# 3)))
                          (vector
                            'syntax-object
                            #{expression 29244}#
                            #{wrap 29245}#
                            #{module 29246}#)))))
                  (if (vector? #{x 29201}#)
                    (let ((#{n 29261}# (vector-length #{x 29201}#)))
                      (let ((#{v 29262}#
                              (let ((#{e 29270}# (make-vector #{n 29261}#)))
                                (begin
                                  (if (if (pair? #{e 29270}#) #{x 29201}# #f)
                                    (set-source-properties!
                                      #{e 29270}#
                                      #{x 29201}#))
                                  #{e 29270}#))))
                        (letrec*
                          ((#{loop 29263}#
                             (lambda (#{i 29324}#)
                               (if (= #{i 29324}# #{n 29261}#)
                                 #{v 29262}#
                                 (begin
                                   (vector-set!
                                     #{v 29262}#
                                     #{i 29324}#
                                     (#{rebuild-macro-output 29094}#
                                       (vector-ref #{x 29201}# #{i 29324}#)
                                       #{m 29202}#))
                                   (#{loop 29263}# (#{1+}# #{i 29324}#)))))))
                          (#{loop 29263}# 0))))
                    (if (symbol? #{x 29201}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (let ((#{s 29330}# (cdr #{w 29090}#)))
                          (let ((#{x 29334}#
                                  (begin
                                    (if (if (pair? #{e 29088}#) #{s 29330}# #f)
                                      (set-source-properties!
                                        #{e 29088}#
                                        #{s 29330}#))
                                    #{e 29088}#)))
                            (if (if (null? (car #{w 29090}#))
                                  (null? (cdr #{w 29090}#))
                                  #f)
                              #{x 29334}#
                              (if (if (vector? #{x 29334}#)
                                    (if (= (vector-length #{x 29334}#) 4)
                                      (eq? (vector-ref #{x 29334}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 29366}#
                                        (vector-ref #{x 29334}# 1))
                                      (#{wrap 29367}#
                                        (let ((#{w2 29375}#
                                                (vector-ref #{x 29334}# 2)))
                                          (let ((#{m1 29376}#
                                                  (car #{w 29090}#))
                                                (#{s1 29377}#
                                                  (cdr #{w 29090}#)))
                                            (if (null? #{m1 29376}#)
                                              (if (null? #{s1 29377}#)
                                                #{w2 29375}#
                                                (cons (car #{w2 29375}#)
                                                      (let ((#{m2 29392}#
                                                              (cdr #{w2 29375}#)))
                                                        (if (null? #{m2 29392}#)
                                                          #{s1 29377}#
                                                          (append
                                                            #{s1 29377}#
                                                            #{m2 29392}#)))))
                                              (cons (let ((#{m2 29400}#
                                                            (car #{w2 29375}#)))
                                                      (if (null? #{m2 29400}#)
                                                        #{m1 29376}#
                                                        (append
                                                          #{m1 29376}#
                                                          #{m2 29400}#)))
                                                    (let ((#{m2 29408}#
                                                            (cdr #{w2 29375}#)))
                                                      (if (null? #{m2 29408}#)
                                                        #{s1 29377}#
                                                        (append
                                                          #{s1 29377}#
                                                          #{m2 29408}#))))))))
                                      (#{module 29368}#
                                        (vector-ref #{x 29334}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 29366}#
                                    #{wrap 29367}#
                                    #{module 29368}#))
                                (if (null? #{x 29334}#)
                                  #{x 29334}#
                                  (vector
                                    'syntax-object
                                    #{x 29334}#
                                    #{w 29090}#
                                    #{mod 29093}#))))))
                        #{x 29201}#)
                      (begin
                        (if (if (pair? #{x 29201}#) #{s 29091}# #f)
                          (set-source-properties! #{x 29201}# #{s 29091}#))
                        #{x 29201}#))))))))
         (#{rebuild-macro-output 29094}#
           (#{p 29087}#
             (let ((#{w 29101}#
                     (cons (cons #f (car #{w 29090}#))
                           (cons 'shift (cdr #{w 29090}#)))))
               (let ((#{x 29106}#
                       (begin
                         (if (if (pair? #{e 29088}#) #{s 29091}# #f)
                           (set-source-properties! #{e 29088}# #{s 29091}#))
                         #{e 29088}#)))
                 (if (if (null? (car #{w 29101}#))
                       (null? (cdr #{w 29101}#))
                       #f)
                   #{x 29106}#
                   (if (if (vector? #{x 29106}#)
                         (if (= (vector-length #{x 29106}#) 4)
                           (eq? (vector-ref #{x 29106}# 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((#{expression 29144}# (vector-ref #{x 29106}# 1))
                           (#{wrap 29145}#
                             (let ((#{w2 29153}# (vector-ref #{x 29106}# 2)))
                               (let ((#{m1 29154}# (car #{w 29101}#))
                                     (#{s1 29155}# (cdr #{w 29101}#)))
                                 (if (null? #{m1 29154}#)
                                   (if (null? #{s1 29155}#)
                                     #{w2 29153}#
                                     (cons (car #{w2 29153}#)
                                           (let ((#{m2 29170}#
                                                   (cdr #{w2 29153}#)))
                                             (if (null? #{m2 29170}#)
                                               #{s1 29155}#
                                               (append
                                                 #{s1 29155}#
                                                 #{m2 29170}#)))))
                                   (cons (let ((#{m2 29178}#
                                                 (car #{w2 29153}#)))
                                           (if (null? #{m2 29178}#)
                                             #{m1 29154}#
                                             (append
                                               #{m1 29154}#
                                               #{m2 29178}#)))
                                         (let ((#{m2 29186}#
                                                 (cdr #{w2 29153}#)))
                                           (if (null? #{m2 29186}#)
                                             #{s1 29155}#
                                             (append
                                               #{s1 29155}#
                                               #{m2 29186}#))))))))
                           (#{module 29146}# (vector-ref #{x 29106}# 3)))
                       (vector
                         'syntax-object
                         #{expression 29144}#
                         #{wrap 29145}#
                         #{module 29146}#))
                     (if (null? #{x 29106}#)
                       #{x 29106}#
                       (vector
                         'syntax-object
                         #{x 29106}#
                         #{w 29101}#
                         #{mod 29093}#)))))))
           (gensym "m")))))
   (#{chi-body 4379}#
     (lambda (#{body 29438}#
              #{outer-form 29439}#
              #{r 29440}#
              #{w 29441}#
              #{mod 29442}#)
       (let ((#{r 29443}#
               (cons '("placeholder" placeholder) #{r 29440}#)))
         (let ((#{ribcage 29444}# (vector 'ribcage '() '() '())))
           (let ((#{w 29445}#
                   (cons (car #{w 29441}#)
                         (cons #{ribcage 29444}# (cdr #{w 29441}#)))))
             (letrec*
               ((#{parse 29446}#
                  (lambda (#{body 29554}#
                           #{ids 29555}#
                           #{labels 29556}#
                           #{var-ids 29557}#
                           #{vars 29558}#
                           #{vals 29559}#
                           #{bindings 29560}#)
                    (if (null? #{body 29554}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 29439}#)
                      (let ((#{e 29561}# (cdr (car #{body 29554}#)))
                            (#{er 29562}# (car (car #{body 29554}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 4374}#
                              #{e 29561}#
                              #{er 29562}#
                              '(())
                              (#{source-annotation 4336}# #{er 29562}#)
                              #{ribcage 29444}#
                              #{mod 29442}#
                              #f))
                          (lambda (#{type 29756}#
                                   #{value 29757}#
                                   #{e 29758}#
                                   #{w 29759}#
                                   #{s 29760}#
                                   #{mod 29761}#)
                            (if (eqv? #{type 29756}# 'define-form)
                              (let ((#{id 29765}#
                                      (if (if (null? (car #{w 29759}#))
                                            (null? (cdr #{w 29759}#))
                                            #f)
                                        #{value 29757}#
                                        (if (if (vector? #{value 29757}#)
                                              (if (= (vector-length
                                                       #{value 29757}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{value 29757}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (let ((#{expression 29810}#
                                                  (vector-ref
                                                    #{value 29757}#
                                                    1))
                                                (#{wrap 29811}#
                                                  (let ((#{w2 29821}#
                                                          (vector-ref
                                                            #{value 29757}#
                                                            2)))
                                                    (let ((#{m1 29822}#
                                                            (car #{w 29759}#))
                                                          (#{s1 29823}#
                                                            (cdr #{w 29759}#)))
                                                      (if (null? #{m1 29822}#)
                                                        (if (null? #{s1 29823}#)
                                                          #{w2 29821}#
                                                          (cons (car #{w2 29821}#)
                                                                (let ((#{m2 29840}#
                                                                        (cdr #{w2 29821}#)))
                                                                  (if (null? #{m2 29840}#)
                                                                    #{s1 29823}#
                                                                    (append
                                                                      #{s1 29823}#
                                                                      #{m2 29840}#)))))
                                                        (cons (let ((#{m2 29848}#
                                                                      (car #{w2 29821}#)))
                                                                (if (null? #{m2 29848}#)
                                                                  #{m1 29822}#
                                                                  (append
                                                                    #{m1 29822}#
                                                                    #{m2 29848}#)))
                                                              (let ((#{m2 29856}#
                                                                      (cdr #{w2 29821}#)))
                                                                (if (null? #{m2 29856}#)
                                                                  #{s1 29823}#
                                                                  (append
                                                                    #{s1 29823}#
                                                                    #{m2 29856}#))))))))
                                                (#{module 29812}#
                                                  (vector-ref
                                                    #{value 29757}#
                                                    3)))
                                            (vector
                                              'syntax-object
                                              #{expression 29810}#
                                              #{wrap 29811}#
                                              #{module 29812}#))
                                          (if (null? #{value 29757}#)
                                            #{value 29757}#
                                            (vector
                                              'syntax-object
                                              #{value 29757}#
                                              #{w 29759}#
                                              #{mod 29761}#)))))
                                    (#{label 29766}#
                                      (symbol->string (gensym "i"))))
                                (let ((#{var 29767}#
                                        (let ((#{id 29917}#
                                                (if (if (vector? #{id 29765}#)
                                                      (if (= (vector-length
                                                               #{id 29765}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{id 29765}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{id 29765}# 1)
                                                  #{id 29765}#)))
                                          (gensym
                                            (string-append
                                              (symbol->string #{id 29917}#)
                                              " ")))))
                                  (begin
                                    (begin
                                      (let ((#{update 29776}#
                                              (cons (vector-ref #{id 29765}# 1)
                                                    (vector-ref
                                                      #{ribcage 29444}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 29444}#
                                          1
                                          #{update 29776}#))
                                      (let ((#{update 29888}#
                                              (cons (car (vector-ref
                                                           #{id 29765}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 29444}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 29444}#
                                          2
                                          #{update 29888}#))
                                      (let ((#{update 29903}#
                                              (cons #{label 29766}#
                                                    (vector-ref
                                                      #{ribcage 29444}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 29444}#
                                          3
                                          #{update 29903}#)))
                                    (#{parse 29446}#
                                      (cdr #{body 29554}#)
                                      (cons #{id 29765}# #{ids 29555}#)
                                      (cons #{label 29766}# #{labels 29556}#)
                                      (cons #{id 29765}# #{var-ids 29557}#)
                                      (cons #{var 29767}# #{vars 29558}#)
                                      (cons (cons #{er 29562}#
                                                  (if (if (null? (car #{w 29759}#))
                                                        (null? (cdr #{w 29759}#))
                                                        #f)
                                                    #{e 29758}#
                                                    (if (if (vector?
                                                              #{e 29758}#)
                                                          (if (= (vector-length
                                                                   #{e 29758}#)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   #{e 29758}#
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (let ((#{expression 29969}#
                                                              (vector-ref
                                                                #{e 29758}#
                                                                1))
                                                            (#{wrap 29970}#
                                                              (let ((#{w2 29980}#
                                                                      (vector-ref
                                                                        #{e 29758}#
                                                                        2)))
                                                                (let ((#{m1 29981}#
                                                                        (car #{w 29759}#))
                                                                      (#{s1 29982}#
                                                                        (cdr #{w 29759}#)))
                                                                  (if (null? #{m1 29981}#)
                                                                    (if (null? #{s1 29982}#)
                                                                      #{w2 29980}#
                                                                      (cons (car #{w2 29980}#)
                                                                            (let ((#{m2 29999}#
                                                                                    (cdr #{w2 29980}#)))
                                                                              (if (null? #{m2 29999}#)
                                                                                #{s1 29982}#
                                                                                (append
                                                                                  #{s1 29982}#
                                                                                  #{m2 29999}#)))))
                                                                    (cons (let ((#{m2 30007}#
                                                                                  (car #{w2 29980}#)))
                                                                            (if (null? #{m2 30007}#)
                                                                              #{m1 29981}#
                                                                              (append
                                                                                #{m1 29981}#
                                                                                #{m2 30007}#)))
                                                                          (let ((#{m2 30015}#
                                                                                  (cdr #{w2 29980}#)))
                                                                            (if (null? #{m2 30015}#)
                                                                              #{s1 29982}#
                                                                              (append
                                                                                #{s1 29982}#
                                                                                #{m2 30015}#))))))))
                                                            (#{module 29971}#
                                                              (vector-ref
                                                                #{e 29758}#
                                                                3)))
                                                        (vector
                                                          'syntax-object
                                                          #{expression 29969}#
                                                          #{wrap 29970}#
                                                          #{module 29971}#))
                                                      (if (null? #{e 29758}#)
                                                        #{e 29758}#
                                                        (vector
                                                          'syntax-object
                                                          #{e 29758}#
                                                          #{w 29759}#
                                                          #{mod 29761}#)))))
                                            #{vals 29559}#)
                                      (cons (cons 'lexical #{var 29767}#)
                                            #{bindings 29560}#)))))
                              (if (eqv? #{type 29756}# 'define-syntax-form)
                                (let ((#{id 30041}#
                                        (if (if (null? (car #{w 29759}#))
                                              (null? (cdr #{w 29759}#))
                                              #f)
                                          #{value 29757}#
                                          (if (if (vector? #{value 29757}#)
                                                (if (= (vector-length
                                                         #{value 29757}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{value 29757}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (let ((#{expression 30085}#
                                                    (vector-ref
                                                      #{value 29757}#
                                                      1))
                                                  (#{wrap 30086}#
                                                    (let ((#{w2 30096}#
                                                            (vector-ref
                                                              #{value 29757}#
                                                              2)))
                                                      (let ((#{m1 30097}#
                                                              (car #{w 29759}#))
                                                            (#{s1 30098}#
                                                              (cdr #{w 29759}#)))
                                                        (if (null? #{m1 30097}#)
                                                          (if (null? #{s1 30098}#)
                                                            #{w2 30096}#
                                                            (cons (car #{w2 30096}#)
                                                                  (let ((#{m2 30115}#
                                                                          (cdr #{w2 30096}#)))
                                                                    (if (null? #{m2 30115}#)
                                                                      #{s1 30098}#
                                                                      (append
                                                                        #{s1 30098}#
                                                                        #{m2 30115}#)))))
                                                          (cons (let ((#{m2 30123}#
                                                                        (car #{w2 30096}#)))
                                                                  (if (null? #{m2 30123}#)
                                                                    #{m1 30097}#
                                                                    (append
                                                                      #{m1 30097}#
                                                                      #{m2 30123}#)))
                                                                (let ((#{m2 30131}#
                                                                        (cdr #{w2 30096}#)))
                                                                  (if (null? #{m2 30131}#)
                                                                    #{s1 30098}#
                                                                    (append
                                                                      #{s1 30098}#
                                                                      #{m2 30131}#))))))))
                                                  (#{module 30087}#
                                                    (vector-ref
                                                      #{value 29757}#
                                                      3)))
                                              (vector
                                                'syntax-object
                                                #{expression 30085}#
                                                #{wrap 30086}#
                                                #{module 30087}#))
                                            (if (null? #{value 29757}#)
                                              #{value 29757}#
                                              (vector
                                                'syntax-object
                                                #{value 29757}#
                                                #{w 29759}#
                                                #{mod 29761}#)))))
                                      (#{label 30042}#
                                        (symbol->string (gensym "i"))))
                                  (begin
                                    (begin
                                      (let ((#{update 30051}#
                                              (cons (vector-ref #{id 30041}# 1)
                                                    (vector-ref
                                                      #{ribcage 29444}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 29444}#
                                          1
                                          #{update 30051}#))
                                      (let ((#{update 30163}#
                                              (cons (car (vector-ref
                                                           #{id 30041}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 29444}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 29444}#
                                          2
                                          #{update 30163}#))
                                      (let ((#{update 30178}#
                                              (cons #{label 30042}#
                                                    (vector-ref
                                                      #{ribcage 29444}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 29444}#
                                          3
                                          #{update 30178}#)))
                                    (#{parse 29446}#
                                      (cdr #{body 29554}#)
                                      (cons #{id 30041}# #{ids 29555}#)
                                      (cons #{label 30042}# #{labels 29556}#)
                                      #{var-ids 29557}#
                                      #{vars 29558}#
                                      #{vals 29559}#
                                      (cons (cons 'macro
                                                  (cons #{er 29562}#
                                                        (if (if (null? (car #{w 29759}#))
                                                              (null? (cdr #{w 29759}#))
                                                              #f)
                                                          #{e 29758}#
                                                          (if (if (vector?
                                                                    #{e 29758}#)
                                                                (if (= (vector-length
                                                                         #{e 29758}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{e 29758}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (let ((#{expression 30217}#
                                                                    (vector-ref
                                                                      #{e 29758}#
                                                                      1))
                                                                  (#{wrap 30218}#
                                                                    (let ((#{w2 30228}#
                                                                            (vector-ref
                                                                              #{e 29758}#
                                                                              2)))
                                                                      (let ((#{m1 30229}#
                                                                              (car #{w 29759}#))
                                                                            (#{s1 30230}#
                                                                              (cdr #{w 29759}#)))
                                                                        (if (null? #{m1 30229}#)
                                                                          (if (null? #{s1 30230}#)
                                                                            #{w2 30228}#
                                                                            (cons (car #{w2 30228}#)
                                                                                  (let ((#{m2 30247}#
                                                                                          (cdr #{w2 30228}#)))
                                                                                    (if (null? #{m2 30247}#)
                                                                                      #{s1 30230}#
                                                                                      (append
                                                                                        #{s1 30230}#
                                                                                        #{m2 30247}#)))))
                                                                          (cons (let ((#{m2 30255}#
                                                                                        (car #{w2 30228}#)))
                                                                                  (if (null? #{m2 30255}#)
                                                                                    #{m1 30229}#
                                                                                    (append
                                                                                      #{m1 30229}#
                                                                                      #{m2 30255}#)))
                                                                                (let ((#{m2 30263}#
                                                                                        (cdr #{w2 30228}#)))
                                                                                  (if (null? #{m2 30263}#)
                                                                                    #{s1 30230}#
                                                                                    (append
                                                                                      #{s1 30230}#
                                                                                      #{m2 30263}#))))))))
                                                                  (#{module 30219}#
                                                                    (vector-ref
                                                                      #{e 29758}#
                                                                      3)))
                                                              (vector
                                                                'syntax-object
                                                                #{expression 30217}#
                                                                #{wrap 30218}#
                                                                #{module 30219}#))
                                                            (if (null? #{e 29758}#)
                                                              #{e 29758}#
                                                              (vector
                                                                'syntax-object
                                                                #{e 29758}#
                                                                #{w 29759}#
                                                                #{mod 29761}#))))))
                                            #{bindings 29560}#))))
                                (if (eqv? #{type 29756}# 'begin-form)
                                  (let ((#{tmp 30290}#
                                          ($sc-dispatch
                                            #{e 29758}#
                                            '(_ . each-any))))
                                    (if #{tmp 30290}#
                                      (@apply
                                        (lambda (#{e1 30294}#)
                                          (#{parse 29446}#
                                            (letrec*
                                              ((#{f 30295}#
                                                 (lambda (#{forms 30509}#)
                                                   (if (null? #{forms 30509}#)
                                                     (cdr #{body 29554}#)
                                                     (cons (cons #{er 29562}#
                                                                 (let ((#{x 30513}#
                                                                         (car #{forms 30509}#)))
                                                                   (if (if (null? (car #{w 29759}#))
                                                                         (null? (cdr #{w 29759}#))
                                                                         #f)
                                                                     #{x 30513}#
                                                                     (if (if (vector?
                                                                               #{x 30513}#)
                                                                           (if (= (vector-length
                                                                                    #{x 30513}#)
                                                                                  4)
                                                                             (eq? (vector-ref
                                                                                    #{x 30513}#
                                                                                    0)
                                                                                  'syntax-object)
                                                                             #f)
                                                                           #f)
                                                                       (let ((#{expression 30531}#
                                                                               (vector-ref
                                                                                 #{x 30513}#
                                                                                 1))
                                                                             (#{wrap 30532}#
                                                                               (let ((#{w2 30540}#
                                                                                       (vector-ref
                                                                                         #{x 30513}#
                                                                                         2)))
                                                                                 (let ((#{m1 30541}#
                                                                                         (car #{w 29759}#))
                                                                                       (#{s1 30542}#
                                                                                         (cdr #{w 29759}#)))
                                                                                   (if (null? #{m1 30541}#)
                                                                                     (if (null? #{s1 30542}#)
                                                                                       #{w2 30540}#
                                                                                       (cons (car #{w2 30540}#)
                                                                                             (let ((#{m2 30557}#
                                                                                                     (cdr #{w2 30540}#)))
                                                                                               (if (null? #{m2 30557}#)
                                                                                                 #{s1 30542}#
                                                                                                 (append
                                                                                                   #{s1 30542}#
                                                                                                   #{m2 30557}#)))))
                                                                                     (cons (let ((#{m2 30565}#
                                                                                                   (car #{w2 30540}#)))
                                                                                             (if (null? #{m2 30565}#)
                                                                                               #{m1 30541}#
                                                                                               (append
                                                                                                 #{m1 30541}#
                                                                                                 #{m2 30565}#)))
                                                                                           (let ((#{m2 30573}#
                                                                                                   (cdr #{w2 30540}#)))
                                                                                             (if (null? #{m2 30573}#)
                                                                                               #{s1 30542}#
                                                                                               (append
                                                                                                 #{s1 30542}#
                                                                                                 #{m2 30573}#))))))))
                                                                             (#{module 30533}#
                                                                               (vector-ref
                                                                                 #{x 30513}#
                                                                                 3)))
                                                                         (vector
                                                                           'syntax-object
                                                                           #{expression 30531}#
                                                                           #{wrap 30532}#
                                                                           #{module 30533}#))
                                                                       (if (null? #{x 30513}#)
                                                                         #{x 30513}#
                                                                         (vector
                                                                           'syntax-object
                                                                           #{x 30513}#
                                                                           #{w 29759}#
                                                                           #{mod 29761}#))))))
                                                           (#{f 30295}#
                                                             (cdr #{forms 30509}#)))))))
                                              (#{f 30295}# #{e1 30294}#))
                                            #{ids 29555}#
                                            #{labels 29556}#
                                            #{var-ids 29557}#
                                            #{vars 29558}#
                                            #{vals 29559}#
                                            #{bindings 29560}#))
                                        #{tmp 30290}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 29758}#)))
                                  (if (eqv? #{type 29756}# 'local-syntax-form)
                                    (#{chi-local-syntax 4380}#
                                      #{value 29757}#
                                      #{e 29758}#
                                      #{er 29562}#
                                      #{w 29759}#
                                      #{s 29760}#
                                      #{mod 29761}#
                                      (lambda (#{forms 30599}#
                                               #{er 30600}#
                                               #{w 30601}#
                                               #{s 30602}#
                                               #{mod 30603}#)
                                        (#{parse 29446}#
                                          (letrec*
                                            ((#{f 30604}#
                                               (lambda (#{forms 30818}#)
                                                 (if (null? #{forms 30818}#)
                                                   (cdr #{body 29554}#)
                                                   (cons (cons #{er 30600}#
                                                               (let ((#{x 30822}#
                                                                       (car #{forms 30818}#)))
                                                                 (if (if (null? (car #{w 30601}#))
                                                                       (null? (cdr #{w 30601}#))
                                                                       #f)
                                                                   #{x 30822}#
                                                                   (if (if (vector?
                                                                             #{x 30822}#)
                                                                         (if (= (vector-length
                                                                                  #{x 30822}#)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  #{x 30822}#
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((#{expression 30840}#
                                                                             (vector-ref
                                                                               #{x 30822}#
                                                                               1))
                                                                           (#{wrap 30841}#
                                                                             (let ((#{w2 30849}#
                                                                                     (vector-ref
                                                                                       #{x 30822}#
                                                                                       2)))
                                                                               (let ((#{m1 30850}#
                                                                                       (car #{w 30601}#))
                                                                                     (#{s1 30851}#
                                                                                       (cdr #{w 30601}#)))
                                                                                 (if (null? #{m1 30850}#)
                                                                                   (if (null? #{s1 30851}#)
                                                                                     #{w2 30849}#
                                                                                     (cons (car #{w2 30849}#)
                                                                                           (let ((#{m2 30866}#
                                                                                                   (cdr #{w2 30849}#)))
                                                                                             (if (null? #{m2 30866}#)
                                                                                               #{s1 30851}#
                                                                                               (append
                                                                                                 #{s1 30851}#
                                                                                                 #{m2 30866}#)))))
                                                                                   (cons (let ((#{m2 30874}#
                                                                                                 (car #{w2 30849}#)))
                                                                                           (if (null? #{m2 30874}#)
                                                                                             #{m1 30850}#
                                                                                             (append
                                                                                               #{m1 30850}#
                                                                                               #{m2 30874}#)))
                                                                                         (let ((#{m2 30882}#
                                                                                                 (cdr #{w2 30849}#)))
                                                                                           (if (null? #{m2 30882}#)
                                                                                             #{s1 30851}#
                                                                                             (append
                                                                                               #{s1 30851}#
                                                                                               #{m2 30882}#))))))))
                                                                           (#{module 30842}#
                                                                             (vector-ref
                                                                               #{x 30822}#
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         #{expression 30840}#
                                                                         #{wrap 30841}#
                                                                         #{module 30842}#))
                                                                     (if (null? #{x 30822}#)
                                                                       #{x 30822}#
                                                                       (vector
                                                                         'syntax-object
                                                                         #{x 30822}#
                                                                         #{w 30601}#
                                                                         #{mod 30603}#))))))
                                                         (#{f 30604}#
                                                           (cdr #{forms 30818}#)))))))
                                            (#{f 30604}# #{forms 30599}#))
                                          #{ids 29555}#
                                          #{labels 29556}#
                                          #{var-ids 29557}#
                                          #{vars 29558}#
                                          #{vals 29559}#
                                          #{bindings 29560}#)))
                                    (if (null? #{ids 29555}#)
                                      (#{build-sequence 4324}#
                                        #f
                                        (map (lambda (#{x 30969}#)
                                               (#{chi 4375}#
                                                 (cdr #{x 30969}#)
                                                 (car #{x 30969}#)
                                                 '(())
                                                 #{mod 29761}#))
                                             (cons (cons #{er 29562}#
                                                         (let ((#{x 31046}#
                                                                 (begin
                                                                   (if (if (pair? #{e 29758}#)
                                                                         #{s 29760}#
                                                                         #f)
                                                                     (set-source-properties!
                                                                       #{e 29758}#
                                                                       #{s 29760}#))
                                                                   #{e 29758}#)))
                                                           (if (if (null? (car #{w 29759}#))
                                                                 (null? (cdr #{w 29759}#))
                                                                 #f)
                                                             #{x 31046}#
                                                             (if (if (vector?
                                                                       #{x 31046}#)
                                                                   (if (= (vector-length
                                                                            #{x 31046}#)
                                                                          4)
                                                                     (eq? (vector-ref
                                                                            #{x 31046}#
                                                                            0)
                                                                          'syntax-object)
                                                                     #f)
                                                                   #f)
                                                               (let ((#{expression 31078}#
                                                                       (vector-ref
                                                                         #{x 31046}#
                                                                         1))
                                                                     (#{wrap 31079}#
                                                                       (let ((#{w2 31087}#
                                                                               (vector-ref
                                                                                 #{x 31046}#
                                                                                 2)))
                                                                         (let ((#{m1 31088}#
                                                                                 (car #{w 29759}#))
                                                                               (#{s1 31089}#
                                                                                 (cdr #{w 29759}#)))
                                                                           (if (null? #{m1 31088}#)
                                                                             (if (null? #{s1 31089}#)
                                                                               #{w2 31087}#
                                                                               (cons (car #{w2 31087}#)
                                                                                     (let ((#{m2 31104}#
                                                                                             (cdr #{w2 31087}#)))
                                                                                       (if (null? #{m2 31104}#)
                                                                                         #{s1 31089}#
                                                                                         (append
                                                                                           #{s1 31089}#
                                                                                           #{m2 31104}#)))))
                                                                             (cons (let ((#{m2 31112}#
                                                                                           (car #{w2 31087}#)))
                                                                                     (if (null? #{m2 31112}#)
                                                                                       #{m1 31088}#
                                                                                       (append
                                                                                         #{m1 31088}#
                                                                                         #{m2 31112}#)))
                                                                                   (let ((#{m2 31120}#
                                                                                           (cdr #{w2 31087}#)))
                                                                                     (if (null? #{m2 31120}#)
                                                                                       #{s1 31089}#
                                                                                       (append
                                                                                         #{s1 31089}#
                                                                                         #{m2 31120}#))))))))
                                                                     (#{module 31080}#
                                                                       (vector-ref
                                                                         #{x 31046}#
                                                                         3)))
                                                                 (vector
                                                                   'syntax-object
                                                                   #{expression 31078}#
                                                                   #{wrap 31079}#
                                                                   #{module 31080}#))
                                                               (if (null? #{x 31046}#)
                                                                 #{x 31046}#
                                                                 (vector
                                                                   'syntax-object
                                                                   #{x 31046}#
                                                                   #{w 29759}#
                                                                   #{mod 29761}#))))))
                                                   (cdr #{body 29554}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 4365}#
                                                   #{ids 29555}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 29439}#))
                                        (letrec*
                                          ((#{loop 31217}#
                                             (lambda (#{bs 31220}#
                                                      #{er-cache 31221}#
                                                      #{r-cache 31222}#)
                                               (if (not (null? #{bs 31220}#))
                                                 (let ((#{b 31223}#
                                                         (car #{bs 31220}#)))
                                                   (if (eq? (car #{b 31223}#)
                                                            'macro)
                                                     (let ((#{er 31225}#
                                                             (car (cdr #{b 31223}#))))
                                                       (let ((#{r-cache 31226}#
                                                               (if (eq? #{er 31225}#
                                                                        #{er-cache 31221}#)
                                                                 #{r-cache 31222}#
                                                                 (#{macros-only-env 4339}#
                                                                   #{er 31225}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 31223}#
                                                             (#{eval-local-transformer 4381}#
                                                               (#{chi 4375}#
                                                                 (cdr (cdr #{b 31223}#))
                                                                 #{r-cache 31226}#
                                                                 '(())
                                                                 #{mod 29761}#)
                                                               #{mod 29761}#))
                                                           (#{loop 31217}#
                                                             (cdr #{bs 31220}#)
                                                             #{er 31225}#
                                                             #{r-cache 31226}#))))
                                                     (#{loop 31217}#
                                                       (cdr #{bs 31220}#)
                                                       #{er-cache 31221}#
                                                       #{r-cache 31222}#)))))))
                                          (#{loop 31217}#
                                            #{bindings 29560}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 29443}#
                                          (#{extend-env 4337}#
                                            #{labels 29556}#
                                            #{bindings 29560}#
                                            (cdr #{r 29443}#)))
                                        (#{build-letrec 4327}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 29557}#))
                                          (reverse #{vars 29558}#)
                                          (map (lambda (#{x 31641}#)
                                                 (#{chi 4375}#
                                                   (cdr #{x 31641}#)
                                                   (car #{x 31641}#)
                                                   '(())
                                                   #{mod 29761}#))
                                               (reverse #{vals 29559}#))
                                          (#{build-sequence 4324}#
                                            #f
                                            (map (lambda (#{x 31781}#)
                                                   (#{chi 4375}#
                                                     (cdr #{x 31781}#)
                                                     (car #{x 31781}#)
                                                     '(())
                                                     #{mod 29761}#))
                                                 (cons (cons #{er 29562}#
                                                             (let ((#{x 31858}#
                                                                     (begin
                                                                       (if (if (pair? #{e 29758}#)
                                                                             #{s 29760}#
                                                                             #f)
                                                                         (set-source-properties!
                                                                           #{e 29758}#
                                                                           #{s 29760}#))
                                                                       #{e 29758}#)))
                                                               (if (if (null? (car #{w 29759}#))
                                                                     (null? (cdr #{w 29759}#))
                                                                     #f)
                                                                 #{x 31858}#
                                                                 (if (if (vector?
                                                                           #{x 31858}#)
                                                                       (if (= (vector-length
                                                                                #{x 31858}#)
                                                                              4)
                                                                         (eq? (vector-ref
                                                                                #{x 31858}#
                                                                                0)
                                                                              'syntax-object)
                                                                         #f)
                                                                       #f)
                                                                   (let ((#{expression 31890}#
                                                                           (vector-ref
                                                                             #{x 31858}#
                                                                             1))
                                                                         (#{wrap 31891}#
                                                                           (let ((#{w2 31899}#
                                                                                   (vector-ref
                                                                                     #{x 31858}#
                                                                                     2)))
                                                                             (let ((#{m1 31900}#
                                                                                     (car #{w 29759}#))
                                                                                   (#{s1 31901}#
                                                                                     (cdr #{w 29759}#)))
                                                                               (if (null? #{m1 31900}#)
                                                                                 (if (null? #{s1 31901}#)
                                                                                   #{w2 31899}#
                                                                                   (cons (car #{w2 31899}#)
                                                                                         (let ((#{m2 31916}#
                                                                                                 (cdr #{w2 31899}#)))
                                                                                           (if (null? #{m2 31916}#)
                                                                                             #{s1 31901}#
                                                                                             (append
                                                                                               #{s1 31901}#
                                                                                               #{m2 31916}#)))))
                                                                                 (cons (let ((#{m2 31924}#
                                                                                               (car #{w2 31899}#)))
                                                                                         (if (null? #{m2 31924}#)
                                                                                           #{m1 31900}#
                                                                                           (append
                                                                                             #{m1 31900}#
                                                                                             #{m2 31924}#)))
                                                                                       (let ((#{m2 31932}#
                                                                                               (cdr #{w2 31899}#)))
                                                                                         (if (null? #{m2 31932}#)
                                                                                           #{s1 31901}#
                                                                                           (append
                                                                                             #{s1 31901}#
                                                                                             #{m2 31932}#))))))))
                                                                         (#{module 31892}#
                                                                           (vector-ref
                                                                             #{x 31858}#
                                                                             3)))
                                                                     (vector
                                                                       'syntax-object
                                                                       #{expression 31890}#
                                                                       #{wrap 31891}#
                                                                       #{module 31892}#))
                                                                   (if (null? #{x 31858}#)
                                                                     #{x 31858}#
                                                                     (vector
                                                                       'syntax-object
                                                                       #{x 31858}#
                                                                       #{w 29759}#
                                                                       #{mod 29761}#))))))
                                                       (cdr #{body 29554}#))))))))))))))))))
               (#{parse 29446}#
                 (map (lambda (#{x 29449}#)
                        (cons #{r 29443}#
                              (if (if (null? (car #{w 29445}#))
                                    (null? (cdr #{w 29445}#))
                                    #f)
                                #{x 29449}#
                                (if (if (vector? #{x 29449}#)
                                      (if (= (vector-length #{x 29449}#) 4)
                                        (eq? (vector-ref #{x 29449}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((#{expression 29485}#
                                          (vector-ref #{x 29449}# 1))
                                        (#{wrap 29486}#
                                          (let ((#{w2 29496}#
                                                  (vector-ref #{x 29449}# 2)))
                                            (let ((#{m1 29497}#
                                                    (car #{w 29445}#))
                                                  (#{s1 29498}#
                                                    (cdr #{w 29445}#)))
                                              (if (null? #{m1 29497}#)
                                                (if (null? #{s1 29498}#)
                                                  #{w2 29496}#
                                                  (cons (car #{w2 29496}#)
                                                        (let ((#{m2 29515}#
                                                                (cdr #{w2 29496}#)))
                                                          (if (null? #{m2 29515}#)
                                                            #{s1 29498}#
                                                            (append
                                                              #{s1 29498}#
                                                              #{m2 29515}#)))))
                                                (cons (let ((#{m2 29523}#
                                                              (car #{w2 29496}#)))
                                                        (if (null? #{m2 29523}#)
                                                          #{m1 29497}#
                                                          (append
                                                            #{m1 29497}#
                                                            #{m2 29523}#)))
                                                      (let ((#{m2 29531}#
                                                              (cdr #{w2 29496}#)))
                                                        (if (null? #{m2 29531}#)
                                                          #{s1 29498}#
                                                          (append
                                                            #{s1 29498}#
                                                            #{m2 29531}#))))))))
                                        (#{module 29487}#
                                          (vector-ref #{x 29449}# 3)))
                                    (vector
                                      'syntax-object
                                      #{expression 29485}#
                                      #{wrap 29486}#
                                      #{module 29487}#))
                                  (if (null? #{x 29449}#)
                                    #{x 29449}#
                                    (vector
                                      'syntax-object
                                      #{x 29449}#
                                      #{w 29445}#
                                      #{mod 29442}#))))))
                      #{body 29438}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{chi-local-syntax 4380}#
     (lambda (#{rec? 31947}#
              #{e 31948}#
              #{r 31949}#
              #{w 31950}#
              #{s 31951}#
              #{mod 31952}#
              #{k 31953}#)
       (let ((#{tmp 31955}#
               ($sc-dispatch
                 #{e 31948}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 31955}#
           (@apply
             (lambda (#{id 31959}#
                      #{val 31960}#
                      #{e1 31961}#
                      #{e2 31962}#)
               (if (not (#{valid-bound-ids? 4365}# #{id 31959}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 31948}#)
                 (let ((#{labels 32057}#
                         (#{gen-labels 4346}# #{id 31959}#)))
                   (let ((#{new-w 32058}#
                           (#{make-binding-wrap 4357}#
                             #{id 31959}#
                             #{labels 32057}#
                             #{w 31950}#)))
                     (#{k 31953}#
                       (cons #{e1 31961}# #{e2 31962}#)
                       (#{extend-env 4337}#
                         #{labels 32057}#
                         (let ((#{trans-r 32098}#
                                 (#{macros-only-env 4339}# #{r 31949}#)))
                           (begin
                             (if #{rec? 31947}# (if #f #f))
                             (map (lambda (#{x 32099}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 4381}#
                                            (#{chi 4375}#
                                              #{x 32099}#
                                              #{trans-r 32098}#
                                              (if #{rec? 31947}#
                                                #{new-w 32058}#
                                                #{w 31950}#)
                                              #{mod 31952}#)
                                            #{mod 31952}#)))
                                  #{val 31960}#)))
                         #{r 31949}#)
                       #{new-w 32058}#
                       #{s 31951}#
                       #{mod 31952}#)))))
             #{tmp 31955}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (let ((#{x 32422}#
                     (begin
                       (if (if (pair? #{e 31948}#) #{s 31951}# #f)
                         (set-source-properties! #{e 31948}# #{s 31951}#))
                       #{e 31948}#)))
               (if (if (null? (car #{w 31950}#))
                     (null? (cdr #{w 31950}#))
                     #f)
                 #{x 32422}#
                 (if (if (vector? #{x 32422}#)
                       (if (= (vector-length #{x 32422}#) 4)
                         (eq? (vector-ref #{x 32422}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 32454}# (vector-ref #{x 32422}# 1))
                         (#{wrap 32455}#
                           (let ((#{w2 32463}# (vector-ref #{x 32422}# 2)))
                             (let ((#{m1 32464}# (car #{w 31950}#))
                                   (#{s1 32465}# (cdr #{w 31950}#)))
                               (if (null? #{m1 32464}#)
                                 (if (null? #{s1 32465}#)
                                   #{w2 32463}#
                                   (cons (car #{w2 32463}#)
                                         (let ((#{m2 32480}#
                                                 (cdr #{w2 32463}#)))
                                           (if (null? #{m2 32480}#)
                                             #{s1 32465}#
                                             (append
                                               #{s1 32465}#
                                               #{m2 32480}#)))))
                                 (cons (let ((#{m2 32488}# (car #{w2 32463}#)))
                                         (if (null? #{m2 32488}#)
                                           #{m1 32464}#
                                           (append #{m1 32464}# #{m2 32488}#)))
                                       (let ((#{m2 32496}# (cdr #{w2 32463}#)))
                                         (if (null? #{m2 32496}#)
                                           #{s1 32465}#
                                           (append
                                             #{s1 32465}#
                                             #{m2 32496}#))))))))
                         (#{module 32456}# (vector-ref #{x 32422}# 3)))
                     (vector
                       'syntax-object
                       #{expression 32454}#
                       #{wrap 32455}#
                       #{module 32456}#))
                   (if (null? #{x 32422}#)
                     #{x 32422}#
                     (vector
                       'syntax-object
                       #{x 32422}#
                       #{w 31950}#
                       #{mod 31952}#))))))))))
   (#{eval-local-transformer 4381}#
     (lambda (#{expanded 32514}# #{mod 32515}#)
       (let ((#{p 32516}# (primitive-eval #{expanded 32514}#)))
         (if (procedure? #{p 32516}#)
           #{p 32516}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 32516}#)))))
   (#{ellipsis? 4383}#
     (lambda (#{x 5824}#)
       (if (if (if (vector? #{x 5824}#)
                 (if (= (vector-length #{x 5824}#) 4)
                   (eq? (vector-ref #{x 5824}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 5824}# 1))
             #f)
         (#{free-id=? 4363}#
           #{x 5824}#
           '#(syntax-object
              ...
              ((top)
               #(ribcage () () ())
               #(ribcage () () ())
               #(ribcage #(x) #((top)) #("i2263"))
               #(ribcage
                 (lambda-var-list
                   gen-var
                   strip
                   chi-lambda-case
                   lambda*-formals
                   chi-simple-lambda
                   lambda-formals
                   ellipsis?
                   chi-void
                   eval-local-transformer
                   chi-local-syntax
                   chi-body
                   chi-macro
                   chi-call
                   chi-expr
                   chi
                   syntax-type
                   chi-when-list
                   chi-install-global
                   chi-top-sequence
                   chi-sequence
                   source-wrap
                   wrap
                   bound-id-member?
                   distinct-bound-ids?
                   valid-bound-ids?
                   bound-id=?
                   free-id=?
                   id-var-name
                   same-marks?
                   join-marks
                   join-wraps
                   smart-append
                   make-binding-wrap
                   extend-ribcage!
                   make-empty-ribcage
                   new-mark
                   anti-mark
                   the-anti-mark
                   top-marked?
                   top-wrap
                   empty-wrap
                   set-ribcage-labels!
                   set-ribcage-marks!
                   set-ribcage-symnames!
                   ribcage-labels
                   ribcage-marks
                   ribcage-symnames
                   ribcage?
                   make-ribcage
                   gen-labels
                   gen-label
                   make-rename
                   rename-marks
                   rename-new
                   rename-old
                   subst-rename?
                   wrap-subst
                   wrap-marks
                   make-wrap
                   id-sym-name&marks
                   id-sym-name
                   id?
                   nonsymbol-id?
                   global-extend
                   lookup
                   macros-only-env
                   extend-var-env
                   extend-env
                   null-env
                   binding-value
                   binding-type
                   make-binding
                   arg-check
                   source-annotation
                   no-source
                   set-syntax-object-module!
                   set-syntax-object-wrap!
                   set-syntax-object-expression!
                   syntax-object-module
                   syntax-object-wrap
                   syntax-object-expression
                   syntax-object?
                   make-syntax-object
                   build-lexical-var
                   build-letrec
                   build-named-let
                   build-let
                   build-sequence
                   build-data
                   build-primref
                   build-primcall
                   build-lambda-case
                   build-case-lambda
                   build-simple-lambda
                   build-global-definition
                   build-global-assignment
                   build-global-reference
                   analyze-variable
                   build-lexical-assignment
                   build-lexical-reference
                   build-dynlet
                   build-conditional
                   build-call
                   build-void
                   maybe-name-value!
                   decorate-source
                   get-global-definition-hook
                   put-global-definition-hook
                   gensym-hook
                   local-eval-hook
                   top-level-eval-hook
                   fx<
                   fx=
                   fx-
                   fx+
                   set-lambda-meta!
                   lambda-meta
                   lambda?
                   make-dynlet
                   make-letrec
                   make-let
                   make-lambda-case
                   make-lambda
                   make-seq
                   make-primcall
                   make-call
                   make-conditional
                   make-toplevel-define
                   make-toplevel-set
                   make-toplevel-ref
                   make-module-set
                   make-module-ref
                   make-lexical-set
                   make-lexical-ref
                   make-primitive-ref
                   make-const
                   make-void)
                 ((top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top))
                 ("i471"
                  "i469"
                  "i467"
                  "i465"
                  "i463"
                  "i461"
                  "i459"
                  "i457"
                  "i455"
                  "i453"
                  "i451"
                  "i449"
                  "i447"
                  "i445"
                  "i443"
                  "i441"
                  "i439"
                  "i437"
                  "i435"
                  "i433"
                  "i431"
                  "i429"
                  "i427"
                  "i425"
                  "i423"
                  "i421"
                  "i419"
                  "i417"
                  "i415"
                  "i413"
                  "i411"
                  "i409"
                  "i407"
                  "i405"
                  "i403"
                  "i402"
                  "i400"
                  "i397"
                  "i396"
                  "i395"
                  "i393"
                  "i392"
                  "i390"
                  "i388"
                  "i386"
                  "i384"
                  "i382"
                  "i380"
                  "i378"
                  "i376"
                  "i373"
                  "i371"
                  "i370"
                  "i368"
                  "i366"
                  "i364"
                  "i362"
                  "i361"
                  "i360"
                  "i359"
                  "i357"
                  "i356"
                  "i353"
                  "i351"
                  "i349"
                  "i347"
                  "i345"
                  "i343"
                  "i341"
                  "i340"
                  "i339"
                  "i337"
                  "i335"
                  "i334"
                  "i331"
                  "i330"
                  "i328"
                  "i326"
                  "i324"
                  "i322"
                  "i320"
                  "i318"
                  "i316"
                  "i314"
                  "i312"
                  "i309"
                  "i307"
                  "i305"
                  "i303"
                  "i301"
                  "i299"
                  "i297"
                  "i295"
                  "i293"
                  "i291"
                  "i289"
                  "i287"
                  "i285"
                  "i283"
                  "i281"
                  "i279"
                  "i277"
                  "i275"
                  "i273"
                  "i271"
                  "i269"
                  "i267"
                  "i265"
                  "i263"
                  "i262"
                  "i259"
                  "i257"
                  "i256"
                  "i255"
                  "i254"
                  "i253"
                  "i251"
                  "i249"
                  "i247"
                  "i244"
                  "i242"
                  "i240"
                  "i238"
                  "i236"
                  "i234"
                  "i232"
                  "i230"
                  "i228"
                  "i226"
                  "i224"
                  "i222"
                  "i220"
                  "i218"
                  "i216"
                  "i214"
                  "i212"
                  "i210"
                  "i208"))
               #(ribcage
                 (define-structure
                   define-expansion-accessors
                   define-expansion-constructors)
                 ((top) (top) (top))
                 ("i46" "i45" "i44")))
              (hygiene guile)))
         #f)))
   (#{lambda-formals 4384}#
     (lambda (#{orig-args 32521}#)
       (letrec*
         ((#{req 32522}#
            (lambda (#{args 32526}# #{rreq 32527}#)
              (let ((#{tmp 32529}# ($sc-dispatch #{args 32526}# '())))
                (if #{tmp 32529}#
                  (@apply
                    (lambda ()
                      (#{check 32523}# (reverse #{rreq 32527}#) #f))
                    #{tmp 32529}#)
                  (let ((#{tmp 32645}#
                          ($sc-dispatch #{args 32526}# '(any . any))))
                    (if (if #{tmp 32645}#
                          (@apply
                            (lambda (#{a 32649}# #{b 32650}#)
                              (if (symbol? #{a 32649}#)
                                #t
                                (if (if (vector? #{a 32649}#)
                                      (if (= (vector-length #{a 32649}#) 4)
                                        (eq? (vector-ref #{a 32649}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 32649}# 1))
                                  #f)))
                            #{tmp 32645}#)
                          #f)
                      (@apply
                        (lambda (#{a 32677}# #{b 32678}#)
                          (#{req 32522}#
                            #{b 32678}#
                            (cons #{a 32677}# #{rreq 32527}#)))
                        #{tmp 32645}#)
                      (let ((#{tmp 32679}# (list #{args 32526}#)))
                        (if (@apply
                              (lambda (#{r 32681}#)
                                (if (symbol? #{r 32681}#)
                                  #t
                                  (if (if (vector? #{r 32681}#)
                                        (if (= (vector-length #{r 32681}#) 4)
                                          (eq? (vector-ref #{r 32681}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{r 32681}# 1))
                                    #f)))
                              #{tmp 32679}#)
                          (@apply
                            (lambda (#{r 32711}#)
                              (#{check 32523}#
                                (reverse #{rreq 32527}#)
                                #{r 32711}#))
                            #{tmp 32679}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 32521}#
                            #{args 32526}#)))))))))
          (#{check 32523}#
            (lambda (#{req 32835}# #{rest 32836}#)
              (if (#{distinct-bound-ids? 4366}#
                    (if #{rest 32836}#
                      (cons #{rest 32836}# #{req 32835}#)
                      #{req 32835}#))
                (values #{req 32835}# #f #{rest 32836}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 32521}#)))))
         (#{req 32522}# #{orig-args 32521}# '()))))
   (#{chi-simple-lambda 4385}#
     (lambda (#{e 32945}#
              #{r 32946}#
              #{w 32947}#
              #{s 32948}#
              #{mod 32949}#
              #{req 32950}#
              #{rest 32951}#
              #{meta 32952}#
              #{body 32953}#)
       (let ((#{ids 32954}#
               (if #{rest 32951}#
                 (append #{req 32950}# (list #{rest 32951}#))
                 #{req 32950}#)))
         (let ((#{vars 32955}#
                 (map #{gen-var 4389}# #{ids 32954}#)))
           (let ((#{labels 32956}#
                   (#{gen-labels 4346}# #{ids 32954}#)))
             (#{build-simple-lambda 4318}#
               #{s 32948}#
               (map syntax->datum #{req 32950}#)
               (if #{rest 32951}#
                 (syntax->datum #{rest 32951}#)
                 #f)
               #{vars 32955}#
               #{meta 32952}#
               (#{chi-body 4379}#
                 #{body 32953}#
                 (let ((#{x 33145}#
                         (begin
                           (if (if (pair? #{e 32945}#) #{s 32948}# #f)
                             (set-source-properties! #{e 32945}# #{s 32948}#))
                           #{e 32945}#)))
                   (if (if (null? (car #{w 32947}#))
                         (null? (cdr #{w 32947}#))
                         #f)
                     #{x 33145}#
                     (if (if (vector? #{x 33145}#)
                           (if (= (vector-length #{x 33145}#) 4)
                             (eq? (vector-ref #{x 33145}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 33177}# (vector-ref #{x 33145}# 1))
                             (#{wrap 33178}#
                               (let ((#{w2 33186}# (vector-ref #{x 33145}# 2)))
                                 (let ((#{m1 33187}# (car #{w 32947}#))
                                       (#{s1 33188}# (cdr #{w 32947}#)))
                                   (if (null? #{m1 33187}#)
                                     (if (null? #{s1 33188}#)
                                       #{w2 33186}#
                                       (cons (car #{w2 33186}#)
                                             (let ((#{m2 33203}#
                                                     (cdr #{w2 33186}#)))
                                               (if (null? #{m2 33203}#)
                                                 #{s1 33188}#
                                                 (append
                                                   #{s1 33188}#
                                                   #{m2 33203}#)))))
                                     (cons (let ((#{m2 33211}#
                                                   (car #{w2 33186}#)))
                                             (if (null? #{m2 33211}#)
                                               #{m1 33187}#
                                               (append
                                                 #{m1 33187}#
                                                 #{m2 33211}#)))
                                           (let ((#{m2 33219}#
                                                   (cdr #{w2 33186}#)))
                                             (if (null? #{m2 33219}#)
                                               #{s1 33188}#
                                               (append
                                                 #{s1 33188}#
                                                 #{m2 33219}#))))))))
                             (#{module 33179}# (vector-ref #{x 33145}# 3)))
                         (vector
                           'syntax-object
                           #{expression 33177}#
                           #{wrap 33178}#
                           #{module 33179}#))
                       (if (null? #{x 33145}#)
                         #{x 33145}#
                         (vector
                           'syntax-object
                           #{x 33145}#
                           #{w 32947}#
                           #{mod 32949}#)))))
                 (#{extend-var-env 4338}#
                   #{labels 32956}#
                   #{vars 32955}#
                   #{r 32946}#)
                 (#{make-binding-wrap 4357}#
                   #{ids 32954}#
                   #{labels 32956}#
                   #{w 32947}#)
                 #{mod 32949}#)))))))
   (#{lambda*-formals 4386}#
     (lambda (#{orig-args 33450}#)
       (letrec*
         ((#{req 33451}#
            (lambda (#{args 33458}# #{rreq 33459}#)
              (let ((#{tmp 33461}# ($sc-dispatch #{args 33458}# '())))
                (if #{tmp 33461}#
                  (@apply
                    (lambda ()
                      (#{check 33455}#
                        (reverse #{rreq 33459}#)
                        '()
                        #f
                        '()))
                    #{tmp 33461}#)
                  (let ((#{tmp 33580}#
                          ($sc-dispatch #{args 33458}# '(any . any))))
                    (if (if #{tmp 33580}#
                          (@apply
                            (lambda (#{a 33584}# #{b 33585}#)
                              (if (symbol? #{a 33584}#)
                                #t
                                (if (if (vector? #{a 33584}#)
                                      (if (= (vector-length #{a 33584}#) 4)
                                        (eq? (vector-ref #{a 33584}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 33584}# 1))
                                  #f)))
                            #{tmp 33580}#)
                          #f)
                      (@apply
                        (lambda (#{a 33612}# #{b 33613}#)
                          (#{req 33451}#
                            #{b 33613}#
                            (cons #{a 33612}# #{rreq 33459}#)))
                        #{tmp 33580}#)
                      (let ((#{tmp 33614}#
                              ($sc-dispatch #{args 33458}# '(any . any))))
                        (if (if #{tmp 33614}#
                              (@apply
                                (lambda (#{a 33618}# #{b 33619}#)
                                  (eq? (syntax->datum #{a 33618}#) #:optional))
                                #{tmp 33614}#)
                              #f)
                          (@apply
                            (lambda (#{a 33620}# #{b 33621}#)
                              (#{opt 33452}#
                                #{b 33621}#
                                (reverse #{rreq 33459}#)
                                '()))
                            #{tmp 33614}#)
                          (let ((#{tmp 33624}#
                                  ($sc-dispatch #{args 33458}# '(any . any))))
                            (if (if #{tmp 33624}#
                                  (@apply
                                    (lambda (#{a 33628}# #{b 33629}#)
                                      (eq? (syntax->datum #{a 33628}#) #:key))
                                    #{tmp 33624}#)
                                  #f)
                              (@apply
                                (lambda (#{a 33630}# #{b 33631}#)
                                  (#{key 33453}#
                                    #{b 33631}#
                                    (reverse #{rreq 33459}#)
                                    '()
                                    '()))
                                #{tmp 33624}#)
                              (let ((#{tmp 33634}#
                                      ($sc-dispatch
                                        #{args 33458}#
                                        '(any any))))
                                (if (if #{tmp 33634}#
                                      (@apply
                                        (lambda (#{a 33638}# #{b 33639}#)
                                          (eq? (syntax->datum #{a 33638}#)
                                               #:rest))
                                        #{tmp 33634}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 33640}# #{b 33641}#)
                                      (#{rest 33454}#
                                        #{b 33641}#
                                        (reverse #{rreq 33459}#)
                                        '()
                                        '()))
                                    #{tmp 33634}#)
                                  (let ((#{tmp 33644}# (list #{args 33458}#)))
                                    (if (@apply
                                          (lambda (#{r 33646}#)
                                            (if (symbol? #{r 33646}#)
                                              #t
                                              (if (if (vector? #{r 33646}#)
                                                    (if (= (vector-length
                                                             #{r 33646}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 33646}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 33646}# 1))
                                                #f)))
                                          #{tmp 33644}#)
                                      (@apply
                                        (lambda (#{r 33676}#)
                                          (#{rest 33454}#
                                            #{r 33676}#
                                            (reverse #{rreq 33459}#)
                                            '()
                                            '()))
                                        #{tmp 33644}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 33450}#
                                        #{args 33458}#)))))))))))))))
          (#{opt 33452}#
            (lambda (#{args 33695}# #{req 33696}# #{ropt 33697}#)
              (let ((#{tmp 33699}# ($sc-dispatch #{args 33695}# '())))
                (if #{tmp 33699}#
                  (@apply
                    (lambda ()
                      (#{check 33455}#
                        #{req 33696}#
                        (reverse #{ropt 33697}#)
                        #f
                        '()))
                    #{tmp 33699}#)
                  (let ((#{tmp 33820}#
                          ($sc-dispatch #{args 33695}# '(any . any))))
                    (if (if #{tmp 33820}#
                          (@apply
                            (lambda (#{a 33824}# #{b 33825}#)
                              (if (symbol? #{a 33824}#)
                                #t
                                (if (if (vector? #{a 33824}#)
                                      (if (= (vector-length #{a 33824}#) 4)
                                        (eq? (vector-ref #{a 33824}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 33824}# 1))
                                  #f)))
                            #{tmp 33820}#)
                          #f)
                      (@apply
                        (lambda (#{a 33852}# #{b 33853}#)
                          (#{opt 33452}#
                            #{b 33853}#
                            #{req 33696}#
                            (cons (cons #{a 33852}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i2402" "i2403"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i2392" "i2393" "i2394"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i2338"
                                                "i2336"
                                                "i2334"
                                                "i2332"
                                                "i2330"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i2329"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-call
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i402"
                                                "i400"
                                                "i397"
                                                "i396"
                                                "i395"
                                                "i393"
                                                "i392"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i373"
                                                "i371"
                                                "i370"
                                                "i368"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i361"
                                                "i360"
                                                "i359"
                                                "i357"
                                                "i356"
                                                "i353"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i340"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i334"
                                                "i331"
                                                "i330"
                                                "i328"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i262"
                                                "i259"
                                                "i257"
                                                "i256"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i244"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))))
                                  #{ropt 33697}#)))
                        #{tmp 33820}#)
                      (let ((#{tmp 33854}#
                              ($sc-dispatch
                                #{args 33695}#
                                '((any any) . any))))
                        (if (if #{tmp 33854}#
                              (@apply
                                (lambda (#{a 33858}#
                                         #{init 33859}#
                                         #{b 33860}#)
                                  (if (symbol? #{a 33858}#)
                                    #t
                                    (if (if (vector? #{a 33858}#)
                                          (if (= (vector-length #{a 33858}#) 4)
                                            (eq? (vector-ref #{a 33858}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 33858}# 1))
                                      #f)))
                                #{tmp 33854}#)
                              #f)
                          (@apply
                            (lambda (#{a 33887}# #{init 33888}# #{b 33889}#)
                              (#{opt 33452}#
                                #{b 33889}#
                                #{req 33696}#
                                (cons (list #{a 33887}# #{init 33888}#)
                                      #{ropt 33697}#)))
                            #{tmp 33854}#)
                          (let ((#{tmp 33890}#
                                  ($sc-dispatch #{args 33695}# '(any . any))))
                            (if (if #{tmp 33890}#
                                  (@apply
                                    (lambda (#{a 33894}# #{b 33895}#)
                                      (eq? (syntax->datum #{a 33894}#) #:key))
                                    #{tmp 33890}#)
                                  #f)
                              (@apply
                                (lambda (#{a 33896}# #{b 33897}#)
                                  (#{key 33453}#
                                    #{b 33897}#
                                    #{req 33696}#
                                    (reverse #{ropt 33697}#)
                                    '()))
                                #{tmp 33890}#)
                              (let ((#{tmp 33900}#
                                      ($sc-dispatch
                                        #{args 33695}#
                                        '(any any))))
                                (if (if #{tmp 33900}#
                                      (@apply
                                        (lambda (#{a 33904}# #{b 33905}#)
                                          (eq? (syntax->datum #{a 33904}#)
                                               #:rest))
                                        #{tmp 33900}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 33906}# #{b 33907}#)
                                      (#{rest 33454}#
                                        #{b 33907}#
                                        #{req 33696}#
                                        (reverse #{ropt 33697}#)
                                        '()))
                                    #{tmp 33900}#)
                                  (let ((#{tmp 33910}# (list #{args 33695}#)))
                                    (if (@apply
                                          (lambda (#{r 33912}#)
                                            (if (symbol? #{r 33912}#)
                                              #t
                                              (if (if (vector? #{r 33912}#)
                                                    (if (= (vector-length
                                                             #{r 33912}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 33912}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 33912}# 1))
                                                #f)))
                                          #{tmp 33910}#)
                                      (@apply
                                        (lambda (#{r 33942}#)
                                          (#{rest 33454}#
                                            #{r 33942}#
                                            #{req 33696}#
                                            (reverse #{ropt 33697}#)
                                            '()))
                                        #{tmp 33910}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 33450}#
                                        #{args 33695}#)))))))))))))))
          (#{key 33453}#
            (lambda (#{args 33961}#
                     #{req 33962}#
                     #{opt 33963}#
                     #{rkey 33964}#)
              (let ((#{tmp 33966}# ($sc-dispatch #{args 33961}# '())))
                (if #{tmp 33966}#
                  (@apply
                    (lambda ()
                      (#{check 33455}#
                        #{req 33962}#
                        #{opt 33963}#
                        #f
                        (cons #f (reverse #{rkey 33964}#))))
                    #{tmp 33966}#)
                  (let ((#{tmp 34088}#
                          ($sc-dispatch #{args 33961}# '(any . any))))
                    (if (if #{tmp 34088}#
                          (@apply
                            (lambda (#{a 34092}# #{b 34093}#)
                              (if (symbol? #{a 34092}#)
                                #t
                                (if (if (vector? #{a 34092}#)
                                      (if (= (vector-length #{a 34092}#) 4)
                                        (eq? (vector-ref #{a 34092}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 34092}# 1))
                                  #f)))
                            #{tmp 34088}#)
                          #f)
                      (@apply
                        (lambda (#{a 34120}# #{b 34121}#)
                          (let ((#{tmp 34122}#
                                  (symbol->keyword
                                    (syntax->datum #{a 34120}#))))
                            (#{key 33453}#
                              #{b 34121}#
                              #{req 33962}#
                              #{opt 33963}#
                              (cons (cons #{tmp 34122}#
                                          (cons #{a 34120}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i2465"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2459" "i2460"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i2448"
                                                         "i2449"
                                                         "i2450"
                                                         "i2451"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2338"
                                                        "i2336"
                                                        "i2334"
                                                        "i2332"
                                                        "i2330"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2329"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         chi-lambda-case
                                                         lambda*-formals
                                                         chi-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         chi-void
                                                         eval-local-transformer
                                                         chi-local-syntax
                                                         chi-body
                                                         chi-macro
                                                         chi-call
                                                         chi-expr
                                                         chi
                                                         syntax-type
                                                         chi-when-list
                                                         chi-install-global
                                                         chi-top-sequence
                                                         chi-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-primcall
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-call
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-seq
                                                         make-primcall
                                                         make-call
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i471"
                                                        "i469"
                                                        "i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i402"
                                                        "i400"
                                                        "i397"
                                                        "i396"
                                                        "i395"
                                                        "i393"
                                                        "i392"
                                                        "i390"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i373"
                                                        "i371"
                                                        "i370"
                                                        "i368"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i361"
                                                        "i360"
                                                        "i359"
                                                        "i357"
                                                        "i356"
                                                        "i353"
                                                        "i351"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i340"
                                                        "i339"
                                                        "i337"
                                                        "i335"
                                                        "i334"
                                                        "i331"
                                                        "i330"
                                                        "i328"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i309"
                                                        "i307"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i262"
                                                        "i259"
                                                        "i257"
                                                        "i256"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i244"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile)))))
                                    #{rkey 33964}#))))
                        #{tmp 34088}#)
                      (let ((#{tmp 34125}#
                              ($sc-dispatch
                                #{args 33961}#
                                '((any any) . any))))
                        (if (if #{tmp 34125}#
                              (@apply
                                (lambda (#{a 34129}#
                                         #{init 34130}#
                                         #{b 34131}#)
                                  (if (symbol? #{a 34129}#)
                                    #t
                                    (if (if (vector? #{a 34129}#)
                                          (if (= (vector-length #{a 34129}#) 4)
                                            (eq? (vector-ref #{a 34129}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 34129}# 1))
                                      #f)))
                                #{tmp 34125}#)
                              #f)
                          (@apply
                            (lambda (#{a 34158}# #{init 34159}# #{b 34160}#)
                              (let ((#{tmp 34161}#
                                      (symbol->keyword
                                        (syntax->datum #{a 34158}#))))
                                (#{key 33453}#
                                  #{b 34160}#
                                  #{req 33962}#
                                  #{opt 33963}#
                                  (cons (list #{tmp 34161}#
                                              #{a 34158}#
                                              #{init 34159}#)
                                        #{rkey 33964}#))))
                            #{tmp 34125}#)
                          (let ((#{tmp 34164}#
                                  ($sc-dispatch
                                    #{args 33961}#
                                    '((any any any) . any))))
                            (if (if #{tmp 34164}#
                                  (@apply
                                    (lambda (#{a 34168}#
                                             #{init 34169}#
                                             #{k 34170}#
                                             #{b 34171}#)
                                      (if (if (symbol? #{a 34168}#)
                                            #t
                                            (if (if (vector? #{a 34168}#)
                                                  (if (= (vector-length
                                                           #{a 34168}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{a 34168}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{a 34168}# 1))
                                              #f))
                                        (keyword? (syntax->datum #{k 34170}#))
                                        #f))
                                    #{tmp 34164}#)
                                  #f)
                              (@apply
                                (lambda (#{a 34198}#
                                         #{init 34199}#
                                         #{k 34200}#
                                         #{b 34201}#)
                                  (#{key 33453}#
                                    #{b 34201}#
                                    #{req 33962}#
                                    #{opt 33963}#
                                    (cons (list #{k 34200}#
                                                #{a 34198}#
                                                #{init 34199}#)
                                          #{rkey 33964}#)))
                                #{tmp 34164}#)
                              (let ((#{tmp 34202}#
                                      ($sc-dispatch #{args 33961}# '(any))))
                                (if (if #{tmp 34202}#
                                      (@apply
                                        (lambda (#{aok 34206}#)
                                          (eq? (syntax->datum #{aok 34206}#)
                                               #:allow-other-keys))
                                        #{tmp 34202}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 34207}#)
                                      (#{check 33455}#
                                        #{req 33962}#
                                        #{opt 33963}#
                                        #f
                                        (cons #t (reverse #{rkey 33964}#))))
                                    #{tmp 34202}#)
                                  (let ((#{tmp 34326}#
                                          ($sc-dispatch
                                            #{args 33961}#
                                            '(any any any))))
                                    (if (if #{tmp 34326}#
                                          (@apply
                                            (lambda (#{aok 34330}#
                                                     #{a 34331}#
                                                     #{b 34332}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 34330}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum
                                                       #{a 34331}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 34326}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 34333}#
                                                 #{a 34334}#
                                                 #{b 34335}#)
                                          (#{rest 33454}#
                                            #{b 34335}#
                                            #{req 33962}#
                                            #{opt 33963}#
                                            (cons #t
                                                  (reverse #{rkey 33964}#))))
                                        #{tmp 34326}#)
                                      (let ((#{tmp 34338}#
                                              ($sc-dispatch
                                                #{args 33961}#
                                                '(any . any))))
                                        (if (if #{tmp 34338}#
                                              (@apply
                                                (lambda (#{aok 34342}#
                                                         #{r 34343}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 34342}#)
                                                           #:allow-other-keys)
                                                    (if (symbol? #{r 34343}#)
                                                      #t
                                                      (if (if (vector?
                                                                #{r 34343}#)
                                                            (if (= (vector-length
                                                                     #{r 34343}#)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     #{r 34343}#
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (symbol?
                                                          (vector-ref
                                                            #{r 34343}#
                                                            1))
                                                        #f))
                                                    #f))
                                                #{tmp 34338}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 34370}# #{r 34371}#)
                                              (#{rest 33454}#
                                                #{r 34371}#
                                                #{req 33962}#
                                                #{opt 33963}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 33964}#))))
                                            #{tmp 34338}#)
                                          (let ((#{tmp 34374}#
                                                  ($sc-dispatch
                                                    #{args 33961}#
                                                    '(any any))))
                                            (if (if #{tmp 34374}#
                                                  (@apply
                                                    (lambda (#{a 34378}#
                                                             #{b 34379}#)
                                                      (eq? (syntax->datum
                                                             #{a 34378}#)
                                                           #:rest))
                                                    #{tmp 34374}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 34380}#
                                                         #{b 34381}#)
                                                  (#{rest 33454}#
                                                    #{b 34381}#
                                                    #{req 33962}#
                                                    #{opt 33963}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 33964}#))))
                                                #{tmp 34374}#)
                                              (let ((#{tmp 34384}#
                                                      (list #{args 33961}#)))
                                                (if (@apply
                                                      (lambda (#{r 34386}#)
                                                        (if (symbol?
                                                              #{r 34386}#)
                                                          #t
                                                          (if (if (vector?
                                                                    #{r 34386}#)
                                                                (if (= (vector-length
                                                                         #{r 34386}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{r 34386}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (symbol?
                                                              (vector-ref
                                                                #{r 34386}#
                                                                1))
                                                            #f)))
                                                      #{tmp 34384}#)
                                                  (@apply
                                                    (lambda (#{r 34416}#)
                                                      (#{rest 33454}#
                                                        #{r 34416}#
                                                        #{req 33962}#
                                                        #{opt 33963}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 33964}#))))
                                                    #{tmp 34384}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 33450}#
                                                    #{args 33961}#)))))))))))))))))))))
          (#{rest 33454}#
            (lambda (#{args 34444}#
                     #{req 34445}#
                     #{opt 34446}#
                     #{kw 34447}#)
              (let ((#{tmp 34449}# (list #{args 34444}#)))
                (if (@apply
                      (lambda (#{r 34451}#)
                        (if (symbol? #{r 34451}#)
                          #t
                          (if (if (vector? #{r 34451}#)
                                (if (= (vector-length #{r 34451}#) 4)
                                  (eq? (vector-ref #{r 34451}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{r 34451}# 1))
                            #f)))
                      #{tmp 34449}#)
                  (@apply
                    (lambda (#{r 34481}#)
                      (#{check 33455}#
                        #{req 34445}#
                        #{opt 34446}#
                        #{r 34481}#
                        #{kw 34447}#))
                    #{tmp 34449}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 33450}#
                    #{args 34444}#)))))
          (#{check 33455}#
            (lambda (#{req 34609}#
                     #{opt 34610}#
                     #{rest 34611}#
                     #{kw 34612}#)
              (if (#{distinct-bound-ids? 4366}#
                    (append
                      #{req 34609}#
                      (map car #{opt 34610}#)
                      (if #{rest 34611}# (list #{rest 34611}#) '())
                      (if (pair? #{kw 34612}#)
                        (map cadr (cdr #{kw 34612}#))
                        '())))
                (values
                  #{req 34609}#
                  #{opt 34610}#
                  #{rest 34611}#
                  #{kw 34612}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 33450}#)))))
         (#{req 33451}# #{orig-args 33450}# '()))))
   (#{chi-lambda-case 4387}#
     (lambda (#{e 34721}#
              #{r 34722}#
              #{w 34723}#
              #{s 34724}#
              #{mod 34725}#
              #{get-formals 34726}#
              #{clauses 34727}#)
       (letrec*
         ((#{expand-req 34728}#
            (lambda (#{req 34864}#
                     #{opt 34865}#
                     #{rest 34866}#
                     #{kw 34867}#
                     #{body 34868}#)
              (let ((#{vars 34869}#
                      (map #{gen-var 4389}# #{req 34864}#))
                    (#{labels 34870}#
                      (#{gen-labels 4346}# #{req 34864}#)))
                (let ((#{r* 34871}#
                        (#{extend-var-env 4338}#
                          #{labels 34870}#
                          #{vars 34869}#
                          #{r 34722}#))
                      (#{w* 34872}#
                        (#{make-binding-wrap 4357}#
                          #{req 34864}#
                          #{labels 34870}#
                          #{w 34723}#)))
                  (#{expand-opt 34729}#
                    (map syntax->datum #{req 34864}#)
                    #{opt 34865}#
                    #{rest 34866}#
                    #{kw 34867}#
                    #{body 34868}#
                    (reverse #{vars 34869}#)
                    #{r* 34871}#
                    #{w* 34872}#
                    '()
                    '())))))
          (#{expand-opt 34729}#
            (lambda (#{req 35108}#
                     #{opt 35109}#
                     #{rest 35110}#
                     #{kw 35111}#
                     #{body 35112}#
                     #{vars 35113}#
                     #{r* 35114}#
                     #{w* 35115}#
                     #{out 35116}#
                     #{inits 35117}#)
              (if (pair? #{opt 35109}#)
                (let ((#{tmp 35118}# (car #{opt 35109}#)))
                  (let ((#{tmp 35119}#
                          ($sc-dispatch #{tmp 35118}# '(any any))))
                    (if #{tmp 35119}#
                      (@apply
                        (lambda (#{id 35121}# #{i 35122}#)
                          (let ((#{v 35123}#
                                  (let ((#{id 35131}#
                                          (if (if (vector? #{id 35121}#)
                                                (if (= (vector-length
                                                         #{id 35121}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 35121}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 35121}# 1)
                                            #{id 35121}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 35131}#)
                                        " ")))))
                            (let ((#{l 35124}#
                                    (#{gen-labels 4346}# (list #{v 35123}#))))
                              (let ((#{r** 35125}#
                                      (#{extend-var-env 4338}#
                                        #{l 35124}#
                                        (list #{v 35123}#)
                                        #{r* 35114}#)))
                                (let ((#{w** 35126}#
                                        (#{make-binding-wrap 4357}#
                                          (list #{id 35121}#)
                                          #{l 35124}#
                                          #{w* 35115}#)))
                                  (#{expand-opt 34729}#
                                    #{req 35108}#
                                    (cdr #{opt 35109}#)
                                    #{rest 35110}#
                                    #{kw 35111}#
                                    #{body 35112}#
                                    (cons #{v 35123}# #{vars 35113}#)
                                    #{r** 35125}#
                                    #{w** 35126}#
                                    (cons (syntax->datum #{id 35121}#)
                                          #{out 35116}#)
                                    (cons (#{chi 4375}#
                                            #{i 35122}#
                                            #{r* 35114}#
                                            #{w* 35115}#
                                            #{mod 34725}#)
                                          #{inits 35117}#)))))))
                        #{tmp 35119}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 35118}#))))
                (if #{rest 35110}#
                  (let ((#{v 35430}#
                          (let ((#{id 35440}#
                                  (if (if (vector? #{rest 35110}#)
                                        (if (= (vector-length #{rest 35110}#)
                                               4)
                                          (eq? (vector-ref #{rest 35110}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{rest 35110}# 1)
                                    #{rest 35110}#)))
                            (gensym
                              (string-append
                                (symbol->string #{id 35440}#)
                                " ")))))
                    (let ((#{l 35431}#
                            (#{gen-labels 4346}# (list #{v 35430}#))))
                      (let ((#{r* 35432}#
                              (#{extend-var-env 4338}#
                                #{l 35431}#
                                (list #{v 35430}#)
                                #{r* 35114}#)))
                        (let ((#{w* 35433}#
                                (#{make-binding-wrap 4357}#
                                  (list #{rest 35110}#)
                                  #{l 35431}#
                                  #{w* 35115}#)))
                          (#{expand-kw 34730}#
                            #{req 35108}#
                            (if (pair? #{out 35116}#)
                              (reverse #{out 35116}#)
                              #f)
                            (syntax->datum #{rest 35110}#)
                            (if (pair? #{kw 35111}#)
                              (cdr #{kw 35111}#)
                              #{kw 35111}#)
                            #{body 35112}#
                            (cons #{v 35430}# #{vars 35113}#)
                            #{r* 35432}#
                            #{w* 35433}#
                            (if (pair? #{kw 35111}#) (car #{kw 35111}#) #f)
                            '()
                            #{inits 35117}#)))))
                  (#{expand-kw 34730}#
                    #{req 35108}#
                    (if (pair? #{out 35116}#)
                      (reverse #{out 35116}#)
                      #f)
                    #f
                    (if (pair? #{kw 35111}#)
                      (cdr #{kw 35111}#)
                      #{kw 35111}#)
                    #{body 35112}#
                    #{vars 35113}#
                    #{r* 35114}#
                    #{w* 35115}#
                    (if (pair? #{kw 35111}#) (car #{kw 35111}#) #f)
                    '()
                    #{inits 35117}#)))))
          (#{expand-kw 34730}#
            (lambda (#{req 35662}#
                     #{opt 35663}#
                     #{rest 35664}#
                     #{kw 35665}#
                     #{body 35666}#
                     #{vars 35667}#
                     #{r* 35668}#
                     #{w* 35669}#
                     #{aok 35670}#
                     #{out 35671}#
                     #{inits 35672}#)
              (if (pair? #{kw 35665}#)
                (let ((#{tmp 35673}# (car #{kw 35665}#)))
                  (let ((#{tmp 35674}#
                          ($sc-dispatch #{tmp 35673}# '(any any any))))
                    (if #{tmp 35674}#
                      (@apply
                        (lambda (#{k 35676}# #{id 35677}# #{i 35678}#)
                          (let ((#{v 35679}#
                                  (let ((#{id 35687}#
                                          (if (if (vector? #{id 35677}#)
                                                (if (= (vector-length
                                                         #{id 35677}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 35677}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 35677}# 1)
                                            #{id 35677}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 35687}#)
                                        " ")))))
                            (let ((#{l 35680}#
                                    (#{gen-labels 4346}# (list #{v 35679}#))))
                              (let ((#{r** 35681}#
                                      (#{extend-var-env 4338}#
                                        #{l 35680}#
                                        (list #{v 35679}#)
                                        #{r* 35668}#)))
                                (let ((#{w** 35682}#
                                        (#{make-binding-wrap 4357}#
                                          (list #{id 35677}#)
                                          #{l 35680}#
                                          #{w* 35669}#)))
                                  (#{expand-kw 34730}#
                                    #{req 35662}#
                                    #{opt 35663}#
                                    #{rest 35664}#
                                    (cdr #{kw 35665}#)
                                    #{body 35666}#
                                    (cons #{v 35679}# #{vars 35667}#)
                                    #{r** 35681}#
                                    #{w** 35682}#
                                    #{aok 35670}#
                                    (cons (list (syntax->datum #{k 35676}#)
                                                (syntax->datum #{id 35677}#)
                                                #{v 35679}#)
                                          #{out 35671}#)
                                    (cons (#{chi 4375}#
                                            #{i 35678}#
                                            #{r* 35668}#
                                            #{w* 35669}#
                                            #{mod 34725}#)
                                          #{inits 35672}#)))))))
                        #{tmp 35674}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 35673}#))))
                (#{expand-body 34731}#
                  #{req 35662}#
                  #{opt 35663}#
                  #{rest 35664}#
                  (if (if #{aok 35670}#
                        #{aok 35670}#
                        (pair? #{out 35671}#))
                    (cons #{aok 35670}# (reverse #{out 35671}#))
                    #f)
                  #{body 35666}#
                  (reverse #{vars 35667}#)
                  #{r* 35668}#
                  #{w* 35669}#
                  (reverse #{inits 35672}#)
                  '()))))
          (#{expand-body 34731}#
            (lambda (#{req 35995}#
                     #{opt 35996}#
                     #{rest 35997}#
                     #{kw 35998}#
                     #{body 35999}#
                     #{vars 36000}#
                     #{r* 36001}#
                     #{w* 36002}#
                     #{inits 36003}#
                     #{meta 36004}#)
              (let ((#{tmp 36006}#
                      ($sc-dispatch
                        #{body 35999}#
                        '(any any . each-any))))
                (if (if #{tmp 36006}#
                      (@apply
                        (lambda (#{docstring 36010}# #{e1 36011}# #{e2 36012}#)
                          (string? (syntax->datum #{docstring 36010}#)))
                        #{tmp 36006}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 36013}# #{e1 36014}# #{e2 36015}#)
                      (#{expand-body 34731}#
                        #{req 35995}#
                        #{opt 35996}#
                        #{rest 35997}#
                        #{kw 35998}#
                        (cons #{e1 36014}# #{e2 36015}#)
                        #{vars 36000}#
                        #{r* 36001}#
                        #{w* 36002}#
                        #{inits 36003}#
                        (append
                          #{meta 36004}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 36013}#))))))
                    #{tmp 36006}#)
                  (let ((#{tmp 36016}#
                          ($sc-dispatch
                            #{body 35999}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 36016}#
                      (@apply
                        (lambda (#{k 36020}#
                                 #{v 36021}#
                                 #{e1 36022}#
                                 #{e2 36023}#)
                          (#{expand-body 34731}#
                            #{req 35995}#
                            #{opt 35996}#
                            #{rest 35997}#
                            #{kw 35998}#
                            (cons #{e1 36022}# #{e2 36023}#)
                            #{vars 36000}#
                            #{r* 36001}#
                            #{w* 36002}#
                            #{inits 36003}#
                            (append
                              #{meta 36004}#
                              (syntax->datum
                                (map cons #{k 36020}# #{v 36021}#)))))
                        #{tmp 36016}#)
                      (let ((#{tmp 36024}#
                              ($sc-dispatch #{body 35999}# '(any . each-any))))
                        (if #{tmp 36024}#
                          (@apply
                            (lambda (#{e1 36028}# #{e2 36029}#)
                              (values
                                #{meta 36004}#
                                #{req 35995}#
                                #{opt 35996}#
                                #{rest 35997}#
                                #{kw 35998}#
                                #{inits 36003}#
                                #{vars 36000}#
                                (#{chi-body 4379}#
                                  (cons #{e1 36028}# #{e2 36029}#)
                                  (let ((#{x 36041}#
                                          (begin
                                            (if (if (pair? #{e 34721}#)
                                                  #{s 34724}#
                                                  #f)
                                              (set-source-properties!
                                                #{e 34721}#
                                                #{s 34724}#))
                                            #{e 34721}#)))
                                    (if (if (null? (car #{w 34723}#))
                                          (null? (cdr #{w 34723}#))
                                          #f)
                                      #{x 36041}#
                                      (if (if (vector? #{x 36041}#)
                                            (if (= (vector-length #{x 36041}#)
                                                   4)
                                              (eq? (vector-ref #{x 36041}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (let ((#{expression 36073}#
                                                (vector-ref #{x 36041}# 1))
                                              (#{wrap 36074}#
                                                (let ((#{w2 36082}#
                                                        (vector-ref
                                                          #{x 36041}#
                                                          2)))
                                                  (let ((#{m1 36083}#
                                                          (car #{w 34723}#))
                                                        (#{s1 36084}#
                                                          (cdr #{w 34723}#)))
                                                    (if (null? #{m1 36083}#)
                                                      (if (null? #{s1 36084}#)
                                                        #{w2 36082}#
                                                        (cons (car #{w2 36082}#)
                                                              (let ((#{m2 36099}#
                                                                      (cdr #{w2 36082}#)))
                                                                (if (null? #{m2 36099}#)
                                                                  #{s1 36084}#
                                                                  (append
                                                                    #{s1 36084}#
                                                                    #{m2 36099}#)))))
                                                      (cons (let ((#{m2 36107}#
                                                                    (car #{w2 36082}#)))
                                                              (if (null? #{m2 36107}#)
                                                                #{m1 36083}#
                                                                (append
                                                                  #{m1 36083}#
                                                                  #{m2 36107}#)))
                                                            (let ((#{m2 36115}#
                                                                    (cdr #{w2 36082}#)))
                                                              (if (null? #{m2 36115}#)
                                                                #{s1 36084}#
                                                                (append
                                                                  #{s1 36084}#
                                                                  #{m2 36115}#))))))))
                                              (#{module 36075}#
                                                (vector-ref #{x 36041}# 3)))
                                          (vector
                                            'syntax-object
                                            #{expression 36073}#
                                            #{wrap 36074}#
                                            #{module 36075}#))
                                        (if (null? #{x 36041}#)
                                          #{x 36041}#
                                          (vector
                                            'syntax-object
                                            #{x 36041}#
                                            #{w 34723}#
                                            #{mod 34725}#)))))
                                  #{r* 36001}#
                                  #{w* 36002}#
                                  #{mod 34725}#)))
                            #{tmp 36024}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 35999}#))))))))))
         (let ((#{tmp 34733}#
                 ($sc-dispatch #{clauses 34727}# '())))
           (if #{tmp 34733}#
             (@apply
               (lambda () (values '() #f))
               #{tmp 34733}#)
             (let ((#{tmp 34738}#
                     ($sc-dispatch
                       #{clauses 34727}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 34738}#
                 (@apply
                   (lambda (#{args 34742}#
                            #{e1 34743}#
                            #{e2 34744}#
                            #{args* 34745}#
                            #{e1* 34746}#
                            #{e2* 34747}#)
                     (call-with-values
                       (lambda ()
                         (#{get-formals 34726}# #{args 34742}#))
                       (lambda (#{req 34748}#
                                #{opt 34749}#
                                #{rest 34750}#
                                #{kw 34751}#)
                         (call-with-values
                           (lambda ()
                             (#{expand-req 34728}#
                               #{req 34748}#
                               #{opt 34749}#
                               #{rest 34750}#
                               #{kw 34751}#
                               (cons #{e1 34743}# #{e2 34744}#)))
                           (lambda (#{meta 34820}#
                                    #{req 34821}#
                                    #{opt 34822}#
                                    #{rest 34823}#
                                    #{kw 34824}#
                                    #{inits 34825}#
                                    #{vars 34826}#
                                    #{body 34827}#)
                             (call-with-values
                               (lambda ()
                                 (#{chi-lambda-case 4387}#
                                   #{e 34721}#
                                   #{r 34722}#
                                   #{w 34723}#
                                   #{s 34724}#
                                   #{mod 34725}#
                                   #{get-formals 34726}#
                                   (map (lambda (#{tmp 2808 34828}#
                                                 #{tmp 2807 34829}#
                                                 #{tmp 2806 34830}#)
                                          (cons #{tmp 2806 34830}#
                                                (cons #{tmp 2807 34829}#
                                                      #{tmp 2808 34828}#)))
                                        #{e2* 34747}#
                                        #{e1* 34746}#
                                        #{args* 34745}#)))
                               (lambda (#{meta* 34831}# #{else* 34832}#)
                                 (values
                                   (append #{meta 34820}# #{meta* 34831}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #{s 34724}#
                                     #{req 34821}#
                                     #{opt 34822}#
                                     #{rest 34823}#
                                     #{kw 34824}#
                                     #{inits 34825}#
                                     #{vars 34826}#
                                     #{body 34827}#
                                     #{else* 34832}#)))))))))
                   #{tmp 34738}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 34727}#))))))))
   (#{strip 4388}#
     (lambda (#{x 36142}# #{w 36143}#)
       (if (memq 'top (car #{w 36143}#))
         #{x 36142}#
         (letrec*
           ((#{f 36144}#
              (lambda (#{x 36147}#)
                (if (if (vector? #{x 36147}#)
                      (if (= (vector-length #{x 36147}#) 4)
                        (eq? (vector-ref #{x 36147}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{strip 4388}#
                    (vector-ref #{x 36147}# 1)
                    (vector-ref #{x 36147}# 2))
                  (if (pair? #{x 36147}#)
                    (let ((#{a 36166}# (#{f 36144}# (car #{x 36147}#)))
                          (#{d 36167}# (#{f 36144}# (cdr #{x 36147}#))))
                      (if (if (eq? #{a 36166}# (car #{x 36147}#))
                            (eq? #{d 36167}# (cdr #{x 36147}#))
                            #f)
                        #{x 36147}#
                        (cons #{a 36166}# #{d 36167}#)))
                    (if (vector? #{x 36147}#)
                      (let ((#{old 36170}# (vector->list #{x 36147}#)))
                        (let ((#{new 36171}# (map #{f 36144}# #{old 36170}#)))
                          (letrec*
                            ((#{lp 36172}#
                               (lambda (#{l1 36269}# #{l2 36270}#)
                                 (if (null? #{l1 36269}#)
                                   #{x 36147}#
                                   (if (eq? (car #{l1 36269}#)
                                            (car #{l2 36270}#))
                                     (#{lp 36172}#
                                       (cdr #{l1 36269}#)
                                       (cdr #{l2 36270}#))
                                     (list->vector #{new 36171}#))))))
                            (#{lp 36172}# #{old 36170}# #{new 36171}#))))
                      #{x 36147}#))))))
           (#{f 36144}# #{x 36142}#)))))
   (#{gen-var 4389}#
     (lambda (#{id 34876}#)
       (let ((#{id 34877}#
               (if (if (vector? #{id 34876}#)
                     (if (= (vector-length #{id 34876}#) 4)
                       (eq? (vector-ref #{id 34876}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{id 34876}# 1)
                 #{id 34876}#)))
         (gensym
           (string-append (symbol->string #{id 34877}#) " ")))))
   (#{lambda-var-list 4390}#
     (lambda (#{vars 36271}#)
       (letrec*
         ((#{lvl 36272}#
            (lambda (#{vars 36275}# #{ls 36276}# #{w 36277}#)
              (if (pair? #{vars 36275}#)
                (#{lvl 36272}#
                  (cdr #{vars 36275}#)
                  (cons (let ((#{x 36281}# (car #{vars 36275}#)))
                          (if (if (null? (car #{w 36277}#))
                                (null? (cdr #{w 36277}#))
                                #f)
                            #{x 36281}#
                            (if (if (vector? #{x 36281}#)
                                  (if (= (vector-length #{x 36281}#) 4)
                                    (eq? (vector-ref #{x 36281}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (let ((#{expression 36299}#
                                      (vector-ref #{x 36281}# 1))
                                    (#{wrap 36300}#
                                      (let ((#{w2 36308}#
                                              (vector-ref #{x 36281}# 2)))
                                        (let ((#{m1 36309}# (car #{w 36277}#))
                                              (#{s1 36310}# (cdr #{w 36277}#)))
                                          (if (null? #{m1 36309}#)
                                            (if (null? #{s1 36310}#)
                                              #{w2 36308}#
                                              (cons (car #{w2 36308}#)
                                                    (let ((#{m2 36325}#
                                                            (cdr #{w2 36308}#)))
                                                      (if (null? #{m2 36325}#)
                                                        #{s1 36310}#
                                                        (append
                                                          #{s1 36310}#
                                                          #{m2 36325}#)))))
                                            (cons (let ((#{m2 36333}#
                                                          (car #{w2 36308}#)))
                                                    (if (null? #{m2 36333}#)
                                                      #{m1 36309}#
                                                      (append
                                                        #{m1 36309}#
                                                        #{m2 36333}#)))
                                                  (let ((#{m2 36341}#
                                                          (cdr #{w2 36308}#)))
                                                    (if (null? #{m2 36341}#)
                                                      #{s1 36310}#
                                                      (append
                                                        #{s1 36310}#
                                                        #{m2 36341}#))))))))
                                    (#{module 36301}#
                                      (vector-ref #{x 36281}# 3)))
                                (vector
                                  'syntax-object
                                  #{expression 36299}#
                                  #{wrap 36300}#
                                  #{module 36301}#))
                              (if (null? #{x 36281}#)
                                #{x 36281}#
                                (vector
                                  'syntax-object
                                  #{x 36281}#
                                  #{w 36277}#
                                  #f)))))
                        #{ls 36276}#)
                  #{w 36277}#)
                (if (if (symbol? #{vars 36275}#)
                      #t
                      (if (if (vector? #{vars 36275}#)
                            (if (= (vector-length #{vars 36275}#) 4)
                              (eq? (vector-ref #{vars 36275}# 0)
                                   'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{vars 36275}# 1))
                        #f))
                  (cons (if (if (null? (car #{w 36277}#))
                              (null? (cdr #{w 36277}#))
                              #f)
                          #{vars 36275}#
                          (if (if (vector? #{vars 36275}#)
                                (if (= (vector-length #{vars 36275}#) 4)
                                  (eq? (vector-ref #{vars 36275}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (let ((#{expression 36411}#
                                    (vector-ref #{vars 36275}# 1))
                                  (#{wrap 36412}#
                                    (let ((#{w2 36422}#
                                            (vector-ref #{vars 36275}# 2)))
                                      (let ((#{m1 36423}# (car #{w 36277}#))
                                            (#{s1 36424}# (cdr #{w 36277}#)))
                                        (if (null? #{m1 36423}#)
                                          (if (null? #{s1 36424}#)
                                            #{w2 36422}#
                                            (cons (car #{w2 36422}#)
                                                  (let ((#{m2 36441}#
                                                          (cdr #{w2 36422}#)))
                                                    (if (null? #{m2 36441}#)
                                                      #{s1 36424}#
                                                      (append
                                                        #{s1 36424}#
                                                        #{m2 36441}#)))))
                                          (cons (let ((#{m2 36449}#
                                                        (car #{w2 36422}#)))
                                                  (if (null? #{m2 36449}#)
                                                    #{m1 36423}#
                                                    (append
                                                      #{m1 36423}#
                                                      #{m2 36449}#)))
                                                (let ((#{m2 36457}#
                                                        (cdr #{w2 36422}#)))
                                                  (if (null? #{m2 36457}#)
                                                    #{s1 36424}#
                                                    (append
                                                      #{s1 36424}#
                                                      #{m2 36457}#))))))))
                                  (#{module 36413}#
                                    (vector-ref #{vars 36275}# 3)))
                              (vector
                                'syntax-object
                                #{expression 36411}#
                                #{wrap 36412}#
                                #{module 36413}#))
                            (if (null? #{vars 36275}#)
                              #{vars 36275}#
                              (vector
                                'syntax-object
                                #{vars 36275}#
                                #{w 36277}#
                                #f))))
                        #{ls 36276}#)
                  (if (null? #{vars 36275}#)
                    #{ls 36276}#
                    (if (if (vector? #{vars 36275}#)
                          (if (= (vector-length #{vars 36275}#) 4)
                            (eq? (vector-ref #{vars 36275}# 0)
                                 'syntax-object)
                            #f)
                          #f)
                      (#{lvl 36272}#
                        (vector-ref #{vars 36275}# 1)
                        #{ls 36276}#
                        (let ((#{w2 36498}# (vector-ref #{vars 36275}# 2)))
                          (let ((#{m1 36499}# (car #{w 36277}#))
                                (#{s1 36500}# (cdr #{w 36277}#)))
                            (if (null? #{m1 36499}#)
                              (if (null? #{s1 36500}#)
                                #{w2 36498}#
                                (cons (car #{w2 36498}#)
                                      (let ((#{m2 36511}# (cdr #{w2 36498}#)))
                                        (if (null? #{m2 36511}#)
                                          #{s1 36500}#
                                          (append
                                            #{s1 36500}#
                                            #{m2 36511}#)))))
                              (cons (let ((#{m2 36519}# (car #{w2 36498}#)))
                                      (if (null? #{m2 36519}#)
                                        #{m1 36499}#
                                        (append #{m1 36499}# #{m2 36519}#)))
                                    (let ((#{m2 36527}# (cdr #{w2 36498}#)))
                                      (if (null? #{m2 36527}#)
                                        #{s1 36500}#
                                        (append
                                          #{s1 36500}#
                                          #{m2 36527}#))))))))
                      (cons #{vars 36275}# #{ls 36276}#))))))))
         (#{lvl 36272}# #{vars 36271}# '() '(()))))))
  (begin
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 4341}#
      'core
      'fluid-let-syntax
      (lambda (#{e 4515}#
               #{r 4516}#
               #{w 4517}#
               #{s 4518}#
               #{mod 4519}#)
        (let ((#{tmp 4521}#
                ($sc-dispatch
                  #{e 4515}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 4521}#
                (@apply
                  (lambda (#{var 4525}#
                           #{val 4526}#
                           #{e1 4527}#
                           #{e2 4528}#)
                    (#{valid-bound-ids? 4365}# #{var 4525}#))
                  #{tmp 4521}#)
                #f)
            (@apply
              (lambda (#{var 4611}#
                       #{val 4612}#
                       #{e1 4613}#
                       #{e2 4614}#)
                (let ((#{names 4615}#
                        (map (lambda (#{x 4881}#)
                               (#{id-var-name 4362}# #{x 4881}# #{w 4517}#))
                             #{var 4611}#)))
                  (begin
                    (for-each
                      (lambda (#{id 4616}# #{n 4617}#)
                        (let ((#{atom-key 4618}#
                                (car (let ((#{t 4818}#
                                             (assq #{n 4617}# #{r 4516}#)))
                                       (if #{t 4818}#
                                         (cdr #{t 4818}#)
                                         (if (symbol? #{n 4617}#)
                                           (let ((#{t 4823}#
                                                   (begin
                                                     (if (if (not #{mod 4519}#)
                                                           (current-module)
                                                           #f)
                                                       (warn "module system is booted, we should have a module"
                                                             #{n 4617}#))
                                                     (let ((#{v 4860}#
                                                             (module-variable
                                                               (if #{mod 4519}#
                                                                 (resolve-module
                                                                   (cdr #{mod 4519}#))
                                                                 (current-module))
                                                               #{n 4617}#)))
                                                       (if #{v 4860}#
                                                         (if (variable-bound?
                                                               #{v 4860}#)
                                                           (let ((#{val 4869}#
                                                                   (variable-ref
                                                                     #{v 4860}#)))
                                                             (if (macro?
                                                                   #{val 4869}#)
                                                               (if (macro-type
                                                                     #{val 4869}#)
                                                                 (cons (macro-type
                                                                         #{val 4869}#)
                                                                       (macro-binding
                                                                         #{val 4869}#))
                                                                 #f)
                                                               #f))
                                                           #f)
                                                         #f)))))
                                             (if #{t 4823}#
                                               #{t 4823}#
                                               '(global)))
                                           '(displaced-lexical)))))))
                          (if (let ((#{t 4651}# #{atom-key 4618}#))
                                (eqv? #{t 4651}# 'displaced-lexical))
                            (syntax-violation
                              'fluid-let-syntax
                              "identifier out of context"
                              #{e 4515}#
                              (let ((#{x 4723}#
                                      (begin
                                        (if (if (pair? #{id 4616}#)
                                              #{s 4518}#
                                              #f)
                                          (set-source-properties!
                                            #{id 4616}#
                                            #{s 4518}#))
                                        #{id 4616}#)))
                                (if (if (null? (car #{w 4517}#))
                                      (null? (cdr #{w 4517}#))
                                      #f)
                                  #{x 4723}#
                                  (if (if (vector? #{x 4723}#)
                                        (if (= (vector-length #{x 4723}#) 4)
                                          (eq? (vector-ref #{x 4723}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 4755}#
                                            (vector-ref #{x 4723}# 1))
                                          (#{wrap 4756}#
                                            (let ((#{w2 4764}#
                                                    (vector-ref #{x 4723}# 2)))
                                              (let ((#{m1 4765}#
                                                      (car #{w 4517}#))
                                                    (#{s1 4766}#
                                                      (cdr #{w 4517}#)))
                                                (if (null? #{m1 4765}#)
                                                  (if (null? #{s1 4766}#)
                                                    #{w2 4764}#
                                                    (cons (car #{w2 4764}#)
                                                          (let ((#{m2 4781}#
                                                                  (cdr #{w2 4764}#)))
                                                            (if (null? #{m2 4781}#)
                                                              #{s1 4766}#
                                                              (append
                                                                #{s1 4766}#
                                                                #{m2 4781}#)))))
                                                  (cons (let ((#{m2 4789}#
                                                                (car #{w2 4764}#)))
                                                          (if (null? #{m2 4789}#)
                                                            #{m1 4765}#
                                                            (append
                                                              #{m1 4765}#
                                                              #{m2 4789}#)))
                                                        (let ((#{m2 4797}#
                                                                (cdr #{w2 4764}#)))
                                                          (if (null? #{m2 4797}#)
                                                            #{s1 4766}#
                                                            (append
                                                              #{s1 4766}#
                                                              #{m2 4797}#))))))))
                                          (#{module 4757}#
                                            (vector-ref #{x 4723}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 4755}#
                                        #{wrap 4756}#
                                        #{module 4757}#))
                                    (if (null? #{x 4723}#)
                                      #{x 4723}#
                                      (vector
                                        'syntax-object
                                        #{x 4723}#
                                        #{w 4517}#
                                        #{mod 4519}#)))))))))
                      #{var 4611}#
                      #{names 4615}#)
                    (#{chi-body 4379}#
                      (cons #{e1 4613}# #{e2 4614}#)
                      (let ((#{x 4894}#
                              (begin
                                (if (if (pair? #{e 4515}#) #{s 4518}# #f)
                                  (set-source-properties!
                                    #{e 4515}#
                                    #{s 4518}#))
                                #{e 4515}#)))
                        (if (if (null? (car #{w 4517}#))
                              (null? (cdr #{w 4517}#))
                              #f)
                          #{x 4894}#
                          (if (if (vector? #{x 4894}#)
                                (if (= (vector-length #{x 4894}#) 4)
                                  (eq? (vector-ref #{x 4894}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (let ((#{expression 4926}#
                                    (vector-ref #{x 4894}# 1))
                                  (#{wrap 4927}#
                                    (let ((#{w2 4935}#
                                            (vector-ref #{x 4894}# 2)))
                                      (let ((#{m1 4936}# (car #{w 4517}#))
                                            (#{s1 4937}# (cdr #{w 4517}#)))
                                        (if (null? #{m1 4936}#)
                                          (if (null? #{s1 4937}#)
                                            #{w2 4935}#
                                            (cons (car #{w2 4935}#)
                                                  (let ((#{m2 4952}#
                                                          (cdr #{w2 4935}#)))
                                                    (if (null? #{m2 4952}#)
                                                      #{s1 4937}#
                                                      (append
                                                        #{s1 4937}#
                                                        #{m2 4952}#)))))
                                          (cons (let ((#{m2 4960}#
                                                        (car #{w2 4935}#)))
                                                  (if (null? #{m2 4960}#)
                                                    #{m1 4936}#
                                                    (append
                                                      #{m1 4936}#
                                                      #{m2 4960}#)))
                                                (let ((#{m2 4968}#
                                                        (cdr #{w2 4935}#)))
                                                  (if (null? #{m2 4968}#)
                                                    #{s1 4937}#
                                                    (append
                                                      #{s1 4937}#
                                                      #{m2 4968}#))))))))
                                  (#{module 4928}# (vector-ref #{x 4894}# 3)))
                              (vector
                                'syntax-object
                                #{expression 4926}#
                                #{wrap 4927}#
                                #{module 4928}#))
                            (if (null? #{x 4894}#)
                              #{x 4894}#
                              (vector
                                'syntax-object
                                #{x 4894}#
                                #{w 4517}#
                                #{mod 4519}#)))))
                      (#{extend-env 4337}#
                        #{names 4615}#
                        (let ((#{trans-r 5046}#
                                (#{macros-only-env 4339}# #{r 4516}#)))
                          (map (lambda (#{x 5047}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 4381}#
                                         (#{chi 4375}#
                                           #{x 5047}#
                                           #{trans-r 5046}#
                                           #{w 4517}#
                                           #{mod 4519}#)
                                         #{mod 4519}#)))
                               #{val 4612}#))
                        #{r 4516}#)
                      #{w 4517}#
                      #{mod 4519}#))))
              #{tmp 4521}#)
            (syntax-violation
              'fluid-let-syntax
              "bad syntax"
              (let ((#{x 5261}#
                      (begin
                        (if (if (pair? #{e 4515}#) #{s 4518}# #f)
                          (set-source-properties! #{e 4515}# #{s 4518}#))
                        #{e 4515}#)))
                (if (if (null? (car #{w 4517}#))
                      (null? (cdr #{w 4517}#))
                      #f)
                  #{x 5261}#
                  (if (if (vector? #{x 5261}#)
                        (if (= (vector-length #{x 5261}#) 4)
                          (eq? (vector-ref #{x 5261}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 5293}# (vector-ref #{x 5261}# 1))
                          (#{wrap 5294}#
                            (let ((#{w2 5302}# (vector-ref #{x 5261}# 2)))
                              (let ((#{m1 5303}# (car #{w 4517}#))
                                    (#{s1 5304}# (cdr #{w 4517}#)))
                                (if (null? #{m1 5303}#)
                                  (if (null? #{s1 5304}#)
                                    #{w2 5302}#
                                    (cons (car #{w2 5302}#)
                                          (let ((#{m2 5319}#
                                                  (cdr #{w2 5302}#)))
                                            (if (null? #{m2 5319}#)
                                              #{s1 5304}#
                                              (append
                                                #{s1 5304}#
                                                #{m2 5319}#)))))
                                  (cons (let ((#{m2 5327}# (car #{w2 5302}#)))
                                          (if (null? #{m2 5327}#)
                                            #{m1 5303}#
                                            (append #{m1 5303}# #{m2 5327}#)))
                                        (let ((#{m2 5335}# (cdr #{w2 5302}#)))
                                          (if (null? #{m2 5335}#)
                                            #{s1 5304}#
                                            (append
                                              #{s1 5304}#
                                              #{m2 5335}#))))))))
                          (#{module 5295}# (vector-ref #{x 5261}# 3)))
                      (vector
                        'syntax-object
                        #{expression 5293}#
                        #{wrap 5294}#
                        #{module 5295}#))
                    (if (null? #{x 5261}#)
                      #{x 5261}#
                      (vector
                        'syntax-object
                        #{x 5261}#
                        #{w 4517}#
                        #{mod 4519}#))))))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 5363}#
                 #{r 5364}#
                 #{w 5365}#
                 #{s 5366}#
                 #{mod 5367}#)
          (let ((#{tmp 5369}# ($sc-dispatch #{e 5363}# '(_ any))))
            (if #{tmp 5369}#
              (@apply
                (lambda (#{e 5372}#)
                  (let ((#{exp 5376}#
                          (#{strip 4388}# #{e 5372}# #{w 5365}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 5366}#
                      #{exp 5376}#)))
                #{tmp 5369}#)
              (syntax-violation
                'quote
                "bad syntax"
                (let ((#{x 5390}#
                        (begin
                          (if (if (pair? #{e 5363}#) #{s 5366}# #f)
                            (set-source-properties! #{e 5363}# #{s 5366}#))
                          #{e 5363}#)))
                  (if (if (null? (car #{w 5365}#))
                        (null? (cdr #{w 5365}#))
                        #f)
                    #{x 5390}#
                    (if (if (vector? #{x 5390}#)
                          (if (= (vector-length #{x 5390}#) 4)
                            (eq? (vector-ref #{x 5390}# 0) 'syntax-object)
                            #f)
                          #f)
                      (let ((#{expression 5422}# (vector-ref #{x 5390}# 1))
                            (#{wrap 5423}#
                              (let ((#{w2 5431}# (vector-ref #{x 5390}# 2)))
                                (let ((#{m1 5432}# (car #{w 5365}#))
                                      (#{s1 5433}# (cdr #{w 5365}#)))
                                  (if (null? #{m1 5432}#)
                                    (if (null? #{s1 5433}#)
                                      #{w2 5431}#
                                      (cons (car #{w2 5431}#)
                                            (let ((#{m2 5448}#
                                                    (cdr #{w2 5431}#)))
                                              (if (null? #{m2 5448}#)
                                                #{s1 5433}#
                                                (append
                                                  #{s1 5433}#
                                                  #{m2 5448}#)))))
                                    (cons (let ((#{m2 5456}#
                                                  (car #{w2 5431}#)))
                                            (if (null? #{m2 5456}#)
                                              #{m1 5432}#
                                              (append
                                                #{m1 5432}#
                                                #{m2 5456}#)))
                                          (let ((#{m2 5464}#
                                                  (cdr #{w2 5431}#)))
                                            (if (null? #{m2 5464}#)
                                              #{s1 5433}#
                                              (append
                                                #{s1 5433}#
                                                #{m2 5464}#))))))))
                            (#{module 5424}# (vector-ref #{x 5390}# 3)))
                        (vector
                          'syntax-object
                          #{expression 5422}#
                          #{wrap 5423}#
                          #{module 5424}#))
                      (if (null? #{x 5390}#)
                        #{x 5390}#
                        (vector
                          'syntax-object
                          #{x 5390}#
                          #{w 5365}#
                          #{mod 5367}#)))))))))))
    (#{global-extend 4341}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 5704}#
           (lambda (#{src 6157}#
                    #{e 6158}#
                    #{r 6159}#
                    #{maps 6160}#
                    #{ellipsis? 6161}#
                    #{mod 6162}#)
             (if (if (symbol? #{e 6158}#)
                   #t
                   (if (if (vector? #{e 6158}#)
                         (if (= (vector-length #{e 6158}#) 4)
                           (eq? (vector-ref #{e 6158}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 6158}# 1))
                     #f))
               (let ((#{label 6189}#
                       (#{id-var-name 4362}# #{e 6158}# '(()))))
                 (let ((#{b 6190}#
                         (let ((#{t 6327}# (assq #{label 6189}# #{r 6159}#)))
                           (if #{t 6327}#
                             (cdr #{t 6327}#)
                             (if (symbol? #{label 6189}#)
                               (let ((#{t 6332}#
                                       (begin
                                         (if (if (not #{mod 6162}#)
                                               (current-module)
                                               #f)
                                           (warn "module system is booted, we should have a module"
                                                 #{label 6189}#))
                                         (let ((#{v 6369}#
                                                 (module-variable
                                                   (if #{mod 6162}#
                                                     (resolve-module
                                                       (cdr #{mod 6162}#))
                                                     (current-module))
                                                   #{label 6189}#)))
                                           (if #{v 6369}#
                                             (if (variable-bound? #{v 6369}#)
                                               (let ((#{val 6378}#
                                                       (variable-ref
                                                         #{v 6369}#)))
                                                 (if (macro? #{val 6378}#)
                                                   (if (macro-type
                                                         #{val 6378}#)
                                                     (cons (macro-type
                                                             #{val 6378}#)
                                                           (macro-binding
                                                             #{val 6378}#))
                                                     #f)
                                                   #f))
                                               #f)
                                             #f)))))
                                 (if #{t 6332}# #{t 6332}# '(global)))
                               '(displaced-lexical))))))
                   (if (eq? (car #{b 6190}#) 'syntax)
                     (call-with-values
                       (lambda ()
                         (let ((#{var.lev 6223}# (cdr #{b 6190}#)))
                           (#{gen-ref 5705}#
                             #{src 6157}#
                             (car #{var.lev 6223}#)
                             (cdr #{var.lev 6223}#)
                             #{maps 6160}#)))
                       (lambda (#{var 6319}# #{maps 6320}#)
                         (values (list 'ref #{var 6319}#) #{maps 6320}#)))
                     (if (#{ellipsis? 6161}# #{e 6158}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 6157}#)
                       (values (list 'quote #{e 6158}#) #{maps 6160}#)))))
               (let ((#{tmp 6390}#
                       ($sc-dispatch #{e 6158}# '(any any))))
                 (if (if #{tmp 6390}#
                       (@apply
                         (lambda (#{dots 6394}# #{e 6395}#)
                           (#{ellipsis? 6161}# #{dots 6394}#))
                         #{tmp 6390}#)
                       #f)
                   (@apply
                     (lambda (#{dots 6396}# #{e 6397}#)
                       (#{gen-syntax 5704}#
                         #{src 6157}#
                         #{e 6397}#
                         #{r 6159}#
                         #{maps 6160}#
                         (lambda (#{x 6398}#) #f)
                         #{mod 6162}#))
                     #{tmp 6390}#)
                   (let ((#{tmp 6399}#
                           ($sc-dispatch #{e 6158}# '(any any . any))))
                     (if (if #{tmp 6399}#
                           (@apply
                             (lambda (#{x 6403}# #{dots 6404}# #{y 6405}#)
                               (#{ellipsis? 6161}# #{dots 6404}#))
                             #{tmp 6399}#)
                           #f)
                       (@apply
                         (lambda (#{x 6406}# #{dots 6407}# #{y 6408}#)
                           (letrec*
                             ((#{f 6409}#
                                (lambda (#{y 6417}# #{k 6418}#)
                                  (let ((#{tmp 6420}#
                                          ($sc-dispatch
                                            #{y 6417}#
                                            '(any . any))))
                                    (if (if #{tmp 6420}#
                                          (@apply
                                            (lambda (#{dots 6424}# #{y 6425}#)
                                              (#{ellipsis? 6161}#
                                                #{dots 6424}#))
                                            #{tmp 6420}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 6426}# #{y 6427}#)
                                          (#{f 6409}#
                                            #{y 6427}#
                                            (lambda (#{maps 6428}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 6418}#
                                                    (cons '() #{maps 6428}#)))
                                                (lambda (#{x 6429}#
                                                         #{maps 6430}#)
                                                  (if (null? (car #{maps 6430}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 6157}#)
                                                    (values
                                                      (let ((#{map-env 6434}#
                                                              (car #{maps 6430}#)))
                                                        (list 'apply
                                                              '(primitive
                                                                 append)
                                                              (#{gen-map 5707}#
                                                                #{x 6429}#
                                                                #{map-env 6434}#)))
                                                      (cdr #{maps 6430}#))))))))
                                        #{tmp 6420}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 5704}#
                                            #{src 6157}#
                                            #{y 6417}#
                                            #{r 6159}#
                                            #{maps 6160}#
                                            #{ellipsis? 6161}#
                                            #{mod 6162}#))
                                        (lambda (#{y 6437}# #{maps 6438}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 6418}# #{maps 6438}#))
                                            (lambda (#{x 6439}# #{maps 6440}#)
                                              (values
                                                (if (equal? #{y 6437}# ''())
                                                  #{x 6439}#
                                                  (list 'append
                                                        #{x 6439}#
                                                        #{y 6437}#))
                                                #{maps 6440}#))))))))))
                             (#{f 6409}#
                               #{y 6408}#
                               (lambda (#{maps 6412}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 5704}#
                                       #{src 6157}#
                                       #{x 6406}#
                                       #{r 6159}#
                                       (cons '() #{maps 6412}#)
                                       #{ellipsis? 6161}#
                                       #{mod 6162}#))
                                   (lambda (#{x 6413}# #{maps 6414}#)
                                     (if (null? (car #{maps 6414}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 6157}#)
                                       (values
                                         (#{gen-map 5707}#
                                           #{x 6413}#
                                           (car #{maps 6414}#))
                                         (cdr #{maps 6414}#)))))))))
                         #{tmp 6399}#)
                       (let ((#{tmp 6456}#
                               ($sc-dispatch #{e 6158}# '(any . any))))
                         (if #{tmp 6456}#
                           (@apply
                             (lambda (#{x 6460}# #{y 6461}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 5704}#
                                     #{src 6157}#
                                     #{x 6460}#
                                     #{r 6159}#
                                     #{maps 6160}#
                                     #{ellipsis? 6161}#
                                     #{mod 6162}#))
                                 (lambda (#{x 6462}# #{maps 6463}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5704}#
                                         #{src 6157}#
                                         #{y 6461}#
                                         #{r 6159}#
                                         #{maps 6463}#
                                         #{ellipsis? 6161}#
                                         #{mod 6162}#))
                                     (lambda (#{y 6464}# #{maps 6465}#)
                                       (values
                                         (let ((#{atom-key 6470}#
                                                 (car #{y 6464}#)))
                                           (if (eqv? #{atom-key 6470}# 'quote)
                                             (if (eq? (car #{x 6462}#) 'quote)
                                               (list 'quote
                                                     (cons (car (cdr #{x 6462}#))
                                                           (car (cdr #{y 6464}#))))
                                               (if (eq? (car (cdr #{y 6464}#))
                                                        '())
                                                 (list 'list #{x 6462}#)
                                                 (list 'cons
                                                       #{x 6462}#
                                                       #{y 6464}#)))
                                             (if (eqv? #{atom-key 6470}# 'list)
                                               (cons 'list
                                                     (cons #{x 6462}#
                                                           (cdr #{y 6464}#)))
                                               (list 'cons
                                                     #{x 6462}#
                                                     #{y 6464}#))))
                                         #{maps 6465}#))))))
                             #{tmp 6456}#)
                           (let ((#{tmp 6499}#
                                   ($sc-dispatch
                                     #{e 6158}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 6499}#
                               (@apply
                                 (lambda (#{e1 6503}# #{e2 6504}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5704}#
                                         #{src 6157}#
                                         (cons #{e1 6503}# #{e2 6504}#)
                                         #{r 6159}#
                                         #{maps 6160}#
                                         #{ellipsis? 6161}#
                                         #{mod 6162}#))
                                     (lambda (#{e 6505}# #{maps 6506}#)
                                       (values
                                         (if (eq? (car #{e 6505}#) 'list)
                                           (cons 'vector (cdr #{e 6505}#))
                                           (if (eq? (car #{e 6505}#) 'quote)
                                             (list 'quote
                                                   (list->vector
                                                     (car (cdr #{e 6505}#))))
                                             (list 'list->vector #{e 6505}#)))
                                         #{maps 6506}#))))
                                 #{tmp 6499}#)
                               (values
                                 (list 'quote #{e 6158}#)
                                 #{maps 6160}#))))))))))))
         (#{gen-ref 5705}#
           (lambda (#{src 6533}#
                    #{var 6534}#
                    #{level 6535}#
                    #{maps 6536}#)
             (if (= #{level 6535}# 0)
               (values #{var 6534}# #{maps 6536}#)
               (if (null? #{maps 6536}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 6533}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 5705}#
                       #{src 6533}#
                       #{var 6534}#
                       (#{1-}# #{level 6535}#)
                       (cdr #{maps 6536}#)))
                   (lambda (#{outer-var 6537}# #{outer-maps 6538}#)
                     (let ((#{b 6539}#
                             (assq #{outer-var 6537}# (car #{maps 6536}#))))
                       (if #{b 6539}#
                         (values (cdr #{b 6539}#) #{maps 6536}#)
                         (let ((#{inner-var 6541}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 6541}#
                             (cons (cons (cons #{outer-var 6537}#
                                               #{inner-var 6541}#)
                                         (car #{maps 6536}#))
                                   #{outer-maps 6538}#)))))))))))
         (#{gen-map 5707}#
           (lambda (#{e 6555}# #{map-env 6556}#)
             (let ((#{formals 6557}# (map cdr #{map-env 6556}#))
                   (#{actuals 6558}#
                     (map (lambda (#{x 6560}#)
                            (list 'ref (car #{x 6560}#)))
                          #{map-env 6556}#)))
               (if (eq? (car #{e 6555}#) 'ref)
                 (car #{actuals 6558}#)
                 (if (and-map
                       (lambda (#{x 6561}#)
                         (if (eq? (car #{x 6561}#) 'ref)
                           (memq (car (cdr #{x 6561}#)) #{formals 6557}#)
                           #f))
                       (cdr #{e 6555}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 6555}#))
                               (map (let ((#{r 6563}#
                                            (map cons
                                                 #{formals 6557}#
                                                 #{actuals 6558}#)))
                                      (lambda (#{x 6564}#)
                                        (cdr (assq (car (cdr #{x 6564}#))
                                                   #{r 6563}#))))
                                    (cdr #{e 6555}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 6557}# #{e 6555}#)
                               #{actuals 6558}#)))))))
         (#{regen 5711}#
           (lambda (#{x 6566}#)
             (let ((#{atom-key 6567}# (car #{x 6566}#)))
               (if (eqv? #{atom-key 6567}# 'ref)
                 (let ((#{name 6577}# (car (cdr #{x 6566}#)))
                       (#{var 6578}# (car (cdr #{x 6566}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 6577}#
                     #{var 6578}#))
                 (if (eqv? #{atom-key 6567}# 'primitive)
                   (let ((#{name 6589}# (car (cdr #{x 6566}#))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 2)
                       #f
                       #{name 6589}#))
                   (if (eqv? #{atom-key 6567}# 'quote)
                     (let ((#{exp 6600}# (car (cdr #{x 6566}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 6600}#))
                     (if (eqv? #{atom-key 6567}# 'lambda)
                       (if (list? (car (cdr #{x 6566}#)))
                         (let ((#{req 6611}# (car (cdr #{x 6566}#)))
                               (#{vars 6613}# (car (cdr #{x 6566}#)))
                               (#{exp 6615}#
                                 (#{regen 5711}#
                                   (car (cdr (cdr #{x 6566}#))))))
                           (let ((#{body 6620}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #f
                                     #{req 6611}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 6613}#
                                     #{exp 6615}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 14)
                               #f
                               '()
                               #{body 6620}#)))
                         (error "how did we get here" #{x 6566}#))
                       (let ((#{name 6636}# (car #{x 6566}#))
                             (#{args 6637}#
                               (map #{regen 5711}# (cdr #{x 6566}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 12)
                           #f
                           #{name 6636}#
                           #{args 6637}#))))))))))
        (lambda (#{e 5712}#
                 #{r 5713}#
                 #{w 5714}#
                 #{s 5715}#
                 #{mod 5716}#)
          (let ((#{e 5717}#
                  (let ((#{x 6068}#
                          (begin
                            (if (if (pair? #{e 5712}#) #{s 5715}# #f)
                              (set-source-properties! #{e 5712}# #{s 5715}#))
                            #{e 5712}#)))
                    (if (if (null? (car #{w 5714}#))
                          (null? (cdr #{w 5714}#))
                          #f)
                      #{x 6068}#
                      (if (if (vector? #{x 6068}#)
                            (if (= (vector-length #{x 6068}#) 4)
                              (eq? (vector-ref #{x 6068}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 6100}# (vector-ref #{x 6068}# 1))
                              (#{wrap 6101}#
                                (let ((#{w2 6109}# (vector-ref #{x 6068}# 2)))
                                  (let ((#{m1 6110}# (car #{w 5714}#))
                                        (#{s1 6111}# (cdr #{w 5714}#)))
                                    (if (null? #{m1 6110}#)
                                      (if (null? #{s1 6111}#)
                                        #{w2 6109}#
                                        (cons (car #{w2 6109}#)
                                              (let ((#{m2 6126}#
                                                      (cdr #{w2 6109}#)))
                                                (if (null? #{m2 6126}#)
                                                  #{s1 6111}#
                                                  (append
                                                    #{s1 6111}#
                                                    #{m2 6126}#)))))
                                      (cons (let ((#{m2 6134}#
                                                    (car #{w2 6109}#)))
                                              (if (null? #{m2 6134}#)
                                                #{m1 6110}#
                                                (append
                                                  #{m1 6110}#
                                                  #{m2 6134}#)))
                                            (let ((#{m2 6142}#
                                                    (cdr #{w2 6109}#)))
                                              (if (null? #{m2 6142}#)
                                                #{s1 6111}#
                                                (append
                                                  #{s1 6111}#
                                                  #{m2 6142}#))))))))
                              (#{module 6102}# (vector-ref #{x 6068}# 3)))
                          (vector
                            'syntax-object
                            #{expression 6100}#
                            #{wrap 6101}#
                            #{module 6102}#))
                        (if (null? #{x 6068}#)
                          #{x 6068}#
                          (vector
                            'syntax-object
                            #{x 6068}#
                            #{w 5714}#
                            #{mod 5716}#)))))))
            (let ((#{tmp 5718}# #{e 5717}#))
              (let ((#{tmp 5719}#
                      ($sc-dispatch #{tmp 5718}# '(_ any))))
                (if #{tmp 5719}#
                  (@apply
                    (lambda (#{x 5767}#)
                      (call-with-values
                        (lambda ()
                          (#{gen-syntax 5704}#
                            #{e 5717}#
                            #{x 5767}#
                            #{r 5713}#
                            '()
                            #{ellipsis? 4383}#
                            #{mod 5716}#))
                        (lambda (#{e 5850}# #{maps 5851}#)
                          (#{regen 5711}# #{e 5850}#))))
                    #{tmp 5719}#)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    #{e 5717}#))))))))
    (#{global-extend 4341}#
      'core
      'lambda
      (lambda (#{e 6873}#
               #{r 6874}#
               #{w 6875}#
               #{s 6876}#
               #{mod 6877}#)
        (let ((#{tmp 6879}#
                ($sc-dispatch #{e 6873}# '(_ any any . each-any))))
          (if #{tmp 6879}#
            (@apply
              (lambda (#{args 6883}# #{e1 6884}# #{e2 6885}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 4384}# #{args 6883}#))
                  (lambda (#{req 6888}#
                           #{opt 6889}#
                           #{rest 6890}#
                           #{kw 6891}#)
                    (letrec*
                      ((#{lp 6892}#
                         (lambda (#{body 6895}# #{meta 6896}#)
                           (let ((#{tmp 6898}#
                                   ($sc-dispatch
                                     #{body 6895}#
                                     '(any any . each-any))))
                             (if (if #{tmp 6898}#
                                   (@apply
                                     (lambda (#{docstring 6902}#
                                              #{e1 6903}#
                                              #{e2 6904}#)
                                       (string?
                                         (syntax->datum #{docstring 6902}#)))
                                     #{tmp 6898}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 6905}#
                                          #{e1 6906}#
                                          #{e2 6907}#)
                                   (#{lp 6892}#
                                     (cons #{e1 6906}# #{e2 6907}#)
                                     (append
                                       #{meta 6896}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 6905}#))))))
                                 #{tmp 6898}#)
                               (let ((#{tmp 6908}#
                                       ($sc-dispatch
                                         #{body 6895}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 6908}#
                                   (@apply
                                     (lambda (#{k 6912}#
                                              #{v 6913}#
                                              #{e1 6914}#
                                              #{e2 6915}#)
                                       (#{lp 6892}#
                                         (cons #{e1 6914}# #{e2 6915}#)
                                         (append
                                           #{meta 6896}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 6912}#
                                                  #{v 6913}#)))))
                                     #{tmp 6908}#)
                                   (#{chi-simple-lambda 4385}#
                                     #{e 6873}#
                                     #{r 6874}#
                                     #{w 6875}#
                                     #{s 6876}#
                                     #{mod 6877}#
                                     #{req 6888}#
                                     #{rest 6890}#
                                     #{meta 6896}#
                                     #{body 6895}#))))))))
                      (#{lp 6892}# (cons #{e1 6884}# #{e2 6885}#) '())))))
              #{tmp 6879}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 6873}#)))))
    (#{global-extend 4341}#
      'core
      'lambda*
      (lambda (#{e 7299}#
               #{r 7300}#
               #{w 7301}#
               #{s 7302}#
               #{mod 7303}#)
        (let ((#{tmp 7305}#
                ($sc-dispatch #{e 7299}# '(_ any any . each-any))))
          (if #{tmp 7305}#
            (@apply
              (lambda (#{args 7309}# #{e1 7310}# #{e2 7311}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4387}#
                      #{e 7299}#
                      #{r 7300}#
                      #{w 7301}#
                      #{s 7302}#
                      #{mod 7303}#
                      #{lambda*-formals 4386}#
                      (list (cons #{args 7309}#
                                  (cons #{e1 7310}# #{e2 7311}#)))))
                  (lambda (#{meta 7314}# #{lcase 7315}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7302}#
                      #{meta 7314}#
                      #{lcase 7315}#))))
              #{tmp 7305}#)
            (syntax-violation
              'lambda
              "bad lambda*"
              #{e 7299}#)))))
    (#{global-extend 4341}#
      'core
      'case-lambda
      (lambda (#{e 7478}#
               #{r 7479}#
               #{w 7480}#
               #{s 7481}#
               #{mod 7482}#)
        (let ((#{tmp 7484}#
                ($sc-dispatch
                  #{e 7478}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 7484}#
            (@apply
              (lambda (#{args 7488}#
                       #{e1 7489}#
                       #{e2 7490}#
                       #{args* 7491}#
                       #{e1* 7492}#
                       #{e2* 7493}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4387}#
                      #{e 7478}#
                      #{r 7479}#
                      #{w 7480}#
                      #{s 7481}#
                      #{mod 7482}#
                      #{lambda-formals 4384}#
                      (cons (cons #{args 7488}#
                                  (cons #{e1 7489}# #{e2 7490}#))
                            (map (lambda (#{tmp 3306 7496}#
                                          #{tmp 3305 7497}#
                                          #{tmp 3304 7498}#)
                                   (cons #{tmp 3304 7498}#
                                         (cons #{tmp 3305 7497}#
                                               #{tmp 3306 7496}#)))
                                 #{e2* 7493}#
                                 #{e1* 7492}#
                                 #{args* 7491}#))))
                  (lambda (#{meta 7499}# #{lcase 7500}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7481}#
                      #{meta 7499}#
                      #{lcase 7500}#))))
              #{tmp 7484}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda"
              #{e 7478}#)))))
    (#{global-extend 4341}#
      'core
      'case-lambda*
      (lambda (#{e 7669}#
               #{r 7670}#
               #{w 7671}#
               #{s 7672}#
               #{mod 7673}#)
        (let ((#{tmp 7675}#
                ($sc-dispatch
                  #{e 7669}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 7675}#
            (@apply
              (lambda (#{args 7679}#
                       #{e1 7680}#
                       #{e2 7681}#
                       #{args* 7682}#
                       #{e1* 7683}#
                       #{e2* 7684}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4387}#
                      #{e 7669}#
                      #{r 7670}#
                      #{w 7671}#
                      #{s 7672}#
                      #{mod 7673}#
                      #{lambda*-formals 4386}#
                      (cons (cons #{args 7679}#
                                  (cons #{e1 7680}# #{e2 7681}#))
                            (map (lambda (#{tmp 3341 7687}#
                                          #{tmp 3340 7688}#
                                          #{tmp 3339 7689}#)
                                   (cons #{tmp 3339 7689}#
                                         (cons #{tmp 3340 7688}#
                                               #{tmp 3341 7687}#)))
                                 #{e2* 7684}#
                                 #{e1* 7683}#
                                 #{args* 7682}#))))
                  (lambda (#{meta 7690}# #{lcase 7691}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 14)
                      #{s 7672}#
                      #{meta 7690}#
                      #{lcase 7691}#))))
              #{tmp 7675}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda*"
              #{e 7669}#)))))
    (#{global-extend 4341}#
      'core
      'let
      (letrec*
        ((#{chi-let 7900}#
           (lambda (#{e 8110}#
                    #{r 8111}#
                    #{w 8112}#
                    #{s 8113}#
                    #{mod 8114}#
                    #{constructor 8115}#
                    #{ids 8116}#
                    #{vals 8117}#
                    #{exps 8118}#)
             (if (not (#{valid-bound-ids? 4365}# #{ids 8116}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 8110}#)
               (let ((#{labels 8201}#
                       (#{gen-labels 4346}# #{ids 8116}#))
                     (#{new-vars 8202}#
                       (map #{gen-var 4389}# #{ids 8116}#)))
                 (let ((#{nw 8203}#
                         (#{make-binding-wrap 4357}#
                           #{ids 8116}#
                           #{labels 8201}#
                           #{w 8112}#))
                       (#{nr 8204}#
                         (#{extend-var-env 4338}#
                           #{labels 8201}#
                           #{new-vars 8202}#
                           #{r 8111}#)))
                   (#{constructor 8115}#
                     #{s 8113}#
                     (map syntax->datum #{ids 8116}#)
                     #{new-vars 8202}#
                     (map (lambda (#{x 8221}#)
                            (#{chi 4375}#
                              #{x 8221}#
                              #{r 8111}#
                              #{w 8112}#
                              #{mod 8114}#))
                          #{vals 8117}#)
                     (#{chi-body 4379}#
                       #{exps 8118}#
                       (#{source-wrap 4369}#
                         #{e 8110}#
                         #{nw 8203}#
                         #{s 8113}#
                         #{mod 8114}#)
                       #{nr 8204}#
                       #{nw 8203}#
                       #{mod 8114}#))))))))
        (lambda (#{e 7901}#
                 #{r 7902}#
                 #{w 7903}#
                 #{s 7904}#
                 #{mod 7905}#)
          (let ((#{tmp 7907}#
                  ($sc-dispatch
                    #{e 7901}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 7907}#
                  (@apply
                    (lambda (#{id 7911}#
                             #{val 7912}#
                             #{e1 7913}#
                             #{e2 7914}#)
                      (and-map #{id? 4343}# #{id 7911}#))
                    #{tmp 7907}#)
                  #f)
              (@apply
                (lambda (#{id 7930}#
                         #{val 7931}#
                         #{e1 7932}#
                         #{e2 7933}#)
                  (#{chi-let 7900}#
                    #{e 7901}#
                    #{r 7902}#
                    #{w 7903}#
                    #{s 7904}#
                    #{mod 7905}#
                    (lambda (#{src 7937}#
                             #{ids 7938}#
                             #{vars 7939}#
                             #{val-exps 7940}#
                             #{body-exp 7941}#)
                      (begin
                        (for-each
                          #{maybe-name-value! 4307}#
                          #{ids 7938}#
                          #{val-exps 7940}#)
                        (if (null? #{vars 7939}#)
                          #{body-exp 7941}#
                          (make-struct/no-tail
                            (vector-ref %expanded-vtables 16)
                            #{src 7937}#
                            #{ids 7938}#
                            #{vars 7939}#
                            #{val-exps 7940}#
                            #{body-exp 7941}#))))
                    #{id 7930}#
                    #{val 7931}#
                    (cons #{e1 7932}# #{e2 7933}#)))
                #{tmp 7907}#)
              (let ((#{tmp 7948}#
                      ($sc-dispatch
                        #{e 7901}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 7948}#
                      (@apply
                        (lambda (#{f 7952}#
                                 #{id 7953}#
                                 #{val 7954}#
                                 #{e1 7955}#
                                 #{e2 7956}#)
                          (if (if (symbol? #{f 7952}#)
                                #t
                                (if (if (vector? #{f 7952}#)
                                      (if (= (vector-length #{f 7952}#) 4)
                                        (eq? (vector-ref #{f 7952}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 7952}# 1))
                                  #f))
                            (and-map #{id? 4343}# #{id 7953}#)
                            #f))
                        #{tmp 7948}#)
                      #f)
                  (@apply
                    (lambda (#{f 7998}#
                             #{id 7999}#
                             #{val 8000}#
                             #{e1 8001}#
                             #{e2 8002}#)
                      (#{chi-let 7900}#
                        #{e 7901}#
                        #{r 7902}#
                        #{w 7903}#
                        #{s 7904}#
                        #{mod 7905}#
                        #{build-named-let 4326}#
                        (cons #{f 7998}# #{id 7999}#)
                        #{val 8000}#
                        (cons #{e1 8001}# #{e2 8002}#)))
                    #{tmp 7948}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (let ((#{x 8015}#
                            (begin
                              (if (if (pair? #{e 7901}#) #{s 7904}# #f)
                                (set-source-properties! #{e 7901}# #{s 7904}#))
                              #{e 7901}#)))
                      (if (if (null? (car #{w 7903}#))
                            (null? (cdr #{w 7903}#))
                            #f)
                        #{x 8015}#
                        (if (if (vector? #{x 8015}#)
                              (if (= (vector-length #{x 8015}#) 4)
                                (eq? (vector-ref #{x 8015}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 8047}# (vector-ref #{x 8015}# 1))
                                (#{wrap 8048}#
                                  (let ((#{w2 8056}#
                                          (vector-ref #{x 8015}# 2)))
                                    (let ((#{m1 8057}# (car #{w 7903}#))
                                          (#{s1 8058}# (cdr #{w 7903}#)))
                                      (if (null? #{m1 8057}#)
                                        (if (null? #{s1 8058}#)
                                          #{w2 8056}#
                                          (cons (car #{w2 8056}#)
                                                (let ((#{m2 8073}#
                                                        (cdr #{w2 8056}#)))
                                                  (if (null? #{m2 8073}#)
                                                    #{s1 8058}#
                                                    (append
                                                      #{s1 8058}#
                                                      #{m2 8073}#)))))
                                        (cons (let ((#{m2 8081}#
                                                      (car #{w2 8056}#)))
                                                (if (null? #{m2 8081}#)
                                                  #{m1 8057}#
                                                  (append
                                                    #{m1 8057}#
                                                    #{m2 8081}#)))
                                              (let ((#{m2 8089}#
                                                      (cdr #{w2 8056}#)))
                                                (if (null? #{m2 8089}#)
                                                  #{s1 8058}#
                                                  (append
                                                    #{s1 8058}#
                                                    #{m2 8089}#))))))))
                                (#{module 8049}# (vector-ref #{x 8015}# 3)))
                            (vector
                              'syntax-object
                              #{expression 8047}#
                              #{wrap 8048}#
                              #{module 8049}#))
                          (if (null? #{x 8015}#)
                            #{x 8015}#
                            (vector
                              'syntax-object
                              #{x 8015}#
                              #{w 7903}#
                              #{mod 7905}#)))))))))))))
    (#{global-extend 4341}#
      'core
      'letrec
      (lambda (#{e 8694}#
               #{r 8695}#
               #{w 8696}#
               #{s 8697}#
               #{mod 8698}#)
        (let ((#{tmp 8700}#
                ($sc-dispatch
                  #{e 8694}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 8700}#
                (@apply
                  (lambda (#{id 8704}#
                           #{val 8705}#
                           #{e1 8706}#
                           #{e2 8707}#)
                    (and-map #{id? 4343}# #{id 8704}#))
                  #{tmp 8700}#)
                #f)
            (@apply
              (lambda (#{id 8723}#
                       #{val 8724}#
                       #{e1 8725}#
                       #{e2 8726}#)
                (if (not (#{valid-bound-ids? 4365}# #{id 8723}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 8694}#)
                  (let ((#{labels 8821}#
                          (#{gen-labels 4346}# #{id 8723}#))
                        (#{new-vars 8822}#
                          (map #{gen-var 4389}# #{id 8723}#)))
                    (let ((#{w 8823}#
                            (#{make-binding-wrap 4357}#
                              #{id 8723}#
                              #{labels 8821}#
                              #{w 8696}#))
                          (#{r 8824}#
                            (#{extend-var-env 4338}#
                              #{labels 8821}#
                              #{new-vars 8822}#
                              #{r 8695}#)))
                      (#{build-letrec 4327}#
                        #{s 8697}#
                        #f
                        (map syntax->datum #{id 8723}#)
                        #{new-vars 8822}#
                        (map (lambda (#{x 8903}#)
                               (#{chi 4375}#
                                 #{x 8903}#
                                 #{r 8824}#
                                 #{w 8823}#
                                 #{mod 8698}#))
                             #{val 8724}#)
                        (#{chi-body 4379}#
                          (cons #{e1 8725}# #{e2 8726}#)
                          (let ((#{x 8965}#
                                  (begin
                                    (if (if (pair? #{e 8694}#) #{s 8697}# #f)
                                      (set-source-properties!
                                        #{e 8694}#
                                        #{s 8697}#))
                                    #{e 8694}#)))
                            (if (if (null? (car #{w 8823}#))
                                  (null? (cdr #{w 8823}#))
                                  #f)
                              #{x 8965}#
                              (if (if (vector? #{x 8965}#)
                                    (if (= (vector-length #{x 8965}#) 4)
                                      (eq? (vector-ref #{x 8965}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 8997}#
                                        (vector-ref #{x 8965}# 1))
                                      (#{wrap 8998}#
                                        (let ((#{w2 9006}#
                                                (vector-ref #{x 8965}# 2)))
                                          (let ((#{m1 9007}# (car #{w 8823}#))
                                                (#{s1 9008}# (cdr #{w 8823}#)))
                                            (if (null? #{m1 9007}#)
                                              (if (null? #{s1 9008}#)
                                                #{w2 9006}#
                                                (cons (car #{w2 9006}#)
                                                      (let ((#{m2 9023}#
                                                              (cdr #{w2 9006}#)))
                                                        (if (null? #{m2 9023}#)
                                                          #{s1 9008}#
                                                          (append
                                                            #{s1 9008}#
                                                            #{m2 9023}#)))))
                                              (cons (let ((#{m2 9031}#
                                                            (car #{w2 9006}#)))
                                                      (if (null? #{m2 9031}#)
                                                        #{m1 9007}#
                                                        (append
                                                          #{m1 9007}#
                                                          #{m2 9031}#)))
                                                    (let ((#{m2 9039}#
                                                            (cdr #{w2 9006}#)))
                                                      (if (null? #{m2 9039}#)
                                                        #{s1 9008}#
                                                        (append
                                                          #{s1 9008}#
                                                          #{m2 9039}#))))))))
                                      (#{module 8999}#
                                        (vector-ref #{x 8965}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 8997}#
                                    #{wrap 8998}#
                                    #{module 8999}#))
                                (if (null? #{x 8965}#)
                                  #{x 8965}#
                                  (vector
                                    'syntax-object
                                    #{x 8965}#
                                    #{w 8823}#
                                    #{mod 8698}#)))))
                          #{r 8824}#
                          #{w 8823}#
                          #{mod 8698}#))))))
              #{tmp 8700}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (let ((#{x 9279}#
                      (begin
                        (if (if (pair? #{e 8694}#) #{s 8697}# #f)
                          (set-source-properties! #{e 8694}# #{s 8697}#))
                        #{e 8694}#)))
                (if (if (null? (car #{w 8696}#))
                      (null? (cdr #{w 8696}#))
                      #f)
                  #{x 9279}#
                  (if (if (vector? #{x 9279}#)
                        (if (= (vector-length #{x 9279}#) 4)
                          (eq? (vector-ref #{x 9279}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 9311}# (vector-ref #{x 9279}# 1))
                          (#{wrap 9312}#
                            (let ((#{w2 9320}# (vector-ref #{x 9279}# 2)))
                              (let ((#{m1 9321}# (car #{w 8696}#))
                                    (#{s1 9322}# (cdr #{w 8696}#)))
                                (if (null? #{m1 9321}#)
                                  (if (null? #{s1 9322}#)
                                    #{w2 9320}#
                                    (cons (car #{w2 9320}#)
                                          (let ((#{m2 9337}#
                                                  (cdr #{w2 9320}#)))
                                            (if (null? #{m2 9337}#)
                                              #{s1 9322}#
                                              (append
                                                #{s1 9322}#
                                                #{m2 9337}#)))))
                                  (cons (let ((#{m2 9345}# (car #{w2 9320}#)))
                                          (if (null? #{m2 9345}#)
                                            #{m1 9321}#
                                            (append #{m1 9321}# #{m2 9345}#)))
                                        (let ((#{m2 9353}# (cdr #{w2 9320}#)))
                                          (if (null? #{m2 9353}#)
                                            #{s1 9322}#
                                            (append
                                              #{s1 9322}#
                                              #{m2 9353}#))))))))
                          (#{module 9313}# (vector-ref #{x 9279}# 3)))
                      (vector
                        'syntax-object
                        #{expression 9311}#
                        #{wrap 9312}#
                        #{module 9313}#))
                    (if (null? #{x 9279}#)
                      #{x 9279}#
                      (vector
                        'syntax-object
                        #{x 9279}#
                        #{w 8696}#
                        #{mod 8698}#))))))))))
    (#{global-extend 4341}#
      'core
      'letrec*
      (lambda (#{e 9502}#
               #{r 9503}#
               #{w 9504}#
               #{s 9505}#
               #{mod 9506}#)
        (let ((#{tmp 9508}#
                ($sc-dispatch
                  #{e 9502}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 9508}#
                (@apply
                  (lambda (#{id 9512}#
                           #{val 9513}#
                           #{e1 9514}#
                           #{e2 9515}#)
                    (and-map #{id? 4343}# #{id 9512}#))
                  #{tmp 9508}#)
                #f)
            (@apply
              (lambda (#{id 9531}#
                       #{val 9532}#
                       #{e1 9533}#
                       #{e2 9534}#)
                (if (not (#{valid-bound-ids? 4365}# #{id 9531}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 9502}#)
                  (let ((#{labels 9629}#
                          (#{gen-labels 4346}# #{id 9531}#))
                        (#{new-vars 9630}#
                          (map #{gen-var 4389}# #{id 9531}#)))
                    (let ((#{w 9631}#
                            (#{make-binding-wrap 4357}#
                              #{id 9531}#
                              #{labels 9629}#
                              #{w 9504}#))
                          (#{r 9632}#
                            (#{extend-var-env 4338}#
                              #{labels 9629}#
                              #{new-vars 9630}#
                              #{r 9503}#)))
                      (#{build-letrec 4327}#
                        #{s 9505}#
                        #t
                        (map syntax->datum #{id 9531}#)
                        #{new-vars 9630}#
                        (map (lambda (#{x 9711}#)
                               (#{chi 4375}#
                                 #{x 9711}#
                                 #{r 9632}#
                                 #{w 9631}#
                                 #{mod 9506}#))
                             #{val 9532}#)
                        (#{chi-body 4379}#
                          (cons #{e1 9533}# #{e2 9534}#)
                          (let ((#{x 9773}#
                                  (begin
                                    (if (if (pair? #{e 9502}#) #{s 9505}# #f)
                                      (set-source-properties!
                                        #{e 9502}#
                                        #{s 9505}#))
                                    #{e 9502}#)))
                            (if (if (null? (car #{w 9631}#))
                                  (null? (cdr #{w 9631}#))
                                  #f)
                              #{x 9773}#
                              (if (if (vector? #{x 9773}#)
                                    (if (= (vector-length #{x 9773}#) 4)
                                      (eq? (vector-ref #{x 9773}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 9805}#
                                        (vector-ref #{x 9773}# 1))
                                      (#{wrap 9806}#
                                        (let ((#{w2 9814}#
                                                (vector-ref #{x 9773}# 2)))
                                          (let ((#{m1 9815}# (car #{w 9631}#))
                                                (#{s1 9816}# (cdr #{w 9631}#)))
                                            (if (null? #{m1 9815}#)
                                              (if (null? #{s1 9816}#)
                                                #{w2 9814}#
                                                (cons (car #{w2 9814}#)
                                                      (let ((#{m2 9831}#
                                                              (cdr #{w2 9814}#)))
                                                        (if (null? #{m2 9831}#)
                                                          #{s1 9816}#
                                                          (append
                                                            #{s1 9816}#
                                                            #{m2 9831}#)))))
                                              (cons (let ((#{m2 9839}#
                                                            (car #{w2 9814}#)))
                                                      (if (null? #{m2 9839}#)
                                                        #{m1 9815}#
                                                        (append
                                                          #{m1 9815}#
                                                          #{m2 9839}#)))
                                                    (let ((#{m2 9847}#
                                                            (cdr #{w2 9814}#)))
                                                      (if (null? #{m2 9847}#)
                                                        #{s1 9816}#
                                                        (append
                                                          #{s1 9816}#
                                                          #{m2 9847}#))))))))
                                      (#{module 9807}#
                                        (vector-ref #{x 9773}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 9805}#
                                    #{wrap 9806}#
                                    #{module 9807}#))
                                (if (null? #{x 9773}#)
                                  #{x 9773}#
                                  (vector
                                    'syntax-object
                                    #{x 9773}#
                                    #{w 9631}#
                                    #{mod 9506}#)))))
                          #{r 9632}#
                          #{w 9631}#
                          #{mod 9506}#))))))
              #{tmp 9508}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (let ((#{x 10087}#
                      (begin
                        (if (if (pair? #{e 9502}#) #{s 9505}# #f)
                          (set-source-properties! #{e 9502}# #{s 9505}#))
                        #{e 9502}#)))
                (if (if (null? (car #{w 9504}#))
                      (null? (cdr #{w 9504}#))
                      #f)
                  #{x 10087}#
                  (if (if (vector? #{x 10087}#)
                        (if (= (vector-length #{x 10087}#) 4)
                          (eq? (vector-ref #{x 10087}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 10119}# (vector-ref #{x 10087}# 1))
                          (#{wrap 10120}#
                            (let ((#{w2 10128}# (vector-ref #{x 10087}# 2)))
                              (let ((#{m1 10129}# (car #{w 9504}#))
                                    (#{s1 10130}# (cdr #{w 9504}#)))
                                (if (null? #{m1 10129}#)
                                  (if (null? #{s1 10130}#)
                                    #{w2 10128}#
                                    (cons (car #{w2 10128}#)
                                          (let ((#{m2 10145}#
                                                  (cdr #{w2 10128}#)))
                                            (if (null? #{m2 10145}#)
                                              #{s1 10130}#
                                              (append
                                                #{s1 10130}#
                                                #{m2 10145}#)))))
                                  (cons (let ((#{m2 10153}#
                                                (car #{w2 10128}#)))
                                          (if (null? #{m2 10153}#)
                                            #{m1 10129}#
                                            (append
                                              #{m1 10129}#
                                              #{m2 10153}#)))
                                        (let ((#{m2 10161}#
                                                (cdr #{w2 10128}#)))
                                          (if (null? #{m2 10161}#)
                                            #{s1 10130}#
                                            (append
                                              #{s1 10130}#
                                              #{m2 10161}#))))))))
                          (#{module 10121}# (vector-ref #{x 10087}# 3)))
                      (vector
                        'syntax-object
                        #{expression 10119}#
                        #{wrap 10120}#
                        #{module 10121}#))
                    (if (null? #{x 10087}#)
                      #{x 10087}#
                      (vector
                        'syntax-object
                        #{x 10087}#
                        #{w 9504}#
                        #{mod 9506}#))))))))))
    (#{global-extend 4341}#
      'core
      'set!
      (lambda (#{e 10378}#
               #{r 10379}#
               #{w 10380}#
               #{s 10381}#
               #{mod 10382}#)
        (let ((#{tmp 10384}#
                ($sc-dispatch #{e 10378}# '(_ any any))))
          (if (if #{tmp 10384}#
                (@apply
                  (lambda (#{id 10388}# #{val 10389}#)
                    (if (symbol? #{id 10388}#)
                      #t
                      (if (if (vector? #{id 10388}#)
                            (if (= (vector-length #{id 10388}#) 4)
                              (eq? (vector-ref #{id 10388}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 10388}# 1))
                        #f)))
                  #{tmp 10384}#)
                #f)
            (@apply
              (lambda (#{id 10416}# #{val 10417}#)
                (let ((#{n 10418}#
                        (#{id-var-name 4362}# #{id 10416}# #{w 10380}#))
                      (#{id-mod 10419}#
                        (if (if (vector? #{id 10416}#)
                              (if (= (vector-length #{id 10416}#) 4)
                                (eq? (vector-ref #{id 10416}# 0)
                                     'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{id 10416}# 3)
                          #{mod 10382}#)))
                  (let ((#{b 10420}#
                          (let ((#{t 11129}# (assq #{n 10418}# #{r 10379}#)))
                            (if #{t 11129}#
                              (cdr #{t 11129}#)
                              (if (symbol? #{n 10418}#)
                                (let ((#{t 11134}#
                                        (begin
                                          (if (if (not #{id-mod 10419}#)
                                                (current-module)
                                                #f)
                                            (warn "module system is booted, we should have a module"
                                                  #{n 10418}#))
                                          (let ((#{v 11171}#
                                                  (module-variable
                                                    (if #{id-mod 10419}#
                                                      (resolve-module
                                                        (cdr #{id-mod 10419}#))
                                                      (current-module))
                                                    #{n 10418}#)))
                                            (if #{v 11171}#
                                              (if (variable-bound? #{v 11171}#)
                                                (let ((#{val 11180}#
                                                        (variable-ref
                                                          #{v 11171}#)))
                                                  (if (macro? #{val 11180}#)
                                                    (if (macro-type
                                                          #{val 11180}#)
                                                      (cons (macro-type
                                                              #{val 11180}#)
                                                            (macro-binding
                                                              #{val 11180}#))
                                                      #f)
                                                    #f))
                                                #f)
                                              #f)))))
                                  (if #{t 11134}# #{t 11134}# '(global)))
                                '(displaced-lexical))))))
                    (let ((#{atom-key 10421}# (car #{b 10420}#)))
                      (if (let ((#{t 10460}# #{atom-key 10421}#))
                            (eqv? #{t 10460}# 'lexical))
                        (#{build-lexical-assignment 4313}#
                          #{s 10381}#
                          (syntax->datum #{id 10416}#)
                          (cdr #{b 10420}#)
                          (#{chi 4375}#
                            #{val 10417}#
                            #{r 10379}#
                            #{w 10380}#
                            #{mod 10382}#))
                        (if (let ((#{t 10755}# #{atom-key 10421}#))
                              (eqv? #{t 10755}# 'global))
                          (#{build-global-assignment 4316}#
                            #{s 10381}#
                            #{n 10418}#
                            (#{chi 4375}#
                              #{val 10417}#
                              #{r 10379}#
                              #{w 10380}#
                              #{mod 10382}#)
                            #{id-mod 10419}#)
                          (if (let ((#{t 11020}# #{atom-key 10421}#))
                                (eqv? #{t 11020}# 'macro))
                            (let ((#{p 11083}# (cdr #{b 10420}#)))
                              (if (procedure-property
                                    #{p 11083}#
                                    'variable-transformer)
                                (#{chi 4375}#
                                  (#{chi-macro 4378}#
                                    #{p 11083}#
                                    #{e 10378}#
                                    #{r 10379}#
                                    #{w 10380}#
                                    #{s 10381}#
                                    #f
                                    #{mod 10382}#)
                                  #{r 10379}#
                                  '(())
                                  #{mod 10382}#)
                                (syntax-violation
                                  'set!
                                  "not a variable transformer"
                                  (if (if (null? (car #{w 10380}#))
                                        (null? (cdr #{w 10380}#))
                                        #f)
                                    #{e 10378}#
                                    (if (if (vector? #{e 10378}#)
                                          (if (= (vector-length #{e 10378}#) 4)
                                            (eq? (vector-ref #{e 10378}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 11283}#
                                              (vector-ref #{e 10378}# 1))
                                            (#{wrap 11284}#
                                              (let ((#{w2 11294}#
                                                      (vector-ref
                                                        #{e 10378}#
                                                        2)))
                                                (let ((#{m1 11295}#
                                                        (car #{w 10380}#))
                                                      (#{s1 11296}#
                                                        (cdr #{w 10380}#)))
                                                  (if (null? #{m1 11295}#)
                                                    (if (null? #{s1 11296}#)
                                                      #{w2 11294}#
                                                      (cons (car #{w2 11294}#)
                                                            (let ((#{m2 11313}#
                                                                    (cdr #{w2 11294}#)))
                                                              (if (null? #{m2 11313}#)
                                                                #{s1 11296}#
                                                                (append
                                                                  #{s1 11296}#
                                                                  #{m2 11313}#)))))
                                                    (cons (let ((#{m2 11321}#
                                                                  (car #{w2 11294}#)))
                                                            (if (null? #{m2 11321}#)
                                                              #{m1 11295}#
                                                              (append
                                                                #{m1 11295}#
                                                                #{m2 11321}#)))
                                                          (let ((#{m2 11329}#
                                                                  (cdr #{w2 11294}#)))
                                                            (if (null? #{m2 11329}#)
                                                              #{s1 11296}#
                                                              (append
                                                                #{s1 11296}#
                                                                #{m2 11329}#))))))))
                                            (#{module 11285}#
                                              (vector-ref #{e 10378}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 11283}#
                                          #{wrap 11284}#
                                          #{module 11285}#))
                                      (if (null? #{e 10378}#)
                                        #{e 10378}#
                                        (vector
                                          'syntax-object
                                          #{e 10378}#
                                          #{w 10380}#
                                          #{mod 10382}#))))
                                  (if (if (null? (car #{w 10380}#))
                                        (null? (cdr #{w 10380}#))
                                        #f)
                                    #{id 10416}#
                                    (if (if (vector? #{id 10416}#)
                                          (if (= (vector-length #{id 10416}#)
                                                 4)
                                            (eq? (vector-ref #{id 10416}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 11381}#
                                              (vector-ref #{id 10416}# 1))
                                            (#{wrap 11382}#
                                              (let ((#{w2 11392}#
                                                      (vector-ref
                                                        #{id 10416}#
                                                        2)))
                                                (let ((#{m1 11393}#
                                                        (car #{w 10380}#))
                                                      (#{s1 11394}#
                                                        (cdr #{w 10380}#)))
                                                  (if (null? #{m1 11393}#)
                                                    (if (null? #{s1 11394}#)
                                                      #{w2 11392}#
                                                      (cons (car #{w2 11392}#)
                                                            (let ((#{m2 11411}#
                                                                    (cdr #{w2 11392}#)))
                                                              (if (null? #{m2 11411}#)
                                                                #{s1 11394}#
                                                                (append
                                                                  #{s1 11394}#
                                                                  #{m2 11411}#)))))
                                                    (cons (let ((#{m2 11419}#
                                                                  (car #{w2 11392}#)))
                                                            (if (null? #{m2 11419}#)
                                                              #{m1 11393}#
                                                              (append
                                                                #{m1 11393}#
                                                                #{m2 11419}#)))
                                                          (let ((#{m2 11427}#
                                                                  (cdr #{w2 11392}#)))
                                                            (if (null? #{m2 11427}#)
                                                              #{s1 11394}#
                                                              (append
                                                                #{s1 11394}#
                                                                #{m2 11427}#))))))))
                                            (#{module 11383}#
                                              (vector-ref #{id 10416}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 11381}#
                                          #{wrap 11382}#
                                          #{module 11383}#))
                                      (if (null? #{id 10416}#)
                                        #{id 10416}#
                                        (vector
                                          'syntax-object
                                          #{id 10416}#
                                          #{w 10380}#
                                          #{id-mod 10419}#)))))))
                            (if (eqv? #{atom-key 10421}# 'displaced-lexical)
                              (syntax-violation
                                'set!
                                "identifier out of context"
                                (if (if (null? (car #{w 10380}#))
                                      (null? (cdr #{w 10380}#))
                                      #f)
                                  #{id 10416}#
                                  (if (if (vector? #{id 10416}#)
                                        (if (= (vector-length #{id 10416}#) 4)
                                          (eq? (vector-ref #{id 10416}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 11483}#
                                            (vector-ref #{id 10416}# 1))
                                          (#{wrap 11484}#
                                            (let ((#{w2 11494}#
                                                    (vector-ref
                                                      #{id 10416}#
                                                      2)))
                                              (let ((#{m1 11495}#
                                                      (car #{w 10380}#))
                                                    (#{s1 11496}#
                                                      (cdr #{w 10380}#)))
                                                (if (null? #{m1 11495}#)
                                                  (if (null? #{s1 11496}#)
                                                    #{w2 11494}#
                                                    (cons (car #{w2 11494}#)
                                                          (let ((#{m2 11513}#
                                                                  (cdr #{w2 11494}#)))
                                                            (if (null? #{m2 11513}#)
                                                              #{s1 11496}#
                                                              (append
                                                                #{s1 11496}#
                                                                #{m2 11513}#)))))
                                                  (cons (let ((#{m2 11521}#
                                                                (car #{w2 11494}#)))
                                                          (if (null? #{m2 11521}#)
                                                            #{m1 11495}#
                                                            (append
                                                              #{m1 11495}#
                                                              #{m2 11521}#)))
                                                        (let ((#{m2 11529}#
                                                                (cdr #{w2 11494}#)))
                                                          (if (null? #{m2 11529}#)
                                                            #{s1 11496}#
                                                            (append
                                                              #{s1 11496}#
                                                              #{m2 11529}#))))))))
                                          (#{module 11485}#
                                            (vector-ref #{id 10416}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 11483}#
                                        #{wrap 11484}#
                                        #{module 11485}#))
                                    (if (null? #{id 10416}#)
                                      #{id 10416}#
                                      (vector
                                        'syntax-object
                                        #{id 10416}#
                                        #{w 10380}#
                                        #{mod 10382}#)))))
                              (syntax-violation
                                'set!
                                "bad set!"
                                (let ((#{x 11561}#
                                        (begin
                                          (if (if (pair? #{e 10378}#)
                                                #{s 10381}#
                                                #f)
                                            (set-source-properties!
                                              #{e 10378}#
                                              #{s 10381}#))
                                          #{e 10378}#)))
                                  (if (if (null? (car #{w 10380}#))
                                        (null? (cdr #{w 10380}#))
                                        #f)
                                    #{x 11561}#
                                    (if (if (vector? #{x 11561}#)
                                          (if (= (vector-length #{x 11561}#) 4)
                                            (eq? (vector-ref #{x 11561}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 11593}#
                                              (vector-ref #{x 11561}# 1))
                                            (#{wrap 11594}#
                                              (let ((#{w2 11602}#
                                                      (vector-ref
                                                        #{x 11561}#
                                                        2)))
                                                (let ((#{m1 11603}#
                                                        (car #{w 10380}#))
                                                      (#{s1 11604}#
                                                        (cdr #{w 10380}#)))
                                                  (if (null? #{m1 11603}#)
                                                    (if (null? #{s1 11604}#)
                                                      #{w2 11602}#
                                                      (cons (car #{w2 11602}#)
                                                            (let ((#{m2 11619}#
                                                                    (cdr #{w2 11602}#)))
                                                              (if (null? #{m2 11619}#)
                                                                #{s1 11604}#
                                                                (append
                                                                  #{s1 11604}#
                                                                  #{m2 11619}#)))))
                                                    (cons (let ((#{m2 11627}#
                                                                  (car #{w2 11602}#)))
                                                            (if (null? #{m2 11627}#)
                                                              #{m1 11603}#
                                                              (append
                                                                #{m1 11603}#
                                                                #{m2 11627}#)))
                                                          (let ((#{m2 11635}#
                                                                  (cdr #{w2 11602}#)))
                                                            (if (null? #{m2 11635}#)
                                                              #{s1 11604}#
                                                              (append
                                                                #{s1 11604}#
                                                                #{m2 11635}#))))))))
                                            (#{module 11595}#
                                              (vector-ref #{x 11561}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 11593}#
                                          #{wrap 11594}#
                                          #{module 11595}#))
                                      (if (null? #{x 11561}#)
                                        #{x 11561}#
                                        (vector
                                          'syntax-object
                                          #{x 11561}#
                                          #{w 10380}#
                                          #{mod 10382}#))))))))))))))
              #{tmp 10384}#)
            (let ((#{tmp 11650}#
                    ($sc-dispatch
                      #{e 10378}#
                      '(_ (any . each-any) any))))
              (if #{tmp 11650}#
                (@apply
                  (lambda (#{head 11654}# #{tail 11655}# #{val 11656}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 4374}#
                          #{head 11654}#
                          #{r 10379}#
                          '(())
                          #f
                          #f
                          #{mod 10382}#
                          #t))
                      (lambda (#{type 11659}#
                               #{value 11660}#
                               #{ee 11661}#
                               #{ww 11662}#
                               #{ss 11663}#
                               #{modmod 11664}#)
                        (if (eqv? #{type 11659}# 'module-ref)
                          (let ((#{val 11668}#
                                  (#{chi 4375}#
                                    #{val 11656}#
                                    #{r 10379}#
                                    #{w 10380}#
                                    #{mod 10382}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 11660}#
                                  (cons #{head 11654}# #{tail 11655}#)
                                  #{r 10379}#
                                  #{w 10380}#))
                              (lambda (#{e 11669}#
                                       #{r 11670}#
                                       #{w 11671}#
                                       #{s* 11672}#
                                       #{mod 11673}#)
                                (let ((#{tmp 11675}# (list #{e 11669}#)))
                                  (if (@apply
                                        (lambda (#{e 11677}#)
                                          (if (symbol? #{e 11677}#)
                                            #t
                                            (if (if (vector? #{e 11677}#)
                                                  (if (= (vector-length
                                                           #{e 11677}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{e 11677}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{e 11677}# 1))
                                              #f)))
                                        #{tmp 11675}#)
                                    (@apply
                                      (lambda (#{e 11707}#)
                                        (#{build-global-assignment 4316}#
                                          #{s 10381}#
                                          (syntax->datum #{e 11707}#)
                                          #{val 11668}#
                                          #{mod 11673}#))
                                      #{tmp 11675}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 11669}#))))))
                          (#{build-call 4309}#
                            #{s 10381}#
                            (#{chi 4375}#
                              (list '#(syntax-object
                                       setter
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(type value ee ww ss modmod)
                                          #((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                          #("i3587"
                                            "i3588"
                                            "i3589"
                                            "i3590"
                                            "i3591"
                                            "i3592"))
                                        #(ribcage
                                          #(head tail val)
                                          #((top) (top) (top))
                                          #("i3573" "i3574" "i3575"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w s mod)
                                          #((top) (top) (top) (top) (top))
                                          #("i3537"
                                            "i3538"
                                            "i3539"
                                            "i3540"
                                            "i3541"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            chi-lambda-case
                                            lambda*-formals
                                            chi-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            chi-void
                                            eval-local-transformer
                                            chi-local-syntax
                                            chi-body
                                            chi-macro
                                            chi-call
                                            chi-expr
                                            chi
                                            syntax-type
                                            chi-when-list
                                            chi-install-global
                                            chi-top-sequence
                                            chi-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-primcall
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-call
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-seq
                                            make-primcall
                                            make-call
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i471"
                                           "i469"
                                           "i467"
                                           "i465"
                                           "i463"
                                           "i461"
                                           "i459"
                                           "i457"
                                           "i455"
                                           "i453"
                                           "i451"
                                           "i449"
                                           "i447"
                                           "i445"
                                           "i443"
                                           "i441"
                                           "i439"
                                           "i437"
                                           "i435"
                                           "i433"
                                           "i431"
                                           "i429"
                                           "i427"
                                           "i425"
                                           "i423"
                                           "i421"
                                           "i419"
                                           "i417"
                                           "i415"
                                           "i413"
                                           "i411"
                                           "i409"
                                           "i407"
                                           "i405"
                                           "i403"
                                           "i402"
                                           "i400"
                                           "i397"
                                           "i396"
                                           "i395"
                                           "i393"
                                           "i392"
                                           "i390"
                                           "i388"
                                           "i386"
                                           "i384"
                                           "i382"
                                           "i380"
                                           "i378"
                                           "i376"
                                           "i373"
                                           "i371"
                                           "i370"
                                           "i368"
                                           "i366"
                                           "i364"
                                           "i362"
                                           "i361"
                                           "i360"
                                           "i359"
                                           "i357"
                                           "i356"
                                           "i353"
                                           "i351"
                                           "i349"
                                           "i347"
                                           "i345"
                                           "i343"
                                           "i341"
                                           "i340"
                                           "i339"
                                           "i337"
                                           "i335"
                                           "i334"
                                           "i331"
                                           "i330"
                                           "i328"
                                           "i326"
                                           "i324"
                                           "i322"
                                           "i320"
                                           "i318"
                                           "i316"
                                           "i314"
                                           "i312"
                                           "i309"
                                           "i307"
                                           "i305"
                                           "i303"
                                           "i301"
                                           "i299"
                                           "i297"
                                           "i295"
                                           "i293"
                                           "i291"
                                           "i289"
                                           "i287"
                                           "i285"
                                           "i283"
                                           "i281"
                                           "i279"
                                           "i277"
                                           "i275"
                                           "i273"
                                           "i271"
                                           "i269"
                                           "i267"
                                           "i265"
                                           "i263"
                                           "i262"
                                           "i259"
                                           "i257"
                                           "i256"
                                           "i255"
                                           "i254"
                                           "i253"
                                           "i251"
                                           "i249"
                                           "i247"
                                           "i244"
                                           "i242"
                                           "i240"
                                           "i238"
                                           "i236"
                                           "i234"
                                           "i232"
                                           "i230"
                                           "i228"
                                           "i226"
                                           "i224"
                                           "i222"
                                           "i220"
                                           "i218"
                                           "i216"
                                           "i214"
                                           "i212"
                                           "i210"
                                           "i208"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("i46" "i45" "i44")))
                                       (hygiene guile))
                                    #{head 11654}#)
                              #{r 10379}#
                              #{w 10380}#
                              #{mod 10382}#)
                            (map (lambda (#{e 12028}#)
                                   (#{chi 4375}#
                                     #{e 12028}#
                                     #{r 10379}#
                                     #{w 10380}#
                                     #{mod 10382}#))
                                 (append
                                   #{tail 11655}#
                                   (list #{val 11656}#))))))))
                  #{tmp 11650}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (let ((#{x 12118}#
                          (begin
                            (if (if (pair? #{e 10378}#) #{s 10381}# #f)
                              (set-source-properties! #{e 10378}# #{s 10381}#))
                            #{e 10378}#)))
                    (if (if (null? (car #{w 10380}#))
                          (null? (cdr #{w 10380}#))
                          #f)
                      #{x 12118}#
                      (if (if (vector? #{x 12118}#)
                            (if (= (vector-length #{x 12118}#) 4)
                              (eq? (vector-ref #{x 12118}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 12150}# (vector-ref #{x 12118}# 1))
                              (#{wrap 12151}#
                                (let ((#{w2 12159}#
                                        (vector-ref #{x 12118}# 2)))
                                  (let ((#{m1 12160}# (car #{w 10380}#))
                                        (#{s1 12161}# (cdr #{w 10380}#)))
                                    (if (null? #{m1 12160}#)
                                      (if (null? #{s1 12161}#)
                                        #{w2 12159}#
                                        (cons (car #{w2 12159}#)
                                              (let ((#{m2 12176}#
                                                      (cdr #{w2 12159}#)))
                                                (if (null? #{m2 12176}#)
                                                  #{s1 12161}#
                                                  (append
                                                    #{s1 12161}#
                                                    #{m2 12176}#)))))
                                      (cons (let ((#{m2 12184}#
                                                    (car #{w2 12159}#)))
                                              (if (null? #{m2 12184}#)
                                                #{m1 12160}#
                                                (append
                                                  #{m1 12160}#
                                                  #{m2 12184}#)))
                                            (let ((#{m2 12192}#
                                                    (cdr #{w2 12159}#)))
                                              (if (null? #{m2 12192}#)
                                                #{s1 12161}#
                                                (append
                                                  #{s1 12161}#
                                                  #{m2 12192}#))))))))
                              (#{module 12152}# (vector-ref #{x 12118}# 3)))
                          (vector
                            'syntax-object
                            #{expression 12150}#
                            #{wrap 12151}#
                            #{module 12152}#))
                        (if (null? #{x 12118}#)
                          #{x 12118}#
                          (vector
                            'syntax-object
                            #{x 12118}#
                            #{w 10380}#
                            #{mod 10382}#))))))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 12223}# #{r 12224}# #{w 12225}#)
          (let ((#{tmp 12227}#
                  ($sc-dispatch #{e 12223}# '(_ each-any any))))
            (if (if #{tmp 12227}#
                  (@apply
                    (lambda (#{mod 12230}# #{id 12231}#)
                      (if (and-map #{id? 4343}# #{mod 12230}#)
                        (if (symbol? #{id 12231}#)
                          #t
                          (if (if (vector? #{id 12231}#)
                                (if (= (vector-length #{id 12231}#) 4)
                                  (eq? (vector-ref #{id 12231}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 12231}# 1))
                            #f))
                        #f))
                    #{tmp 12227}#)
                  #f)
              (@apply
                (lambda (#{mod 12271}# #{id 12272}#)
                  (values
                    (syntax->datum #{id 12272}#)
                    #{r 12224}#
                    #{w 12225}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i3634" "i3635"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i3622" "i3623" "i3624"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    chi-lambda-case
                                    lambda*-formals
                                    chi-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    chi-void
                                    eval-local-transformer
                                    chi-local-syntax
                                    chi-body
                                    chi-macro
                                    chi-call
                                    chi-expr
                                    chi
                                    syntax-type
                                    chi-when-list
                                    chi-install-global
                                    chi-top-sequence
                                    chi-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    lookup
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-primcall
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-call
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-seq
                                    make-primcall
                                    make-call
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i471"
                                   "i469"
                                   "i467"
                                   "i465"
                                   "i463"
                                   "i461"
                                   "i459"
                                   "i457"
                                   "i455"
                                   "i453"
                                   "i451"
                                   "i449"
                                   "i447"
                                   "i445"
                                   "i443"
                                   "i441"
                                   "i439"
                                   "i437"
                                   "i435"
                                   "i433"
                                   "i431"
                                   "i429"
                                   "i427"
                                   "i425"
                                   "i423"
                                   "i421"
                                   "i419"
                                   "i417"
                                   "i415"
                                   "i413"
                                   "i411"
                                   "i409"
                                   "i407"
                                   "i405"
                                   "i403"
                                   "i402"
                                   "i400"
                                   "i397"
                                   "i396"
                                   "i395"
                                   "i393"
                                   "i392"
                                   "i390"
                                   "i388"
                                   "i386"
                                   "i384"
                                   "i382"
                                   "i380"
                                   "i378"
                                   "i376"
                                   "i373"
                                   "i371"
                                   "i370"
                                   "i368"
                                   "i366"
                                   "i364"
                                   "i362"
                                   "i361"
                                   "i360"
                                   "i359"
                                   "i357"
                                   "i356"
                                   "i353"
                                   "i351"
                                   "i349"
                                   "i347"
                                   "i345"
                                   "i343"
                                   "i341"
                                   "i340"
                                   "i339"
                                   "i337"
                                   "i335"
                                   "i334"
                                   "i331"
                                   "i330"
                                   "i328"
                                   "i326"
                                   "i324"
                                   "i322"
                                   "i320"
                                   "i318"
                                   "i316"
                                   "i314"
                                   "i312"
                                   "i309"
                                   "i307"
                                   "i305"
                                   "i303"
                                   "i301"
                                   "i299"
                                   "i297"
                                   "i295"
                                   "i293"
                                   "i291"
                                   "i289"
                                   "i287"
                                   "i285"
                                   "i283"
                                   "i281"
                                   "i279"
                                   "i277"
                                   "i275"
                                   "i273"
                                   "i271"
                                   "i269"
                                   "i267"
                                   "i265"
                                   "i263"
                                   "i262"
                                   "i259"
                                   "i257"
                                   "i256"
                                   "i255"
                                   "i254"
                                   "i253"
                                   "i251"
                                   "i249"
                                   "i247"
                                   "i244"
                                   "i242"
                                   "i240"
                                   "i238"
                                   "i236"
                                   "i234"
                                   "i232"
                                   "i230"
                                   "i228"
                                   "i226"
                                   "i224"
                                   "i222"
                                   "i220"
                                   "i218"
                                   "i216"
                                   "i214"
                                   "i212"
                                   "i210"
                                   "i208"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i46" "i45" "i44")))
                               (hygiene guile))
                            #{mod 12271}#))))
                #{tmp 12227}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 12223}#))))))
    (#{global-extend 4341}#
      'module-ref
      '@@
      (lambda (#{e 12374}# #{r 12375}# #{w 12376}#)
        (letrec*
          ((#{remodulate 12377}#
             (lambda (#{x 12601}# #{mod 12602}#)
               (if (pair? #{x 12601}#)
                 (cons (#{remodulate 12377}#
                         (car #{x 12601}#)
                         #{mod 12602}#)
                       (#{remodulate 12377}#
                         (cdr #{x 12601}#)
                         #{mod 12602}#))
                 (if (if (vector? #{x 12601}#)
                       (if (= (vector-length #{x 12601}#) 4)
                         (eq? (vector-ref #{x 12601}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 12616}#
                           (#{remodulate 12377}#
                             (vector-ref #{x 12601}# 1)
                             #{mod 12602}#))
                         (#{wrap 12617}# (vector-ref #{x 12601}# 2)))
                     (vector
                       'syntax-object
                       #{expression 12616}#
                       #{wrap 12617}#
                       #{mod 12602}#))
                   (if (vector? #{x 12601}#)
                     (let ((#{n 12625}# (vector-length #{x 12601}#)))
                       (let ((#{v 12626}# (make-vector #{n 12625}#)))
                         (letrec*
                           ((#{loop 12627}#
                              (lambda (#{i 12682}#)
                                (if (= #{i 12682}# #{n 12625}#)
                                  #{v 12626}#
                                  (begin
                                    (vector-set!
                                      #{v 12626}#
                                      #{i 12682}#
                                      (#{remodulate 12377}#
                                        (vector-ref #{x 12601}# #{i 12682}#)
                                        #{mod 12602}#))
                                    (#{loop 12627}# (#{1+}# #{i 12682}#)))))))
                           (#{loop 12627}# 0))))
                     #{x 12601}#))))))
          (let ((#{tmp 12379}#
                  ($sc-dispatch #{e 12374}# '(_ each-any any))))
            (if (if #{tmp 12379}#
                  (@apply
                    (lambda (#{mod 12383}# #{exp 12384}#)
                      (and-map #{id? 4343}# #{mod 12383}#))
                    #{tmp 12379}#)
                  #f)
              (@apply
                (lambda (#{mod 12400}# #{exp 12401}#)
                  (let ((#{mod 12402}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i3678" "i3679"))
                                      #(ribcage (remodulate) ((top)) ("i3645"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i3642" "i3643" "i3644"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          chi-lambda-case
                                          lambda*-formals
                                          chi-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          chi-void
                                          eval-local-transformer
                                          chi-local-syntax
                                          chi-body
                                          chi-macro
                                          chi-call
                                          chi-expr
                                          chi
                                          syntax-type
                                          chi-when-list
                                          chi-install-global
                                          chi-top-sequence
                                          chi-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          lookup
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-primcall
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-call
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-seq
                                          make-primcall
                                          make-call
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i471"
                                         "i469"
                                         "i467"
                                         "i465"
                                         "i463"
                                         "i461"
                                         "i459"
                                         "i457"
                                         "i455"
                                         "i453"
                                         "i451"
                                         "i449"
                                         "i447"
                                         "i445"
                                         "i443"
                                         "i441"
                                         "i439"
                                         "i437"
                                         "i435"
                                         "i433"
                                         "i431"
                                         "i429"
                                         "i427"
                                         "i425"
                                         "i423"
                                         "i421"
                                         "i419"
                                         "i417"
                                         "i415"
                                         "i413"
                                         "i411"
                                         "i409"
                                         "i407"
                                         "i405"
                                         "i403"
                                         "i402"
                                         "i400"
                                         "i397"
                                         "i396"
                                         "i395"
                                         "i393"
                                         "i392"
                                         "i390"
                                         "i388"
                                         "i386"
                                         "i384"
                                         "i382"
                                         "i380"
                                         "i378"
                                         "i376"
                                         "i373"
                                         "i371"
                                         "i370"
                                         "i368"
                                         "i366"
                                         "i364"
                                         "i362"
                                         "i361"
                                         "i360"
                                         "i359"
                                         "i357"
                                         "i356"
                                         "i353"
                                         "i351"
                                         "i349"
                                         "i347"
                                         "i345"
                                         "i343"
                                         "i341"
                                         "i340"
                                         "i339"
                                         "i337"
                                         "i335"
                                         "i334"
                                         "i331"
                                         "i330"
                                         "i328"
                                         "i326"
                                         "i324"
                                         "i322"
                                         "i320"
                                         "i318"
                                         "i316"
                                         "i314"
                                         "i312"
                                         "i309"
                                         "i307"
                                         "i305"
                                         "i303"
                                         "i301"
                                         "i299"
                                         "i297"
                                         "i295"
                                         "i293"
                                         "i291"
                                         "i289"
                                         "i287"
                                         "i285"
                                         "i283"
                                         "i281"
                                         "i279"
                                         "i277"
                                         "i275"
                                         "i273"
                                         "i271"
                                         "i269"
                                         "i267"
                                         "i265"
                                         "i263"
                                         "i262"
                                         "i259"
                                         "i257"
                                         "i256"
                                         "i255"
                                         "i254"
                                         "i253"
                                         "i251"
                                         "i249"
                                         "i247"
                                         "i244"
                                         "i242"
                                         "i240"
                                         "i238"
                                         "i236"
                                         "i234"
                                         "i232"
                                         "i230"
                                         "i228"
                                         "i226"
                                         "i224"
                                         "i222"
                                         "i220"
                                         "i218"
                                         "i216"
                                         "i214"
                                         "i212"
                                         "i210"
                                         "i208"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i46" "i45" "i44")))
                                     (hygiene guile))
                                  #{mod 12400}#))))
                    (values
                      (#{remodulate 12377}#
                        #{exp 12401}#
                        #{mod 12402}#)
                      #{r 12375}#
                      #{w 12376}#
                      (#{source-annotation 4336}# #{exp 12401}#)
                      #{mod 12402}#)))
                #{tmp 12379}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 12374}#))))))
    (#{global-extend 4341}#
      'core
      'if
      (lambda (#{e 12793}#
               #{r 12794}#
               #{w 12795}#
               #{s 12796}#
               #{mod 12797}#)
        (let ((#{tmp 12799}#
                ($sc-dispatch #{e 12793}# '(_ any any))))
          (if #{tmp 12799}#
            (@apply
              (lambda (#{test 12803}# #{then 12804}#)
                (#{build-conditional 4310}#
                  #{s 12796}#
                  (#{chi 4375}#
                    #{test 12803}#
                    #{r 12794}#
                    #{w 12795}#
                    #{mod 12797}#)
                  (#{chi 4375}#
                    #{then 12804}#
                    #{r 12794}#
                    #{w 12795}#
                    #{mod 12797}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 12799}#)
            (let ((#{tmp 13059}#
                    ($sc-dispatch #{e 12793}# '(_ any any any))))
              (if #{tmp 13059}#
                (@apply
                  (lambda (#{test 13063}# #{then 13064}# #{else 13065}#)
                    (#{build-conditional 4310}#
                      #{s 12796}#
                      (#{chi 4375}#
                        #{test 13063}#
                        #{r 12794}#
                        #{w 12795}#
                        #{mod 12797}#)
                      (#{chi 4375}#
                        #{then 13064}#
                        #{r 12794}#
                        #{w 12795}#
                        #{mod 12797}#)
                      (#{chi 4375}#
                        #{else 13065}#
                        #{r 12794}#
                        #{w 12795}#
                        #{mod 12797}#)))
                  #{tmp 13059}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 12793}#)))))))
    (#{global-extend 4341}#
      'core
      'with-fluids
      (lambda (#{e 13514}#
               #{r 13515}#
               #{w 13516}#
               #{s 13517}#
               #{mod 13518}#)
        (let ((#{tmp 13520}#
                ($sc-dispatch
                  #{e 13514}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 13520}#
            (@apply
              (lambda (#{fluid 13524}#
                       #{val 13525}#
                       #{b 13526}#
                       #{b* 13527}#)
                (#{build-dynlet 4311}#
                  #{s 13517}#
                  (map (lambda (#{x 13618}#)
                         (#{chi 4375}#
                           #{x 13618}#
                           #{r 13515}#
                           #{w 13516}#
                           #{mod 13518}#))
                       #{fluid 13524}#)
                  (map (lambda (#{x 13698}#)
                         (#{chi 4375}#
                           #{x 13698}#
                           #{r 13515}#
                           #{w 13516}#
                           #{mod 13518}#))
                       #{val 13525}#)
                  (#{chi-body 4379}#
                    (cons #{b 13526}# #{b* 13527}#)
                    (let ((#{x 13789}#
                            (begin
                              (if (if (pair? #{e 13514}#) #{s 13517}# #f)
                                (set-source-properties!
                                  #{e 13514}#
                                  #{s 13517}#))
                              #{e 13514}#)))
                      (if (if (null? (car #{w 13516}#))
                            (null? (cdr #{w 13516}#))
                            #f)
                        #{x 13789}#
                        (if (if (vector? #{x 13789}#)
                              (if (= (vector-length #{x 13789}#) 4)
                                (eq? (vector-ref #{x 13789}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 13821}#
                                  (vector-ref #{x 13789}# 1))
                                (#{wrap 13822}#
                                  (let ((#{w2 13830}#
                                          (vector-ref #{x 13789}# 2)))
                                    (let ((#{m1 13831}# (car #{w 13516}#))
                                          (#{s1 13832}# (cdr #{w 13516}#)))
                                      (if (null? #{m1 13831}#)
                                        (if (null? #{s1 13832}#)
                                          #{w2 13830}#
                                          (cons (car #{w2 13830}#)
                                                (let ((#{m2 13847}#
                                                        (cdr #{w2 13830}#)))
                                                  (if (null? #{m2 13847}#)
                                                    #{s1 13832}#
                                                    (append
                                                      #{s1 13832}#
                                                      #{m2 13847}#)))))
                                        (cons (let ((#{m2 13855}#
                                                      (car #{w2 13830}#)))
                                                (if (null? #{m2 13855}#)
                                                  #{m1 13831}#
                                                  (append
                                                    #{m1 13831}#
                                                    #{m2 13855}#)))
                                              (let ((#{m2 13863}#
                                                      (cdr #{w2 13830}#)))
                                                (if (null? #{m2 13863}#)
                                                  #{s1 13832}#
                                                  (append
                                                    #{s1 13832}#
                                                    #{m2 13863}#))))))))
                                (#{module 13823}# (vector-ref #{x 13789}# 3)))
                            (vector
                              'syntax-object
                              #{expression 13821}#
                              #{wrap 13822}#
                              #{module 13823}#))
                          (if (null? #{x 13789}#)
                            #{x 13789}#
                            (vector
                              'syntax-object
                              #{x 13789}#
                              #{w 13516}#
                              #{mod 13518}#)))))
                    #{r 13515}#
                    #{w 13516}#
                    #{mod 13518}#)))
              #{tmp 13520}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 13514}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 4341}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 14157}#
           (lambda (#{pattern 15795}# #{keys 15796}#)
             (letrec*
               ((#{cvt* 15797}#
                  (lambda (#{p* 16596}# #{n 16597}# #{ids 16598}#)
                    (if (not (pair? #{p* 16596}#))
                      (#{cvt 15799}#
                        #{p* 16596}#
                        #{n 16597}#
                        #{ids 16598}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 15797}#
                            (cdr #{p* 16596}#)
                            #{n 16597}#
                            #{ids 16598}#))
                        (lambda (#{y 16601}# #{ids 16602}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 15799}#
                                (car #{p* 16596}#)
                                #{n 16597}#
                                #{ids 16602}#))
                            (lambda (#{x 16605}# #{ids 16606}#)
                              (values
                                (cons #{x 16605}# #{y 16601}#)
                                #{ids 16606}#))))))))
                (#{v-reverse 15798}#
                  (lambda (#{x 16607}#)
                    (letrec*
                      ((#{loop 16608}#
                         (lambda (#{r 16709}# #{x 16710}#)
                           (if (not (pair? #{x 16710}#))
                             (values #{r 16709}# #{x 16710}#)
                             (#{loop 16608}#
                               (cons (car #{x 16710}#) #{r 16709}#)
                               (cdr #{x 16710}#))))))
                      (#{loop 16608}# '() #{x 16607}#))))
                (#{cvt 15799}#
                  (lambda (#{p 15802}# #{n 15803}# #{ids 15804}#)
                    (if (if (symbol? #{p 15802}#)
                          #t
                          (if (if (vector? #{p 15802}#)
                                (if (= (vector-length #{p 15802}#) 4)
                                  (eq? (vector-ref #{p 15802}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 15802}# 1))
                            #f))
                      (if (#{bound-id-member? 4367}#
                            #{p 15802}#
                            #{keys 15796}#)
                        (values
                          (vector 'free-id #{p 15802}#)
                          #{ids 15804}#)
                        (if (#{free-id=? 4363}#
                              #{p 15802}#
                              '#(syntax-object
                                 _
                                 ((top)
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(p n ids)
                                    #((top) (top) (top))
                                    #("i3779" "i3780" "i3781"))
                                  #(ribcage
                                    (cvt v-reverse cvt*)
                                    ((top) (top) (top))
                                    ("i3752" "i3750" "i3748"))
                                  #(ribcage
                                    #(pattern keys)
                                    #((top) (top))
                                    #("i3746" "i3747"))
                                  #(ribcage
                                    (gen-syntax-case
                                      gen-clause
                                      build-dispatch-call
                                      convert-pattern)
                                    ((top) (top) (top) (top))
                                    ("i3742" "i3740" "i3738" "i3736"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      chi-lambda-case
                                      lambda*-formals
                                      chi-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      chi-void
                                      eval-local-transformer
                                      chi-local-syntax
                                      chi-body
                                      chi-macro
                                      chi-call
                                      chi-expr
                                      chi
                                      syntax-type
                                      chi-when-list
                                      chi-install-global
                                      chi-top-sequence
                                      chi-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-primcall
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-call
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-seq
                                      make-primcall
                                      make-call
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("i471"
                                     "i469"
                                     "i467"
                                     "i465"
                                     "i463"
                                     "i461"
                                     "i459"
                                     "i457"
                                     "i455"
                                     "i453"
                                     "i451"
                                     "i449"
                                     "i447"
                                     "i445"
                                     "i443"
                                     "i441"
                                     "i439"
                                     "i437"
                                     "i435"
                                     "i433"
                                     "i431"
                                     "i429"
                                     "i427"
                                     "i425"
                                     "i423"
                                     "i421"
                                     "i419"
                                     "i417"
                                     "i415"
                                     "i413"
                                     "i411"
                                     "i409"
                                     "i407"
                                     "i405"
                                     "i403"
                                     "i402"
                                     "i400"
                                     "i397"
                                     "i396"
                                     "i395"
                                     "i393"
                                     "i392"
                                     "i390"
                                     "i388"
                                     "i386"
                                     "i384"
                                     "i382"
                                     "i380"
                                     "i378"
                                     "i376"
                                     "i373"
                                     "i371"
                                     "i370"
                                     "i368"
                                     "i366"
                                     "i364"
                                     "i362"
                                     "i361"
                                     "i360"
                                     "i359"
                                     "i357"
                                     "i356"
                                     "i353"
                                     "i351"
                                     "i349"
                                     "i347"
                                     "i345"
                                     "i343"
                                     "i341"
                                     "i340"
                                     "i339"
                                     "i337"
                                     "i335"
                                     "i334"
                                     "i331"
                                     "i330"
                                     "i328"
                                     "i326"
                                     "i324"
                                     "i322"
                                     "i320"
                                     "i318"
                                     "i316"
                                     "i314"
                                     "i312"
                                     "i309"
                                     "i307"
                                     "i305"
                                     "i303"
                                     "i301"
                                     "i299"
                                     "i297"
                                     "i295"
                                     "i293"
                                     "i291"
                                     "i289"
                                     "i287"
                                     "i285"
                                     "i283"
                                     "i281"
                                     "i279"
                                     "i277"
                                     "i275"
                                     "i273"
                                     "i271"
                                     "i269"
                                     "i267"
                                     "i265"
                                     "i263"
                                     "i262"
                                     "i259"
                                     "i257"
                                     "i256"
                                     "i255"
                                     "i254"
                                     "i253"
                                     "i251"
                                     "i249"
                                     "i247"
                                     "i244"
                                     "i242"
                                     "i240"
                                     "i238"
                                     "i236"
                                     "i234"
                                     "i232"
                                     "i230"
                                     "i228"
                                     "i226"
                                     "i224"
                                     "i222"
                                     "i220"
                                     "i218"
                                     "i216"
                                     "i214"
                                     "i212"
                                     "i210"
                                     "i208"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("i46" "i45" "i44")))
                                 (hygiene guile)))
                          (values '_ #{ids 15804}#)
                          (values
                            'any
                            (cons (cons #{p 15802}# #{n 15803}#)
                                  #{ids 15804}#))))
                      (let ((#{tmp 15936}#
                              ($sc-dispatch #{p 15802}# '(any any))))
                        (if (if #{tmp 15936}#
                              (@apply
                                (lambda (#{x 15940}# #{dots 15941}#)
                                  (if (if (if (vector? #{dots 15941}#)
                                            (if (= (vector-length
                                                     #{dots 15941}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{dots 15941}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 15941}# 1))
                                        #f)
                                    (#{free-id=? 4363}#
                                      #{dots 15941}#
                                      '#(syntax-object
                                         ...
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i2263"))
                                          #(ribcage
                                            (lambda-var-list
                                              gen-var
                                              strip
                                              chi-lambda-case
                                              lambda*-formals
                                              chi-simple-lambda
                                              lambda-formals
                                              ellipsis?
                                              chi-void
                                              eval-local-transformer
                                              chi-local-syntax
                                              chi-body
                                              chi-macro
                                              chi-call
                                              chi-expr
                                              chi
                                              syntax-type
                                              chi-when-list
                                              chi-install-global
                                              chi-top-sequence
                                              chi-sequence
                                              source-wrap
                                              wrap
                                              bound-id-member?
                                              distinct-bound-ids?
                                              valid-bound-ids?
                                              bound-id=?
                                              free-id=?
                                              id-var-name
                                              same-marks?
                                              join-marks
                                              join-wraps
                                              smart-append
                                              make-binding-wrap
                                              extend-ribcage!
                                              make-empty-ribcage
                                              new-mark
                                              anti-mark
                                              the-anti-mark
                                              top-marked?
                                              top-wrap
                                              empty-wrap
                                              set-ribcage-labels!
                                              set-ribcage-marks!
                                              set-ribcage-symnames!
                                              ribcage-labels
                                              ribcage-marks
                                              ribcage-symnames
                                              ribcage?
                                              make-ribcage
                                              gen-labels
                                              gen-label
                                              make-rename
                                              rename-marks
                                              rename-new
                                              rename-old
                                              subst-rename?
                                              wrap-subst
                                              wrap-marks
                                              make-wrap
                                              id-sym-name&marks
                                              id-sym-name
                                              id?
                                              nonsymbol-id?
                                              global-extend
                                              lookup
                                              macros-only-env
                                              extend-var-env
                                              extend-env
                                              null-env
                                              binding-value
                                              binding-type
                                              make-binding
                                              arg-check
                                              source-annotation
                                              no-source
                                              set-syntax-object-module!
                                              set-syntax-object-wrap!
                                              set-syntax-object-expression!
                                              syntax-object-module
                                              syntax-object-wrap
                                              syntax-object-expression
                                              syntax-object?
                                              make-syntax-object
                                              build-lexical-var
                                              build-letrec
                                              build-named-let
                                              build-let
                                              build-sequence
                                              build-data
                                              build-primref
                                              build-primcall
                                              build-lambda-case
                                              build-case-lambda
                                              build-simple-lambda
                                              build-global-definition
                                              build-global-assignment
                                              build-global-reference
                                              analyze-variable
                                              build-lexical-assignment
                                              build-lexical-reference
                                              build-dynlet
                                              build-conditional
                                              build-call
                                              build-void
                                              maybe-name-value!
                                              decorate-source
                                              get-global-definition-hook
                                              put-global-definition-hook
                                              gensym-hook
                                              local-eval-hook
                                              top-level-eval-hook
                                              fx<
                                              fx=
                                              fx-
                                              fx+
                                              set-lambda-meta!
                                              lambda-meta
                                              lambda?
                                              make-dynlet
                                              make-letrec
                                              make-let
                                              make-lambda-case
                                              make-lambda
                                              make-seq
                                              make-primcall
                                              make-call
                                              make-conditional
                                              make-toplevel-define
                                              make-toplevel-set
                                              make-toplevel-ref
                                              make-module-set
                                              make-module-ref
                                              make-lexical-set
                                              make-lexical-ref
                                              make-primitive-ref
                                              make-const
                                              make-void)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i471"
                                             "i469"
                                             "i467"
                                             "i465"
                                             "i463"
                                             "i461"
                                             "i459"
                                             "i457"
                                             "i455"
                                             "i453"
                                             "i451"
                                             "i449"
                                             "i447"
                                             "i445"
                                             "i443"
                                             "i441"
                                             "i439"
                                             "i437"
                                             "i435"
                                             "i433"
                                             "i431"
                                             "i429"
                                             "i427"
                                             "i425"
                                             "i423"
                                             "i421"
                                             "i419"
                                             "i417"
                                             "i415"
                                             "i413"
                                             "i411"
                                             "i409"
                                             "i407"
                                             "i405"
                                             "i403"
                                             "i402"
                                             "i400"
                                             "i397"
                                             "i396"
                                             "i395"
                                             "i393"
                                             "i392"
                                             "i390"
                                             "i388"
                                             "i386"
                                             "i384"
                                             "i382"
                                             "i380"
                                             "i378"
                                             "i376"
                                             "i373"
                                             "i371"
                                             "i370"
                                             "i368"
                                             "i366"
                                             "i364"
                                             "i362"
                                             "i361"
                                             "i360"
                                             "i359"
                                             "i357"
                                             "i356"
                                             "i353"
                                             "i351"
                                             "i349"
                                             "i347"
                                             "i345"
                                             "i343"
                                             "i341"
                                             "i340"
                                             "i339"
                                             "i337"
                                             "i335"
                                             "i334"
                                             "i331"
                                             "i330"
                                             "i328"
                                             "i326"
                                             "i324"
                                             "i322"
                                             "i320"
                                             "i318"
                                             "i316"
                                             "i314"
                                             "i312"
                                             "i309"
                                             "i307"
                                             "i305"
                                             "i303"
                                             "i301"
                                             "i299"
                                             "i297"
                                             "i295"
                                             "i293"
                                             "i291"
                                             "i289"
                                             "i287"
                                             "i285"
                                             "i283"
                                             "i281"
                                             "i279"
                                             "i277"
                                             "i275"
                                             "i273"
                                             "i271"
                                             "i269"
                                             "i267"
                                             "i265"
                                             "i263"
                                             "i262"
                                             "i259"
                                             "i257"
                                             "i256"
                                             "i255"
                                             "i254"
                                             "i253"
                                             "i251"
                                             "i249"
                                             "i247"
                                             "i244"
                                             "i242"
                                             "i240"
                                             "i238"
                                             "i236"
                                             "i234"
                                             "i232"
                                             "i230"
                                             "i228"
                                             "i226"
                                             "i224"
                                             "i222"
                                             "i220"
                                             "i218"
                                             "i216"
                                             "i214"
                                             "i212"
                                             "i210"
                                             "i208"))
                                          #(ribcage
                                            (define-structure
                                              define-expansion-accessors
                                              define-expansion-constructors)
                                            ((top) (top) (top))
                                            ("i46" "i45" "i44")))
                                         (hygiene guile)))
                                    #f))
                                #{tmp 15936}#)
                              #f)
                          (@apply
                            (lambda (#{x 15980}# #{dots 15981}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 15799}#
                                    #{x 15980}#
                                    (#{1+}# #{n 15803}#)
                                    #{ids 15804}#))
                                (lambda (#{p 15982}# #{ids 15983}#)
                                  (values
                                    (if (eq? #{p 15982}# 'any)
                                      'each-any
                                      (vector 'each #{p 15982}#))
                                    #{ids 15983}#))))
                            #{tmp 15936}#)
                          (let ((#{tmp 15984}#
                                  ($sc-dispatch #{p 15802}# '(any any . any))))
                            (if (if #{tmp 15984}#
                                  (@apply
                                    (lambda (#{x 15988}#
                                             #{dots 15989}#
                                             #{ys 15990}#)
                                      (if (if (if (vector? #{dots 15989}#)
                                                (if (= (vector-length
                                                         #{dots 15989}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 15989}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 15989}# 1))
                                            #f)
                                        (#{free-id=? 4363}#
                                          #{dots 15989}#
                                          '#(syntax-object
                                             ...
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i2263"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  chi-lambda-case
                                                  lambda*-formals
                                                  chi-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  chi-void
                                                  eval-local-transformer
                                                  chi-local-syntax
                                                  chi-body
                                                  chi-macro
                                                  chi-call
                                                  chi-expr
                                                  chi
                                                  syntax-type
                                                  chi-when-list
                                                  chi-install-global
                                                  chi-top-sequence
                                                  chi-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-primcall
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-call
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-seq
                                                  make-primcall
                                                  make-call
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i471"
                                                 "i469"
                                                 "i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i402"
                                                 "i400"
                                                 "i397"
                                                 "i396"
                                                 "i395"
                                                 "i393"
                                                 "i392"
                                                 "i390"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i373"
                                                 "i371"
                                                 "i370"
                                                 "i368"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i361"
                                                 "i360"
                                                 "i359"
                                                 "i357"
                                                 "i356"
                                                 "i353"
                                                 "i351"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i340"
                                                 "i339"
                                                 "i337"
                                                 "i335"
                                                 "i334"
                                                 "i331"
                                                 "i330"
                                                 "i328"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i309"
                                                 "i307"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i262"
                                                 "i259"
                                                 "i257"
                                                 "i256"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i244"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile)))
                                        #f))
                                    #{tmp 15984}#)
                                  #f)
                              (@apply
                                (lambda (#{x 16029}#
                                         #{dots 16030}#
                                         #{ys 16031}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 15797}#
                                        #{ys 16031}#
                                        #{n 15803}#
                                        #{ids 15804}#))
                                    (lambda (#{ys 16516}# #{ids 16517}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 15799}#
                                            #{x 16029}#
                                            (#{1+}# #{n 15803}#)
                                            #{ids 16517}#))
                                        (lambda (#{x 16518}# #{ids 16519}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 15798}#
                                                #{ys 16516}#))
                                            (lambda (#{ys 16555}# #{e 16556}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 16518}#
                                                  #{ys 16555}#
                                                  #{e 16556}#)
                                                #{ids 16519}#))))))))
                                #{tmp 15984}#)
                              (let ((#{tmp 16557}#
                                      ($sc-dispatch #{p 15802}# '(any . any))))
                                (if #{tmp 16557}#
                                  (@apply
                                    (lambda (#{x 16561}# #{y 16562}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 15799}#
                                            #{y 16562}#
                                            #{n 15803}#
                                            #{ids 15804}#))
                                        (lambda (#{y 16563}# #{ids 16564}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 15799}#
                                                #{x 16561}#
                                                #{n 15803}#
                                                #{ids 16564}#))
                                            (lambda (#{x 16565}# #{ids 16566}#)
                                              (values
                                                (cons #{x 16565}# #{y 16563}#)
                                                #{ids 16566}#))))))
                                    #{tmp 16557}#)
                                  (let ((#{tmp 16567}#
                                          ($sc-dispatch #{p 15802}# '())))
                                    (if #{tmp 16567}#
                                      (@apply
                                        (lambda () (values '() #{ids 15804}#))
                                        #{tmp 16567}#)
                                      (let ((#{tmp 16571}#
                                              ($sc-dispatch
                                                #{p 15802}#
                                                '#(vector each-any))))
                                        (if #{tmp 16571}#
                                          (@apply
                                            (lambda (#{x 16575}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 15799}#
                                                    #{x 16575}#
                                                    #{n 15803}#
                                                    #{ids 15804}#))
                                                (lambda (#{p 16576}#
                                                         #{ids 16577}#)
                                                  (values
                                                    (vector
                                                      'vector
                                                      #{p 16576}#)
                                                    #{ids 16577}#))))
                                            #{tmp 16571}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 4388}#
                                                #{p 15802}#
                                                '(())))
                                            #{ids 15804}#)))))))))))))))
               (#{cvt 15799}# #{pattern 15795}# 0 '()))))
         (#{build-dispatch-call 14158}#
           (lambda (#{pvars 16711}#
                    #{exp 16712}#
                    #{y 16713}#
                    #{r 16714}#
                    #{mod 16715}#)
             (let ((#{ids 16716}# (map car #{pvars 16711}#)))
               (begin
                 (map cdr #{pvars 16711}#)
                 (let ((#{labels 16718}#
                         (#{gen-labels 4346}# #{ids 16716}#))
                       (#{new-vars 16719}#
                         (map #{gen-var 4389}# #{ids 16716}#)))
                   (#{build-primcall 4321}#
                     #f
                     'apply
                     (list (#{build-simple-lambda 4318}#
                             #f
                             (map syntax->datum #{ids 16716}#)
                             #f
                             #{new-vars 16719}#
                             '()
                             (#{chi 4375}#
                               #{exp 16712}#
                               (#{extend-env 4337}#
                                 #{labels 16718}#
                                 (map (lambda (#{var 17051}# #{level 17052}#)
                                        (cons 'syntax
                                              (cons #{var 17051}#
                                                    #{level 17052}#)))
                                      #{new-vars 16719}#
                                      (map cdr #{pvars 16711}#))
                                 #{r 16714}#)
                               (#{make-binding-wrap 4357}#
                                 #{ids 16716}#
                                 #{labels 16718}#
                                 '(()))
                               #{mod 16715}#))
                           #{y 16713}#)))))))
         (#{gen-clause 14159}#
           (lambda (#{x 15389}#
                    #{keys 15390}#
                    #{clauses 15391}#
                    #{r 15392}#
                    #{pat 15393}#
                    #{fender 15394}#
                    #{exp 15395}#
                    #{mod 15396}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 14157}#
                   #{pat 15393}#
                   #{keys 15390}#))
               (lambda (#{p 15534}# #{pvars 15535}#)
                 (if (not (#{distinct-bound-ids? 4366}#
                            (map car #{pvars 15535}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 15393}#)
                   (if (not (and-map
                              (lambda (#{x 15644}#)
                                (not (let ((#{x 15648}# (car #{x 15644}#)))
                                       (if (if (if (vector? #{x 15648}#)
                                                 (if (= (vector-length
                                                          #{x 15648}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 15648}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 15648}# 1))
                                             #f)
                                         (#{free-id=? 4363}#
                                           #{x 15648}#
                                           '#(syntax-object
                                              ...
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i2263"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   chi-lambda-case
                                                   lambda*-formals
                                                   chi-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   chi-void
                                                   eval-local-transformer
                                                   chi-local-syntax
                                                   chi-body
                                                   chi-macro
                                                   chi-call
                                                   chi-expr
                                                   chi
                                                   syntax-type
                                                   chi-when-list
                                                   chi-install-global
                                                   chi-top-sequence
                                                   chi-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-primcall
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-call
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-seq
                                                   make-primcall
                                                   make-call
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i471"
                                                  "i469"
                                                  "i467"
                                                  "i465"
                                                  "i463"
                                                  "i461"
                                                  "i459"
                                                  "i457"
                                                  "i455"
                                                  "i453"
                                                  "i451"
                                                  "i449"
                                                  "i447"
                                                  "i445"
                                                  "i443"
                                                  "i441"
                                                  "i439"
                                                  "i437"
                                                  "i435"
                                                  "i433"
                                                  "i431"
                                                  "i429"
                                                  "i427"
                                                  "i425"
                                                  "i423"
                                                  "i421"
                                                  "i419"
                                                  "i417"
                                                  "i415"
                                                  "i413"
                                                  "i411"
                                                  "i409"
                                                  "i407"
                                                  "i405"
                                                  "i403"
                                                  "i402"
                                                  "i400"
                                                  "i397"
                                                  "i396"
                                                  "i395"
                                                  "i393"
                                                  "i392"
                                                  "i390"
                                                  "i388"
                                                  "i386"
                                                  "i384"
                                                  "i382"
                                                  "i380"
                                                  "i378"
                                                  "i376"
                                                  "i373"
                                                  "i371"
                                                  "i370"
                                                  "i368"
                                                  "i366"
                                                  "i364"
                                                  "i362"
                                                  "i361"
                                                  "i360"
                                                  "i359"
                                                  "i357"
                                                  "i356"
                                                  "i353"
                                                  "i351"
                                                  "i349"
                                                  "i347"
                                                  "i345"
                                                  "i343"
                                                  "i341"
                                                  "i340"
                                                  "i339"
                                                  "i337"
                                                  "i335"
                                                  "i334"
                                                  "i331"
                                                  "i330"
                                                  "i328"
                                                  "i326"
                                                  "i324"
                                                  "i322"
                                                  "i320"
                                                  "i318"
                                                  "i316"
                                                  "i314"
                                                  "i312"
                                                  "i309"
                                                  "i307"
                                                  "i305"
                                                  "i303"
                                                  "i301"
                                                  "i299"
                                                  "i297"
                                                  "i295"
                                                  "i293"
                                                  "i291"
                                                  "i289"
                                                  "i287"
                                                  "i285"
                                                  "i283"
                                                  "i281"
                                                  "i279"
                                                  "i277"
                                                  "i275"
                                                  "i273"
                                                  "i271"
                                                  "i269"
                                                  "i267"
                                                  "i265"
                                                  "i263"
                                                  "i262"
                                                  "i259"
                                                  "i257"
                                                  "i256"
                                                  "i255"
                                                  "i254"
                                                  "i253"
                                                  "i251"
                                                  "i249"
                                                  "i247"
                                                  "i244"
                                                  "i242"
                                                  "i240"
                                                  "i238"
                                                  "i236"
                                                  "i234"
                                                  "i232"
                                                  "i230"
                                                  "i228"
                                                  "i226"
                                                  "i224"
                                                  "i222"
                                                  "i220"
                                                  "i218"
                                                  "i216"
                                                  "i214"
                                                  "i212"
                                                  "i210"
                                                  "i208"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i46" "i45" "i44")))
                                              (hygiene guile)))
                                         #f))))
                              #{pvars 15535}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 15393}#)
                     (let ((#{y 15673}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (let ((#{fun-exp 15678}#
                               (let ((#{req 15687}# (list 'tmp))
                                     (#{vars 15689}# (list #{y 15673}#))
                                     (#{exp 15691}#
                                       (let ((#{y 15720}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   3)
                                                 #f
                                                 'tmp
                                                 #{y 15673}#)))
                                         (let ((#{test-exp 15724}#
                                                 (let ((#{tmp 15733}#
                                                         ($sc-dispatch
                                                           #{fender 15394}#
                                                           '#(atom #t))))
                                                   (if #{tmp 15733}#
                                                     (@apply
                                                       (lambda () #{y 15720}#)
                                                       #{tmp 15733}#)
                                                     (let ((#{then-exp 15751}#
                                                             (#{build-dispatch-call 14158}#
                                                               #{pvars 15535}#
                                                               #{fender 15394}#
                                                               #{y 15720}#
                                                               #{r 15392}#
                                                               #{mod 15396}#))
                                                           (#{else-exp 15752}#
                                                             (make-struct/no-tail
                                                               (vector-ref
                                                                 %expanded-vtables
                                                                 1)
                                                               #f
                                                               #f)))
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           10)
                                                         #f
                                                         #{y 15720}#
                                                         #{then-exp 15751}#
                                                         #{else-exp 15752}#)))))
                                               (#{then-exp 15725}#
                                                 (#{build-dispatch-call 14158}#
                                                   #{pvars 15535}#
                                                   #{exp 15395}#
                                                   #{y 15720}#
                                                   #{r 15392}#
                                                   #{mod 15396}#))
                                               (#{else-exp 15726}#
                                                 (#{gen-syntax-case 14160}#
                                                   #{x 15389}#
                                                   #{keys 15390}#
                                                   #{clauses 15391}#
                                                   #{r 15392}#
                                                   #{mod 15396}#)))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 10)
                                             #f
                                             #{test-exp 15724}#
                                             #{then-exp 15725}#
                                             #{else-exp 15726}#)))))
                                 (let ((#{body 15696}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 15)
                                           #f
                                           #{req 15687}#
                                           #f
                                           #f
                                           #f
                                           '()
                                           #{vars 15689}#
                                           #{exp 15691}#
                                           #f)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     '()
                                     #{body 15696}#))))
                             (#{arg-exps 15679}#
                               (list (if (eq? #{p 15534}# 'any)
                                       (let ((#{args 15774}#
                                               (list #{x 15389}#)))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           'list
                                           #{args 15774}#))
                                       (let ((#{args 15783}#
                                               (list #{x 15389}#
                                                     (make-struct/no-tail
                                                       (vector-ref
                                                         %expanded-vtables
                                                         1)
                                                       #f
                                                       #{p 15534}#))))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           '$sc-dispatch
                                           #{args 15783}#))))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 15678}#
                           #{arg-exps 15679}#)))))))))
         (#{gen-syntax-case 14160}#
           (lambda (#{x 14888}#
                    #{keys 14889}#
                    #{clauses 14890}#
                    #{r 14891}#
                    #{mod 14892}#)
             (if (null? #{clauses 14890}#)
               (let ((#{args 14898}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 14888}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'syntax-violation
                   #{args 14898}#))
               (let ((#{tmp 14917}# (car #{clauses 14890}#)))
                 (let ((#{tmp 14918}#
                         ($sc-dispatch #{tmp 14917}# '(any any))))
                   (if #{tmp 14918}#
                     (@apply
                       (lambda (#{pat 14920}# #{exp 14921}#)
                         (if (if (if (symbol? #{pat 14920}#)
                                   #t
                                   (if (if (vector? #{pat 14920}#)
                                         (if (= (vector-length #{pat 14920}#)
                                                4)
                                           (eq? (vector-ref #{pat 14920}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 14920}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 14948}#)
                                   (not (#{free-id=? 4363}#
                                          #{pat 14920}#
                                          #{x 14948}#)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i3939" "i3940"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i3929"
                                               "i3930"
                                               "i3931"
                                               "i3932"
                                               "i3933"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3742" "i3740" "i3738" "i3736"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               chi-lambda-case
                                               lambda*-formals
                                               chi-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               chi-void
                                               eval-local-transformer
                                               chi-local-syntax
                                               chi-body
                                               chi-macro
                                               chi-call
                                               chi-expr
                                               chi
                                               syntax-type
                                               chi-when-list
                                               chi-install-global
                                               chi-top-sequence
                                               chi-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-primcall
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-call
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-seq
                                               make-primcall
                                               make-call
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i471"
                                              "i469"
                                              "i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i402"
                                              "i400"
                                              "i397"
                                              "i396"
                                              "i395"
                                              "i393"
                                              "i392"
                                              "i390"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i373"
                                              "i371"
                                              "i370"
                                              "i368"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i361"
                                              "i360"
                                              "i359"
                                              "i357"
                                              "i356"
                                              "i353"
                                              "i351"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i340"
                                              "i339"
                                              "i337"
                                              "i335"
                                              "i334"
                                              "i331"
                                              "i330"
                                              "i328"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i309"
                                              "i307"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i262"
                                              "i259"
                                              "i257"
                                              "i256"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i244"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))
                                       #{keys 14889}#))
                               #f)
                           (if (#{free-id=? 4363}#
                                 '#(syntax-object
                                    pad
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i3939" "i3940"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i3929"
                                         "i3930"
                                         "i3931"
                                         "i3932"
                                         "i3933"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i3742" "i3740" "i3738" "i3736"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         chi-lambda-case
                                         lambda*-formals
                                         chi-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         chi-void
                                         eval-local-transformer
                                         chi-local-syntax
                                         chi-body
                                         chi-macro
                                         chi-call
                                         chi-expr
                                         chi
                                         syntax-type
                                         chi-when-list
                                         chi-install-global
                                         chi-top-sequence
                                         chi-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i471"
                                        "i469"
                                        "i467"
                                        "i465"
                                        "i463"
                                        "i461"
                                        "i459"
                                        "i457"
                                        "i455"
                                        "i453"
                                        "i451"
                                        "i449"
                                        "i447"
                                        "i445"
                                        "i443"
                                        "i441"
                                        "i439"
                                        "i437"
                                        "i435"
                                        "i433"
                                        "i431"
                                        "i429"
                                        "i427"
                                        "i425"
                                        "i423"
                                        "i421"
                                        "i419"
                                        "i417"
                                        "i415"
                                        "i413"
                                        "i411"
                                        "i409"
                                        "i407"
                                        "i405"
                                        "i403"
                                        "i402"
                                        "i400"
                                        "i397"
                                        "i396"
                                        "i395"
                                        "i393"
                                        "i392"
                                        "i390"
                                        "i388"
                                        "i386"
                                        "i384"
                                        "i382"
                                        "i380"
                                        "i378"
                                        "i376"
                                        "i373"
                                        "i371"
                                        "i370"
                                        "i368"
                                        "i366"
                                        "i364"
                                        "i362"
                                        "i361"
                                        "i360"
                                        "i359"
                                        "i357"
                                        "i356"
                                        "i353"
                                        "i351"
                                        "i349"
                                        "i347"
                                        "i345"
                                        "i343"
                                        "i341"
                                        "i340"
                                        "i339"
                                        "i337"
                                        "i335"
                                        "i334"
                                        "i331"
                                        "i330"
                                        "i328"
                                        "i326"
                                        "i324"
                                        "i322"
                                        "i320"
                                        "i318"
                                        "i316"
                                        "i314"
                                        "i312"
                                        "i309"
                                        "i307"
                                        "i305"
                                        "i303"
                                        "i301"
                                        "i299"
                                        "i297"
                                        "i295"
                                        "i293"
                                        "i291"
                                        "i289"
                                        "i287"
                                        "i285"
                                        "i283"
                                        "i281"
                                        "i279"
                                        "i277"
                                        "i275"
                                        "i273"
                                        "i271"
                                        "i269"
                                        "i267"
                                        "i265"
                                        "i263"
                                        "i262"
                                        "i259"
                                        "i257"
                                        "i256"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i251"
                                        "i249"
                                        "i247"
                                        "i244"
                                        "i242"
                                        "i240"
                                        "i238"
                                        "i236"
                                        "i234"
                                        "i232"
                                        "i230"
                                        "i228"
                                        "i226"
                                        "i224"
                                        "i222"
                                        "i220"
                                        "i218"
                                        "i216"
                                        "i214"
                                        "i212"
                                        "i210"
                                        "i208"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i46" "i45" "i44")))
                                    (hygiene guile))
                                 '#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i3939" "i3940"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i3929"
                                         "i3930"
                                         "i3931"
                                         "i3932"
                                         "i3933"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i3742" "i3740" "i3738" "i3736"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         chi-lambda-case
                                         lambda*-formals
                                         chi-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         chi-void
                                         eval-local-transformer
                                         chi-local-syntax
                                         chi-body
                                         chi-macro
                                         chi-call
                                         chi-expr
                                         chi
                                         syntax-type
                                         chi-when-list
                                         chi-install-global
                                         chi-top-sequence
                                         chi-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i471"
                                        "i469"
                                        "i467"
                                        "i465"
                                        "i463"
                                        "i461"
                                        "i459"
                                        "i457"
                                        "i455"
                                        "i453"
                                        "i451"
                                        "i449"
                                        "i447"
                                        "i445"
                                        "i443"
                                        "i441"
                                        "i439"
                                        "i437"
                                        "i435"
                                        "i433"
                                        "i431"
                                        "i429"
                                        "i427"
                                        "i425"
                                        "i423"
                                        "i421"
                                        "i419"
                                        "i417"
                                        "i415"
                                        "i413"
                                        "i411"
                                        "i409"
                                        "i407"
                                        "i405"
                                        "i403"
                                        "i402"
                                        "i400"
                                        "i397"
                                        "i396"
                                        "i395"
                                        "i393"
                                        "i392"
                                        "i390"
                                        "i388"
                                        "i386"
                                        "i384"
                                        "i382"
                                        "i380"
                                        "i378"
                                        "i376"
                                        "i373"
                                        "i371"
                                        "i370"
                                        "i368"
                                        "i366"
                                        "i364"
                                        "i362"
                                        "i361"
                                        "i360"
                                        "i359"
                                        "i357"
                                        "i356"
                                        "i353"
                                        "i351"
                                        "i349"
                                        "i347"
                                        "i345"
                                        "i343"
                                        "i341"
                                        "i340"
                                        "i339"
                                        "i337"
                                        "i335"
                                        "i334"
                                        "i331"
                                        "i330"
                                        "i328"
                                        "i326"
                                        "i324"
                                        "i322"
                                        "i320"
                                        "i318"
                                        "i316"
                                        "i314"
                                        "i312"
                                        "i309"
                                        "i307"
                                        "i305"
                                        "i303"
                                        "i301"
                                        "i299"
                                        "i297"
                                        "i295"
                                        "i293"
                                        "i291"
                                        "i289"
                                        "i287"
                                        "i285"
                                        "i283"
                                        "i281"
                                        "i279"
                                        "i277"
                                        "i275"
                                        "i273"
                                        "i271"
                                        "i269"
                                        "i267"
                                        "i265"
                                        "i263"
                                        "i262"
                                        "i259"
                                        "i257"
                                        "i256"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i251"
                                        "i249"
                                        "i247"
                                        "i244"
                                        "i242"
                                        "i240"
                                        "i238"
                                        "i236"
                                        "i234"
                                        "i232"
                                        "i230"
                                        "i228"
                                        "i226"
                                        "i224"
                                        "i222"
                                        "i220"
                                        "i218"
                                        "i216"
                                        "i214"
                                        "i212"
                                        "i210"
                                        "i208"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i46" "i45" "i44")))
                                    (hygiene guile)))
                             (#{chi 4375}#
                               #{exp 14921}#
                               #{r 14891}#
                               '(())
                               #{mod 14892}#)
                             (let ((#{labels 15032}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 15033}#
                                     (let ((#{id 15071}#
                                             (if (if (vector? #{pat 14920}#)
                                                   (if (= (vector-length
                                                            #{pat 14920}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 14920}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 14920}# 1)
                                               #{pat 14920}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 15071}#)
                                           " ")))))
                               (#{build-call 4309}#
                                 #f
                                 (#{build-simple-lambda 4318}#
                                   #f
                                   (list (syntax->datum #{pat 14920}#))
                                   #f
                                   (list #{var 15033}#)
                                   '()
                                   (#{chi 4375}#
                                     #{exp 14921}#
                                     (#{extend-env 4337}#
                                       #{labels 15032}#
                                       (list (cons 'syntax
                                                   (cons #{var 15033}# 0)))
                                       #{r 14891}#)
                                     (#{make-binding-wrap 4357}#
                                       (list #{pat 14920}#)
                                       #{labels 15032}#
                                       '(()))
                                     #{mod 14892}#))
                                 (list #{x 14888}#))))
                           (#{gen-clause 14159}#
                             #{x 14888}#
                             #{keys 14889}#
                             (cdr #{clauses 14890}#)
                             #{r 14891}#
                             #{pat 14920}#
                             #t
                             #{exp 14921}#
                             #{mod 14892}#)))
                       #{tmp 14918}#)
                     (let ((#{tmp 15381}#
                             ($sc-dispatch #{tmp 14917}# '(any any any))))
                       (if #{tmp 15381}#
                         (@apply
                           (lambda (#{pat 15383}#
                                    #{fender 15384}#
                                    #{exp 15385}#)
                             (#{gen-clause 14159}#
                               #{x 14888}#
                               #{keys 14889}#
                               (cdr #{clauses 14890}#)
                               #{r 14891}#
                               #{pat 15383}#
                               #{fender 15384}#
                               #{exp 15385}#
                               #{mod 14892}#))
                           #{tmp 15381}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 14890}#)))))))))))
        (lambda (#{e 14161}#
                 #{r 14162}#
                 #{w 14163}#
                 #{s 14164}#
                 #{mod 14165}#)
          (let ((#{e 14166}#
                  (let ((#{x 14799}#
                          (begin
                            (if (if (pair? #{e 14161}#) #{s 14164}# #f)
                              (set-source-properties! #{e 14161}# #{s 14164}#))
                            #{e 14161}#)))
                    (if (if (null? (car #{w 14163}#))
                          (null? (cdr #{w 14163}#))
                          #f)
                      #{x 14799}#
                      (if (if (vector? #{x 14799}#)
                            (if (= (vector-length #{x 14799}#) 4)
                              (eq? (vector-ref #{x 14799}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 14831}# (vector-ref #{x 14799}# 1))
                              (#{wrap 14832}#
                                (let ((#{w2 14840}#
                                        (vector-ref #{x 14799}# 2)))
                                  (let ((#{m1 14841}# (car #{w 14163}#))
                                        (#{s1 14842}# (cdr #{w 14163}#)))
                                    (if (null? #{m1 14841}#)
                                      (if (null? #{s1 14842}#)
                                        #{w2 14840}#
                                        (cons (car #{w2 14840}#)
                                              (let ((#{m2 14857}#
                                                      (cdr #{w2 14840}#)))
                                                (if (null? #{m2 14857}#)
                                                  #{s1 14842}#
                                                  (append
                                                    #{s1 14842}#
                                                    #{m2 14857}#)))))
                                      (cons (let ((#{m2 14865}#
                                                    (car #{w2 14840}#)))
                                              (if (null? #{m2 14865}#)
                                                #{m1 14841}#
                                                (append
                                                  #{m1 14841}#
                                                  #{m2 14865}#)))
                                            (let ((#{m2 14873}#
                                                    (cdr #{w2 14840}#)))
                                              (if (null? #{m2 14873}#)
                                                #{s1 14842}#
                                                (append
                                                  #{s1 14842}#
                                                  #{m2 14873}#))))))))
                              (#{module 14833}# (vector-ref #{x 14799}# 3)))
                          (vector
                            'syntax-object
                            #{expression 14831}#
                            #{wrap 14832}#
                            #{module 14833}#))
                        (if (null? #{x 14799}#)
                          #{x 14799}#
                          (vector
                            'syntax-object
                            #{x 14799}#
                            #{w 14163}#
                            #{mod 14165}#)))))))
            (let ((#{tmp 14167}# #{e 14166}#))
              (let ((#{tmp 14168}#
                      ($sc-dispatch
                        #{tmp 14167}#
                        '(_ any each-any . each-any))))
                (if #{tmp 14168}#
                  (@apply
                    (lambda (#{val 14216}# #{key 14217}# #{m 14218}#)
                      (if (and-map
                            (lambda (#{x 14219}#)
                              (if (if (symbol? #{x 14219}#)
                                    #t
                                    (if (if (vector? #{x 14219}#)
                                          (if (= (vector-length #{x 14219}#) 4)
                                            (eq? (vector-ref #{x 14219}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{x 14219}# 1))
                                      #f))
                                (not (if (if (if (vector? #{x 14219}#)
                                               (if (= (vector-length
                                                        #{x 14219}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 14219}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol? (vector-ref #{x 14219}# 1))
                                           #f)
                                       (#{free-id=? 4363}#
                                         #{x 14219}#
                                         '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i2263"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-call
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i471"
                                                "i469"
                                                "i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i402"
                                                "i400"
                                                "i397"
                                                "i396"
                                                "i395"
                                                "i393"
                                                "i392"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i373"
                                                "i371"
                                                "i370"
                                                "i368"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i361"
                                                "i360"
                                                "i359"
                                                "i357"
                                                "i356"
                                                "i353"
                                                "i351"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i340"
                                                "i339"
                                                "i337"
                                                "i335"
                                                "i334"
                                                "i331"
                                                "i330"
                                                "i328"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i309"
                                                "i307"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i262"
                                                "i259"
                                                "i257"
                                                "i256"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i244"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile)))
                                       #f))
                                #f))
                            #{key 14217}#)
                        (let ((#{x 14284}#
                                (gensym
                                  (string-append (symbol->string 'tmp) " "))))
                          (#{build-call 4309}#
                            #{s 14164}#
                            (let ((#{req 14424}# (list 'tmp))
                                  (#{vars 14426}# (list #{x 14284}#))
                                  (#{exp 14428}#
                                    (#{gen-syntax-case 14160}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        #{x 14284}#)
                                      #{key 14217}#
                                      #{m 14218}#
                                      #{r 14162}#
                                      #{mod 14165}#)))
                              (let ((#{body 14433}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 15)
                                        #f
                                        #{req 14424}#
                                        #f
                                        #f
                                        #f
                                        '()
                                        #{vars 14426}#
                                        #{exp 14428}#
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 14)
                                  #f
                                  '()
                                  #{body 14433}#)))
                            (list (#{chi 4375}#
                                    #{val 14216}#
                                    #{r 14162}#
                                    '(())
                                    #{mod 14165}#))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          #{e 14166}#)))
                    #{tmp 14168}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp 14167}#))))))))
    (set! macroexpand
      (lambda*
        (#{x 17153}#
          #:optional
          (#{m 17154}# 'e)
          (#{esew 17155}# '(eval)))
        (#{chi-top-sequence 4371}#
          (list #{x 17153}#)
          '()
          '((top))
          #f
          #{m 17154}#
          #{esew 17155}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 17158}#)
        (if (if (vector? #{x 17158}#)
              (if (= (vector-length #{x 17158}#) 4)
                (eq? (vector-ref #{x 17158}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 17158}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 17183}# #{datum 17184}#)
        (let ((#{wrap 17189}# (vector-ref #{id 17183}# 2))
              (#{module 17190}# (vector-ref #{id 17183}# 3)))
          (vector
            'syntax-object
            #{datum 17184}#
            #{wrap 17189}#
            #{module 17190}#))))
    (set! syntax->datum
      (lambda (#{x 17197}#)
        (#{strip 4388}# #{x 17197}# '(()))))
    (set! syntax-source
      (lambda (#{x 17200}#)
        (#{source-annotation 4336}# #{x 17200}#)))
    (set! generate-temporaries
      (lambda (#{ls 17390}#)
        (begin
          (if (not (list? #{ls 17390}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 17390}#))
          (let ((#{mod 17398}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 17399}#)
                   (let ((#{x 17403}# (gensym)))
                     (if (if (vector? #{x 17403}#)
                           (if (= (vector-length #{x 17403}#) 4)
                             (eq? (vector-ref #{x 17403}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 17418}# (vector-ref #{x 17403}# 1))
                             (#{wrap 17419}#
                               (let ((#{w2 17427}# (vector-ref #{x 17403}# 2)))
                                 (cons (let ((#{m2 17434}# (car #{w2 17427}#)))
                                         (if (null? #{m2 17434}#)
                                           '(top)
                                           (append '(top) #{m2 17434}#)))
                                       (let ((#{m2 17441}# (cdr #{w2 17427}#)))
                                         (if (null? #{m2 17441}#)
                                           '()
                                           (append '() #{m2 17441}#))))))
                             (#{module 17420}# (vector-ref #{x 17403}# 3)))
                         (vector
                           'syntax-object
                           #{expression 17418}#
                           #{wrap 17419}#
                           #{module 17420}#))
                       (if (null? #{x 17403}#)
                         #{x 17403}#
                         (vector
                           'syntax-object
                           #{x 17403}#
                           '((top))
                           #{mod 17398}#)))))
                 #{ls 17390}#)))))
    (set! free-identifier=?
      (lambda (#{x 17450}# #{y 17451}#)
        (begin
          (if (not (if (if (vector? #{x 17450}#)
                         (if (= (vector-length #{x 17450}#) 4)
                           (eq? (vector-ref #{x 17450}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 17450}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 17450}#))
          (if (not (if (if (vector? #{y 17451}#)
                         (if (= (vector-length #{y 17451}#) 4)
                           (eq? (vector-ref #{y 17451}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 17451}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 17451}#))
          (#{free-id=? 4363}# #{x 17450}# #{y 17451}#))))
    (set! bound-identifier=?
      (lambda (#{x 17526}# #{y 17527}#)
        (begin
          (if (not (if (if (vector? #{x 17526}#)
                         (if (= (vector-length #{x 17526}#) 4)
                           (eq? (vector-ref #{x 17526}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 17526}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 17526}#))
          (if (not (if (if (vector? #{y 17527}#)
                         (if (= (vector-length #{y 17527}#) 4)
                           (eq? (vector-ref #{y 17527}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 17527}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 17527}#))
          (#{bound-id=? 4364}# #{x 17526}# #{y 17527}#))))
    (set! syntax-violation
      (lambda*
        (#{who 17693}#
          #{message 17694}#
          #{form 17695}#
          #:optional
          (#{subform 17696}# #f))
        (begin
          (if (not (if (not #{who 17693}#)
                     (not #{who 17693}#)
                     (let ((#{t 17714}# (string? #{who 17693}#)))
                       (if #{t 17714}#
                         #{t 17714}#
                         (symbol? #{who 17693}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 17693}#))
          (if (not (string? #{message 17694}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 17694}#))
          (throw 'syntax-error
                 #{who 17693}#
                 #{message 17694}#
                 (#{source-annotation 4336}#
                   (if #{form 17695}#
                     #{form 17695}#
                     #{subform 17696}#))
                 (#{strip 4388}# #{form 17695}# '(()))
                 (if #{subform 17696}#
                   (#{strip 4388}# #{subform 17696}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 17956}#
         (lambda (#{e 18844}#
                  #{p 18845}#
                  #{w 18846}#
                  #{mod 18847}#)
           (if (pair? #{e 18844}#)
             (let ((#{first 18848}#
                     (#{match 17962}#
                       (car #{e 18844}#)
                       #{p 18845}#
                       #{w 18846}#
                       '()
                       #{mod 18847}#)))
               (if #{first 18848}#
                 (let ((#{rest 18851}#
                         (#{match-each 17956}#
                           (cdr #{e 18844}#)
                           #{p 18845}#
                           #{w 18846}#
                           #{mod 18847}#)))
                   (if #{rest 18851}#
                     (cons #{first 18848}# #{rest 18851}#)
                     #f))
                 #f))
             (if (null? #{e 18844}#)
               '()
               (if (if (vector? #{e 18844}#)
                     (if (= (vector-length #{e 18844}#) 4)
                       (eq? (vector-ref #{e 18844}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 17956}#
                   (vector-ref #{e 18844}# 1)
                   #{p 18845}#
                   (let ((#{w2 18873}# (vector-ref #{e 18844}# 2)))
                     (let ((#{m1 18874}# (car #{w 18846}#))
                           (#{s1 18875}# (cdr #{w 18846}#)))
                       (if (null? #{m1 18874}#)
                         (if (null? #{s1 18875}#)
                           #{w2 18873}#
                           (cons (car #{w2 18873}#)
                                 (let ((#{m2 18886}# (cdr #{w2 18873}#)))
                                   (if (null? #{m2 18886}#)
                                     #{s1 18875}#
                                     (append #{s1 18875}# #{m2 18886}#)))))
                         (cons (let ((#{m2 18894}# (car #{w2 18873}#)))
                                 (if (null? #{m2 18894}#)
                                   #{m1 18874}#
                                   (append #{m1 18874}# #{m2 18894}#)))
                               (let ((#{m2 18902}# (cdr #{w2 18873}#)))
                                 (if (null? #{m2 18902}#)
                                   #{s1 18875}#
                                   (append #{s1 18875}# #{m2 18902}#)))))))
                   (vector-ref #{e 18844}# 3))
                 #f)))))
       (#{match-each-any 17958}#
         (lambda (#{e 18911}# #{w 18912}# #{mod 18913}#)
           (if (pair? #{e 18911}#)
             (let ((#{l 18914}#
                     (#{match-each-any 17958}#
                       (cdr #{e 18911}#)
                       #{w 18912}#
                       #{mod 18913}#)))
               (if #{l 18914}#
                 (cons (let ((#{x 18919}# (car #{e 18911}#)))
                         (if (if (null? (car #{w 18912}#))
                               (null? (cdr #{w 18912}#))
                               #f)
                           #{x 18919}#
                           (if (if (vector? #{x 18919}#)
                                 (if (= (vector-length #{x 18919}#) 4)
                                   (eq? (vector-ref #{x 18919}# 0)
                                        'syntax-object)
                                   #f)
                                 #f)
                             (let ((#{expression 18937}#
                                     (vector-ref #{x 18919}# 1))
                                   (#{wrap 18938}#
                                     (let ((#{w2 18946}#
                                             (vector-ref #{x 18919}# 2)))
                                       (let ((#{m1 18947}# (car #{w 18912}#))
                                             (#{s1 18948}# (cdr #{w 18912}#)))
                                         (if (null? #{m1 18947}#)
                                           (if (null? #{s1 18948}#)
                                             #{w2 18946}#
                                             (cons (car #{w2 18946}#)
                                                   (let ((#{m2 18963}#
                                                           (cdr #{w2 18946}#)))
                                                     (if (null? #{m2 18963}#)
                                                       #{s1 18948}#
                                                       (append
                                                         #{s1 18948}#
                                                         #{m2 18963}#)))))
                                           (cons (let ((#{m2 18971}#
                                                         (car #{w2 18946}#)))
                                                   (if (null? #{m2 18971}#)
                                                     #{m1 18947}#
                                                     (append
                                                       #{m1 18947}#
                                                       #{m2 18971}#)))
                                                 (let ((#{m2 18979}#
                                                         (cdr #{w2 18946}#)))
                                                   (if (null? #{m2 18979}#)
                                                     #{s1 18948}#
                                                     (append
                                                       #{s1 18948}#
                                                       #{m2 18979}#))))))))
                                   (#{module 18939}#
                                     (vector-ref #{x 18919}# 3)))
                               (vector
                                 'syntax-object
                                 #{expression 18937}#
                                 #{wrap 18938}#
                                 #{module 18939}#))
                             (if (null? #{x 18919}#)
                               #{x 18919}#
                               (vector
                                 'syntax-object
                                 #{x 18919}#
                                 #{w 18912}#
                                 #{mod 18913}#)))))
                       #{l 18914}#)
                 #f))
             (if (null? #{e 18911}#)
               '()
               (if (if (vector? #{e 18911}#)
                     (if (= (vector-length #{e 18911}#) 4)
                       (eq? (vector-ref #{e 18911}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 17958}#
                   (vector-ref #{e 18911}# 1)
                   (let ((#{w2 19012}# (vector-ref #{e 18911}# 2)))
                     (let ((#{m1 19013}# (car #{w 18912}#))
                           (#{s1 19014}# (cdr #{w 18912}#)))
                       (if (null? #{m1 19013}#)
                         (if (null? #{s1 19014}#)
                           #{w2 19012}#
                           (cons (car #{w2 19012}#)
                                 (let ((#{m2 19025}# (cdr #{w2 19012}#)))
                                   (if (null? #{m2 19025}#)
                                     #{s1 19014}#
                                     (append #{s1 19014}# #{m2 19025}#)))))
                         (cons (let ((#{m2 19033}# (car #{w2 19012}#)))
                                 (if (null? #{m2 19033}#)
                                   #{m1 19013}#
                                   (append #{m1 19013}# #{m2 19033}#)))
                               (let ((#{m2 19041}# (cdr #{w2 19012}#)))
                                 (if (null? #{m2 19041}#)
                                   #{s1 19014}#
                                   (append #{s1 19014}# #{m2 19041}#)))))))
                   #{mod 18913}#)
                 #f)))))
       (#{match-empty 17959}#
         (lambda (#{p 19046}# #{r 19047}#)
           (if (null? #{p 19046}#)
             #{r 19047}#
             (if (eq? #{p 19046}# '_)
               #{r 19047}#
               (if (eq? #{p 19046}# 'any)
                 (cons '() #{r 19047}#)
                 (if (pair? #{p 19046}#)
                   (#{match-empty 17959}#
                     (car #{p 19046}#)
                     (#{match-empty 17959}#
                       (cdr #{p 19046}#)
                       #{r 19047}#))
                   (if (eq? #{p 19046}# 'each-any)
                     (cons '() #{r 19047}#)
                     (let ((#{atom-key 19048}# (vector-ref #{p 19046}# 0)))
                       (if (eqv? #{atom-key 19048}# 'each)
                         (#{match-empty 17959}#
                           (vector-ref #{p 19046}# 1)
                           #{r 19047}#)
                         (if (eqv? #{atom-key 19048}# 'each+)
                           (#{match-empty 17959}#
                             (vector-ref #{p 19046}# 1)
                             (#{match-empty 17959}#
                               (reverse (vector-ref #{p 19046}# 2))
                               (#{match-empty 17959}#
                                 (vector-ref #{p 19046}# 3)
                                 #{r 19047}#)))
                           (if (if (eqv? #{atom-key 19048}# 'free-id)
                                 #t
                                 (eqv? #{atom-key 19048}# 'atom))
                             #{r 19047}#
                             (if (eqv? #{atom-key 19048}# 'vector)
                               (#{match-empty 17959}#
                                 (vector-ref #{p 19046}# 1)
                                 #{r 19047}#)))))))))))))
       (#{combine 17960}#
         (lambda (#{r* 19067}# #{r 19068}#)
           (if (null? (car #{r* 19067}#))
             #{r 19068}#
             (cons (map car #{r* 19067}#)
                   (#{combine 17960}#
                     (map cdr #{r* 19067}#)
                     #{r 19068}#)))))
       (#{match* 17961}#
         (lambda (#{e 17991}#
                  #{p 17992}#
                  #{w 17993}#
                  #{r 17994}#
                  #{mod 17995}#)
           (if (null? #{p 17992}#)
             (if (null? #{e 17991}#) #{r 17994}# #f)
             (if (pair? #{p 17992}#)
               (if (pair? #{e 17991}#)
                 (#{match 17962}#
                   (car #{e 17991}#)
                   (car #{p 17992}#)
                   #{w 17993}#
                   (#{match 17962}#
                     (cdr #{e 17991}#)
                     (cdr #{p 17992}#)
                     #{w 17993}#
                     #{r 17994}#
                     #{mod 17995}#)
                   #{mod 17995}#)
                 #f)
               (if (eq? #{p 17992}# 'each-any)
                 (let ((#{l 18000}#
                         (#{match-each-any 17958}#
                           #{e 17991}#
                           #{w 17993}#
                           #{mod 17995}#)))
                   (if #{l 18000}#
                     (cons #{l 18000}# #{r 17994}#)
                     #f))
                 (let ((#{atom-key 18005}# (vector-ref #{p 17992}# 0)))
                   (if (eqv? #{atom-key 18005}# 'each)
                     (if (null? #{e 17991}#)
                       (#{match-empty 17959}#
                         (vector-ref #{p 17992}# 1)
                         #{r 17994}#)
                       (let ((#{l 18012}#
                               (#{match-each 17956}#
                                 #{e 17991}#
                                 (vector-ref #{p 17992}# 1)
                                 #{w 17993}#
                                 #{mod 17995}#)))
                         (if #{l 18012}#
                           (letrec*
                             ((#{collect 18015}#
                                (lambda (#{l 18076}#)
                                  (if (null? (car #{l 18076}#))
                                    #{r 17994}#
                                    (cons (map car #{l 18076}#)
                                          (#{collect 18015}#
                                            (map cdr #{l 18076}#)))))))
                             (#{collect 18015}# #{l 18012}#))
                           #f)))
                     (if (eqv? #{atom-key 18005}# 'each+)
                       (call-with-values
                         (lambda ()
                           (let ((#{x-pat 18085}# (vector-ref #{p 17992}# 1))
                                 (#{y-pat 18086}# (vector-ref #{p 17992}# 2))
                                 (#{z-pat 18087}# (vector-ref #{p 17992}# 3)))
                             (letrec*
                               ((#{f 18091}#
                                  (lambda (#{e 18093}# #{w 18094}#)
                                    (if (pair? #{e 18093}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{f 18091}#
                                            (cdr #{e 18093}#)
                                            #{w 18094}#))
                                        (lambda (#{xr* 18095}#
                                                 #{y-pat 18096}#
                                                 #{r 18097}#)
                                          (if #{r 18097}#
                                            (if (null? #{y-pat 18096}#)
                                              (let ((#{xr 18098}#
                                                      (#{match 17962}#
                                                        (car #{e 18093}#)
                                                        #{x-pat 18085}#
                                                        #{w 18094}#
                                                        '()
                                                        #{mod 17995}#)))
                                                (if #{xr 18098}#
                                                  (values
                                                    (cons #{xr 18098}#
                                                          #{xr* 18095}#)
                                                    #{y-pat 18096}#
                                                    #{r 18097}#)
                                                  (values #f #f #f)))
                                              (values
                                                '()
                                                (cdr #{y-pat 18096}#)
                                                (#{match 17962}#
                                                  (car #{e 18093}#)
                                                  (car #{y-pat 18096}#)
                                                  #{w 18094}#
                                                  #{r 18097}#
                                                  #{mod 17995}#)))
                                            (values #f #f #f))))
                                      (if (if (vector? #{e 18093}#)
                                            (if (= (vector-length #{e 18093}#)
                                                   4)
                                              (eq? (vector-ref #{e 18093}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (#{f 18091}#
                                          (vector-ref #{e 18093}# 1)
                                          (let ((#{m1 18126}#
                                                  (car #{w 18094}#))
                                                (#{s1 18127}#
                                                  (cdr #{w 18094}#)))
                                            (if (null? #{m1 18126}#)
                                              (if (null? #{s1 18127}#)
                                                #{e 18093}#
                                                (cons (car #{e 18093}#)
                                                      (let ((#{m2 18139}#
                                                              (cdr #{e 18093}#)))
                                                        (if (null? #{m2 18139}#)
                                                          #{s1 18127}#
                                                          (append
                                                            #{s1 18127}#
                                                            #{m2 18139}#)))))
                                              (cons (let ((#{m2 18149}#
                                                            (car #{e 18093}#)))
                                                      (if (null? #{m2 18149}#)
                                                        #{m1 18126}#
                                                        (append
                                                          #{m1 18126}#
                                                          #{m2 18149}#)))
                                                    (let ((#{m2 18159}#
                                                            (cdr #{e 18093}#)))
                                                      (if (null? #{m2 18159}#)
                                                        #{s1 18127}#
                                                        (append
                                                          #{s1 18127}#
                                                          #{m2 18159}#)))))))
                                        (values
                                          '()
                                          #{y-pat 18086}#
                                          (#{match 17962}#
                                            #{e 18093}#
                                            #{z-pat 18087}#
                                            #{w 18094}#
                                            #{r 17994}#
                                            #{mod 17995}#)))))))
                               (#{f 18091}# #{e 17991}# #{w 17993}#))))
                         (lambda (#{xr* 18169}# #{y-pat 18170}# #{r 18171}#)
                           (if #{r 18171}#
                             (if (null? #{y-pat 18170}#)
                               (if (null? #{xr* 18169}#)
                                 (#{match-empty 17959}#
                                   (vector-ref #{p 17992}# 1)
                                   #{r 18171}#)
                                 (#{combine 17960}# #{xr* 18169}# #{r 18171}#))
                               #f)
                             #f)))
                       (if (eqv? #{atom-key 18005}# 'free-id)
                         (if (if (symbol? #{e 17991}#)
                               #t
                               (if (if (vector? #{e 17991}#)
                                     (if (= (vector-length #{e 17991}#) 4)
                                       (eq? (vector-ref #{e 17991}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 17991}# 1))
                                 #f))
                           (if (#{free-id=? 4363}#
                                 (if (if (null? (car #{w 17993}#))
                                       (null? (cdr #{w 17993}#))
                                       #f)
                                   #{e 17991}#
                                   (if (if (vector? #{e 17991}#)
                                         (if (= (vector-length #{e 17991}#) 4)
                                           (eq? (vector-ref #{e 17991}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 18602}#
                                             (vector-ref #{e 17991}# 1))
                                           (#{wrap 18603}#
                                             (let ((#{w2 18613}#
                                                     (vector-ref
                                                       #{e 17991}#
                                                       2)))
                                               (let ((#{m1 18614}#
                                                       (car #{w 17993}#))
                                                     (#{s1 18615}#
                                                       (cdr #{w 17993}#)))
                                                 (if (null? #{m1 18614}#)
                                                   (if (null? #{s1 18615}#)
                                                     #{w2 18613}#
                                                     (cons (car #{w2 18613}#)
                                                           (let ((#{m2 18632}#
                                                                   (cdr #{w2 18613}#)))
                                                             (if (null? #{m2 18632}#)
                                                               #{s1 18615}#
                                                               (append
                                                                 #{s1 18615}#
                                                                 #{m2 18632}#)))))
                                                   (cons (let ((#{m2 18640}#
                                                                 (car #{w2 18613}#)))
                                                           (if (null? #{m2 18640}#)
                                                             #{m1 18614}#
                                                             (append
                                                               #{m1 18614}#
                                                               #{m2 18640}#)))
                                                         (let ((#{m2 18648}#
                                                                 (cdr #{w2 18613}#)))
                                                           (if (null? #{m2 18648}#)
                                                             #{s1 18615}#
                                                             (append
                                                               #{s1 18615}#
                                                               #{m2 18648}#))))))))
                                           (#{module 18604}#
                                             (vector-ref #{e 17991}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 18602}#
                                         #{wrap 18603}#
                                         #{module 18604}#))
                                     (if (null? #{e 17991}#)
                                       #{e 17991}#
                                       (vector
                                         'syntax-object
                                         #{e 17991}#
                                         #{w 17993}#
                                         #{mod 17995}#))))
                                 (vector-ref #{p 17992}# 1))
                             #{r 17994}#
                             #f)
                           #f)
                         (if (eqv? #{atom-key 18005}# 'atom)
                           (if (equal?
                                 (vector-ref #{p 17992}# 1)
                                 (#{strip 4388}# #{e 17991}# #{w 17993}#))
                             #{r 17994}#
                             #f)
                           (if (eqv? #{atom-key 18005}# 'vector)
                             (if (vector? #{e 17991}#)
                               (#{match 17962}#
                                 (vector->list #{e 17991}#)
                                 (vector-ref #{p 17992}# 1)
                                 #{w 17993}#
                                 #{r 17994}#
                                 #{mod 17995}#)
                               #f))))))))))))
       (#{match 17962}#
         (lambda (#{e 18681}#
                  #{p 18682}#
                  #{w 18683}#
                  #{r 18684}#
                  #{mod 18685}#)
           (if (not #{r 18684}#)
             #f
             (if (eq? #{p 18682}# '_)
               #{r 18684}#
               (if (eq? #{p 18682}# 'any)
                 (cons (if (if (null? (car #{w 18683}#))
                             (null? (cdr #{w 18683}#))
                             #f)
                         #{e 18681}#
                         (if (if (vector? #{e 18681}#)
                               (if (= (vector-length #{e 18681}#) 4)
                                 (eq? (vector-ref #{e 18681}# 0)
                                      'syntax-object)
                                 #f)
                               #f)
                           (let ((#{expression 18715}#
                                   (vector-ref #{e 18681}# 1))
                                 (#{wrap 18716}#
                                   (let ((#{w2 18726}#
                                           (vector-ref #{e 18681}# 2)))
                                     (let ((#{m1 18727}# (car #{w 18683}#))
                                           (#{s1 18728}# (cdr #{w 18683}#)))
                                       (if (null? #{m1 18727}#)
                                         (if (null? #{s1 18728}#)
                                           #{w2 18726}#
                                           (cons (car #{w2 18726}#)
                                                 (let ((#{m2 18745}#
                                                         (cdr #{w2 18726}#)))
                                                   (if (null? #{m2 18745}#)
                                                     #{s1 18728}#
                                                     (append
                                                       #{s1 18728}#
                                                       #{m2 18745}#)))))
                                         (cons (let ((#{m2 18753}#
                                                       (car #{w2 18726}#)))
                                                 (if (null? #{m2 18753}#)
                                                   #{m1 18727}#
                                                   (append
                                                     #{m1 18727}#
                                                     #{m2 18753}#)))
                                               (let ((#{m2 18761}#
                                                       (cdr #{w2 18726}#)))
                                                 (if (null? #{m2 18761}#)
                                                   #{s1 18728}#
                                                   (append
                                                     #{s1 18728}#
                                                     #{m2 18761}#))))))))
                                 (#{module 18717}# (vector-ref #{e 18681}# 3)))
                             (vector
                               'syntax-object
                               #{expression 18715}#
                               #{wrap 18716}#
                               #{module 18717}#))
                           (if (null? #{e 18681}#)
                             #{e 18681}#
                             (vector
                               'syntax-object
                               #{e 18681}#
                               #{w 18683}#
                               #{mod 18685}#))))
                       #{r 18684}#)
                 (if (if (vector? #{e 18681}#)
                       (if (= (vector-length #{e 18681}#) 4)
                         (eq? (vector-ref #{e 18681}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 17961}#
                     (vector-ref #{e 18681}# 1)
                     #{p 18682}#
                     (let ((#{w2 18804}# (vector-ref #{e 18681}# 2)))
                       (let ((#{m1 18805}# (car #{w 18683}#))
                             (#{s1 18806}# (cdr #{w 18683}#)))
                         (if (null? #{m1 18805}#)
                           (if (null? #{s1 18806}#)
                             #{w2 18804}#
                             (cons (car #{w2 18804}#)
                                   (let ((#{m2 18817}# (cdr #{w2 18804}#)))
                                     (if (null? #{m2 18817}#)
                                       #{s1 18806}#
                                       (append #{s1 18806}# #{m2 18817}#)))))
                           (cons (let ((#{m2 18825}# (car #{w2 18804}#)))
                                   (if (null? #{m2 18825}#)
                                     #{m1 18805}#
                                     (append #{m1 18805}# #{m2 18825}#)))
                                 (let ((#{m2 18833}# (cdr #{w2 18804}#)))
                                   (if (null? #{m2 18833}#)
                                     #{s1 18806}#
                                     (append #{s1 18806}# #{m2 18833}#)))))))
                     #{r 18684}#
                     (vector-ref #{e 18681}# 3))
                   (#{match* 17961}#
                     #{e 18681}#
                     #{p 18682}#
                     #{w 18683}#
                     #{r 18684}#
                     #{mod 18685}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 17963}# #{p 17964}#)
          (if (eq? #{p 17964}# 'any)
            (list #{e 17963}#)
            (if (eq? #{p 17964}# '_)
              '()
              (if (if (vector? #{e 17963}#)
                    (if (= (vector-length #{e 17963}#) 4)
                      (eq? (vector-ref #{e 17963}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 17961}#
                  (vector-ref #{e 17963}# 1)
                  #{p 17964}#
                  (vector-ref #{e 17963}# 2)
                  '()
                  (vector-ref #{e 17963}# 3))
                (#{match* 17961}#
                  #{e 17963}#
                  #{p 17964}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 36962}#)
      (let ((#{tmp 36964}#
              ($sc-dispatch #{x 36962}# '(_ () any . each-any))))
        (if #{tmp 36964}#
          (@apply
            (lambda (#{e1 36968}# #{e2 36969}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i36935" "i36936"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i36932")))
                       (hygiene guile))
                    (cons '() (cons #{e1 36968}# #{e2 36969}#))))
            #{tmp 36964}#)
          (let ((#{tmp 36970}#
                  ($sc-dispatch
                    #{x 36962}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 36970}#
              (@apply
                (lambda (#{out 36974}#
                         #{in 36975}#
                         #{e1 36976}#
                         #{e2 36977}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i36941" "i36942" "i36943" "i36944"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i36932")))
                           (hygiene guile))
                        #{in 36975}#
                        '()
                        (list #{out 36974}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i36941"
                                            "i36942"
                                            "i36943"
                                            "i36944"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i36932")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 36976}# #{e2 36977}#))))))
                #{tmp 36970}#)
              (let ((#{tmp 36978}#
                      ($sc-dispatch
                        #{x 36962}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 36978}#
                  (@apply
                    (lambda (#{out 36982}#
                             #{in 36983}#
                             #{e1 36984}#
                             #{e2 36985}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i36951" "i36952" "i36953" "i36954"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i36932")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i36951" "i36952" "i36953" "i36954"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i36932")))
                                     (hygiene guile))
                                  #{in 36983}#)
                            '()
                            (list #{out 36982}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i36951"
                                                "i36952"
                                                "i36953"
                                                "i36954"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i36932")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 36984}#
                                                    #{e2 36985}#))))))
                    #{tmp 36978}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 36962}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 37039}#)
      (let ((#{tmp 37041}#
              ($sc-dispatch
                #{x 37039}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 37041}#
          (@apply
            (lambda (#{k 37045}#
                     #{keyword 37046}#
                     #{pattern 37047}#
                     #{template 37048}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i37002" "i37003" "i37004" "i37005"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i36999")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i37002" "i37003" "i37004" "i37005"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i36999")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i37002" "i37003" "i37004" "i37005"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i36999")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i37002" "i37003" "i37004" "i37005"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i36999")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i37002" "i37003" "i37004" "i37005"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i36999")))
                               (hygiene guile))
                            #{pattern 37047}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i37002" "i37003" "i37004" "i37005"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i36999")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i37002" "i37003" "i37004" "i37005"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i36999")))
                                   (hygiene guile))
                                (cons #{k 37045}#
                                      (map (lambda (#{tmp 37013 37049}#
                                                    #{tmp 37012 37050}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i37002"
                                                                 "i37003"
                                                                 "i37004"
                                                                 "i37005"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i36999")))
                                                            (hygiene guile))
                                                         #{tmp 37012 37050}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i37002"
                                                                 "i37003"
                                                                 "i37004"
                                                                 "i37005"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i36999")))
                                                            (hygiene guile))
                                                         #{tmp 37013 37049}#)))
                                           #{template 37048}#
                                           #{pattern 37047}#))))))
            #{tmp 37041}#)
          (let ((#{tmp 37051}#
                  ($sc-dispatch
                    #{x 37039}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 37051}#
                  (@apply
                    (lambda (#{k 37055}#
                             #{docstring 37056}#
                             #{keyword 37057}#
                             #{pattern 37058}#
                             #{template 37059}#)
                      (string? (syntax->datum #{docstring 37056}#)))
                    #{tmp 37051}#)
                  #f)
              (@apply
                (lambda (#{k 37060}#
                         #{docstring 37061}#
                         #{keyword 37062}#
                         #{pattern 37063}#
                         #{template 37064}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i37025" "i37026" "i37027" "i37028" "i37029"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i36999")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i37025" "i37026" "i37027" "i37028" "i37029"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i36999")))
                            (hygiene guile)))
                        #{docstring 37061}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i37025"
                                   "i37026"
                                   "i37027"
                                   "i37028"
                                   "i37029"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i36999")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i37025"
                                   "i37026"
                                   "i37027"
                                   "i37028"
                                   "i37029"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i36999")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i37025"
                                        "i37026"
                                        "i37027"
                                        "i37028"
                                        "i37029"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i36999")))
                                   (hygiene guile))
                                #{pattern 37063}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i37025"
                                      "i37026"
                                      "i37027"
                                      "i37028"
                                      "i37029"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i36999")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i37025"
                                            "i37026"
                                            "i37027"
                                            "i37028"
                                            "i37029"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i36999")))
                                       (hygiene guile))
                                    (cons #{k 37060}#
                                          (map (lambda (#{tmp 37038 37065}#
                                                        #{tmp 37037 37066}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i37025"
                                                                     "i37026"
                                                                     "i37027"
                                                                     "i37028"
                                                                     "i37029"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i36999")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 37037 37066}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i37025"
                                                                     "i37026"
                                                                     "i37027"
                                                                     "i37028"
                                                                     "i37029"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i36999")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 37038 37065}#)))
                                               #{template 37064}#
                                               #{pattern 37063}#))))))
                #{tmp 37051}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 37039}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 37103}#)
      (let ((#{tmp 37105}#
              ($sc-dispatch #{x 37103}# '(_ (any . any) any))))
        (if #{tmp 37105}#
          (@apply
            (lambda (#{name 37109}#
                     #{pattern 37110}#
                     #{template 37111}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i37080" "i37081" "i37082"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i37077")))
                       (hygiene guile))
                    #{name 37109}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i37080" "i37081" "i37082"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i37077")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i37080" "i37081" "i37082"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i37077")))
                                         (hygiene guile))
                                      #{pattern 37110}#)
                                #{template 37111}#))))
            #{tmp 37105}#)
          (let ((#{tmp 37112}#
                  ($sc-dispatch
                    #{x 37103}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 37112}#
                  (@apply
                    (lambda (#{name 37116}#
                             #{pattern 37117}#
                             #{docstring 37118}#
                             #{template 37119}#)
                      (string? (syntax->datum #{docstring 37118}#)))
                    #{tmp 37112}#)
                  #f)
              (@apply
                (lambda (#{name 37120}#
                         #{pattern 37121}#
                         #{docstring 37122}#
                         #{template 37123}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i37095" "i37096" "i37097" "i37098"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i37077")))
                           (hygiene guile))
                        #{name 37120}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i37095" "i37096" "i37097" "i37098"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i37077")))
                                 (hygiene guile))
                              '()
                              #{docstring 37122}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i37095"
                                                  "i37096"
                                                  "i37097"
                                                  "i37098"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i37077")))
                                             (hygiene guile))
                                          #{pattern 37121}#)
                                    #{template 37123}#))))
                #{tmp 37112}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 37103}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 37172}#)
      (let ((#{tmp 37174}#
              ($sc-dispatch
                #{x 37172}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 37174}#
              (@apply
                (lambda (#{let* 37178}#
                         #{x 37179}#
                         #{v 37180}#
                         #{e1 37181}#
                         #{e2 37182}#)
                  (and-map identifier? #{x 37179}#))
                #{tmp 37174}#)
              #f)
          (@apply
            (lambda (#{let* 37183}#
                     #{x 37184}#
                     #{v 37185}#
                     #{e1 37186}#
                     #{e2 37187}#)
              (letrec*
                ((#{f 37188}#
                   (lambda (#{bindings 37191}#)
                     (if (null? #{bindings 37191}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i37158" "i37159"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i37148"
                                     "i37149"
                                     "i37150"
                                     "i37151"
                                     "i37152"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i37134")))
                                (hygiene guile))
                             (cons '() (cons #{e1 37186}# #{e2 37187}#)))
                       (let ((#{tmp 37192}#
                               (list (#{f 37188}# (cdr #{bindings 37191}#))
                                     (car #{bindings 37191}#))))
                         (let ((#{tmp 37193}#
                                 ($sc-dispatch #{tmp 37192}# '(any any))))
                           (if #{tmp 37193}#
                             (@apply
                               (lambda (#{body 37195}# #{binding 37196}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i37168" "i37169"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i37158" "i37159"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i37148"
                                               "i37149"
                                               "i37150"
                                               "i37151"
                                               "i37152"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("i37134")))
                                          (hygiene guile))
                                       (list #{binding 37196}#)
                                       #{body 37195}#))
                               #{tmp 37193}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 37192}#))))))))
                (#{f 37188}# (map list #{x 37184}# #{v 37185}#))))
            #{tmp 37174}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 37172}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 37254}#)
      (let ((#{tmp 37256}#
              ($sc-dispatch
                #{orig-x 37254}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 37256}#
          (@apply
            (lambda (#{var 37260}#
                     #{init 37261}#
                     #{step 37262}#
                     #{e0 37263}#
                     #{e1 37264}#
                     #{c 37265}#)
              (let ((#{tmp 37266}#
                      (map (lambda (#{v 37269}# #{s 37270}#)
                             (let ((#{tmp 37272}#
                                     ($sc-dispatch #{s 37270}# '())))
                               (if #{tmp 37272}#
                                 (@apply (lambda () #{v 37269}#) #{tmp 37272}#)
                                 (let ((#{tmp 37275}#
                                         ($sc-dispatch #{s 37270}# '(any))))
                                   (if #{tmp 37275}#
                                     (@apply
                                       (lambda (#{e 37278}#) #{e 37278}#)
                                       #{tmp 37275}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 37254}#
                                       #{s 37270}#))))))
                           #{var 37260}#
                           #{step 37262}#)))
                (let ((#{tmp 37267}#
                        ($sc-dispatch #{tmp 37266}# 'each-any)))
                  (if #{tmp 37267}#
                    (@apply
                      (lambda (#{step 37284}#)
                        (let ((#{tmp 37286}# ($sc-dispatch #{e1 37264}# '())))
                          (if #{tmp 37286}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i37222"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i37207"
                                              "i37208"
                                              "i37209"
                                              "i37210"
                                              "i37211"
                                              "i37212"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i37204")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i37222"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i37207"
                                              "i37208"
                                              "i37209"
                                              "i37210"
                                              "i37211"
                                              "i37212"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i37204")))
                                         (hygiene guile))
                                      (map list #{var 37260}# #{init 37261}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i37222"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i37207"
                                                    "i37208"
                                                    "i37209"
                                                    "i37210"
                                                    "i37211"
                                                    "i37212"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i37204")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i37222"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i37207"
                                                          "i37208"
                                                          "i37209"
                                                          "i37210"
                                                          "i37211"
                                                          "i37212"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i37204")))
                                                     (hygiene guile))
                                                  #{e0 37263}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i37222"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i37207"
                                                          "i37208"
                                                          "i37209"
                                                          "i37210"
                                                          "i37211"
                                                          "i37212"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i37204")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 37265}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i37222"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i37207"
                                                                        "i37208"
                                                                        "i37209"
                                                                        "i37210"
                                                                        "i37211"
                                                                        "i37212"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i37204")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 37284}#)))))))
                              #{tmp 37286}#)
                            (let ((#{tmp 37290}#
                                    ($sc-dispatch
                                      #{e1 37264}#
                                      '(any . each-any))))
                              (if #{tmp 37290}#
                                (@apply
                                  (lambda (#{e1 37294}# #{e2 37295}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i37231" "i37232"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i37222"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i37207"
                                                  "i37208"
                                                  "i37209"
                                                  "i37210"
                                                  "i37211"
                                                  "i37212"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i37204")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i37231" "i37232"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i37222"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i37207"
                                                  "i37208"
                                                  "i37209"
                                                  "i37210"
                                                  "i37211"
                                                  "i37212"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i37204")))
                                             (hygiene guile))
                                          (map list
                                               #{var 37260}#
                                               #{init 37261}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i37231" "i37232"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i37222"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i37207"
                                                        "i37208"
                                                        "i37209"
                                                        "i37210"
                                                        "i37211"
                                                        "i37212"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i37204")))
                                                   (hygiene guile))
                                                #{e0 37263}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i37231"
                                                              "i37232"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i37222"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i37207"
                                                              "i37208"
                                                              "i37209"
                                                              "i37210"
                                                              "i37211"
                                                              "i37212"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i37204")))
                                                         (hygiene guile))
                                                      (cons #{e1 37294}#
                                                            #{e2 37295}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i37231"
                                                              "i37232"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i37222"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i37207"
                                                              "i37208"
                                                              "i37209"
                                                              "i37210"
                                                              "i37211"
                                                              "i37212"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i37204")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 37265}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i37231"
                                                                            "i37232"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i37222"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i37207"
                                                                            "i37208"
                                                                            "i37209"
                                                                            "i37210"
                                                                            "i37211"
                                                                            "i37212"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i37204")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 37284}#)))))))
                                  #{tmp 37290}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 37264}#))))))
                      #{tmp 37267}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 37266}#)))))
            #{tmp 37256}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 37254}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 37581}#
         (lambda (#{p 37605}# #{lev 37606}#)
           (let ((#{tmp 37608}#
                   ($sc-dispatch
                     #{p 37605}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37327" "i37328"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37323"
                               "i37321"
                               "i37319"
                               "i37317"
                               "i37315"
                               "i37313"
                               "i37311")))
                           (hygiene guile)))
                       any))))
             (if #{tmp 37608}#
               (@apply
                 (lambda (#{p 37612}#)
                   (if (= #{lev 37606}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i37331"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i37327" "i37328"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i37323"
                                  "i37321"
                                  "i37319"
                                  "i37317"
                                  "i37315"
                                  "i37313"
                                  "i37311")))
                              (hygiene guile))
                           #{p 37612}#)
                     (#{quasicons 37583}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i37331"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37327" "i37328"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37323"
                               "i37321"
                               "i37319"
                               "i37317"
                               "i37315"
                               "i37313"
                               "i37311")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i37331"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37327" "i37328"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37323"
                               "i37321"
                               "i37319"
                               "i37317"
                               "i37315"
                               "i37313"
                               "i37311")))
                           (hygiene guile)))
                       (#{quasi 37581}#
                         (list #{p 37612}#)
                         (#{1-}# #{lev 37606}#)))))
                 #{tmp 37608}#)
               (let ((#{tmp 37615}#
                       ($sc-dispatch
                         #{p 37605}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i37327" "i37328"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i37323"
                                   "i37321"
                                   "i37319"
                                   "i37317"
                                   "i37315"
                                   "i37313"
                                   "i37311")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 37615}#
                   (@apply
                     (lambda (#{p 37619}#)
                       (#{quasicons 37583}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i37334"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i37327" "i37328"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i37323"
                                 "i37321"
                                 "i37319"
                                 "i37317"
                                 "i37315"
                                 "i37313"
                                 "i37311")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i37334"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i37327" "i37328"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i37323"
                                 "i37321"
                                 "i37319"
                                 "i37317"
                                 "i37315"
                                 "i37313"
                                 "i37311")))
                             (hygiene guile)))
                         (#{quasi 37581}#
                           (list #{p 37619}#)
                           (#{1+}# #{lev 37606}#))))
                     #{tmp 37615}#)
                   (let ((#{tmp 37622}#
                           ($sc-dispatch #{p 37605}# '(any . any))))
                     (if #{tmp 37622}#
                       (@apply
                         (lambda (#{p 37626}# #{q 37627}#)
                           (let ((#{tmp 37629}#
                                   ($sc-dispatch
                                     #{p 37626}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i37337" "i37338"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i37327" "i37328"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i37323"
                                               "i37321"
                                               "i37319"
                                               "i37317"
                                               "i37315"
                                               "i37313"
                                               "i37311")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 37629}#
                               (@apply
                                 (lambda (#{p 37633}#)
                                   (if (= #{lev 37606}# 0)
                                     (#{quasilist* 37585}#
                                       (map (lambda (#{tmp 37345 37672}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i37343"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i37337" "i37338"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i37327" "i37328"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i37323"
                                                           "i37321"
                                                           "i37319"
                                                           "i37317"
                                                           "i37315"
                                                           "i37313"
                                                           "i37311")))
                                                       (hygiene guile))
                                                    #{tmp 37345 37672}#))
                                            #{p 37633}#)
                                       (#{quasi 37581}#
                                         #{q 37627}#
                                         #{lev 37606}#))
                                     (#{quasicons 37583}#
                                       (#{quasicons 37583}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i37343"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i37337" "i37338"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i37327" "i37328"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i37323"
                                                 "i37321"
                                                 "i37319"
                                                 "i37317"
                                                 "i37315"
                                                 "i37313"
                                                 "i37311")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i37343"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i37337" "i37338"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i37327" "i37328"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i37323"
                                                 "i37321"
                                                 "i37319"
                                                 "i37317"
                                                 "i37315"
                                                 "i37313"
                                                 "i37311")))
                                             (hygiene guile)))
                                         (#{quasi 37581}#
                                           #{p 37633}#
                                           (#{1-}# #{lev 37606}#)))
                                       (#{quasi 37581}#
                                         #{q 37627}#
                                         #{lev 37606}#))))
                                 #{tmp 37629}#)
                               (let ((#{tmp 37677}#
                                       ($sc-dispatch
                                         #{p 37626}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i37337" "i37338"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i37327" "i37328"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i37323"
                                                   "i37321"
                                                   "i37319"
                                                   "i37317"
                                                   "i37315"
                                                   "i37313"
                                                   "i37311")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 37677}#
                                   (@apply
                                     (lambda (#{p 37681}#)
                                       (if (= #{lev 37606}# 0)
                                         (#{quasiappend 37584}#
                                           (map (lambda (#{tmp 37350 37684}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i37348"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i37337"
                                                                "i37338"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i37327"
                                                                "i37328"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i37323"
                                                               "i37321"
                                                               "i37319"
                                                               "i37317"
                                                               "i37315"
                                                               "i37313"
                                                               "i37311")))
                                                           (hygiene guile))
                                                        #{tmp 37350 37684}#))
                                                #{p 37681}#)
                                           (#{quasi 37581}#
                                             #{q 37627}#
                                             #{lev 37606}#))
                                         (#{quasicons 37583}#
                                           (#{quasicons 37583}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i37348"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i37337" "i37338"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i37327" "i37328"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i37323"
                                                     "i37321"
                                                     "i37319"
                                                     "i37317"
                                                     "i37315"
                                                     "i37313"
                                                     "i37311")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i37348"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i37337" "i37338"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i37327" "i37328"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i37323"
                                                     "i37321"
                                                     "i37319"
                                                     "i37317"
                                                     "i37315"
                                                     "i37313"
                                                     "i37311")))
                                                 (hygiene guile)))
                                             (#{quasi 37581}#
                                               #{p 37681}#
                                               (#{1-}# #{lev 37606}#)))
                                           (#{quasi 37581}#
                                             #{q 37627}#
                                             #{lev 37606}#))))
                                     #{tmp 37677}#)
                                   (#{quasicons 37583}#
                                     (#{quasi 37581}#
                                       #{p 37626}#
                                       #{lev 37606}#)
                                     (#{quasi 37581}#
                                       #{q 37627}#
                                       #{lev 37606}#)))))))
                         #{tmp 37622}#)
                       (let ((#{tmp 37698}#
                               ($sc-dispatch #{p 37605}# '#(vector each-any))))
                         (if #{tmp 37698}#
                           (@apply
                             (lambda (#{x 37702}#)
                               (let ((#{x 37705}#
                                       (#{vquasi 37582}#
                                         #{x 37702}#
                                         #{lev 37606}#)))
                                 (let ((#{tmp 37707}#
                                         ($sc-dispatch
                                           #{x 37705}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 37707}#
                                     (@apply
                                       (lambda (#{x 37711}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37455"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37452"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i37323"
                                                      "i37321"
                                                      "i37319"
                                                      "i37317"
                                                      "i37315"
                                                      "i37313"
                                                      "i37311")))
                                                  (hygiene guile))
                                               (list->vector #{x 37711}#)))
                                       #{tmp 37707}#)
                                     (letrec*
                                       ((#{f 37713}#
                                          (lambda (#{y 37725}# #{k 37726}#)
                                            (let ((#{tmp 37728}#
                                                    ($sc-dispatch
                                                      #{y 37725}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 37728}#
                                                (@apply
                                                  (lambda (#{y 37731}#)
                                                    (#{k 37726}#
                                                      (map (lambda (#{tmp 37480 37732}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i37478"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i37460"
                                                                           "i37461"
                                                                           "i37462"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i37458"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i37452"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i37323"
                                                                          "i37321"
                                                                          "i37319"
                                                                          "i37317"
                                                                          "i37315"
                                                                          "i37313"
                                                                          "i37311")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 37480 37732}#))
                                                           #{y 37731}#)))
                                                  #{tmp 37728}#)
                                                (let ((#{tmp 37733}#
                                                        ($sc-dispatch
                                                          #{y 37725}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 37733}#
                                                    (@apply
                                                      (lambda (#{y 37736}#)
                                                        (#{k 37726}#
                                                          #{y 37736}#))
                                                      #{tmp 37733}#)
                                                    (let ((#{tmp 37737}#
                                                            ($sc-dispatch
                                                              #{y 37725}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 37737}#
                                                        (@apply
                                                          (lambda (#{y 37740}#
                                                                   #{z 37741}#)
                                                            (#{f 37713}#
                                                              #{z 37741}#
                                                              (lambda (#{ls 37742}#)
                                                                (#{k 37726}#
                                                                  (append
                                                                    #{y 37740}#
                                                                    #{ls 37742}#)))))
                                                          #{tmp 37737}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g37495}#)
                                                                    #((m37496
                                                                        top))
                                                                    #("i37499"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i37493"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i37460"
                                                                      "i37461"
                                                                      "i37462"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i37458"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i37452"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i37323"
                                                                     "i37321"
                                                                     "i37319"
                                                                     "i37317"
                                                                     "i37315"
                                                                     "i37313"
                                                                     "i37311")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 37705}#))))))))))
                                       (#{f 37713}#
                                         #{x 37705}#
                                         (lambda (#{ls 37715}#)
                                           (let ((#{tmp 37717}#
                                                   ($sc-dispatch
                                                     #{ls 37715}#
                                                     'each-any)))
                                             (if #{tmp 37717}#
                                               (@apply
                                                 (lambda (#{ g37468 37720}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g37468}#)
                                                               #((m37469 top))
                                                               #("i37473"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i37467"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i37458"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i37452"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i37323"
                                                                "i37321"
                                                                "i37319"
                                                                "i37317"
                                                                "i37315"
                                                                "i37313"
                                                                "i37311")))
                                                            (hygiene guile))
                                                         #{ g37468 37720}#))
                                                 #{tmp 37717}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 37715}#))))))))))
                             #{tmp 37698}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i37358"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i37327" "i37328"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i37323"
                                        "i37321"
                                        "i37319"
                                        "i37317"
                                        "i37315"
                                        "i37313"
                                        "i37311")))
                                    (hygiene guile))
                                 #{p 37605}#)))))))))))
       (#{vquasi 37582}#
         (lambda (#{p 37770}# #{lev 37771}#)
           (let ((#{tmp 37773}#
                   ($sc-dispatch #{p 37770}# '(any . any))))
             (if #{tmp 37773}#
               (@apply
                 (lambda (#{p 37777}# #{q 37778}#)
                   (let ((#{tmp 37780}#
                           ($sc-dispatch
                             #{p 37777}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i37366" "i37367"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i37362" "i37363"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i37323"
                                       "i37321"
                                       "i37319"
                                       "i37317"
                                       "i37315"
                                       "i37313"
                                       "i37311")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 37780}#
                       (@apply
                         (lambda (#{p 37784}#)
                           (if (= #{lev 37771}# 0)
                             (#{quasilist* 37585}#
                               (map (lambda (#{tmp 37374 37823}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i37372"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i37366" "i37367"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i37362" "i37363"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i37323"
                                                   "i37321"
                                                   "i37319"
                                                   "i37317"
                                                   "i37315"
                                                   "i37313"
                                                   "i37311")))
                                               (hygiene guile))
                                            #{tmp 37374 37823}#))
                                    #{p 37784}#)
                               (#{vquasi 37582}# #{q 37778}# #{lev 37771}#))
                             (#{quasicons 37583}#
                               (#{quasicons 37583}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i37372"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i37366" "i37367"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i37362" "i37363"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i37323"
                                         "i37321"
                                         "i37319"
                                         "i37317"
                                         "i37315"
                                         "i37313"
                                         "i37311")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i37372"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i37366" "i37367"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i37362" "i37363"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i37323"
                                         "i37321"
                                         "i37319"
                                         "i37317"
                                         "i37315"
                                         "i37313"
                                         "i37311")))
                                     (hygiene guile)))
                                 (#{quasi 37581}#
                                   #{p 37784}#
                                   (#{1-}# #{lev 37771}#)))
                               (#{vquasi 37582}# #{q 37778}# #{lev 37771}#))))
                         #{tmp 37780}#)
                       (let ((#{tmp 37830}#
                               ($sc-dispatch
                                 #{p 37777}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i37366" "i37367"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i37362" "i37363"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i37323"
                                           "i37321"
                                           "i37319"
                                           "i37317"
                                           "i37315"
                                           "i37313"
                                           "i37311")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 37830}#
                           (@apply
                             (lambda (#{p 37834}#)
                               (if (= #{lev 37771}# 0)
                                 (#{quasiappend 37584}#
                                   (map (lambda (#{tmp 37379 37837}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i37377"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i37366" "i37367"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i37362" "i37363"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i37323"
                                                       "i37321"
                                                       "i37319"
                                                       "i37317"
                                                       "i37315"
                                                       "i37313"
                                                       "i37311")))
                                                   (hygiene guile))
                                                #{tmp 37379 37837}#))
                                        #{p 37834}#)
                                   (#{vquasi 37582}#
                                     #{q 37778}#
                                     #{lev 37771}#))
                                 (#{quasicons 37583}#
                                   (#{quasicons 37583}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i37377"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i37366" "i37367"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i37362" "i37363"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i37323"
                                             "i37321"
                                             "i37319"
                                             "i37317"
                                             "i37315"
                                             "i37313"
                                             "i37311")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i37377"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i37366" "i37367"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i37362" "i37363"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i37323"
                                             "i37321"
                                             "i37319"
                                             "i37317"
                                             "i37315"
                                             "i37313"
                                             "i37311")))
                                         (hygiene guile)))
                                     (#{quasi 37581}#
                                       #{p 37834}#
                                       (#{1-}# #{lev 37771}#)))
                                   (#{vquasi 37582}#
                                     #{q 37778}#
                                     #{lev 37771}#))))
                             #{tmp 37830}#)
                           (#{quasicons 37583}#
                             (#{quasi 37581}# #{p 37777}# #{lev 37771}#)
                             (#{vquasi 37582}# #{q 37778}# #{lev 37771}#)))))))
                 #{tmp 37773}#)
               (let ((#{tmp 37855}# ($sc-dispatch #{p 37770}# '())))
                 (if #{tmp 37855}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i37362" "i37363"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i37323"
                               "i37321"
                               "i37319"
                               "i37317"
                               "i37315"
                               "i37313"
                               "i37311")))
                           (hygiene guile))
                         ()))
                     #{tmp 37855}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 37770}#)))))))
       (#{quasicons 37583}#
         (lambda (#{x 37868}# #{y 37869}#)
           (let ((#{tmp 37870}# (list #{x 37868}# #{y 37869}#)))
             (let ((#{tmp 37871}#
                     ($sc-dispatch #{tmp 37870}# '(any any))))
               (if #{tmp 37871}#
                 (@apply
                   (lambda (#{x 37873}# #{y 37874}#)
                     (let ((#{tmp 37876}#
                             ($sc-dispatch
                               #{y 37874}#
                               '(#(atom "quote") any))))
                       (if #{tmp 37876}#
                         (@apply
                           (lambda (#{dy 37880}#)
                             (let ((#{tmp 37882}#
                                     ($sc-dispatch
                                       #{x 37873}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 37882}#
                                 (@apply
                                   (lambda (#{dx 37886}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i37401"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i37397"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37391" "i37392"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37386" "i37387"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i37323"
                                                  "i37321"
                                                  "i37319"
                                                  "i37317"
                                                  "i37315"
                                                  "i37313"
                                                  "i37311")))
                                              (hygiene guile))
                                           (cons #{dx 37886}# #{dy 37880}#)))
                                   #{tmp 37882}#)
                                 (if (null? #{dy 37880}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i37403"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i37397"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37391" "i37392"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37386" "i37387"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i37323"
                                                "i37321"
                                                "i37319"
                                                "i37317"
                                                "i37315"
                                                "i37313"
                                                "i37311")))
                                            (hygiene guile))
                                         #{x 37873}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i37403"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i37397"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37391" "i37392"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i37386" "i37387"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i37323"
                                                "i37321"
                                                "i37319"
                                                "i37317"
                                                "i37315"
                                                "i37313"
                                                "i37311")))
                                            (hygiene guile))
                                         #{x 37873}#
                                         #{y 37874}#)))))
                           #{tmp 37876}#)
                         (let ((#{tmp 37891}#
                                 ($sc-dispatch
                                   #{y 37874}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 37891}#
                             (@apply
                               (lambda (#{stuff 37895}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i37406"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37391" "i37392"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37386" "i37387"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i37323"
                                              "i37321"
                                              "i37319"
                                              "i37317"
                                              "i37315"
                                              "i37313"
                                              "i37311")))
                                          (hygiene guile))
                                       (cons #{x 37873}# #{stuff 37895}#)))
                               #{tmp 37891}#)
                             (let ((#{tmp 37896}#
                                     ($sc-dispatch
                                       #{y 37874}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 37896}#
                                 (@apply
                                   (lambda (#{stuff 37900}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i37409"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37391" "i37392"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i37386" "i37387"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i37323"
                                                  "i37321"
                                                  "i37319"
                                                  "i37317"
                                                  "i37315"
                                                  "i37313"
                                                  "i37311")))
                                              (hygiene guile))
                                           (cons #{x 37873}# #{stuff 37900}#)))
                                   #{tmp 37896}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i37411"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37391" "i37392"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i37386" "i37387"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i37323"
                                              "i37321"
                                              "i37319"
                                              "i37317"
                                              "i37315"
                                              "i37313"
                                              "i37311")))
                                          (hygiene guile))
                                       #{x 37873}#
                                       #{y 37874}#))))))))
                   #{tmp 37871}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 37870}#))))))
       (#{quasiappend 37584}#
         (lambda (#{x 37911}# #{y 37912}#)
           (let ((#{tmp 37914}#
                   ($sc-dispatch #{y 37912}# '(#(atom "quote") ()))))
             (if #{tmp 37914}#
               (@apply
                 (lambda ()
                   (if (null? #{x 37911}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i37415" "i37416"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i37323"
                             "i37321"
                             "i37319"
                             "i37317"
                             "i37315"
                             "i37313"
                             "i37311")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 37911}#))
                       (car #{x 37911}#)
                       (let ((#{tmp 37919}#
                               ($sc-dispatch #{x 37911}# 'each-any)))
                         (if #{tmp 37919}#
                           (@apply
                             (lambda (#{p 37923}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i37427"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i37415" "i37416"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i37323"
                                            "i37321"
                                            "i37319"
                                            "i37317"
                                            "i37315"
                                            "i37313"
                                            "i37311")))
                                        (hygiene guile))
                                     #{p 37923}#))
                             #{tmp 37919}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 37911}#))))))
                 #{tmp 37914}#)
               (if (null? #{x 37911}#)
                 #{y 37912}#
                 (let ((#{tmp 37931}# (list #{x 37911}# #{y 37912}#)))
                   (let ((#{tmp 37932}#
                           ($sc-dispatch #{tmp 37931}# '(each-any any))))
                     (if #{tmp 37932}#
                       (@apply
                         (lambda (#{p 37934}# #{y 37935}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i37438" "i37439"))
                                     #(ribcage #(_) #((top)) #("i37430"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i37415" "i37416"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i37323"
                                        "i37321"
                                        "i37319"
                                        "i37317"
                                        "i37315"
                                        "i37313"
                                        "i37311")))
                                    (hygiene guile))
                                 (append #{p 37934}# (list #{y 37935}#))))
                         #{tmp 37932}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 37931}#)))))))))
       (#{quasilist* 37585}#
         (lambda (#{x 37939}# #{y 37940}#)
           (letrec*
             ((#{f 37941}#
                (lambda (#{x 38045}#)
                  (if (null? #{x 38045}#)
                    #{y 37940}#
                    (#{quasicons 37583}#
                      (car #{x 38045}#)
                      (#{f 37941}# (cdr #{x 38045}#)))))))
             (#{f 37941}# #{x 37939}#))))
       (#{emit 37587}#
         (lambda (#{x 38048}#)
           (let ((#{tmp 38050}#
                   ($sc-dispatch #{x 38048}# '(#(atom "quote") any))))
             (if #{tmp 38050}#
               (@apply
                 (lambda (#{x 38054}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i37505"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i37502"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i37323"
                                "i37321"
                                "i37319"
                                "i37317"
                                "i37315"
                                "i37313"
                                "i37311")))
                            (hygiene guile))
                         #{x 38054}#))
                 #{tmp 38050}#)
               (let ((#{tmp 38055}#
                       ($sc-dispatch
                         #{x 38048}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 38055}#
                   (@apply
                     (lambda (#{x 38059}#)
                       (let ((#{tmp 38060}# (map #{emit 37587}# #{x 38059}#)))
                         (let ((#{tmp 38061}#
                                 ($sc-dispatch #{tmp 38060}# 'each-any)))
                           (if #{tmp 38061}#
                             (@apply
                               (lambda (#{ g37510 38063}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g37510}#)
                                             #((m37511 top))
                                             #("i37515"))
                                           #(ribcage #(x) #((top)) #("i37508"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i37502"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i37323"
                                              "i37321"
                                              "i37319"
                                              "i37317"
                                              "i37315"
                                              "i37313"
                                              "i37311")))
                                          (hygiene guile))
                                       #{ g37510 38063}#))
                               #{tmp 38061}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 38060}#)))))
                     #{tmp 38055}#)
                   (let ((#{tmp 38064}#
                           ($sc-dispatch
                             #{x 38048}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 38064}#
                       (@apply
                         (lambda (#{x 38068}# #{y 38069}#)
                           (letrec*
                             ((#{f 38070}#
                                (lambda (#{x* 38073}#)
                                  (if (null? #{x* 38073}#)
                                    (#{emit 37587}# #{y 38069}#)
                                    (let ((#{tmp 38074}#
                                            (list (#{emit 37587}#
                                                    (car #{x* 38073}#))
                                                  (#{f 38070}#
                                                    (cdr #{x* 38073}#)))))
                                      (let ((#{tmp 38075}#
                                              ($sc-dispatch
                                                #{tmp 38074}#
                                                '(any any))))
                                        (if #{tmp 38075}#
                                          (@apply
                                            (lambda (#{ g37530 38077}#
                                                     #{ g37529 38078}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g37530}#
                                                            #{ g37529}#)
                                                          #((m37531 top)
                                                            (m37531 top))
                                                          #("i37535" "i37536"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i37524" "i37525"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i37520" "i37521"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i37502"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i37323"
                                                           "i37321"
                                                           "i37319"
                                                           "i37317"
                                                           "i37315"
                                                           "i37313"
                                                           "i37311")))
                                                       (hygiene guile))
                                                    #{ g37530 38077}#
                                                    #{ g37529 38078}#))
                                            #{tmp 38075}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 38074}#))))))))
                             (#{f 38070}# #{x 38068}#)))
                         #{tmp 38064}#)
                       (let ((#{tmp 38079}#
                               ($sc-dispatch
                                 #{x 38048}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 38079}#
                           (@apply
                             (lambda (#{x 38083}#)
                               (let ((#{tmp 38084}#
                                       (map #{emit 37587}# #{x 38083}#)))
                                 (let ((#{tmp 38085}#
                                         ($sc-dispatch
                                           #{tmp 38084}#
                                           'each-any)))
                                   (if #{tmp 38085}#
                                     (@apply
                                       (lambda (#{ g37542 38087}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g37542}#)
                                                     #((m37543 top))
                                                     #("i37547"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37540"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37502"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i37323"
                                                      "i37321"
                                                      "i37319"
                                                      "i37317"
                                                      "i37315"
                                                      "i37313"
                                                      "i37311")))
                                                  (hygiene guile))
                                               #{ g37542 38087}#))
                                       #{tmp 38085}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 38084}#)))))
                             #{tmp 38079}#)
                           (let ((#{tmp 38088}#
                                   ($sc-dispatch
                                     #{x 38048}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 38088}#
                               (@apply
                                 (lambda (#{x 38092}#)
                                   (let ((#{tmp 38093}#
                                           (map #{emit 37587}# #{x 38092}#)))
                                     (let ((#{tmp 38094}#
                                             ($sc-dispatch
                                               #{tmp 38093}#
                                               'each-any)))
                                       (if #{tmp 38094}#
                                         (@apply
                                           (lambda (#{ g37554 38096}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g37554}#)
                                                         #((m37555 top))
                                                         #("i37559"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i37552"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i37502"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i37323"
                                                          "i37321"
                                                          "i37319"
                                                          "i37317"
                                                          "i37315"
                                                          "i37313"
                                                          "i37311")))
                                                      (hygiene guile))
                                                   #{ g37554 38096}#))
                                           #{tmp 38094}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 38093}#)))))
                                 #{tmp 38088}#)
                               (let ((#{tmp 38097}#
                                       ($sc-dispatch
                                         #{x 38048}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 38097}#
                                   (@apply
                                     (lambda (#{x 38101}#)
                                       (let ((#{tmp 38102}#
                                               (#{emit 37587}# #{x 38101}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g37566}#)
                                                     #((m37567 top))
                                                     #("i37570"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37564"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i37502"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i37323"
                                                      "i37321"
                                                      "i37319"
                                                      "i37317"
                                                      "i37315"
                                                      "i37313"
                                                      "i37311")))
                                                  (hygiene guile))
                                               #{tmp 38102}#)))
                                     #{tmp 38097}#)
                                   (let ((#{tmp 38105}#
                                           ($sc-dispatch
                                             #{x 38048}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 38105}#
                                       (@apply
                                         (lambda (#{x 38109}#) #{x 38109}#)
                                         #{tmp 38105}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 38048}#))))))))))))))))))
      (lambda (#{x 37588}#)
        (let ((#{tmp 37590}#
                ($sc-dispatch #{x 37588}# '(_ any))))
          (if #{tmp 37590}#
            (@apply
              (lambda (#{e 37594}#)
                (#{emit 37587}# (#{quasi 37581}# #{e 37594}# 0)))
              #{tmp 37590}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 37588}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 38164}#)
      (letrec*
        ((#{read-file 38165}#
           (lambda (#{fn 38281}# #{k 38282}#)
             (let ((#{p 38283}# (open-input-file #{fn 38281}#)))
               (letrec*
                 ((#{f 38284}#
                    (lambda (#{x 38341}# #{result 38342}#)
                      (if (eof-object? #{x 38341}#)
                        (begin
                          (close-input-port #{p 38283}#)
                          (reverse #{result 38342}#))
                        (#{f 38284}#
                          (read #{p 38283}#)
                          (cons (datum->syntax #{k 38282}# #{x 38341}#)
                                #{result 38342}#))))))
                 (#{f 38284}# (read #{p 38283}#) '()))))))
        (let ((#{tmp 38167}#
                ($sc-dispatch #{x 38164}# '(any any))))
          (if #{tmp 38167}#
            (@apply
              (lambda (#{k 38171}# #{filename 38172}#)
                (let ((#{fn 38173}# (syntax->datum #{filename 38172}#)))
                  (let ((#{tmp 38174}#
                          (#{read-file 38165}#
                            #{fn 38173}#
                            #{filename 38172}#)))
                    (let ((#{tmp 38175}#
                            ($sc-dispatch #{tmp 38174}# 'each-any)))
                      (if #{tmp 38175}#
                        (@apply
                          (lambda (#{exp 38193}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i38161"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i38156"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i38152" "i38153"))
                                      #(ribcage (read-file) ((top)) ("i38136"))
                                      #(ribcage #(x) #((top)) #("i38135")))
                                     (hygiene guile))
                                  #{exp 38193}#))
                          #{tmp 38175}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 38174}#))))))
              #{tmp 38167}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 38164}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 38361}#)
      (let ((#{tmp 38363}#
              ($sc-dispatch #{x 38361}# '(any any))))
        (if #{tmp 38363}#
          (@apply
            (lambda (#{k 38367}# #{filename 38368}#)
              (let ((#{fn 38369}# (syntax->datum #{filename 38368}#)))
                (let ((#{tmp 38370}#
                        (datum->syntax
                          #{filename 38368}#
                          (let ((#{t 38373}# (%search-load-path #{fn 38369}#)))
                            (if #{t 38373}#
                              #{t 38373}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 38361}#
                                #{filename 38368}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i38355"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i38351"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i38347" "i38348"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38344")))
                           (hygiene guile))
                        #{tmp 38370}#))))
            #{tmp 38363}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 38361}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 38382}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 38382}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 38385}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 38385}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 38441}#)
      (let ((#{tmp 38443}#
              ($sc-dispatch
                #{x 38441}#
                '(_ any any . each-any))))
        (if #{tmp 38443}#
          (@apply
            (lambda (#{e 38447}# #{m1 38448}# #{m2 38449}#)
              (let ((#{tmp 38450}#
                      (letrec*
                        ((#{f 38511}#
                           (lambda (#{clause 38514}# #{clauses 38515}#)
                             (if (null? #{clauses 38515}#)
                               (let ((#{tmp 38517}#
                                       ($sc-dispatch
                                         #{clause 38514}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i38400"
                                                    "i38401"
                                                    "i38402"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i38390"
                                                    "i38391"
                                                    "i38392"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i38387")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 38517}#
                                   (@apply
                                     (lambda (#{e1 38521}# #{e2 38522}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i38409" "i38410"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i38400"
                                                     "i38401"
                                                     "i38402"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i38390"
                                                     "i38391"
                                                     "i38392"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38387")))
                                                (hygiene guile))
                                             (cons #{e1 38521}# #{e2 38522}#)))
                                     #{tmp 38517}#)
                                   (let ((#{tmp 38523}#
                                           ($sc-dispatch
                                             #{clause 38514}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 38523}#
                                       (@apply
                                         (lambda (#{k 38527}#
                                                  #{e1 38528}#
                                                  #{e2 38529}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i38415"
                                                         "i38416"
                                                         "i38417"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i38400"
                                                         "i38401"
                                                         "i38402"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i38390"
                                                         "i38391"
                                                         "i38392"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38387")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38415"
                                                               "i38416"
                                                               "i38417"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38400"
                                                               "i38401"
                                                               "i38402"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38390"
                                                               "i38391"
                                                               "i38392"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38387")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38415"
                                                               "i38416"
                                                               "i38417"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38400"
                                                               "i38401"
                                                               "i38402"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38390"
                                                               "i38391"
                                                               "i38392"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38387")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i38415"
                                                                     "i38416"
                                                                     "i38417"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i38400"
                                                                     "i38401"
                                                                     "i38402"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i38390"
                                                                     "i38391"
                                                                     "i38392"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i38387")))
                                                                (hygiene
                                                                  guile))
                                                             #{k 38527}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38415"
                                                               "i38416"
                                                               "i38417"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38400"
                                                               "i38401"
                                                               "i38402"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i38390"
                                                               "i38391"
                                                               "i38392"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38387")))
                                                          (hygiene guile))
                                                       (cons #{e1 38528}#
                                                             #{e2 38529}#))))
                                         #{tmp 38523}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 38441}#
                                         #{clause 38514}#)))))
                               (let ((#{tmp 38537}#
                                       (#{f 38511}#
                                         (car #{clauses 38515}#)
                                         (cdr #{clauses 38515}#))))
                                 (let ((#{tmp 38540}#
                                         ($sc-dispatch
                                           #{clause 38514}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 38540}#
                                     (@apply
                                       (lambda (#{k 38544}#
                                                #{e1 38545}#
                                                #{e2 38546}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i38431"
                                                       "i38432"
                                                       "i38433"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i38427"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i38400"
                                                       "i38401"
                                                       "i38402"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i38390"
                                                       "i38391"
                                                       "i38392"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i38387")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i38431"
                                                             "i38432"
                                                             "i38433"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i38427"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i38400"
                                                             "i38401"
                                                             "i38402"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i38390"
                                                             "i38391"
                                                             "i38392"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i38387")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i38431"
                                                             "i38432"
                                                             "i38433"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i38427"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i38400"
                                                             "i38401"
                                                             "i38402"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i38390"
                                                             "i38391"
                                                             "i38392"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i38387")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i38431"
                                                                   "i38432"
                                                                   "i38433"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i38427"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i38400"
                                                                   "i38401"
                                                                   "i38402"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i38390"
                                                                   "i38391"
                                                                   "i38392"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i38387")))
                                                              (hygiene guile))
                                                           #{k 38544}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i38431"
                                                             "i38432"
                                                             "i38433"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i38427"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i38400"
                                                             "i38401"
                                                             "i38402"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i38390"
                                                             "i38391"
                                                             "i38392"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i38387")))
                                                        (hygiene guile))
                                                     (cons #{e1 38545}#
                                                           #{e2 38546}#))
                                               #{tmp 38537}#))
                                       #{tmp 38540}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 38441}#
                                       #{clause 38514}#))))))))
                        (#{f 38511}# #{m1 38448}# #{m2 38449}#))))
                (let ((#{body 38451}# #{tmp 38450}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i38398"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i38390" "i38391" "i38392"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38387")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i38398"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i38390" "i38391" "i38392"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38387")))
                                       (hygiene guile))
                                    #{e 38447}#))
                        #{body 38451}#))))
            #{tmp 38443}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 38441}#))))))

(define make-variable-transformer
  (lambda (#{proc 38564}#)
    (if (procedure? #{proc 38564}#)
      (letrec*
        ((#{trans 38565}#
           (lambda (#{x 38571}#)
             (#{proc 38564}# #{x 38571}#))))
        (begin
          (set-procedure-property!
            #{trans 38565}#
            'variable-transformer
            #t)
          #{trans 38565}#))
      (error "variable transformer not a procedure"
             #{proc 38564}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 38603}#)
      (let ((#{tmp 38605}#
              ($sc-dispatch #{x 38603}# '(_ any))))
        (if #{tmp 38605}#
          (@apply
            (lambda (#{e 38609}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i38578"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i38575")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i38578"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i38575")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i38578"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i38575")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i38578"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i38575")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i38578"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38575")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i38578"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38575")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i38578"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i38575")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38578"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38575")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i38578"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i38575")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i38578"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i38575")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i38578"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i38575")))
                                         (hygiene guile))
                                      #{e 38609}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38578"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38575")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38578"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38575")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i38578"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38575")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i38578"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i38575")))
                                         (hygiene guile))
                                      (cons #{e 38609}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i38578"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38575")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i38578"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i38575")))
                                                (hygiene guile)))))))))
            #{tmp 38605}#)
          (let ((#{tmp 38610}#
                  ($sc-dispatch
                    #{x 38603}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i38575")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 38610}#
                  (@apply
                    (lambda (#{id 38614}#
                             #{exp1 38615}#
                             #{var 38616}#
                             #{val 38617}#
                             #{exp2 38618}#)
                      (if (identifier? #{id 38614}#)
                        (identifier? #{var 38616}#)
                        #f))
                    #{tmp 38610}#)
                  #f)
              (@apply
                (lambda (#{id 38619}#
                         #{exp1 38620}#
                         #{var 38621}#
                         #{val 38622}#
                         #{exp2 38623}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i38593" "i38594" "i38595" "i38596" "i38597"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38575")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i38593"
                                      "i38594"
                                      "i38595"
                                      "i38596"
                                      "i38597"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i38575")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i38593"
                                       "i38594"
                                       "i38595"
                                       "i38596"
                                       "i38597"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i38575")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i38593"
                                         "i38594"
                                         "i38595"
                                         "i38596"
                                         "i38597"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38575")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i38593"
                                         "i38594"
                                         "i38595"
                                         "i38596"
                                         "i38597"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i38575")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i38593"
                                            "i38594"
                                            "i38595"
                                            "i38596"
                                            "i38597"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38575")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i38593"
                                            "i38594"
                                            "i38595"
                                            "i38596"
                                            "i38597"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i38575")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i38593"
                                             "i38594"
                                             "i38595"
                                             "i38596"
                                             "i38597"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i38575")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38593"
                                                        "i38594"
                                                        "i38595"
                                                        "i38596"
                                                        "i38597"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38575")))
                                                   (hygiene guile))
                                                #{var 38621}#
                                                #{val 38622}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38593"
                                                        "i38594"
                                                        "i38595"
                                                        "i38596"
                                                        "i38597"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38575")))
                                                   (hygiene guile))
                                                #{exp2 38623}#))
                                    (list (cons #{id 38619}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i38593"
                                                         "i38594"
                                                         "i38595"
                                                         "i38596"
                                                         "i38597"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38575")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i38593"
                                                         "i38594"
                                                         "i38595"
                                                         "i38596"
                                                         "i38597"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i38575")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38593"
                                                        "i38594"
                                                        "i38595"
                                                        "i38596"
                                                        "i38597"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38575")))
                                                   (hygiene guile))
                                                (cons #{exp1 38620}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i38593"
                                                               "i38594"
                                                               "i38595"
                                                               "i38596"
                                                               "i38597"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38575")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i38593"
                                                               "i38594"
                                                               "i38595"
                                                               "i38596"
                                                               "i38597"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i38575")))
                                                          (hygiene guile))))))
                                    (list #{id 38619}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38593"
                                                        "i38594"
                                                        "i38595"
                                                        "i38596"
                                                        "i38597"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38575")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i38593"
                                                              "i38594"
                                                              "i38595"
                                                              "i38596"
                                                              "i38597"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i38575")))
                                                         (hygiene guile))
                                                      #{id 38619}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i38593"
                                                        "i38594"
                                                        "i38595"
                                                        "i38596"
                                                        "i38597"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i38575")))
                                                   (hygiene guile))
                                                #{exp1 38620}#))))))
                #{tmp 38610}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 38603}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 38655}#)
      (let ((#{tmp 38657}#
              ($sc-dispatch
                #{x 38655}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 38657}#
          (@apply
            (lambda (#{id 38661}#
                     #{args 38662}#
                     #{b0 38663}#
                     #{b1 38664}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i38637" "i38638" "i38639" "i38640"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i38634")))
                       (hygiene guile))
                    #{id 38661}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i38637" "i38638" "i38639" "i38640"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i38634")))
                             (hygiene guile))
                          (cons #{args 38662}#
                                (cons #{b0 38663}# #{b1 38664}#)))))
            #{tmp 38657}#)
          (let ((#{tmp 38665}#
                  ($sc-dispatch #{x 38655}# '(_ any any))))
            (if (if #{tmp 38665}#
                  (@apply
                    (lambda (#{id 38669}# #{val 38670}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i38647" "i38648"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38634")))
                           (hygiene guile))))
                    #{tmp 38665}#)
                  #f)
              (@apply
                (lambda (#{id 38671}# #{val 38672}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i38651" "i38652"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i38634")))
                           (hygiene guile))
                        #{id 38671}#
                        #{val 38672}#))
                #{tmp 38665}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 38655}#))))))))

