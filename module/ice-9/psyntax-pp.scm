(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(let ((session-id-4307 (if #f #f))
      (transformer-environment-4368 (if #f #f)))
  (letrec*
    ((top-level-eval-hook-4305
       (lambda (x-36477 mod-36478)
         (primitive-eval x-36477)))
     (maybe-name-value!-4311
       (lambda (name-19172 val-19173)
         (if (if (struct? val-19173)
               (eq? (struct-vtable val-19173)
                    (vector-ref %expanded-vtables 14))
               #f)
           (let ((meta-19180 (struct-ref val-19173 1)))
             (if (not (assq 'name meta-19180))
               (let ((v-19185
                       (cons (cons 'name name-19172) meta-19180)))
                 (struct-set! val-19173 1 v-19185)))))))
     (build-call-4313
       (lambda (source-18917 fun-exp-18918 arg-exps-18919)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 11)
           source-18917
           fun-exp-18918
           arg-exps-18919)))
     (build-conditional-4314
       (lambda (source-18925
                test-exp-18926
                then-exp-18927
                else-exp-18928)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 10)
           source-18925
           test-exp-18926
           then-exp-18927
           else-exp-18928)))
     (build-dynlet-4315
       (lambda (source-18935 fluids-18936 vals-18937 body-18938)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 18)
           source-18935
           fluids-18936
           vals-18937
           body-18938)))
     (build-lexical-reference-4316
       (lambda (type-36479 source-36480 name-36481 var-36482)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           source-36480
           name-36481
           var-36482)))
     (build-lexical-assignment-4317
       (lambda (source-18945 name-18946 var-18947 exp-18948)
         (begin
           (if (if (struct? exp-18948)
                 (eq? (struct-vtable exp-18948)
                      (vector-ref %expanded-vtables 14))
                 #f)
             (let ((meta-18964 (struct-ref exp-18948 1)))
               (if (not (assq 'name meta-18964))
                 (let ((v-18971
                         (cons (cons 'name name-18946) meta-18964)))
                   (struct-set! exp-18948 1 v-18971)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 4)
             source-18945
             name-18946
             var-18947
             exp-18948))))
     (analyze-variable-4318
       (lambda (mod-36488
                var-36489
                modref-cont-36490
                bare-cont-36491)
         (if (not mod-36488)
           (bare-cont-36491 var-36489)
           (let ((kind-36492 (car mod-36488))
                 (mod-36493 (cdr mod-36488)))
             (if (eqv? kind-36492 'public)
               (modref-cont-36490 mod-36493 var-36489 #t)
               (if (eqv? kind-36492 'private)
                 (if (not (equal? mod-36493 (module-name (current-module))))
                   (modref-cont-36490 mod-36493 var-36489 #f)
                   (bare-cont-36491 var-36489))
                 (if (eqv? kind-36492 'bare)
                   (bare-cont-36491 var-36489)
                   (if (eqv? kind-36492 'hygiene)
                     (if (if (not (equal?
                                    mod-36493
                                    (module-name (current-module))))
                           (module-variable
                             (resolve-module mod-36493)
                             var-36489)
                           #f)
                       (modref-cont-36490 mod-36493 var-36489 #f)
                       (bare-cont-36491 var-36489))
                     (syntax-violation
                       #f
                       "bad module kind"
                       var-36489
                       mod-36493)))))))))
     (build-global-reference-4319
       (lambda (source-36520 var-36521 mod-36522)
         (analyze-variable-4318
           mod-36522
           var-36521
           (lambda (mod-36525 var-36526 public?-36527)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               source-36520
               mod-36525
               var-36526
               public?-36527))
           (lambda (var-36534)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               source-36520
               var-36534)))))
     (build-global-assignment-4320
       (lambda (source-18980 var-18981 exp-18982 mod-18983)
         (begin
           (if (if (struct? exp-18982)
                 (eq? (struct-vtable exp-18982)
                      (vector-ref %expanded-vtables 14))
                 #f)
             (let ((meta-18999 (struct-ref exp-18982 1)))
               (if (not (assq 'name meta-18999))
                 (let ((v-19006
                         (cons (cons 'name var-18981) meta-18999)))
                   (struct-set! exp-18982 1 v-19006)))))
           (analyze-variable-4318
             mod-18983
             var-18981
             (lambda (mod-19011 var-19012 public?-19013)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 6)
                 source-18980
                 mod-19011
                 var-19012
                 public?-19013
                 exp-18982))
             (lambda (var-19021)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 8)
                 source-18980
                 var-19021
                 exp-18982))))))
     (build-global-definition-4321
       (lambda (source-36539 var-36540 exp-36541)
         (begin
           (if (if (struct? exp-36541)
                 (eq? (struct-vtable exp-36541)
                      (vector-ref %expanded-vtables 14))
                 #f)
             (let ((meta-36557 (struct-ref exp-36541 1)))
               (if (not (assq 'name meta-36557))
                 (let ((v-36564
                         (cons (cons 'name var-36540) meta-36557)))
                   (struct-set! exp-36541 1 v-36564)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             source-36539
             var-36540
             exp-36541))))
     (build-simple-lambda-4322
       (lambda (src-19027
                req-19028
                rest-19029
                vars-19030
                meta-19031
                exp-19032)
         (let ((body-19038
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 15)
                   src-19027
                   req-19028
                   #f
                   rest-19029
                   #f
                   '()
                   vars-19030
                   exp-19032
                   #f)))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 14)
             src-19027
             meta-19031
             body-19038))))
     (build-primcall-4325
       (lambda (src-19050 name-19051 args-19052)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 12)
           src-19050
           name-19051
           args-19052)))
     (build-sequence-4328
       (lambda (src-36572 exps-36573)
         (if (null? (cdr exps-36573))
           (car exps-36573)
           (let ((head-36577 (car exps-36573))
                 (tail-36578
                   (build-sequence-4328 #f (cdr exps-36573))))
             (make-struct/no-tail
               (vector-ref %expanded-vtables 13)
               src-36572
               head-36577
               tail-36578)))))
     (build-named-let-4330
       (lambda (src-19058
                ids-19059
                vars-19060
                val-exps-19061
                body-exp-19062)
         (let ((f-19063 (car vars-19060))
               (f-name-19064 (car ids-19059))
               (vars-19065 (cdr vars-19060))
               (ids-19066 (cdr ids-19059)))
           (let ((proc-19067
                   (let ((body-19087
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 15)
                             src-19058
                             ids-19066
                             #f
                             #f
                             #f
                             '()
                             vars-19065
                             body-exp-19062
                             #f)))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 14)
                       src-19058
                       '()
                       body-19087))))
             (begin
               (if (if (struct? proc-19067)
                     (eq? (struct-vtable proc-19067)
                          (vector-ref %expanded-vtables 14))
                     #f)
                 (let ((meta-19111 (struct-ref proc-19067 1)))
                   (if (not (assq 'name meta-19111))
                     (let ((v-19118
                             (cons (cons 'name f-name-19064) meta-19111)))
                       (struct-set! proc-19067 1 v-19118)))))
               (for-each
                 maybe-name-value!-4311
                 ids-19066
                 val-exps-19061)
               (let ((names-19142 (list f-name-19064))
                     (gensyms-19143 (list f-19063))
                     (vals-19144 (list proc-19067))
                     (body-19145
                       (let ((fun-exp-19149
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 3)
                                 src-19058
                                 f-name-19064
                                 f-19063)))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           src-19058
                           fun-exp-19149
                           val-exps-19061))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 17)
                   src-19058
                   #f
                   names-19142
                   gensyms-19143
                   vals-19144
                   body-19145)))))))
     (build-letrec-4331
       (lambda (src-19165
                in-order?-19166
                ids-19167
                vars-19168
                val-exps-19169
                body-exp-19170)
         (if (null? vars-19168)
           body-exp-19170
           (begin
             (for-each
               maybe-name-value!-4311
               ids-19167
               val-exps-19169)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 17)
               src-19165
               in-order?-19166
               ids-19167
               vars-19168
               val-exps-19169
               body-exp-19170)))))
     (source-annotation-4340
       (lambda (x-19196)
         (if (if (vector? x-19196)
               (if (= (vector-length x-19196) 4)
                 (eq? (vector-ref x-19196 0) 'syntax-object)
                 #f)
               #f)
           (source-annotation-4340 (vector-ref x-19196 1))
           (if (pair? x-19196)
             (let ((props-19211 (source-properties x-19196)))
               (if (pair? props-19211) props-19211 #f))
             #f))))
     (extend-env-4341
       (lambda (labels-19213 bindings-19214 r-19215)
         (if (null? labels-19213)
           r-19215
           (extend-env-4341
             (cdr labels-19213)
             (cdr bindings-19214)
             (cons (cons (car labels-19213) (car bindings-19214))
                   r-19215)))))
     (extend-var-env-4342
       (lambda (labels-19216 vars-19217 r-19218)
         (if (null? labels-19216)
           r-19218
           (extend-var-env-4342
             (cdr labels-19216)
             (cdr vars-19217)
             (cons (cons (car labels-19216)
                         (cons 'lexical (car vars-19217)))
                   r-19218)))))
     (macros-only-env-4343
       (lambda (r-19219)
         (if (null? r-19219)
           '()
           (let ((a-19220 (car r-19219)))
             (if (let ((t-19223 (car (cdr a-19220))))
                   (if (eq? t-19223 'macro)
                     #t
                     (eq? t-19223 'syntax-parameter)))
               (cons a-19220
                     (macros-only-env-4343 (cdr r-19219)))
               (macros-only-env-4343 (cdr r-19219)))))))
     (global-extend-4344
       (lambda (type-19225 sym-19226 val-19227)
         (module-define!
           (current-module)
           sym-19226
           (make-syntax-transformer
             sym-19226
             type-19225
             val-19227))))
     (id?-4346
       (lambda (x-11718)
         (if (symbol? x-11718)
           #t
           (if (if (vector? x-11718)
                 (if (= (vector-length x-11718) 4)
                   (eq? (vector-ref x-11718 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref x-11718 1))
             #f))))
     (gen-labels-4349
       (lambda (ls-19237)
         (if (null? ls-19237)
           '()
           (cons (string-append
                   "l-"
                   (session-id-4307)
                   (symbol->string (gensym "-")))
                 (gen-labels-4349 (cdr ls-19237))))))
     (make-binding-wrap-4360
       (lambda (ids-19241 labels-19242 w-19243)
         (if (null? ids-19241)
           w-19243
           (cons (car w-19243)
                 (cons (let ((labelvec-19244 (list->vector labels-19242)))
                         (let ((n-19245 (vector-length labelvec-19244)))
                           (let ((symnamevec-19246 (make-vector n-19245))
                                 (marksvec-19247 (make-vector n-19245)))
                             (begin
                               (letrec*
                                 ((f-19248
                                    (lambda (ids-19445 i-19446)
                                      (if (not (null? ids-19445))
                                        (call-with-values
                                          (lambda ()
                                            (let ((x-19449 (car ids-19445)))
                                              (if (if (vector? x-19449)
                                                    (if (= (vector-length
                                                             x-19449)
                                                           4)
                                                      (eq? (vector-ref
                                                             x-19449
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (values
                                                  (vector-ref x-19449 1)
                                                  (let ((m1-19465
                                                          (car w-19243))
                                                        (m2-19466
                                                          (car (vector-ref
                                                                 x-19449
                                                                 2))))
                                                    (if (null? m2-19466)
                                                      m1-19465
                                                      (append
                                                        m1-19465
                                                        m2-19466))))
                                                (values
                                                  x-19449
                                                  (car w-19243)))))
                                          (lambda (symname-19486 marks-19487)
                                            (begin
                                              (vector-set!
                                                symnamevec-19246
                                                i-19446
                                                symname-19486)
                                              (vector-set!
                                                marksvec-19247
                                                i-19446
                                                marks-19487)
                                              (f-19248
                                                (cdr ids-19445)
                                                (#{1+}# i-19446)))))))))
                                 (f-19248 ids-19241 0))
                               (vector
                                 'ribcage
                                 symnamevec-19246
                                 marksvec-19247
                                 labelvec-19244)))))
                       (cdr w-19243))))))
     (same-marks?-4364
       (lambda (x-36579 y-36580)
         (if (eq? x-36579 y-36580)
           (eq? x-36579 y-36580)
           (if (not (null? x-36579))
             (if (not (null? y-36580))
               (if (eq? (car x-36579) (car y-36580))
                 (same-marks?-4364 (cdr x-36579) (cdr y-36580))
                 #f)
               #f)
             #f))))
     (id-var-name-4365
       (lambda (id-36588 w-36589 mod-36590)
         (letrec*
           ((search-36591
              (lambda (sym-36657 subst-36658 marks-36659 mod-36660)
                (if (null? subst-36658)
                  (values #f marks-36659)
                  (let ((fst-36661 (car subst-36658)))
                    (if (eq? fst-36661 'shift)
                      (search-36591
                        sym-36657
                        (cdr subst-36658)
                        (cdr marks-36659)
                        mod-36660)
                      (let ((symnames-36663 (vector-ref fst-36661 1)))
                        (if (vector? symnames-36663)
                          (search-vector-rib-36593
                            sym-36657
                            subst-36658
                            marks-36659
                            symnames-36663
                            fst-36661
                            mod-36660)
                          (search-list-rib-36592
                            sym-36657
                            subst-36658
                            marks-36659
                            symnames-36663
                            fst-36661
                            mod-36660))))))))
            (search-list-rib-36592
              (lambda (sym-36838
                       subst-36839
                       marks-36840
                       symnames-36841
                       ribcage-36842
                       mod-36843)
                (letrec*
                  ((f-36844
                     (lambda (symnames-36847 i-36848)
                       (if (null? symnames-36847)
                         (search-36591
                           sym-36838
                           (cdr subst-36839)
                           marks-36840
                           mod-36843)
                         (if (if (eq? (car symnames-36847) sym-36838)
                               (same-marks?-4364
                                 marks-36840
                                 (list-ref
                                   (vector-ref ribcage-36842 2)
                                   i-36848))
                               #f)
                           (let ((n-36994
                                   (list-ref
                                     (vector-ref ribcage-36842 3)
                                     i-36848)))
                             (if (pair? n-36994)
                               (if (equal? mod-36843 (car n-36994))
                                 (values (cdr n-36994) marks-36840)
                                 (f-36844
                                   (cdr symnames-36847)
                                   (#{1+}# i-36848)))
                               (values n-36994 marks-36840)))
                           (f-36844 (cdr symnames-36847) (#{1+}# i-36848)))))))
                  (f-36844 symnames-36841 0))))
            (search-vector-rib-36593
              (lambda (sym-36999
                       subst-37000
                       marks-37001
                       symnames-37002
                       ribcage-37003
                       mod-37004)
                (let ((n-37005 (vector-length symnames-37002)))
                  (letrec*
                    ((f-37006
                       (lambda (i-37009)
                         (if (= i-37009 n-37005)
                           (search-36591
                             sym-36999
                             (cdr subst-37000)
                             marks-37001
                             mod-37004)
                           (if (if (eq? (vector-ref symnames-37002 i-37009)
                                        sym-36999)
                                 (same-marks?-4364
                                   marks-37001
                                   (vector-ref
                                     (vector-ref ribcage-37003 2)
                                     i-37009))
                                 #f)
                             (let ((n-37156
                                     (vector-ref
                                       (vector-ref ribcage-37003 3)
                                       i-37009)))
                               (if (pair? n-37156)
                                 (if (equal? mod-37004 (car n-37156))
                                   (values (cdr n-37156) marks-37001)
                                   (f-37006 (#{1+}# i-37009)))
                                 (values n-37156 marks-37001)))
                             (f-37006 (#{1+}# i-37009)))))))
                    (f-37006 0))))))
           (if (symbol? id-36588)
             (let ((t-36594
                     (search-36591
                       id-36588
                       (cdr w-36589)
                       (car w-36589)
                       mod-36590)))
               (if t-36594 t-36594 id-36588))
             (if (if (vector? id-36588)
                   (if (= (vector-length id-36588) 4)
                     (eq? (vector-ref id-36588 0) 'syntax-object)
                     #f)
                   #f)
               (let ((id-36609 (vector-ref id-36588 1))
                     (w1-36610 (vector-ref id-36588 2))
                     (mod-36611 (vector-ref id-36588 3)))
                 (let ((marks-36612
                         (let ((m1-36622 (car w-36589))
                               (m2-36623 (car w1-36610)))
                           (if (null? m2-36623)
                             m1-36622
                             (append m1-36622 m2-36623)))))
                   (call-with-values
                     (lambda ()
                       (search-36591
                         id-36609
                         (cdr w-36589)
                         marks-36612
                         mod-36611))
                     (lambda (new-id-36643 marks-36644)
                       (if new-id-36643
                         new-id-36643
                         (let ((t-36652
                                 (search-36591
                                   id-36609
                                   (cdr w1-36610)
                                   marks-36644
                                   mod-36611)))
                           (if t-36652 t-36652 id-36609)))))))
               (syntax-violation
                 'id-var-name
                 "invalid id"
                 id-36588))))))
     (locally-bound-identifiers-4366
       (lambda (w-19494 mod-19495)
         (letrec*
           ((scan-19496
              (lambda (subst-19501 results-19502)
                (if (null? subst-19501)
                  results-19502
                  (let ((fst-19503 (car subst-19501)))
                    (if (eq? fst-19503 'shift)
                      (scan-19496 (cdr subst-19501) results-19502)
                      (let ((symnames-19505 (vector-ref fst-19503 1))
                            (marks-19506 (vector-ref fst-19503 2)))
                        (if (vector? symnames-19505)
                          (scan-vector-rib-19498
                            subst-19501
                            symnames-19505
                            marks-19506
                            results-19502)
                          (scan-list-rib-19497
                            subst-19501
                            symnames-19505
                            marks-19506
                            results-19502))))))))
            (scan-list-rib-19497
              (lambda (subst-19623
                       symnames-19624
                       marks-19625
                       results-19626)
                (letrec*
                  ((f-19627
                     (lambda (symnames-19812 marks-19813 results-19814)
                       (if (null? symnames-19812)
                         (scan-19496 (cdr subst-19623) results-19814)
                         (f-19627
                           (cdr symnames-19812)
                           (cdr marks-19813)
                           (cons (let ((x-19820 (car symnames-19812))
                                       (w-19821
                                         (let ((w-19825
                                                 (cons (car marks-19813)
                                                       subst-19623)))
                                           (cons (cons #f (car w-19825))
                                                 (cons 'shift
                                                       (cdr w-19825))))))
                                   (if (if (null? (car w-19821))
                                         (null? (cdr w-19821))
                                         #f)
                                     x-19820
                                     (if (if (vector? x-19820)
                                           (if (= (vector-length x-19820) 4)
                                             (eq? (vector-ref x-19820 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (let ((expression-19837
                                               (vector-ref x-19820 1))
                                             (wrap-19838
                                               (let ((w2-19846
                                                       (vector-ref x-19820 2)))
                                                 (let ((m1-19847 (car w-19821))
                                                       (s1-19848
                                                         (cdr w-19821)))
                                                   (if (null? m1-19847)
                                                     (if (null? s1-19848)
                                                       w2-19846
                                                       (cons (car w2-19846)
                                                             (let ((m2-19859
                                                                     (cdr w2-19846)))
                                                               (if (null? m2-19859)
                                                                 s1-19848
                                                                 (append
                                                                   s1-19848
                                                                   m2-19859)))))
                                                     (cons (let ((m2-19867
                                                                   (car w2-19846)))
                                                             (if (null? m2-19867)
                                                               m1-19847
                                                               (append
                                                                 m1-19847
                                                                 m2-19867)))
                                                           (let ((m2-19875
                                                                   (cdr w2-19846)))
                                                             (if (null? m2-19875)
                                                               s1-19848
                                                               (append
                                                                 s1-19848
                                                                 m2-19875))))))))
                                             (module-19839
                                               (vector-ref x-19820 3)))
                                         (vector
                                           'syntax-object
                                           expression-19837
                                           wrap-19838
                                           module-19839))
                                       (if (null? x-19820)
                                         x-19820
                                         (vector
                                           'syntax-object
                                           x-19820
                                           w-19821
                                           mod-19495)))))
                                 results-19814))))))
                  (f-19627
                    symnames-19624
                    marks-19625
                    results-19626))))
            (scan-vector-rib-19498
              (lambda (subst-19888
                       symnames-19889
                       marks-19890
                       results-19891)
                (let ((n-19892 (vector-length symnames-19889)))
                  (letrec*
                    ((f-19893
                       (lambda (i-20064 results-20065)
                         (if (= i-20064 n-19892)
                           (scan-19496 (cdr subst-19888) results-20065)
                           (f-19893
                             (#{1+}# i-20064)
                             (cons (let ((x-20071
                                           (vector-ref symnames-19889 i-20064))
                                         (w-20072
                                           (let ((w-20076
                                                   (cons (vector-ref
                                                           marks-19890
                                                           i-20064)
                                                         subst-19888)))
                                             (cons (cons #f (car w-20076))
                                                   (cons 'shift
                                                         (cdr w-20076))))))
                                     (if (if (null? (car w-20072))
                                           (null? (cdr w-20072))
                                           #f)
                                       x-20071
                                       (if (if (vector? x-20071)
                                             (if (= (vector-length x-20071) 4)
                                               (eq? (vector-ref x-20071 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (let ((expression-20088
                                                 (vector-ref x-20071 1))
                                               (wrap-20089
                                                 (let ((w2-20097
                                                         (vector-ref
                                                           x-20071
                                                           2)))
                                                   (let ((m1-20098
                                                           (car w-20072))
                                                         (s1-20099
                                                           (cdr w-20072)))
                                                     (if (null? m1-20098)
                                                       (if (null? s1-20099)
                                                         w2-20097
                                                         (cons (car w2-20097)
                                                               (let ((m2-20110
                                                                       (cdr w2-20097)))
                                                                 (if (null? m2-20110)
                                                                   s1-20099
                                                                   (append
                                                                     s1-20099
                                                                     m2-20110)))))
                                                       (cons (let ((m2-20118
                                                                     (car w2-20097)))
                                                               (if (null? m2-20118)
                                                                 m1-20098
                                                                 (append
                                                                   m1-20098
                                                                   m2-20118)))
                                                             (let ((m2-20126
                                                                     (cdr w2-20097)))
                                                               (if (null? m2-20126)
                                                                 s1-20099
                                                                 (append
                                                                   s1-20099
                                                                   m2-20126))))))))
                                               (module-20090
                                                 (vector-ref x-20071 3)))
                                           (vector
                                             'syntax-object
                                             expression-20088
                                             wrap-20089
                                             module-20090))
                                         (if (null? x-20071)
                                           x-20071
                                           (vector
                                             'syntax-object
                                             x-20071
                                             w-20072
                                             mod-19495)))))
                                   results-20065))))))
                    (f-19893 0 results-19891))))))
           (scan-19496 (cdr w-19494) '()))))
     (resolve-identifier-4367
       (lambda (id-20139
                w-20140
                r-20141
                mod-20142
                resolve-syntax-parameters?-20143)
         (let ((n-20147
                 (id-var-name-4365 id-20139 w-20140 mod-20142)))
           (if (if (vector? n-20147)
                 (if (= (vector-length n-20147) 4)
                   (eq? (vector-ref n-20147 0) 'syntax-object)
                   #f)
                 #f)
             (resolve-identifier-4367
               n-20147
               w-20140
               r-20141
               mod-20142
               resolve-syntax-parameters?-20143)
             (if (symbol? n-20147)
               (let ((mod-20162
                       (if (if (vector? id-20139)
                             (if (= (vector-length id-20139) 4)
                               (eq? (vector-ref id-20139 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref id-20139 3)
                         mod-20142)))
                 (let ((b-20163
                         (let ((b-20166
                                 (let ((t-20167
                                         (begin
                                           (if (if (not mod-20162)
                                                 (current-module)
                                                 #f)
                                             (warn "module system is booted, we should have a module"
                                                   n-20147))
                                           (let ((v-20216
                                                   (module-variable
                                                     (if mod-20162
                                                       (resolve-module
                                                         (cdr mod-20162))
                                                       (current-module))
                                                     n-20147)))
                                             (if v-20216
                                               (if (variable-bound? v-20216)
                                                 (let ((val-20225
                                                         (variable-ref
                                                           v-20216)))
                                                   (if (macro? val-20225)
                                                     (if (macro-type val-20225)
                                                       (cons (macro-type
                                                               val-20225)
                                                             (macro-binding
                                                               val-20225))
                                                       #f)
                                                     #f))
                                                 #f)
                                               #f)))))
                                   (if t-20167 t-20167 '(global)))))
                           (if (if resolve-syntax-parameters?-20143
                                 (eq? (car b-20166) 'syntax-parameter)
                                 #f)
                             (let ((t-20234 (assq-ref r-20141 (cdr b-20166))))
                               (if t-20234
                                 t-20234
                                 (cons 'macro (car (cdr b-20166)))))
                             b-20166))))
                   (if (eq? (car b-20163) 'global)
                     (values 'global n-20147 mod-20162)
                     (values (car b-20163) (cdr b-20163) mod-20162))))
               (if (string? n-20147)
                 (let ((mod-20240
                         (if (if (vector? id-20139)
                               (if (= (vector-length id-20139) 4)
                                 (eq? (vector-ref id-20139 0) 'syntax-object)
                                 #f)
                               #f)
                           (vector-ref id-20139 3)
                           mod-20142)))
                   (let ((b-20241
                           (let ((b-20244
                                   (let ((t-20245 (assq-ref r-20141 n-20147)))
                                     (if t-20245
                                       t-20245
                                       '(displaced-lexical)))))
                             (if (if resolve-syntax-parameters?-20143
                                   (eq? (car b-20244) 'syntax-parameter)
                                   #f)
                               (let ((t-20246
                                       (assq-ref r-20141 (cdr b-20244))))
                                 (if t-20246
                                   t-20246
                                   (cons 'macro (car (cdr b-20244)))))
                               b-20244))))
                     (values (car b-20241) (cdr b-20241) mod-20240)))
                 (error "unexpected id-var-name"
                        id-20139
                        w-20140
                        n-20147)))))))
     (free-id=?-4370
       (lambda (i-20259 j-20260)
         (let ((mi-20261
                 (if (if (vector? i-20259)
                       (if (= (vector-length i-20259) 4)
                         (eq? (vector-ref i-20259 0) 'syntax-object)
                         #f)
                       #f)
                   (vector-ref i-20259 3)
                   #f)))
           (let ((mj-20262
                   (if (if (vector? j-20260)
                         (if (= (vector-length j-20260) 4)
                           (eq? (vector-ref j-20260 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref j-20260 3)
                     #f)))
             (let ((ni-20263
                     (id-var-name-4365 i-20259 '(()) mi-20261)))
               (let ((nj-20264
                       (id-var-name-4365 j-20260 '(()) mj-20262)))
                 (if (if (vector? ni-20263)
                       (if (= (vector-length ni-20263) 4)
                         (eq? (vector-ref ni-20263 0) 'syntax-object)
                         #f)
                       #f)
                   (free-id=?-4370 ni-20263 j-20260)
                   (if (if (vector? nj-20264)
                         (if (= (vector-length nj-20264) 4)
                           (eq? (vector-ref nj-20264 0) 'syntax-object)
                           #f)
                         #f)
                     (free-id=?-4370 i-20259 nj-20264)
                     (if (symbol? ni-20263)
                       (if (eq? nj-20264
                                (if (if (vector? j-20260)
                                      (if (= (vector-length j-20260) 4)
                                        (eq? (vector-ref j-20260 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (vector-ref j-20260 1)
                                  j-20260))
                         (if (let ((bi-20336
                                     (module-variable
                                       (if mi-20261
                                         (resolve-module (cdr mi-20261))
                                         (current-module))
                                       (if (if (vector? i-20259)
                                             (if (= (vector-length i-20259) 4)
                                               (eq? (vector-ref i-20259 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (vector-ref i-20259 1)
                                         i-20259))))
                               (if bi-20336
                                 (eq? bi-20336
                                      (module-variable
                                        (if mj-20262
                                          (resolve-module (cdr mj-20262))
                                          (current-module))
                                        (if (if (vector? j-20260)
                                              (if (= (vector-length j-20260) 4)
                                                (eq? (vector-ref j-20260 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (vector-ref j-20260 1)
                                          j-20260)))
                                 (if (not (module-variable
                                            (if mj-20262
                                              (resolve-module (cdr mj-20262))
                                              (current-module))
                                            (if (if (vector? j-20260)
                                                  (if (= (vector-length
                                                           j-20260)
                                                         4)
                                                    (eq? (vector-ref j-20260 0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref j-20260 1)
                                              j-20260)))
                                   (eq? ni-20263 nj-20264)
                                   #f)))
                           (eq? (module-variable
                                  (if mi-20261
                                    (resolve-module (cdr mi-20261))
                                    (current-module))
                                  (if (if (vector? i-20259)
                                        (if (= (vector-length i-20259) 4)
                                          (eq? (vector-ref i-20259 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref i-20259 1)
                                    i-20259))
                                (module-variable
                                  (if mj-20262
                                    (resolve-module (cdr mj-20262))
                                    (current-module))
                                  (if (if (vector? j-20260)
                                        (if (= (vector-length j-20260) 4)
                                          (eq? (vector-ref j-20260 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref j-20260 1)
                                    j-20260)))
                           #f)
                         #f)
                       (equal? ni-20263 nj-20264))))))))))
     (bound-id=?-4371
       (lambda (i-20529 j-20530)
         (if (if (if (vector? i-20529)
                   (if (= (vector-length i-20529) 4)
                     (eq? (vector-ref i-20529 0) 'syntax-object)
                     #f)
                   #f)
               (if (vector? j-20530)
                 (if (= (vector-length j-20530) 4)
                   (eq? (vector-ref j-20530 0) 'syntax-object)
                   #f)
                 #f)
               #f)
           (if (eq? (vector-ref i-20529 1)
                    (vector-ref j-20530 1))
             (same-marks?-4364
               (car (vector-ref i-20529 2))
               (car (vector-ref j-20530 2)))
             #f)
           (eq? i-20529 j-20530))))
     (valid-bound-ids?-4372
       (lambda (ids-20699)
         (if (letrec*
               ((all-ids?-20700
                  (lambda (ids-20897)
                    (if (null? ids-20897)
                      (null? ids-20897)
                      (if (let ((x-20908 (car ids-20897)))
                            (if (symbol? x-20908)
                              #t
                              (if (if (vector? x-20908)
                                    (if (= (vector-length x-20908) 4)
                                      (eq? (vector-ref x-20908 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (symbol? (vector-ref x-20908 1))
                                #f)))
                        (all-ids?-20700 (cdr ids-20897))
                        #f)))))
               (all-ids?-20700 ids-20699))
           (distinct-bound-ids?-4373 ids-20699)
           #f)))
     (distinct-bound-ids?-4373
       (lambda (ids-21029)
         (letrec*
           ((distinct?-21030
              (lambda (ids-21135)
                (if (null? ids-21135)
                  (null? ids-21135)
                  (if (not (bound-id-member?-4374
                             (car ids-21135)
                             (cdr ids-21135)))
                    (distinct?-21030 (cdr ids-21135))
                    #f)))))
           (distinct?-21030 ids-21029))))
     (bound-id-member?-4374
       (lambda (x-21231 list-21232)
         (if (not (null? list-21232))
           (let ((t-21233
                   (bound-id=?-4371 x-21231 (car list-21232))))
             (if t-21233
               t-21233
               (bound-id-member?-4374 x-21231 (cdr list-21232))))
           #f)))
     (source-wrap-4376
       (lambda (x-21411 w-21412 s-21413 defmod-21414)
         (let ((x-21418
                 (begin
                   (if (if (pair? x-21411) s-21413 #f)
                     (set-source-properties! x-21411 s-21413))
                   x-21411)))
           (if (if (null? (car w-21412))
                 (null? (cdr w-21412))
                 #f)
             x-21418
             (if (if (vector? x-21418)
                   (if (= (vector-length x-21418) 4)
                     (eq? (vector-ref x-21418 0) 'syntax-object)
                     #f)
                   #f)
               (let ((expression-21450 (vector-ref x-21418 1))
                     (wrap-21451
                       (let ((w2-21459 (vector-ref x-21418 2)))
                         (let ((m1-21460 (car w-21412))
                               (s1-21461 (cdr w-21412)))
                           (if (null? m1-21460)
                             (if (null? s1-21461)
                               w2-21459
                               (cons (car w2-21459)
                                     (let ((m2-21476 (cdr w2-21459)))
                                       (if (null? m2-21476)
                                         s1-21461
                                         (append s1-21461 m2-21476)))))
                             (cons (let ((m2-21484 (car w2-21459)))
                                     (if (null? m2-21484)
                                       m1-21460
                                       (append m1-21460 m2-21484)))
                                   (let ((m2-21492 (cdr w2-21459)))
                                     (if (null? m2-21492)
                                       s1-21461
                                       (append s1-21461 m2-21492))))))))
                     (module-21452 (vector-ref x-21418 3)))
                 (vector
                   'syntax-object
                   expression-21450
                   wrap-21451
                   module-21452))
               (if (null? x-21418)
                 x-21418
                 (vector
                   'syntax-object
                   x-21418
                   w-21412
                   defmod-21414)))))))
     (expand-sequence-4377
       (lambda (body-37161 r-37162 w-37163 s-37164 mod-37165)
         (build-sequence-4328
           s-37164
           (letrec*
             ((dobody-37253
                (lambda (body-37336 r-37337 w-37338 mod-37339)
                  (if (null? body-37336)
                    '()
                    (let ((first-37340
                            (expand-4382
                              (car body-37336)
                              r-37337
                              w-37338
                              mod-37339)))
                      (cons first-37340
                            (dobody-37253
                              (cdr body-37336)
                              r-37337
                              w-37338
                              mod-37339)))))))
             (dobody-37253
               body-37161
               r-37162
               w-37163
               mod-37165)))))
     (expand-top-sequence-4378
       (lambda (body-21521
                r-21522
                w-21523
                s-21524
                m-21525
                esew-21526
                mod-21527)
         (let ((r-21528
                 (cons '("placeholder" placeholder) r-21522)))
           (let ((ribcage-21529 (vector 'ribcage '() '() '())))
             (let ((w-21530
                     (cons (car w-21523)
                           (cons ribcage-21529 (cdr w-21523)))))
               (letrec*
                 ((record-definition!-21531
                    (lambda (id-24931 var-24932)
                      (let ((mod-24933
                              (cons 'hygiene (module-name (current-module)))))
                        (let ((label-24939
                                (cons (vector-ref id-24931 3)
                                      (if (if (vector? var-24932)
                                            (if (= (vector-length var-24932) 4)
                                              (eq? (vector-ref var-24932 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (let ((expression-25001
                                                (vector-ref var-24932 1))
                                              (wrap-25002
                                                (let ((w2-25012
                                                        (vector-ref
                                                          var-24932
                                                          2)))
                                                  (cons (let ((m2-25019
                                                                (car w2-25012)))
                                                          (if (null? m2-25019)
                                                            '(top)
                                                            (append
                                                              '(top)
                                                              m2-25019)))
                                                        (let ((m2-25028
                                                                (cdr w2-25012)))
                                                          (if (null? m2-25028)
                                                            '()
                                                            (append
                                                              '()
                                                              m2-25028))))))
                                              (module-25003
                                                (vector-ref var-24932 3)))
                                          (vector
                                            'syntax-object
                                            expression-25001
                                            wrap-25002
                                            module-25003))
                                        (if (null? var-24932)
                                          var-24932
                                          (vector
                                            'syntax-object
                                            var-24932
                                            '((top))
                                            mod-24933))))))
                          (begin
                            (let ((update-24942
                                    (cons (vector-ref id-24931 1)
                                          (vector-ref ribcage-21529 1))))
                              (vector-set! ribcage-21529 1 update-24942))
                            (let ((update-24957
                                    (cons (car (vector-ref id-24931 2))
                                          (vector-ref ribcage-21529 2))))
                              (vector-set! ribcage-21529 2 update-24957))
                            (let ((update-24972
                                    (cons label-24939
                                          (vector-ref ribcage-21529 3))))
                              (vector-set! ribcage-21529 3 update-24972)))))))
                  (parse-21534
                    (lambda (body-21729
                             r-21730
                             w-21731
                             s-21732
                             m-21733
                             esew-21734
                             mod-21735)
                      (letrec*
                        ((lp-21736
                           (lambda (body-21819 exps-21820)
                             (if (null? body-21819)
                               exps-21820
                               (lp-21736
                                 (cdr body-21819)
                                 (append
                                   (parse1-21535
                                     (car body-21819)
                                     r-21730
                                     w-21731
                                     s-21732
                                     m-21733
                                     esew-21734
                                     mod-21735)
                                   exps-21820))))))
                        (lp-21736 body-21729 '()))))
                  (parse1-21535
                    (lambda (x-21890
                             r-21891
                             w-21892
                             s-21893
                             m-21894
                             esew-21895
                             mod-21896)
                      (call-with-values
                        (lambda ()
                          (syntax-type-4381
                            x-21890
                            r-21891
                            w-21892
                            (source-annotation-4340 x-21890)
                            ribcage-21529
                            mod-21896
                            #f))
                        (lambda (type-22082
                                 value-22083
                                 form-22084
                                 e-22085
                                 w-22086
                                 s-22087
                                 mod-22088)
                          (if (eqv? type-22082 'define-form)
                            (let ((id-22096
                                    (if (if (null? (car w-22086))
                                          (null? (cdr w-22086))
                                          #f)
                                      value-22083
                                      (if (if (vector? value-22083)
                                            (if (= (vector-length value-22083)
                                                   4)
                                              (eq? (vector-ref value-22083 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (let ((expression-22146
                                                (vector-ref value-22083 1))
                                              (wrap-22147
                                                (let ((w2-22157
                                                        (vector-ref
                                                          value-22083
                                                          2)))
                                                  (let ((m1-22158
                                                          (car w-22086))
                                                        (s1-22159
                                                          (cdr w-22086)))
                                                    (if (null? m1-22158)
                                                      (if (null? s1-22159)
                                                        w2-22157
                                                        (cons (car w2-22157)
                                                              (let ((m2-22176
                                                                      (cdr w2-22157)))
                                                                (if (null? m2-22176)
                                                                  s1-22159
                                                                  (append
                                                                    s1-22159
                                                                    m2-22176)))))
                                                      (cons (let ((m2-22184
                                                                    (car w2-22157)))
                                                              (if (null? m2-22184)
                                                                m1-22158
                                                                (append
                                                                  m1-22158
                                                                  m2-22184)))
                                                            (let ((m2-22192
                                                                    (cdr w2-22157)))
                                                              (if (null? m2-22192)
                                                                s1-22159
                                                                (append
                                                                  s1-22159
                                                                  m2-22192))))))))
                                              (module-22148
                                                (vector-ref value-22083 3)))
                                          (vector
                                            'syntax-object
                                            expression-22146
                                            wrap-22147
                                            module-22148))
                                        (if (null? value-22083)
                                          value-22083
                                          (vector
                                            'syntax-object
                                            value-22083
                                            w-22086
                                            mod-22088))))))
                              (begin
                                (string-append
                                  "l-"
                                  (session-id-4307)
                                  (symbol->string (gensym "-")))
                                (let ((var-22098
                                        (if (not (equal?
                                                   (car (vector-ref
                                                          id-22096
                                                          2))
                                                   '(top)))
                                          (symbol-append
                                            (vector-ref id-22096 1)
                                            '-
                                            (string->symbol
                                              (number->string
                                                (hash (syntax->datum x-21890)
                                                      most-positive-fixnum)
                                                16)))
                                          (vector-ref id-22096 1))))
                                  (begin
                                    (record-definition!-21531
                                      id-22096
                                      var-22098)
                                    (list (if (eq? m-21894 'c&e)
                                            (let ((x-22318
                                                    (build-global-definition-4321
                                                      s-22087
                                                      var-22098
                                                      (expand-4382
                                                        e-22085
                                                        r-21891
                                                        w-22086
                                                        mod-22088))))
                                              (begin
                                                (top-level-eval-hook-4305
                                                  x-22318
                                                  mod-22088)
                                                (lambda () x-22318)))
                                            (lambda ()
                                              (build-global-definition-4321
                                                s-22087
                                                var-22098
                                                (expand-4382
                                                  e-22085
                                                  r-21891
                                                  w-22086
                                                  mod-22088)))))))))
                            (if (if (eqv? type-22082 'define-syntax-form)
                                  #t
                                  (eqv? type-22082
                                        'define-syntax-parameter-form))
                              (let ((id-22815
                                      (if (if (null? (car w-22086))
                                            (null? (cdr w-22086))
                                            #f)
                                        value-22083
                                        (if (if (vector? value-22083)
                                              (if (= (vector-length
                                                       value-22083)
                                                     4)
                                                (eq? (vector-ref value-22083 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (let ((expression-22865
                                                  (vector-ref value-22083 1))
                                                (wrap-22866
                                                  (let ((w2-22876
                                                          (vector-ref
                                                            value-22083
                                                            2)))
                                                    (let ((m1-22877
                                                            (car w-22086))
                                                          (s1-22878
                                                            (cdr w-22086)))
                                                      (if (null? m1-22877)
                                                        (if (null? s1-22878)
                                                          w2-22876
                                                          (cons (car w2-22876)
                                                                (let ((m2-22895
                                                                        (cdr w2-22876)))
                                                                  (if (null? m2-22895)
                                                                    s1-22878
                                                                    (append
                                                                      s1-22878
                                                                      m2-22895)))))
                                                        (cons (let ((m2-22903
                                                                      (car w2-22876)))
                                                                (if (null? m2-22903)
                                                                  m1-22877
                                                                  (append
                                                                    m1-22877
                                                                    m2-22903)))
                                                              (let ((m2-22911
                                                                      (cdr w2-22876)))
                                                                (if (null? m2-22911)
                                                                  s1-22878
                                                                  (append
                                                                    s1-22878
                                                                    m2-22911))))))))
                                                (module-22867
                                                  (vector-ref value-22083 3)))
                                            (vector
                                              'syntax-object
                                              expression-22865
                                              wrap-22866
                                              module-22867))
                                          (if (null? value-22083)
                                            value-22083
                                            (vector
                                              'syntax-object
                                              value-22083
                                              w-22086
                                              mod-22088))))))
                                (begin
                                  (string-append
                                    "l-"
                                    (session-id-4307)
                                    (symbol->string (gensym "-")))
                                  (let ((var-22817
                                          (if (not (equal?
                                                     (car (vector-ref
                                                            id-22815
                                                            2))
                                                     '(top)))
                                            (symbol-append
                                              (vector-ref id-22815 1)
                                              '-
                                              (string->symbol
                                                (number->string
                                                  (hash (syntax->datum x-21890)
                                                        most-positive-fixnum)
                                                  16)))
                                            (vector-ref id-22815 1))))
                                    (begin
                                      (record-definition!-21531
                                        id-22815
                                        var-22817)
                                      (if (eqv? m-21894 'c)
                                        (if (memq 'compile esew-21895)
                                          (let ((e-23044
                                                  (expand-install-global-4379
                                                    var-22817
                                                    type-22082
                                                    (expand-4382
                                                      e-22085
                                                      r-21891
                                                      w-22086
                                                      mod-22088))))
                                            (begin
                                              (top-level-eval-hook-4305
                                                e-23044
                                                mod-22088)
                                              (if (memq 'load esew-21895)
                                                (list (lambda () e-23044))
                                                '())))
                                          (if (memq 'load esew-21895)
                                            (list (lambda ()
                                                    (expand-install-global-4379
                                                      var-22817
                                                      type-22082
                                                      (expand-4382
                                                        e-22085
                                                        r-21891
                                                        w-22086
                                                        mod-22088))))
                                            '()))
                                        (if (eqv? m-21894 'c&e)
                                          (let ((e-23550
                                                  (expand-install-global-4379
                                                    var-22817
                                                    type-22082
                                                    (expand-4382
                                                      e-22085
                                                      r-21891
                                                      w-22086
                                                      mod-22088))))
                                            (begin
                                              (top-level-eval-hook-4305
                                                e-23550
                                                mod-22088)
                                              (list (lambda () e-23550))))
                                          (begin
                                            (if (memq 'eval esew-21895)
                                              (top-level-eval-hook-4305
                                                (expand-install-global-4379
                                                  var-22817
                                                  type-22082
                                                  (expand-4382
                                                    e-22085
                                                    r-21891
                                                    w-22086
                                                    mod-22088))
                                                mod-22088))
                                            '())))))))
                              (if (eqv? type-22082 'begin-form)
                                (let ((tmp-24163
                                        ($sc-dispatch
                                          e-22085
                                          '(_ . each-any))))
                                  (if tmp-24163
                                    (@apply
                                      (lambda (e1-24167)
                                        (parse-21534
                                          e1-24167
                                          r-21891
                                          w-22086
                                          s-22087
                                          m-21894
                                          esew-21895
                                          mod-22088))
                                      tmp-24163)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      e-22085)))
                                (if (eqv? type-22082 'local-syntax-form)
                                  (expand-local-syntax-4387
                                    value-22083
                                    e-22085
                                    r-21891
                                    w-22086
                                    s-22087
                                    mod-22088
                                    (lambda (forms-24213
                                             r-24214
                                             w-24215
                                             s-24216
                                             mod-24217)
                                      (parse-21534
                                        forms-24213
                                        r-24214
                                        w-24215
                                        s-24216
                                        m-21894
                                        esew-21895
                                        mod-24217)))
                                  (if (eqv? type-22082 'eval-when-form)
                                    (let ((tmp-24256
                                            ($sc-dispatch
                                              e-22085
                                              '(_ each-any any . each-any))))
                                      (if tmp-24256
                                        (@apply
                                          (lambda (x-24260 e1-24261 e2-24262)
                                            (let ((when-list-24263
                                                    (parse-when-list-4380
                                                      e-22085
                                                      x-24260))
                                                  (body-24264
                                                    (cons e1-24261 e2-24262)))
                                              (letrec*
                                                ((recurse-24265
                                                   (lambda (m-24851 esew-24852)
                                                     (parse-21534
                                                       body-24264
                                                       r-21891
                                                       w-22086
                                                       s-22087
                                                       m-24851
                                                       esew-24852
                                                       mod-22088))))
                                                (if (eq? m-21894 'e)
                                                  (if (memq 'eval
                                                            when-list-24263)
                                                    (recurse-24265
                                                      (if (memq 'expand
                                                                when-list-24263)
                                                        'c&e
                                                        'e)
                                                      '(eval))
                                                    (begin
                                                      (if (memq 'expand
                                                                when-list-24263)
                                                        (let ((x-24372
                                                                (expand-top-sequence-4378
                                                                  body-24264
                                                                  r-21891
                                                                  w-22086
                                                                  s-22087
                                                                  'e
                                                                  '(eval)
                                                                  mod-22088)))
                                                          (primitive-eval
                                                            x-24372)))
                                                      '()))
                                                  (if (memq 'load
                                                            when-list-24263)
                                                    (if (let ((t-24400
                                                                (memq 'compile
                                                                      when-list-24263)))
                                                          (if t-24400
                                                            t-24400
                                                            (let ((t-24453
                                                                    (memq 'expand
                                                                          when-list-24263)))
                                                              (if t-24453
                                                                t-24453
                                                                (if (eq? m-21894
                                                                         'c&e)
                                                                  (memq 'eval
                                                                        when-list-24263)
                                                                  #f)))))
                                                      (recurse-24265
                                                        'c&e
                                                        '(compile load))
                                                      (if (if (eq? m-21894 'c)
                                                            #t
                                                            (eq? m-21894 'c&e))
                                                        (recurse-24265
                                                          'c
                                                          '(load))
                                                        '()))
                                                    (if (let ((t-24662
                                                                (memq 'compile
                                                                      when-list-24263)))
                                                          (if t-24662
                                                            t-24662
                                                            (let ((t-24715
                                                                    (memq 'expand
                                                                          when-list-24263)))
                                                              (if t-24715
                                                                t-24715
                                                                (if (eq? m-21894
                                                                         'c&e)
                                                                  (memq 'eval
                                                                        when-list-24263)
                                                                  #f)))))
                                                      (begin
                                                        (let ((x-24849
                                                                (expand-top-sequence-4378
                                                                  body-24264
                                                                  r-21891
                                                                  w-22086
                                                                  s-22087
                                                                  'e
                                                                  '(eval)
                                                                  mod-22088)))
                                                          (primitive-eval
                                                            x-24849))
                                                        '())
                                                      '()))))))
                                          tmp-24256)
                                        (syntax-violation
                                          #f
                                          "source expression failed to match any pattern"
                                          e-22085)))
                                    (list (if (eq? m-21894 'c&e)
                                            (let ((x-24922
                                                    (expand-expr-4383
                                                      type-22082
                                                      value-22083
                                                      form-22084
                                                      e-22085
                                                      r-21891
                                                      w-22086
                                                      s-22087
                                                      mod-22088)))
                                              (begin
                                                (primitive-eval x-24922)
                                                (lambda () x-24922)))
                                            (lambda ()
                                              (expand-expr-4383
                                                type-22082
                                                value-22083
                                                form-22084
                                                e-22085
                                                r-21891
                                                w-22086
                                                s-22087
                                                mod-22088))))))))))))))
                 (let ((exps-21536
                         (map (lambda (x-21659) (x-21659))
                              (reverse
                                (parse-21534
                                  body-21521
                                  r-21528
                                  w-21530
                                  s-21524
                                  m-21525
                                  esew-21526
                                  mod-21527)))))
                   (if (null? exps-21536)
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 0)
                       s-21524)
                     (build-sequence-4328 s-21524 exps-21536)))))))))
     (expand-install-global-4379
       (lambda (name-25050 type-25051 e-25052)
         (let ((exp-25058
                 (let ((args-25069
                         (if (eq? type-25051 'define-syntax-parameter-form)
                           (list (make-struct/no-tail
                                   (vector-ref %expanded-vtables 1)
                                   #f
                                   name-25050)
                                 (make-struct/no-tail
                                   (vector-ref %expanded-vtables 1)
                                   #f
                                   'syntax-parameter)
                                 (let ((args-25092 (list e-25052)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 12)
                                     #f
                                     'list
                                     args-25092)))
                           (list (make-struct/no-tail
                                   (vector-ref %expanded-vtables 1)
                                   #f
                                   name-25050)
                                 (make-struct/no-tail
                                   (vector-ref %expanded-vtables 1)
                                   #f
                                   'macro)
                                 e-25052))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 12)
                     #f
                     'make-syntax-transformer
                     args-25069))))
           (begin
             (if (if (struct? exp-25058)
                   (eq? (struct-vtable exp-25058)
                        (vector-ref %expanded-vtables 14))
                   #f)
               (let ((meta-25119 (struct-ref exp-25058 1)))
                 (if (not (assq 'name meta-25119))
                   (let ((v-25126
                           (cons (cons 'name name-25050) meta-25119)))
                     (struct-set! exp-25058 1 v-25126)))))
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #f
               name-25050
               exp-25058)))))
     (parse-when-list-4380
       (lambda (e-25137 when-list-25138)
         (let ((result-25139 (strip-4395 when-list-25138 '(()))))
           (letrec*
             ((lp-25140
                (lambda (l-25206)
                  (if (null? l-25206)
                    result-25139
                    (if (let ((t-25208 (car l-25206)))
                          (if (eq? t-25208 'compile)
                            #t
                            (if (eq? t-25208 'load)
                              #t
                              (if (eq? t-25208 'eval)
                                #t
                                (eq? t-25208 'expand)))))
                      (lp-25140 (cdr l-25206))
                      (syntax-violation
                        'eval-when
                        "invalid situation"
                        e-25137
                        (car l-25206)))))))
             (lp-25140 result-25139)))))
     (syntax-type-4381
       (lambda (e-25210
                r-25211
                w-25212
                s-25213
                rib-25214
                mod-25215
                for-car?-25216)
         (if (symbol? e-25210)
           (call-with-values
             (lambda ()
               (resolve-identifier-4367
                 e-25210
                 w-25212
                 r-25211
                 mod-25215
                 #t))
             (lambda (type-25219 value-25220 mod*-25221)
               (if (eqv? type-25219 'macro)
                 (if for-car?-25216
                   (values
                     type-25219
                     value-25220
                     e-25210
                     e-25210
                     w-25212
                     s-25213
                     mod-25215)
                   (syntax-type-4381
                     (expand-macro-4385
                       value-25220
                       e-25210
                       r-25211
                       w-25212
                       s-25213
                       rib-25214
                       mod-25215)
                     r-25211
                     '(())
                     s-25213
                     rib-25214
                     mod-25215
                     #f))
                 (if (eqv? type-25219 'global)
                   (values
                     type-25219
                     value-25220
                     e-25210
                     value-25220
                     w-25212
                     s-25213
                     mod*-25221)
                   (values
                     type-25219
                     value-25220
                     e-25210
                     e-25210
                     w-25212
                     s-25213
                     mod-25215)))))
           (if (pair? e-25210)
             (let ((first-25237 (car e-25210)))
               (call-with-values
                 (lambda ()
                   (syntax-type-4381
                     first-25237
                     r-25211
                     w-25212
                     s-25213
                     rib-25214
                     mod-25215
                     #t))
                 (lambda (ftype-25239
                          fval-25240
                          fform-25241
                          fe-25242
                          fw-25243
                          fs-25244
                          fmod-25245)
                   (if (eqv? ftype-25239 'lexical)
                     (values
                       'lexical-call
                       fval-25240
                       e-25210
                       e-25210
                       w-25212
                       s-25213
                       mod-25215)
                     (if (eqv? ftype-25239 'global)
                       (values
                         'global-call
                         (vector
                           'syntax-object
                           fval-25240
                           w-25212
                           fmod-25245)
                         e-25210
                         e-25210
                         w-25212
                         s-25213
                         mod-25215)
                       (if (eqv? ftype-25239 'macro)
                         (syntax-type-4381
                           (expand-macro-4385
                             fval-25240
                             e-25210
                             r-25211
                             w-25212
                             s-25213
                             rib-25214
                             mod-25215)
                           r-25211
                           '(())
                           s-25213
                           rib-25214
                           mod-25215
                           for-car?-25216)
                         (if (eqv? ftype-25239 'module-ref)
                           (call-with-values
                             (lambda () (fval-25240 e-25210 r-25211 w-25212))
                             (lambda (e-25279
                                      r-25280
                                      w-25281
                                      s-25282
                                      mod-25283)
                               (syntax-type-4381
                                 e-25279
                                 r-25280
                                 w-25281
                                 s-25282
                                 rib-25214
                                 mod-25283
                                 for-car?-25216)))
                           (if (eqv? ftype-25239 'core)
                             (values
                               'core-form
                               fval-25240
                               e-25210
                               e-25210
                               w-25212
                               s-25213
                               mod-25215)
                             (if (eqv? ftype-25239 'local-syntax)
                               (values
                                 'local-syntax-form
                                 fval-25240
                                 e-25210
                                 e-25210
                                 w-25212
                                 s-25213
                                 mod-25215)
                               (if (eqv? ftype-25239 'begin)
                                 (values
                                   'begin-form
                                   #f
                                   e-25210
                                   e-25210
                                   w-25212
                                   s-25213
                                   mod-25215)
                                 (if (eqv? ftype-25239 'eval-when)
                                   (values
                                     'eval-when-form
                                     #f
                                     e-25210
                                     e-25210
                                     w-25212
                                     s-25213
                                     mod-25215)
                                   (if (eqv? ftype-25239 'define)
                                     (let ((tmp-25315
                                             ($sc-dispatch
                                               e-25210
                                               '(_ any any))))
                                       (if (if tmp-25315
                                             (@apply
                                               (lambda (name-25319 val-25320)
                                                 (if (symbol? name-25319)
                                                   #t
                                                   (if (if (vector? name-25319)
                                                         (if (= (vector-length
                                                                  name-25319)
                                                                4)
                                                           (eq? (vector-ref
                                                                  name-25319
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         name-25319
                                                         1))
                                                     #f)))
                                               tmp-25315)
                                             #f)
                                         (@apply
                                           (lambda (name-25347 val-25348)
                                             (values
                                               'define-form
                                               name-25347
                                               e-25210
                                               val-25348
                                               w-25212
                                               s-25213
                                               mod-25215))
                                           tmp-25315)
                                         (let ((tmp-25349
                                                 ($sc-dispatch
                                                   e-25210
                                                   '(_ (any . any)
                                                       any
                                                       .
                                                       each-any))))
                                           (if (if tmp-25349
                                                 (@apply
                                                   (lambda (name-25353
                                                            args-25354
                                                            e1-25355
                                                            e2-25356)
                                                     (if (if (symbol?
                                                               name-25353)
                                                           #t
                                                           (if (if (vector?
                                                                     name-25353)
                                                                 (if (= (vector-length
                                                                          name-25353)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          name-25353
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 name-25353
                                                                 1))
                                                             #f))
                                                       (valid-bound-ids?-4372
                                                         (lambda-var-list-4397
                                                           args-25354))
                                                       #f))
                                                   tmp-25349)
                                                 #f)
                                             (@apply
                                               (lambda (name-25819
                                                        args-25820
                                                        e1-25821
                                                        e2-25822)
                                                 (values
                                                   'define-form
                                                   (if (if (null? (car w-25212))
                                                         (null? (cdr w-25212))
                                                         #f)
                                                     name-25819
                                                     (if (if (vector?
                                                               name-25819)
                                                           (if (= (vector-length
                                                                    name-25819)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    name-25819
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (let ((expression-25852
                                                               (vector-ref
                                                                 name-25819
                                                                 1))
                                                             (wrap-25853
                                                               (let ((w2-25863
                                                                       (vector-ref
                                                                         name-25819
                                                                         2)))
                                                                 (let ((m1-25864
                                                                         (car w-25212))
                                                                       (s1-25865
                                                                         (cdr w-25212)))
                                                                   (if (null? m1-25864)
                                                                     (if (null? s1-25865)
                                                                       w2-25863
                                                                       (cons (car w2-25863)
                                                                             (let ((m2-25882
                                                                                     (cdr w2-25863)))
                                                                               (if (null? m2-25882)
                                                                                 s1-25865
                                                                                 (append
                                                                                   s1-25865
                                                                                   m2-25882)))))
                                                                     (cons (let ((m2-25890
                                                                                   (car w2-25863)))
                                                                             (if (null? m2-25890)
                                                                               m1-25864
                                                                               (append
                                                                                 m1-25864
                                                                                 m2-25890)))
                                                                           (let ((m2-25898
                                                                                   (cdr w2-25863)))
                                                                             (if (null? m2-25898)
                                                                               s1-25865
                                                                               (append
                                                                                 s1-25865
                                                                                 m2-25898))))))))
                                                             (module-25854
                                                               (vector-ref
                                                                 name-25819
                                                                 3)))
                                                         (vector
                                                           'syntax-object
                                                           expression-25852
                                                           wrap-25853
                                                           module-25854))
                                                       (if (null? name-25819)
                                                         name-25819
                                                         (vector
                                                           'syntax-object
                                                           name-25819
                                                           w-25212
                                                           mod-25215))))
                                                   (if (if (null? (car w-25212))
                                                         (null? (cdr w-25212))
                                                         #f)
                                                     e-25210
                                                     (if (if (vector? e-25210)
                                                           (if (= (vector-length
                                                                    e-25210)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    e-25210
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (let ((expression-25950
                                                               (vector-ref
                                                                 e-25210
                                                                 1))
                                                             (wrap-25951
                                                               (let ((w2-25961
                                                                       (vector-ref
                                                                         e-25210
                                                                         2)))
                                                                 (let ((m1-25962
                                                                         (car w-25212))
                                                                       (s1-25963
                                                                         (cdr w-25212)))
                                                                   (if (null? m1-25962)
                                                                     (if (null? s1-25963)
                                                                       w2-25961
                                                                       (cons (car w2-25961)
                                                                             (let ((m2-25980
                                                                                     (cdr w2-25961)))
                                                                               (if (null? m2-25980)
                                                                                 s1-25963
                                                                                 (append
                                                                                   s1-25963
                                                                                   m2-25980)))))
                                                                     (cons (let ((m2-25988
                                                                                   (car w2-25961)))
                                                                             (if (null? m2-25988)
                                                                               m1-25962
                                                                               (append
                                                                                 m1-25962
                                                                                 m2-25988)))
                                                                           (let ((m2-25996
                                                                                   (cdr w2-25961)))
                                                                             (if (null? m2-25996)
                                                                               s1-25963
                                                                               (append
                                                                                 s1-25963
                                                                                 m2-25996))))))))
                                                             (module-25952
                                                               (vector-ref
                                                                 e-25210
                                                                 3)))
                                                         (vector
                                                           'syntax-object
                                                           expression-25950
                                                           wrap-25951
                                                           module-25952))
                                                       (if (null? e-25210)
                                                         e-25210
                                                         (vector
                                                           'syntax-object
                                                           e-25210
                                                           w-25212
                                                           mod-25215))))
                                                   (let ((e-26022
                                                           (cons '#(syntax-object
                                                                    lambda
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(name
                                                                         args
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-1959"
                                                                         "l-*-1960"
                                                                         "l-*-1961"
                                                                         "l-*-1962"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(key)
                                                                       #((m-*-1924
                                                                           top))
                                                                       #("l-*-1925"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(ftype
                                                                         fval
                                                                         fform
                                                                         fe
                                                                         fw
                                                                         fs
                                                                         fmod)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-1917"
                                                                         "l-*-1918"
                                                                         "l-*-1919"
                                                                         "l-*-1920"
                                                                         "l-*-1921"
                                                                         "l-*-1922"
                                                                         "l-*-1923"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(first)
                                                                       #((top))
                                                                       #("l-*-1908"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(e
                                                                         r
                                                                         w
                                                                         s
                                                                         rib
                                                                         mod
                                                                         for-car?)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-1890"
                                                                         "l-*-1891"
                                                                         "l-*-1892"
                                                                         "l-*-1893"
                                                                         "l-*-1894"
                                                                         "l-*-1895"
                                                                         "l-*-1896"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-call
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-primcall
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-call
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         session-id
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-seq
                                                                         make-primcall
                                                                         make-call
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-478"
                                                                        "l-*-476"
                                                                        "l-*-474"
                                                                        "l-*-472"
                                                                        "l-*-470"
                                                                        "l-*-468"
                                                                        "l-*-466"
                                                                        "l-*-464"
                                                                        "l-*-462"
                                                                        "l-*-460"
                                                                        "l-*-458"
                                                                        "l-*-456"
                                                                        "l-*-454"
                                                                        "l-*-452"
                                                                        "l-*-450"
                                                                        "l-*-448"
                                                                        "l-*-446"
                                                                        "l-*-444"
                                                                        "l-*-442"
                                                                        "l-*-440"
                                                                        "l-*-438"
                                                                        "l-*-436"
                                                                        "l-*-434"
                                                                        "l-*-432"
                                                                        "l-*-430"
                                                                        "l-*-428"
                                                                        "l-*-426"
                                                                        "l-*-424"
                                                                        "l-*-422"
                                                                        "l-*-420"
                                                                        "l-*-418"
                                                                        "l-*-416"
                                                                        "l-*-414"
                                                                        "l-*-412"
                                                                        "l-*-410"
                                                                        "l-*-408"
                                                                        "l-*-406"
                                                                        "l-*-404"
                                                                        "l-*-402"
                                                                        "l-*-401"
                                                                        "l-*-399"
                                                                        "l-*-396"
                                                                        "l-*-395"
                                                                        "l-*-394"
                                                                        "l-*-392"
                                                                        "l-*-391"
                                                                        "l-*-389"
                                                                        "l-*-387"
                                                                        "l-*-385"
                                                                        "l-*-383"
                                                                        "l-*-381"
                                                                        "l-*-379"
                                                                        "l-*-377"
                                                                        "l-*-375"
                                                                        "l-*-372"
                                                                        "l-*-370"
                                                                        "l-*-369"
                                                                        "l-*-367"
                                                                        "l-*-365"
                                                                        "l-*-363"
                                                                        "l-*-361"
                                                                        "l-*-360"
                                                                        "l-*-359"
                                                                        "l-*-358"
                                                                        "l-*-356"
                                                                        "l-*-355"
                                                                        "l-*-352"
                                                                        "l-*-350"
                                                                        "l-*-348"
                                                                        "l-*-346"
                                                                        "l-*-344"
                                                                        "l-*-342"
                                                                        "l-*-341"
                                                                        "l-*-340"
                                                                        "l-*-338"
                                                                        "l-*-336"
                                                                        "l-*-335"
                                                                        "l-*-332"
                                                                        "l-*-331"
                                                                        "l-*-329"
                                                                        "l-*-327"
                                                                        "l-*-325"
                                                                        "l-*-323"
                                                                        "l-*-321"
                                                                        "l-*-319"
                                                                        "l-*-317"
                                                                        "l-*-315"
                                                                        "l-*-313"
                                                                        "l-*-310"
                                                                        "l-*-308"
                                                                        "l-*-306"
                                                                        "l-*-304"
                                                                        "l-*-302"
                                                                        "l-*-300"
                                                                        "l-*-298"
                                                                        "l-*-296"
                                                                        "l-*-294"
                                                                        "l-*-292"
                                                                        "l-*-290"
                                                                        "l-*-288"
                                                                        "l-*-286"
                                                                        "l-*-284"
                                                                        "l-*-282"
                                                                        "l-*-280"
                                                                        "l-*-278"
                                                                        "l-*-276"
                                                                        "l-*-274"
                                                                        "l-*-272"
                                                                        "l-*-270"
                                                                        "l-*-268"
                                                                        "l-*-266"
                                                                        "l-*-264"
                                                                        "l-*-262"
                                                                        "l-*-260"
                                                                        "l-*-258"
                                                                        "l-*-257"
                                                                        "l-*-256"
                                                                        "l-*-255"
                                                                        "l-*-254"
                                                                        "l-*-252"
                                                                        "l-*-250"
                                                                        "l-*-248"
                                                                        "l-*-245"
                                                                        "l-*-243"
                                                                        "l-*-241"
                                                                        "l-*-239"
                                                                        "l-*-237"
                                                                        "l-*-235"
                                                                        "l-*-233"
                                                                        "l-*-231"
                                                                        "l-*-229"
                                                                        "l-*-227"
                                                                        "l-*-225"
                                                                        "l-*-223"
                                                                        "l-*-221"
                                                                        "l-*-219"
                                                                        "l-*-217"
                                                                        "l-*-215"
                                                                        "l-*-213"
                                                                        "l-*-211"
                                                                        "l-*-209"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-47"
                                                                        "l-*-46"
                                                                        "l-*-45"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ()))
                                                                    (hygiene
                                                                      guile))
                                                                 (let ((x-26026
                                                                         (cons args-25820
                                                                               (cons e1-25821
                                                                                     e2-25822))))
                                                                   (if (if (null? (car w-25212))
                                                                         (null? (cdr w-25212))
                                                                         #f)
                                                                     x-26026
                                                                     (if (if (vector?
                                                                               x-26026)
                                                                           (if (= (vector-length
                                                                                    x-26026)
                                                                                  4)
                                                                             (eq? (vector-ref
                                                                                    x-26026
                                                                                    0)
                                                                                  'syntax-object)
                                                                             #f)
                                                                           #f)
                                                                       (let ((expression-26044
                                                                               (vector-ref
                                                                                 x-26026
                                                                                 1))
                                                                             (wrap-26045
                                                                               (let ((w2-26053
                                                                                       (vector-ref
                                                                                         x-26026
                                                                                         2)))
                                                                                 (let ((m1-26054
                                                                                         (car w-25212))
                                                                                       (s1-26055
                                                                                         (cdr w-25212)))
                                                                                   (if (null? m1-26054)
                                                                                     (if (null? s1-26055)
                                                                                       w2-26053
                                                                                       (cons (car w2-26053)
                                                                                             (let ((m2-26070
                                                                                                     (cdr w2-26053)))
                                                                                               (if (null? m2-26070)
                                                                                                 s1-26055
                                                                                                 (append
                                                                                                   s1-26055
                                                                                                   m2-26070)))))
                                                                                     (cons (let ((m2-26078
                                                                                                   (car w2-26053)))
                                                                                             (if (null? m2-26078)
                                                                                               m1-26054
                                                                                               (append
                                                                                                 m1-26054
                                                                                                 m2-26078)))
                                                                                           (let ((m2-26086
                                                                                                   (cdr w2-26053)))
                                                                                             (if (null? m2-26086)
                                                                                               s1-26055
                                                                                               (append
                                                                                                 s1-26055
                                                                                                 m2-26086))))))))
                                                                             (module-26046
                                                                               (vector-ref
                                                                                 x-26026
                                                                                 3)))
                                                                         (vector
                                                                           'syntax-object
                                                                           expression-26044
                                                                           wrap-26045
                                                                           module-26046))
                                                                       (if (null? x-26026)
                                                                         x-26026
                                                                         (vector
                                                                           'syntax-object
                                                                           x-26026
                                                                           w-25212
                                                                           mod-25215))))))))
                                                     (begin
                                                       (if (if (pair? e-26022)
                                                             s-25213
                                                             #f)
                                                         (set-source-properties!
                                                           e-26022
                                                           s-25213))
                                                       e-26022))
                                                   '(())
                                                   s-25213
                                                   mod-25215))
                                               tmp-25349)
                                             (let ((tmp-26105
                                                     ($sc-dispatch
                                                       e-25210
                                                       '(_ any))))
                                               (if (if tmp-26105
                                                     (@apply
                                                       (lambda (name-26109)
                                                         (if (symbol?
                                                               name-26109)
                                                           #t
                                                           (if (if (vector?
                                                                     name-26109)
                                                                 (if (= (vector-length
                                                                          name-26109)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          name-26109
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 name-26109
                                                                 1))
                                                             #f)))
                                                       tmp-26105)
                                                     #f)
                                                 (@apply
                                                   (lambda (name-26136)
                                                     (values
                                                       'define-form
                                                       (if (if (null? (car w-25212))
                                                             (null? (cdr w-25212))
                                                             #f)
                                                         name-26136
                                                         (if (if (vector?
                                                                   name-26136)
                                                               (if (= (vector-length
                                                                        name-26136)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        name-26136
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (let ((expression-26166
                                                                   (vector-ref
                                                                     name-26136
                                                                     1))
                                                                 (wrap-26167
                                                                   (let ((w2-26177
                                                                           (vector-ref
                                                                             name-26136
                                                                             2)))
                                                                     (let ((m1-26178
                                                                             (car w-25212))
                                                                           (s1-26179
                                                                             (cdr w-25212)))
                                                                       (if (null? m1-26178)
                                                                         (if (null? s1-26179)
                                                                           w2-26177
                                                                           (cons (car w2-26177)
                                                                                 (let ((m2-26196
                                                                                         (cdr w2-26177)))
                                                                                   (if (null? m2-26196)
                                                                                     s1-26179
                                                                                     (append
                                                                                       s1-26179
                                                                                       m2-26196)))))
                                                                         (cons (let ((m2-26204
                                                                                       (car w2-26177)))
                                                                                 (if (null? m2-26204)
                                                                                   m1-26178
                                                                                   (append
                                                                                     m1-26178
                                                                                     m2-26204)))
                                                                               (let ((m2-26212
                                                                                       (cdr w2-26177)))
                                                                                 (if (null? m2-26212)
                                                                                   s1-26179
                                                                                   (append
                                                                                     s1-26179
                                                                                     m2-26212))))))))
                                                                 (module-26168
                                                                   (vector-ref
                                                                     name-26136
                                                                     3)))
                                                             (vector
                                                               'syntax-object
                                                               expression-26166
                                                               wrap-26167
                                                               module-26168))
                                                           (if (null? name-26136)
                                                             name-26136
                                                             (vector
                                                               'syntax-object
                                                               name-26136
                                                               w-25212
                                                               mod-25215))))
                                                       (if (if (null? (car w-25212))
                                                             (null? (cdr w-25212))
                                                             #f)
                                                         e-25210
                                                         (if (if (vector?
                                                                   e-25210)
                                                               (if (= (vector-length
                                                                        e-25210)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        e-25210
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (let ((expression-26264
                                                                   (vector-ref
                                                                     e-25210
                                                                     1))
                                                                 (wrap-26265
                                                                   (let ((w2-26275
                                                                           (vector-ref
                                                                             e-25210
                                                                             2)))
                                                                     (let ((m1-26276
                                                                             (car w-25212))
                                                                           (s1-26277
                                                                             (cdr w-25212)))
                                                                       (if (null? m1-26276)
                                                                         (if (null? s1-26277)
                                                                           w2-26275
                                                                           (cons (car w2-26275)
                                                                                 (let ((m2-26294
                                                                                         (cdr w2-26275)))
                                                                                   (if (null? m2-26294)
                                                                                     s1-26277
                                                                                     (append
                                                                                       s1-26277
                                                                                       m2-26294)))))
                                                                         (cons (let ((m2-26302
                                                                                       (car w2-26275)))
                                                                                 (if (null? m2-26302)
                                                                                   m1-26276
                                                                                   (append
                                                                                     m1-26276
                                                                                     m2-26302)))
                                                                               (let ((m2-26310
                                                                                       (cdr w2-26275)))
                                                                                 (if (null? m2-26310)
                                                                                   s1-26277
                                                                                   (append
                                                                                     s1-26277
                                                                                     m2-26310))))))))
                                                                 (module-26266
                                                                   (vector-ref
                                                                     e-25210
                                                                     3)))
                                                             (vector
                                                               'syntax-object
                                                               expression-26264
                                                               wrap-26265
                                                               module-26266))
                                                           (if (null? e-25210)
                                                             e-25210
                                                             (vector
                                                               'syntax-object
                                                               e-25210
                                                               w-25212
                                                               mod-25215))))
                                                       '(#(syntax-object
                                                           if
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-1972"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(key)
                                                              #((m-*-1924 top))
                                                              #("l-*-1925"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1917"
                                                                "l-*-1918"
                                                                "l-*-1919"
                                                                "l-*-1920"
                                                                "l-*-1921"
                                                                "l-*-1922"
                                                                "l-*-1923"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-1908"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1890"
                                                                "l-*-1891"
                                                                "l-*-1892"
                                                                "l-*-1893"
                                                                "l-*-1894"
                                                                "l-*-1895"
                                                                "l-*-1896"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-call
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-primcall
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-call
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-seq
                                                                make-primcall
                                                                make-call
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-478"
                                                               "l-*-476"
                                                               "l-*-474"
                                                               "l-*-472"
                                                               "l-*-470"
                                                               "l-*-468"
                                                               "l-*-466"
                                                               "l-*-464"
                                                               "l-*-462"
                                                               "l-*-460"
                                                               "l-*-458"
                                                               "l-*-456"
                                                               "l-*-454"
                                                               "l-*-452"
                                                               "l-*-450"
                                                               "l-*-448"
                                                               "l-*-446"
                                                               "l-*-444"
                                                               "l-*-442"
                                                               "l-*-440"
                                                               "l-*-438"
                                                               "l-*-436"
                                                               "l-*-434"
                                                               "l-*-432"
                                                               "l-*-430"
                                                               "l-*-428"
                                                               "l-*-426"
                                                               "l-*-424"
                                                               "l-*-422"
                                                               "l-*-420"
                                                               "l-*-418"
                                                               "l-*-416"
                                                               "l-*-414"
                                                               "l-*-412"
                                                               "l-*-410"
                                                               "l-*-408"
                                                               "l-*-406"
                                                               "l-*-404"
                                                               "l-*-402"
                                                               "l-*-401"
                                                               "l-*-399"
                                                               "l-*-396"
                                                               "l-*-395"
                                                               "l-*-394"
                                                               "l-*-392"
                                                               "l-*-391"
                                                               "l-*-389"
                                                               "l-*-387"
                                                               "l-*-385"
                                                               "l-*-383"
                                                               "l-*-381"
                                                               "l-*-379"
                                                               "l-*-377"
                                                               "l-*-375"
                                                               "l-*-372"
                                                               "l-*-370"
                                                               "l-*-369"
                                                               "l-*-367"
                                                               "l-*-365"
                                                               "l-*-363"
                                                               "l-*-361"
                                                               "l-*-360"
                                                               "l-*-359"
                                                               "l-*-358"
                                                               "l-*-356"
                                                               "l-*-355"
                                                               "l-*-352"
                                                               "l-*-350"
                                                               "l-*-348"
                                                               "l-*-346"
                                                               "l-*-344"
                                                               "l-*-342"
                                                               "l-*-341"
                                                               "l-*-340"
                                                               "l-*-338"
                                                               "l-*-336"
                                                               "l-*-335"
                                                               "l-*-332"
                                                               "l-*-331"
                                                               "l-*-329"
                                                               "l-*-327"
                                                               "l-*-325"
                                                               "l-*-323"
                                                               "l-*-321"
                                                               "l-*-319"
                                                               "l-*-317"
                                                               "l-*-315"
                                                               "l-*-313"
                                                               "l-*-310"
                                                               "l-*-308"
                                                               "l-*-306"
                                                               "l-*-304"
                                                               "l-*-302"
                                                               "l-*-300"
                                                               "l-*-298"
                                                               "l-*-296"
                                                               "l-*-294"
                                                               "l-*-292"
                                                               "l-*-290"
                                                               "l-*-288"
                                                               "l-*-286"
                                                               "l-*-284"
                                                               "l-*-282"
                                                               "l-*-280"
                                                               "l-*-278"
                                                               "l-*-276"
                                                               "l-*-274"
                                                               "l-*-272"
                                                               "l-*-270"
                                                               "l-*-268"
                                                               "l-*-266"
                                                               "l-*-264"
                                                               "l-*-262"
                                                               "l-*-260"
                                                               "l-*-258"
                                                               "l-*-257"
                                                               "l-*-256"
                                                               "l-*-255"
                                                               "l-*-254"
                                                               "l-*-252"
                                                               "l-*-250"
                                                               "l-*-248"
                                                               "l-*-245"
                                                               "l-*-243"
                                                               "l-*-241"
                                                               "l-*-239"
                                                               "l-*-237"
                                                               "l-*-235"
                                                               "l-*-233"
                                                               "l-*-231"
                                                               "l-*-229"
                                                               "l-*-227"
                                                               "l-*-225"
                                                               "l-*-223"
                                                               "l-*-221"
                                                               "l-*-219"
                                                               "l-*-217"
                                                               "l-*-215"
                                                               "l-*-213"
                                                               "l-*-211"
                                                               "l-*-209"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-47"
                                                               "l-*-46"
                                                               "l-*-45"))
                                                            #(ribcage
                                                              ()
                                                              ()
                                                              ()))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-1972"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(key)
                                                              #((m-*-1924 top))
                                                              #("l-*-1925"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1917"
                                                                "l-*-1918"
                                                                "l-*-1919"
                                                                "l-*-1920"
                                                                "l-*-1921"
                                                                "l-*-1922"
                                                                "l-*-1923"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-1908"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1890"
                                                                "l-*-1891"
                                                                "l-*-1892"
                                                                "l-*-1893"
                                                                "l-*-1894"
                                                                "l-*-1895"
                                                                "l-*-1896"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-call
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-primcall
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-call
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-seq
                                                                make-primcall
                                                                make-call
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-478"
                                                               "l-*-476"
                                                               "l-*-474"
                                                               "l-*-472"
                                                               "l-*-470"
                                                               "l-*-468"
                                                               "l-*-466"
                                                               "l-*-464"
                                                               "l-*-462"
                                                               "l-*-460"
                                                               "l-*-458"
                                                               "l-*-456"
                                                               "l-*-454"
                                                               "l-*-452"
                                                               "l-*-450"
                                                               "l-*-448"
                                                               "l-*-446"
                                                               "l-*-444"
                                                               "l-*-442"
                                                               "l-*-440"
                                                               "l-*-438"
                                                               "l-*-436"
                                                               "l-*-434"
                                                               "l-*-432"
                                                               "l-*-430"
                                                               "l-*-428"
                                                               "l-*-426"
                                                               "l-*-424"
                                                               "l-*-422"
                                                               "l-*-420"
                                                               "l-*-418"
                                                               "l-*-416"
                                                               "l-*-414"
                                                               "l-*-412"
                                                               "l-*-410"
                                                               "l-*-408"
                                                               "l-*-406"
                                                               "l-*-404"
                                                               "l-*-402"
                                                               "l-*-401"
                                                               "l-*-399"
                                                               "l-*-396"
                                                               "l-*-395"
                                                               "l-*-394"
                                                               "l-*-392"
                                                               "l-*-391"
                                                               "l-*-389"
                                                               "l-*-387"
                                                               "l-*-385"
                                                               "l-*-383"
                                                               "l-*-381"
                                                               "l-*-379"
                                                               "l-*-377"
                                                               "l-*-375"
                                                               "l-*-372"
                                                               "l-*-370"
                                                               "l-*-369"
                                                               "l-*-367"
                                                               "l-*-365"
                                                               "l-*-363"
                                                               "l-*-361"
                                                               "l-*-360"
                                                               "l-*-359"
                                                               "l-*-358"
                                                               "l-*-356"
                                                               "l-*-355"
                                                               "l-*-352"
                                                               "l-*-350"
                                                               "l-*-348"
                                                               "l-*-346"
                                                               "l-*-344"
                                                               "l-*-342"
                                                               "l-*-341"
                                                               "l-*-340"
                                                               "l-*-338"
                                                               "l-*-336"
                                                               "l-*-335"
                                                               "l-*-332"
                                                               "l-*-331"
                                                               "l-*-329"
                                                               "l-*-327"
                                                               "l-*-325"
                                                               "l-*-323"
                                                               "l-*-321"
                                                               "l-*-319"
                                                               "l-*-317"
                                                               "l-*-315"
                                                               "l-*-313"
                                                               "l-*-310"
                                                               "l-*-308"
                                                               "l-*-306"
                                                               "l-*-304"
                                                               "l-*-302"
                                                               "l-*-300"
                                                               "l-*-298"
                                                               "l-*-296"
                                                               "l-*-294"
                                                               "l-*-292"
                                                               "l-*-290"
                                                               "l-*-288"
                                                               "l-*-286"
                                                               "l-*-284"
                                                               "l-*-282"
                                                               "l-*-280"
                                                               "l-*-278"
                                                               "l-*-276"
                                                               "l-*-274"
                                                               "l-*-272"
                                                               "l-*-270"
                                                               "l-*-268"
                                                               "l-*-266"
                                                               "l-*-264"
                                                               "l-*-262"
                                                               "l-*-260"
                                                               "l-*-258"
                                                               "l-*-257"
                                                               "l-*-256"
                                                               "l-*-255"
                                                               "l-*-254"
                                                               "l-*-252"
                                                               "l-*-250"
                                                               "l-*-248"
                                                               "l-*-245"
                                                               "l-*-243"
                                                               "l-*-241"
                                                               "l-*-239"
                                                               "l-*-237"
                                                               "l-*-235"
                                                               "l-*-233"
                                                               "l-*-231"
                                                               "l-*-229"
                                                               "l-*-227"
                                                               "l-*-225"
                                                               "l-*-223"
                                                               "l-*-221"
                                                               "l-*-219"
                                                               "l-*-217"
                                                               "l-*-215"
                                                               "l-*-213"
                                                               "l-*-211"
                                                               "l-*-209"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-47"
                                                               "l-*-46"
                                                               "l-*-45"))
                                                            #(ribcage
                                                              ()
                                                              ()
                                                              ()))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-1972"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(key)
                                                              #((m-*-1924 top))
                                                              #("l-*-1925"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1917"
                                                                "l-*-1918"
                                                                "l-*-1919"
                                                                "l-*-1920"
                                                                "l-*-1921"
                                                                "l-*-1922"
                                                                "l-*-1923"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-1908"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1890"
                                                                "l-*-1891"
                                                                "l-*-1892"
                                                                "l-*-1893"
                                                                "l-*-1894"
                                                                "l-*-1895"
                                                                "l-*-1896"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-call
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-primcall
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-call
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-seq
                                                                make-primcall
                                                                make-call
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-478"
                                                               "l-*-476"
                                                               "l-*-474"
                                                               "l-*-472"
                                                               "l-*-470"
                                                               "l-*-468"
                                                               "l-*-466"
                                                               "l-*-464"
                                                               "l-*-462"
                                                               "l-*-460"
                                                               "l-*-458"
                                                               "l-*-456"
                                                               "l-*-454"
                                                               "l-*-452"
                                                               "l-*-450"
                                                               "l-*-448"
                                                               "l-*-446"
                                                               "l-*-444"
                                                               "l-*-442"
                                                               "l-*-440"
                                                               "l-*-438"
                                                               "l-*-436"
                                                               "l-*-434"
                                                               "l-*-432"
                                                               "l-*-430"
                                                               "l-*-428"
                                                               "l-*-426"
                                                               "l-*-424"
                                                               "l-*-422"
                                                               "l-*-420"
                                                               "l-*-418"
                                                               "l-*-416"
                                                               "l-*-414"
                                                               "l-*-412"
                                                               "l-*-410"
                                                               "l-*-408"
                                                               "l-*-406"
                                                               "l-*-404"
                                                               "l-*-402"
                                                               "l-*-401"
                                                               "l-*-399"
                                                               "l-*-396"
                                                               "l-*-395"
                                                               "l-*-394"
                                                               "l-*-392"
                                                               "l-*-391"
                                                               "l-*-389"
                                                               "l-*-387"
                                                               "l-*-385"
                                                               "l-*-383"
                                                               "l-*-381"
                                                               "l-*-379"
                                                               "l-*-377"
                                                               "l-*-375"
                                                               "l-*-372"
                                                               "l-*-370"
                                                               "l-*-369"
                                                               "l-*-367"
                                                               "l-*-365"
                                                               "l-*-363"
                                                               "l-*-361"
                                                               "l-*-360"
                                                               "l-*-359"
                                                               "l-*-358"
                                                               "l-*-356"
                                                               "l-*-355"
                                                               "l-*-352"
                                                               "l-*-350"
                                                               "l-*-348"
                                                               "l-*-346"
                                                               "l-*-344"
                                                               "l-*-342"
                                                               "l-*-341"
                                                               "l-*-340"
                                                               "l-*-338"
                                                               "l-*-336"
                                                               "l-*-335"
                                                               "l-*-332"
                                                               "l-*-331"
                                                               "l-*-329"
                                                               "l-*-327"
                                                               "l-*-325"
                                                               "l-*-323"
                                                               "l-*-321"
                                                               "l-*-319"
                                                               "l-*-317"
                                                               "l-*-315"
                                                               "l-*-313"
                                                               "l-*-310"
                                                               "l-*-308"
                                                               "l-*-306"
                                                               "l-*-304"
                                                               "l-*-302"
                                                               "l-*-300"
                                                               "l-*-298"
                                                               "l-*-296"
                                                               "l-*-294"
                                                               "l-*-292"
                                                               "l-*-290"
                                                               "l-*-288"
                                                               "l-*-286"
                                                               "l-*-284"
                                                               "l-*-282"
                                                               "l-*-280"
                                                               "l-*-278"
                                                               "l-*-276"
                                                               "l-*-274"
                                                               "l-*-272"
                                                               "l-*-270"
                                                               "l-*-268"
                                                               "l-*-266"
                                                               "l-*-264"
                                                               "l-*-262"
                                                               "l-*-260"
                                                               "l-*-258"
                                                               "l-*-257"
                                                               "l-*-256"
                                                               "l-*-255"
                                                               "l-*-254"
                                                               "l-*-252"
                                                               "l-*-250"
                                                               "l-*-248"
                                                               "l-*-245"
                                                               "l-*-243"
                                                               "l-*-241"
                                                               "l-*-239"
                                                               "l-*-237"
                                                               "l-*-235"
                                                               "l-*-233"
                                                               "l-*-231"
                                                               "l-*-229"
                                                               "l-*-227"
                                                               "l-*-225"
                                                               "l-*-223"
                                                               "l-*-221"
                                                               "l-*-219"
                                                               "l-*-217"
                                                               "l-*-215"
                                                               "l-*-213"
                                                               "l-*-211"
                                                               "l-*-209"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-47"
                                                               "l-*-46"
                                                               "l-*-45"))
                                                            #(ribcage
                                                              ()
                                                              ()
                                                              ()))
                                                           (hygiene guile)))
                                                       '(())
                                                       s-25213
                                                       mod-25215))
                                                   tmp-26105)
                                                 (syntax-violation
                                                   #f
                                                   "source expression failed to match any pattern"
                                                   e-25210)))))))
                                     (if (eqv? ftype-25239 'define-syntax)
                                       (let ((tmp-26352
                                               ($sc-dispatch
                                                 e-25210
                                                 '(_ any any))))
                                         (if (if tmp-26352
                                               (@apply
                                                 (lambda (name-26356 val-26357)
                                                   (if (symbol? name-26356)
                                                     #t
                                                     (if (if (vector?
                                                               name-26356)
                                                           (if (= (vector-length
                                                                    name-26356)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    name-26356
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           name-26356
                                                           1))
                                                       #f)))
                                                 tmp-26352)
                                               #f)
                                           (@apply
                                             (lambda (name-26384 val-26385)
                                               (values
                                                 'define-syntax-form
                                                 name-26384
                                                 e-25210
                                                 val-26385
                                                 w-25212
                                                 s-25213
                                                 mod-25215))
                                             tmp-26352)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             e-25210)))
                                       (if (eqv? ftype-25239
                                                 'define-syntax-parameter)
                                         (let ((tmp-26399
                                                 ($sc-dispatch
                                                   e-25210
                                                   '(_ any any))))
                                           (if (if tmp-26399
                                                 (@apply
                                                   (lambda (name-26403
                                                            val-26404)
                                                     (if (symbol? name-26403)
                                                       #t
                                                       (if (if (vector?
                                                                 name-26403)
                                                             (if (= (vector-length
                                                                      name-26403)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      name-26403
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (symbol?
                                                           (vector-ref
                                                             name-26403
                                                             1))
                                                         #f)))
                                                   tmp-26399)
                                                 #f)
                                             (@apply
                                               (lambda (name-26431 val-26432)
                                                 (values
                                                   'define-syntax-parameter-form
                                                   name-26431
                                                   e-25210
                                                   val-26432
                                                   w-25212
                                                   s-25213
                                                   mod-25215))
                                               tmp-26399)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               e-25210)))
                                         (values
                                           'call
                                           #f
                                           e-25210
                                           e-25210
                                           w-25212
                                           s-25213
                                           mod-25215)))))))))))))))
             (if (if (vector? e-25210)
                   (if (= (vector-length e-25210) 4)
                     (eq? (vector-ref e-25210 0) 'syntax-object)
                     #f)
                   #f)
               (syntax-type-4381
                 (vector-ref e-25210 1)
                 r-25211
                 (let ((w2-26457 (vector-ref e-25210 2)))
                   (let ((m1-26458 (car w-25212))
                         (s1-26459 (cdr w-25212)))
                     (if (null? m1-26458)
                       (if (null? s1-26459)
                         w2-26457
                         (cons (car w2-26457)
                               (let ((m2-26470 (cdr w2-26457)))
                                 (if (null? m2-26470)
                                   s1-26459
                                   (append s1-26459 m2-26470)))))
                       (cons (let ((m2-26478 (car w2-26457)))
                               (if (null? m2-26478)
                                 m1-26458
                                 (append m1-26458 m2-26478)))
                             (let ((m2-26486 (cdr w2-26457)))
                               (if (null? m2-26486)
                                 s1-26459
                                 (append s1-26459 m2-26486)))))))
                 (let ((t-26491 (source-annotation-4340 e-25210)))
                   (if t-26491 t-26491 s-25213))
                 rib-25214
                 (let ((t-26767 (vector-ref e-25210 3)))
                   (if t-26767 t-26767 mod-25215))
                 for-car?-25216)
               (if (self-evaluating? e-25210)
                 (values
                   'constant
                   #f
                   e-25210
                   e-25210
                   w-25212
                   s-25213
                   mod-25215)
                 (values
                   'other
                   #f
                   e-25210
                   e-25210
                   w-25212
                   s-25213
                   mod-25215)))))))
     (expand-4382
       (lambda (e-26776 r-26777 w-26778 mod-26779)
         (call-with-values
           (lambda ()
             (syntax-type-4381
               e-26776
               r-26777
               w-26778
               (source-annotation-4340 e-26776)
               #f
               mod-26779
               #f))
           (lambda (type-26965
                    value-26966
                    form-26967
                    e-26968
                    w-26969
                    s-26970
                    mod-26971)
             (expand-expr-4383
               type-26965
               value-26966
               form-26967
               e-26968
               r-26777
               w-26969
               s-26970
               mod-26971)))))
     (expand-expr-4383
       (lambda (type-26974
                value-26975
                form-26976
                e-26977
                r-26978
                w-26979
                s-26980
                mod-26981)
         (if (eqv? type-26974 'lexical)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 3)
             s-26980
             e-26977
             value-26975)
           (if (if (eqv? type-26974 'core)
                 #t
                 (eqv? type-26974 'core-form))
             (value-26975
               e-26977
               r-26978
               w-26979
               s-26980
               mod-26981)
             (if (eqv? type-26974 'module-ref)
               (call-with-values
                 (lambda () (value-26975 e-26977 r-26978 w-26979))
                 (lambda (e-27017 r-27018 w-27019 s-27020 mod-27021)
                   (expand-4382 e-27017 r-27018 w-27019 mod-27021)))
               (if (eqv? type-26974 'lexical-call)
                 (expand-call-4384
                   (let ((id-27197 (car e-26977)))
                     (build-lexical-reference-4316
                       'fun
                       (source-annotation-4340 id-27197)
                       (if (if (vector? id-27197)
                             (if (= (vector-length id-27197) 4)
                               (eq? (vector-ref id-27197 0) 'syntax-object)
                               #f)
                             #f)
                         (syntax->datum id-27197)
                         id-27197)
                       value-26975))
                   e-26977
                   r-26978
                   w-26979
                   s-26980
                   mod-26981)
                 (if (eqv? type-26974 'global-call)
                   (expand-call-4384
                     (build-global-reference-4319
                       (source-annotation-4340 (car e-26977))
                       (if (if (vector? value-26975)
                             (if (= (vector-length value-26975) 4)
                               (eq? (vector-ref value-26975 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref value-26975 1)
                         value-26975)
                       (if (if (vector? value-26975)
                             (if (= (vector-length value-26975) 4)
                               (eq? (vector-ref value-26975 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref value-26975 3)
                         mod-26981))
                     e-26977
                     r-26978
                     w-26979
                     s-26980
                     mod-26981)
                   (if (eqv? type-26974 'constant)
                     (let ((exp-27877
                             (strip-4395
                               (let ((x-27890
                                       (begin
                                         (if (if (pair? e-26977) s-26980 #f)
                                           (set-source-properties!
                                             e-26977
                                             s-26980))
                                         e-26977)))
                                 (if (if (null? (car w-26979))
                                       (null? (cdr w-26979))
                                       #f)
                                   x-27890
                                   (if (if (vector? x-27890)
                                         (if (= (vector-length x-27890) 4)
                                           (eq? (vector-ref x-27890 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((expression-27922
                                             (vector-ref x-27890 1))
                                           (wrap-27923
                                             (let ((w2-27931
                                                     (vector-ref x-27890 2)))
                                               (let ((m1-27932 (car w-26979))
                                                     (s1-27933 (cdr w-26979)))
                                                 (if (null? m1-27932)
                                                   (if (null? s1-27933)
                                                     w2-27931
                                                     (cons (car w2-27931)
                                                           (let ((m2-27948
                                                                   (cdr w2-27931)))
                                                             (if (null? m2-27948)
                                                               s1-27933
                                                               (append
                                                                 s1-27933
                                                                 m2-27948)))))
                                                   (cons (let ((m2-27956
                                                                 (car w2-27931)))
                                                           (if (null? m2-27956)
                                                             m1-27932
                                                             (append
                                                               m1-27932
                                                               m2-27956)))
                                                         (let ((m2-27964
                                                                 (cdr w2-27931)))
                                                           (if (null? m2-27964)
                                                             s1-27933
                                                             (append
                                                               s1-27933
                                                               m2-27964))))))))
                                           (module-27924
                                             (vector-ref x-27890 3)))
                                       (vector
                                         'syntax-object
                                         expression-27922
                                         wrap-27923
                                         module-27924))
                                     (if (null? x-27890)
                                       x-27890
                                       (vector
                                         'syntax-object
                                         x-27890
                                         w-26979
                                         mod-26981)))))
                               '(()))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         s-26980
                         exp-27877))
                     (if (eqv? type-26974 'global)
                       (analyze-variable-4318
                         mod-26981
                         value-26975
                         (lambda (mod-27992 var-27993 public?-27994)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             s-26980
                             mod-27992
                             var-27993
                             public?-27994))
                         (lambda (var-28002)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             s-26980
                             var-28002)))
                       (if (eqv? type-26974 'call)
                         (expand-call-4384
                           (expand-4382
                             (car e-26977)
                             r-26978
                             w-26979
                             mod-26981)
                           e-26977
                           r-26978
                           w-26979
                           s-26980
                           mod-26981)
                         (if (eqv? type-26974 'begin-form)
                           (let ((tmp-28178
                                   ($sc-dispatch e-26977 '(_ any . each-any))))
                             (if tmp-28178
                               (@apply
                                 (lambda (e1-28182 e2-28183)
                                   (expand-sequence-4377
                                     (cons e1-28182 e2-28183)
                                     r-26978
                                     w-26979
                                     s-26980
                                     mod-26981))
                                 tmp-28178)
                               (let ((tmp-28278 ($sc-dispatch e-26977 '(_))))
                                 (if tmp-28278
                                   (@apply
                                     (lambda ()
                                       (syntax-violation
                                         #f
                                         "sequence of zero expressions"
                                         (let ((x-28291
                                                 (begin
                                                   (if (if (pair? e-26977)
                                                         s-26980
                                                         #f)
                                                     (set-source-properties!
                                                       e-26977
                                                       s-26980))
                                                   e-26977)))
                                           (if (if (null? (car w-26979))
                                                 (null? (cdr w-26979))
                                                 #f)
                                             x-28291
                                             (if (if (vector? x-28291)
                                                   (if (= (vector-length
                                                            x-28291)
                                                          4)
                                                     (eq? (vector-ref
                                                            x-28291
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (let ((expression-28323
                                                       (vector-ref x-28291 1))
                                                     (wrap-28324
                                                       (let ((w2-28332
                                                               (vector-ref
                                                                 x-28291
                                                                 2)))
                                                         (let ((m1-28333
                                                                 (car w-26979))
                                                               (s1-28334
                                                                 (cdr w-26979)))
                                                           (if (null? m1-28333)
                                                             (if (null? s1-28334)
                                                               w2-28332
                                                               (cons (car w2-28332)
                                                                     (let ((m2-28349
                                                                             (cdr w2-28332)))
                                                                       (if (null? m2-28349)
                                                                         s1-28334
                                                                         (append
                                                                           s1-28334
                                                                           m2-28349)))))
                                                             (cons (let ((m2-28357
                                                                           (car w2-28332)))
                                                                     (if (null? m2-28357)
                                                                       m1-28333
                                                                       (append
                                                                         m1-28333
                                                                         m2-28357)))
                                                                   (let ((m2-28365
                                                                           (cdr w2-28332)))
                                                                     (if (null? m2-28365)
                                                                       s1-28334
                                                                       (append
                                                                         s1-28334
                                                                         m2-28365))))))))
                                                     (module-28325
                                                       (vector-ref x-28291 3)))
                                                 (vector
                                                   'syntax-object
                                                   expression-28323
                                                   wrap-28324
                                                   module-28325))
                                               (if (null? x-28291)
                                                 x-28291
                                                 (vector
                                                   'syntax-object
                                                   x-28291
                                                   w-26979
                                                   mod-26981)))))))
                                     tmp-28278)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     e-26977)))))
                           (if (eqv? type-26974 'local-syntax-form)
                             (expand-local-syntax-4387
                               value-26975
                               e-26977
                               r-26978
                               w-26979
                               s-26980
                               mod-26981
                               expand-sequence-4377)
                             (if (eqv? type-26974 'eval-when-form)
                               (let ((tmp-28466
                                       ($sc-dispatch
                                         e-26977
                                         '(_ each-any any . each-any))))
                                 (if tmp-28466
                                   (@apply
                                     (lambda (x-28470 e1-28471 e2-28472)
                                       (let ((when-list-28473
                                               (parse-when-list-4380
                                                 e-26977
                                                 x-28470)))
                                         (if (memq 'eval when-list-28473)
                                           (expand-sequence-4377
                                             (cons e1-28471 e2-28472)
                                             r-26978
                                             w-26979
                                             s-26980
                                             mod-26981)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))))
                                     tmp-28466)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     e-26977)))
                               (if (if (eqv? type-26974 'define-form)
                                     #t
                                     (if (eqv? type-26974 'define-syntax-form)
                                       #t
                                       (eqv? type-26974
                                             'define-syntax-parameter-form)))
                                 (syntax-violation
                                   #f
                                   "definition in expression context, where definitions are not allowed,"
                                   (let ((x-28662
                                           (begin
                                             (if (if (pair? form-26976)
                                                   s-26980
                                                   #f)
                                               (set-source-properties!
                                                 form-26976
                                                 s-26980))
                                             form-26976)))
                                     (if (if (null? (car w-26979))
                                           (null? (cdr w-26979))
                                           #f)
                                       x-28662
                                       (if (if (vector? x-28662)
                                             (if (= (vector-length x-28662) 4)
                                               (eq? (vector-ref x-28662 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (let ((expression-28694
                                                 (vector-ref x-28662 1))
                                               (wrap-28695
                                                 (let ((w2-28703
                                                         (vector-ref
                                                           x-28662
                                                           2)))
                                                   (let ((m1-28704
                                                           (car w-26979))
                                                         (s1-28705
                                                           (cdr w-26979)))
                                                     (if (null? m1-28704)
                                                       (if (null? s1-28705)
                                                         w2-28703
                                                         (cons (car w2-28703)
                                                               (let ((m2-28720
                                                                       (cdr w2-28703)))
                                                                 (if (null? m2-28720)
                                                                   s1-28705
                                                                   (append
                                                                     s1-28705
                                                                     m2-28720)))))
                                                       (cons (let ((m2-28728
                                                                     (car w2-28703)))
                                                               (if (null? m2-28728)
                                                                 m1-28704
                                                                 (append
                                                                   m1-28704
                                                                   m2-28728)))
                                                             (let ((m2-28736
                                                                     (cdr w2-28703)))
                                                               (if (null? m2-28736)
                                                                 s1-28705
                                                                 (append
                                                                   s1-28705
                                                                   m2-28736))))))))
                                               (module-28696
                                                 (vector-ref x-28662 3)))
                                           (vector
                                             'syntax-object
                                             expression-28694
                                             wrap-28695
                                             module-28696))
                                         (if (null? x-28662)
                                           x-28662
                                           (vector
                                             'syntax-object
                                             x-28662
                                             w-26979
                                             mod-26981))))))
                                 (if (eqv? type-26974 'syntax)
                                   (syntax-violation
                                     #f
                                     "reference to pattern variable outside syntax form"
                                     (let ((x-28766
                                             (begin
                                               (if (if (pair? e-26977)
                                                     s-26980
                                                     #f)
                                                 (set-source-properties!
                                                   e-26977
                                                   s-26980))
                                               e-26977)))
                                       (if (if (null? (car w-26979))
                                             (null? (cdr w-26979))
                                             #f)
                                         x-28766
                                         (if (if (vector? x-28766)
                                               (if (= (vector-length x-28766)
                                                      4)
                                                 (eq? (vector-ref x-28766 0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (let ((expression-28798
                                                   (vector-ref x-28766 1))
                                                 (wrap-28799
                                                   (let ((w2-28807
                                                           (vector-ref
                                                             x-28766
                                                             2)))
                                                     (let ((m1-28808
                                                             (car w-26979))
                                                           (s1-28809
                                                             (cdr w-26979)))
                                                       (if (null? m1-28808)
                                                         (if (null? s1-28809)
                                                           w2-28807
                                                           (cons (car w2-28807)
                                                                 (let ((m2-28824
                                                                         (cdr w2-28807)))
                                                                   (if (null? m2-28824)
                                                                     s1-28809
                                                                     (append
                                                                       s1-28809
                                                                       m2-28824)))))
                                                         (cons (let ((m2-28832
                                                                       (car w2-28807)))
                                                                 (if (null? m2-28832)
                                                                   m1-28808
                                                                   (append
                                                                     m1-28808
                                                                     m2-28832)))
                                                               (let ((m2-28840
                                                                       (cdr w2-28807)))
                                                                 (if (null? m2-28840)
                                                                   s1-28809
                                                                   (append
                                                                     s1-28809
                                                                     m2-28840))))))))
                                                 (module-28800
                                                   (vector-ref x-28766 3)))
                                             (vector
                                               'syntax-object
                                               expression-28798
                                               wrap-28799
                                               module-28800))
                                           (if (null? x-28766)
                                             x-28766
                                             (vector
                                               'syntax-object
                                               x-28766
                                               w-26979
                                               mod-26981))))))
                                   (if (eqv? type-26974 'displaced-lexical)
                                     (syntax-violation
                                       #f
                                       "reference to identifier outside its scope"
                                       (let ((x-28870
                                               (begin
                                                 (if (if (pair? e-26977)
                                                       s-26980
                                                       #f)
                                                   (set-source-properties!
                                                     e-26977
                                                     s-26980))
                                                 e-26977)))
                                         (if (if (null? (car w-26979))
                                               (null? (cdr w-26979))
                                               #f)
                                           x-28870
                                           (if (if (vector? x-28870)
                                                 (if (= (vector-length x-28870)
                                                        4)
                                                   (eq? (vector-ref x-28870 0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (let ((expression-28902
                                                     (vector-ref x-28870 1))
                                                   (wrap-28903
                                                     (let ((w2-28911
                                                             (vector-ref
                                                               x-28870
                                                               2)))
                                                       (let ((m1-28912
                                                               (car w-26979))
                                                             (s1-28913
                                                               (cdr w-26979)))
                                                         (if (null? m1-28912)
                                                           (if (null? s1-28913)
                                                             w2-28911
                                                             (cons (car w2-28911)
                                                                   (let ((m2-28928
                                                                           (cdr w2-28911)))
                                                                     (if (null? m2-28928)
                                                                       s1-28913
                                                                       (append
                                                                         s1-28913
                                                                         m2-28928)))))
                                                           (cons (let ((m2-28936
                                                                         (car w2-28911)))
                                                                   (if (null? m2-28936)
                                                                     m1-28912
                                                                     (append
                                                                       m1-28912
                                                                       m2-28936)))
                                                                 (let ((m2-28944
                                                                         (cdr w2-28911)))
                                                                   (if (null? m2-28944)
                                                                     s1-28913
                                                                     (append
                                                                       s1-28913
                                                                       m2-28944))))))))
                                                   (module-28904
                                                     (vector-ref x-28870 3)))
                                               (vector
                                                 'syntax-object
                                                 expression-28902
                                                 wrap-28903
                                                 module-28904))
                                             (if (null? x-28870)
                                               x-28870
                                               (vector
                                                 'syntax-object
                                                 x-28870
                                                 w-26979
                                                 mod-26981))))))
                                     (syntax-violation
                                       #f
                                       "unexpected syntax"
                                       (let ((x-28968
                                               (begin
                                                 (if (if (pair? e-26977)
                                                       s-26980
                                                       #f)
                                                   (set-source-properties!
                                                     e-26977
                                                     s-26980))
                                                 e-26977)))
                                         (if (if (null? (car w-26979))
                                               (null? (cdr w-26979))
                                               #f)
                                           x-28968
                                           (if (if (vector? x-28968)
                                                 (if (= (vector-length x-28968)
                                                        4)
                                                   (eq? (vector-ref x-28968 0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (let ((expression-29000
                                                     (vector-ref x-28968 1))
                                                   (wrap-29001
                                                     (let ((w2-29009
                                                             (vector-ref
                                                               x-28968
                                                               2)))
                                                       (let ((m1-29010
                                                               (car w-26979))
                                                             (s1-29011
                                                               (cdr w-26979)))
                                                         (if (null? m1-29010)
                                                           (if (null? s1-29011)
                                                             w2-29009
                                                             (cons (car w2-29009)
                                                                   (let ((m2-29026
                                                                           (cdr w2-29009)))
                                                                     (if (null? m2-29026)
                                                                       s1-29011
                                                                       (append
                                                                         s1-29011
                                                                         m2-29026)))))
                                                           (cons (let ((m2-29034
                                                                         (car w2-29009)))
                                                                   (if (null? m2-29034)
                                                                     m1-29010
                                                                     (append
                                                                       m1-29010
                                                                       m2-29034)))
                                                                 (let ((m2-29042
                                                                         (cdr w2-29009)))
                                                                   (if (null? m2-29042)
                                                                     s1-29011
                                                                     (append
                                                                       s1-29011
                                                                       m2-29042))))))))
                                                   (module-29002
                                                     (vector-ref x-28968 3)))
                                               (vector
                                                 'syntax-object
                                                 expression-29000
                                                 wrap-29001
                                                 module-29002))
                                             (if (null? x-28968)
                                               x-28968
                                               (vector
                                                 'syntax-object
                                                 x-28968
                                                 w-26979
                                                 mod-26981))))))))))))))))))))))
     (expand-call-4384
       (lambda (x-29057
                e-29058
                r-29059
                w-29060
                s-29061
                mod-29062)
         (let ((tmp-29064
                 ($sc-dispatch e-29058 '(any . each-any))))
           (if tmp-29064
             (@apply
               (lambda (e0-29068 e1-29069)
                 (build-call-4313
                   s-29061
                   x-29057
                   (map (lambda (e-29157)
                          (expand-4382 e-29157 r-29059 w-29060 mod-29062))
                        e1-29069)))
               tmp-29064)
             (syntax-violation
               #f
               "source expression failed to match any pattern"
               e-29058)))))
     (expand-macro-4385
       (lambda (p-29241
                e-29242
                r-29243
                w-29244
                s-29245
                rib-29246
                mod-29247)
         (letrec*
           ((rebuild-macro-output-29248
              (lambda (x-29357 m-29358)
                (if (pair? x-29357)
                  (let ((e-29362
                          (cons (rebuild-macro-output-29248
                                  (car x-29357)
                                  m-29358)
                                (rebuild-macro-output-29248
                                  (cdr x-29357)
                                  m-29358))))
                    (begin
                      (if (if (pair? e-29362) s-29245 #f)
                        (set-source-properties! e-29362 s-29245))
                      e-29362))
                  (if (if (vector? x-29357)
                        (if (= (vector-length x-29357) 4)
                          (eq? (vector-ref x-29357 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((w-29378 (vector-ref x-29357 2)))
                      (let ((ms-29379 (car w-29378))
                            (ss-29380 (cdr w-29378)))
                        (if (if (pair? ms-29379) (eq? (car ms-29379) #f) #f)
                          (let ((expression-29388 (vector-ref x-29357 1))
                                (wrap-29389
                                  (cons (cdr ms-29379)
                                        (if rib-29246
                                          (cons rib-29246 (cdr ss-29380))
                                          (cdr ss-29380))))
                                (module-29390 (vector-ref x-29357 3)))
                            (vector
                              'syntax-object
                              expression-29388
                              wrap-29389
                              module-29390))
                          (let ((expression-29400
                                  (let ((e-29405 (vector-ref x-29357 1)))
                                    (begin
                                      (if (if (pair? e-29405) s-29245 #f)
                                        (set-source-properties!
                                          e-29405
                                          s-29245))
                                      e-29405)))
                                (wrap-29401
                                  (cons (cons m-29358 ms-29379)
                                        (if rib-29246
                                          (cons rib-29246
                                                (cons 'shift ss-29380))
                                          (cons 'shift ss-29380))))
                                (module-29402 (vector-ref x-29357 3)))
                            (vector
                              'syntax-object
                              expression-29400
                              wrap-29401
                              module-29402)))))
                    (if (vector? x-29357)
                      (let ((n-29417 (vector-length x-29357)))
                        (let ((v-29418
                                (let ((e-29484 (make-vector n-29417)))
                                  (begin
                                    (if (if (pair? e-29484) s-29245 #f)
                                      (set-source-properties! e-29484 s-29245))
                                    e-29484))))
                          (letrec*
                            ((loop-29419
                               (lambda (i-29480)
                                 (if (= i-29480 n-29417)
                                   v-29418
                                   (begin
                                     (vector-set!
                                       v-29418
                                       i-29480
                                       (rebuild-macro-output-29248
                                         (vector-ref x-29357 i-29480)
                                         m-29358))
                                     (loop-29419 (#{1+}# i-29480)))))))
                            (loop-29419 0))))
                      (if (symbol? x-29357)
                        (syntax-violation
                          #f
                          "encountered raw symbol in macro output"
                          (let ((s-29495 (cdr w-29244)))
                            (let ((x-29499
                                    (begin
                                      (if (if (pair? e-29242) s-29495 #f)
                                        (set-source-properties!
                                          e-29242
                                          s-29495))
                                      e-29242)))
                              (if (if (null? (car w-29244))
                                    (null? (cdr w-29244))
                                    #f)
                                x-29499
                                (if (if (vector? x-29499)
                                      (if (= (vector-length x-29499) 4)
                                        (eq? (vector-ref x-29499 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((expression-29531
                                          (vector-ref x-29499 1))
                                        (wrap-29532
                                          (let ((w2-29540
                                                  (vector-ref x-29499 2)))
                                            (let ((m1-29541 (car w-29244))
                                                  (s1-29542 (cdr w-29244)))
                                              (if (null? m1-29541)
                                                (if (null? s1-29542)
                                                  w2-29540
                                                  (cons (car w2-29540)
                                                        (let ((m2-29557
                                                                (cdr w2-29540)))
                                                          (if (null? m2-29557)
                                                            s1-29542
                                                            (append
                                                              s1-29542
                                                              m2-29557)))))
                                                (cons (let ((m2-29565
                                                              (car w2-29540)))
                                                        (if (null? m2-29565)
                                                          m1-29541
                                                          (append
                                                            m1-29541
                                                            m2-29565)))
                                                      (let ((m2-29573
                                                              (cdr w2-29540)))
                                                        (if (null? m2-29573)
                                                          s1-29542
                                                          (append
                                                            s1-29542
                                                            m2-29573))))))))
                                        (module-29533 (vector-ref x-29499 3)))
                                    (vector
                                      'syntax-object
                                      expression-29531
                                      wrap-29532
                                      module-29533))
                                  (if (null? x-29499)
                                    x-29499
                                    (vector
                                      'syntax-object
                                      x-29499
                                      w-29244
                                      mod-29247))))))
                          x-29357)
                        (begin
                          (if (if (pair? x-29357) s-29245 #f)
                            (set-source-properties! x-29357 s-29245))
                          x-29357))))))))
           (with-fluids
             ((transformer-environment-4368
                (lambda (k-29249)
                  (k-29249
                    e-29242
                    r-29243
                    w-29244
                    s-29245
                    rib-29246
                    mod-29247))))
             (rebuild-macro-output-29248
               (p-29241
                 (let ((w-29256
                         (cons (cons #f (car w-29244))
                               (cons 'shift (cdr w-29244)))))
                   (let ((x-29261
                           (begin
                             (if (if (pair? e-29242) s-29245 #f)
                               (set-source-properties! e-29242 s-29245))
                             e-29242)))
                     (if (if (null? (car w-29256))
                           (null? (cdr w-29256))
                           #f)
                       x-29261
                       (if (if (vector? x-29261)
                             (if (= (vector-length x-29261) 4)
                               (eq? (vector-ref x-29261 0) 'syntax-object)
                               #f)
                             #f)
                         (let ((expression-29300 (vector-ref x-29261 1))
                               (wrap-29301
                                 (let ((w2-29309 (vector-ref x-29261 2)))
                                   (let ((m1-29310 (car w-29256))
                                         (s1-29311 (cdr w-29256)))
                                     (if (null? m1-29310)
                                       (if (null? s1-29311)
                                         w2-29309
                                         (cons (car w2-29309)
                                               (let ((m2-29326 (cdr w2-29309)))
                                                 (if (null? m2-29326)
                                                   s1-29311
                                                   (append
                                                     s1-29311
                                                     m2-29326)))))
                                       (cons (let ((m2-29334 (car w2-29309)))
                                               (if (null? m2-29334)
                                                 m1-29310
                                                 (append m1-29310 m2-29334)))
                                             (let ((m2-29342 (cdr w2-29309)))
                                               (if (null? m2-29342)
                                                 s1-29311
                                                 (append
                                                   s1-29311
                                                   m2-29342))))))))
                               (module-29302 (vector-ref x-29261 3)))
                           (vector
                             'syntax-object
                             expression-29300
                             wrap-29301
                             module-29302))
                         (if (null? x-29261)
                           x-29261
                           (vector
                             'syntax-object
                             x-29261
                             w-29256
                             mod-29247)))))))
               (gensym
                 (string-append "m-" (session-id-4307) "-")))))))
     (expand-body-4386
       (lambda (body-29603
                outer-form-29604
                r-29605
                w-29606
                mod-29607)
         (let ((r-29608
                 (cons '("placeholder" placeholder) r-29605)))
           (let ((ribcage-29609 (vector 'ribcage '() '() '())))
             (let ((w-29610
                     (cons (car w-29606)
                           (cons ribcage-29609 (cdr w-29606)))))
               (letrec*
                 ((parse-29611
                    (lambda (body-29719
                             ids-29720
                             labels-29721
                             var-ids-29722
                             vars-29723
                             vals-29724
                             bindings-29725)
                      (if (null? body-29719)
                        (syntax-violation
                          #f
                          "no expressions in body"
                          outer-form-29604)
                        (let ((e-29726 (cdr (car body-29719)))
                              (er-29727 (car (car body-29719))))
                          (call-with-values
                            (lambda ()
                              (syntax-type-4381
                                e-29726
                                er-29727
                                '(())
                                (source-annotation-4340 er-29727)
                                ribcage-29609
                                mod-29607
                                #f))
                            (lambda (type-29915
                                     value-29916
                                     form-29917
                                     e-29918
                                     w-29919
                                     s-29920
                                     mod-29921)
                              (if (eqv? type-29915 'define-form)
                                (let ((id-29929
                                        (if (if (null? (car w-29919))
                                              (null? (cdr w-29919))
                                              #f)
                                          value-29916
                                          (if (if (vector? value-29916)
                                                (if (= (vector-length
                                                         value-29916)
                                                       4)
                                                  (eq? (vector-ref
                                                         value-29916
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (let ((expression-29974
                                                    (vector-ref value-29916 1))
                                                  (wrap-29975
                                                    (let ((w2-29985
                                                            (vector-ref
                                                              value-29916
                                                              2)))
                                                      (let ((m1-29986
                                                              (car w-29919))
                                                            (s1-29987
                                                              (cdr w-29919)))
                                                        (if (null? m1-29986)
                                                          (if (null? s1-29987)
                                                            w2-29985
                                                            (cons (car w2-29985)
                                                                  (let ((m2-30004
                                                                          (cdr w2-29985)))
                                                                    (if (null? m2-30004)
                                                                      s1-29987
                                                                      (append
                                                                        s1-29987
                                                                        m2-30004)))))
                                                          (cons (let ((m2-30012
                                                                        (car w2-29985)))
                                                                  (if (null? m2-30012)
                                                                    m1-29986
                                                                    (append
                                                                      m1-29986
                                                                      m2-30012)))
                                                                (let ((m2-30020
                                                                        (cdr w2-29985)))
                                                                  (if (null? m2-30020)
                                                                    s1-29987
                                                                    (append
                                                                      s1-29987
                                                                      m2-30020))))))))
                                                  (module-29976
                                                    (vector-ref
                                                      value-29916
                                                      3)))
                                              (vector
                                                'syntax-object
                                                expression-29974
                                                wrap-29975
                                                module-29976))
                                            (if (null? value-29916)
                                              value-29916
                                              (vector
                                                'syntax-object
                                                value-29916
                                                w-29919
                                                mod-29921)))))
                                      (label-29930
                                        (string-append
                                          "l-"
                                          (session-id-4307)
                                          (symbol->string (gensym "-")))))
                                  (let ((var-29931
                                          (let ((id-30081
                                                  (if (if (vector? id-29929)
                                                        (if (= (vector-length
                                                                 id-29929)
                                                               4)
                                                          (eq? (vector-ref
                                                                 id-29929
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref id-29929 1)
                                                    id-29929)))
                                            (gensym
                                              (string-append
                                                (symbol->string id-30081)
                                                "-")))))
                                    (begin
                                      (begin
                                        (let ((update-29940
                                                (cons (vector-ref id-29929 1)
                                                      (vector-ref
                                                        ribcage-29609
                                                        1))))
                                          (vector-set!
                                            ribcage-29609
                                            1
                                            update-29940))
                                        (let ((update-30052
                                                (cons (car (vector-ref
                                                             id-29929
                                                             2))
                                                      (vector-ref
                                                        ribcage-29609
                                                        2))))
                                          (vector-set!
                                            ribcage-29609
                                            2
                                            update-30052))
                                        (let ((update-30067
                                                (cons label-29930
                                                      (vector-ref
                                                        ribcage-29609
                                                        3))))
                                          (vector-set!
                                            ribcage-29609
                                            3
                                            update-30067)))
                                      (parse-29611
                                        (cdr body-29719)
                                        (cons id-29929 ids-29720)
                                        (cons label-29930 labels-29721)
                                        (cons id-29929 var-ids-29722)
                                        (cons var-29931 vars-29723)
                                        (cons (cons er-29727
                                                    (if (if (null? (car w-29919))
                                                          (null? (cdr w-29919))
                                                          #f)
                                                      e-29918
                                                      (if (if (vector? e-29918)
                                                            (if (= (vector-length
                                                                     e-29918)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     e-29918
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (let ((expression-30133
                                                                (vector-ref
                                                                  e-29918
                                                                  1))
                                                              (wrap-30134
                                                                (let ((w2-30144
                                                                        (vector-ref
                                                                          e-29918
                                                                          2)))
                                                                  (let ((m1-30145
                                                                          (car w-29919))
                                                                        (s1-30146
                                                                          (cdr w-29919)))
                                                                    (if (null? m1-30145)
                                                                      (if (null? s1-30146)
                                                                        w2-30144
                                                                        (cons (car w2-30144)
                                                                              (let ((m2-30163
                                                                                      (cdr w2-30144)))
                                                                                (if (null? m2-30163)
                                                                                  s1-30146
                                                                                  (append
                                                                                    s1-30146
                                                                                    m2-30163)))))
                                                                      (cons (let ((m2-30171
                                                                                    (car w2-30144)))
                                                                              (if (null? m2-30171)
                                                                                m1-30145
                                                                                (append
                                                                                  m1-30145
                                                                                  m2-30171)))
                                                                            (let ((m2-30179
                                                                                    (cdr w2-30144)))
                                                                              (if (null? m2-30179)
                                                                                s1-30146
                                                                                (append
                                                                                  s1-30146
                                                                                  m2-30179))))))))
                                                              (module-30135
                                                                (vector-ref
                                                                  e-29918
                                                                  3)))
                                                          (vector
                                                            'syntax-object
                                                            expression-30133
                                                            wrap-30134
                                                            module-30135))
                                                        (if (null? e-29918)
                                                          e-29918
                                                          (vector
                                                            'syntax-object
                                                            e-29918
                                                            w-29919
                                                            mod-29921)))))
                                              vals-29724)
                                        (cons (cons 'lexical var-29931)
                                              bindings-29725)))))
                                (if (if (eqv? type-29915 'define-syntax-form)
                                      #t
                                      (eqv? type-29915
                                            'define-syntax-parameter-form))
                                  (let ((id-30213
                                          (if (if (null? (car w-29919))
                                                (null? (cdr w-29919))
                                                #f)
                                            value-29916
                                            (if (if (vector? value-29916)
                                                  (if (= (vector-length
                                                           value-29916)
                                                         4)
                                                    (eq? (vector-ref
                                                           value-29916
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (let ((expression-30257
                                                      (vector-ref
                                                        value-29916
                                                        1))
                                                    (wrap-30258
                                                      (let ((w2-30268
                                                              (vector-ref
                                                                value-29916
                                                                2)))
                                                        (let ((m1-30269
                                                                (car w-29919))
                                                              (s1-30270
                                                                (cdr w-29919)))
                                                          (if (null? m1-30269)
                                                            (if (null? s1-30270)
                                                              w2-30268
                                                              (cons (car w2-30268)
                                                                    (let ((m2-30287
                                                                            (cdr w2-30268)))
                                                                      (if (null? m2-30287)
                                                                        s1-30270
                                                                        (append
                                                                          s1-30270
                                                                          m2-30287)))))
                                                            (cons (let ((m2-30295
                                                                          (car w2-30268)))
                                                                    (if (null? m2-30295)
                                                                      m1-30269
                                                                      (append
                                                                        m1-30269
                                                                        m2-30295)))
                                                                  (let ((m2-30303
                                                                          (cdr w2-30268)))
                                                                    (if (null? m2-30303)
                                                                      s1-30270
                                                                      (append
                                                                        s1-30270
                                                                        m2-30303))))))))
                                                    (module-30259
                                                      (vector-ref
                                                        value-29916
                                                        3)))
                                                (vector
                                                  'syntax-object
                                                  expression-30257
                                                  wrap-30258
                                                  module-30259))
                                              (if (null? value-29916)
                                                value-29916
                                                (vector
                                                  'syntax-object
                                                  value-29916
                                                  w-29919
                                                  mod-29921)))))
                                        (label-30214
                                          (string-append
                                            "l-"
                                            (session-id-4307)
                                            (symbol->string (gensym "-")))))
                                    (begin
                                      (begin
                                        (let ((update-30223
                                                (cons (vector-ref id-30213 1)
                                                      (vector-ref
                                                        ribcage-29609
                                                        1))))
                                          (vector-set!
                                            ribcage-29609
                                            1
                                            update-30223))
                                        (let ((update-30335
                                                (cons (car (vector-ref
                                                             id-30213
                                                             2))
                                                      (vector-ref
                                                        ribcage-29609
                                                        2))))
                                          (vector-set!
                                            ribcage-29609
                                            2
                                            update-30335))
                                        (let ((update-30350
                                                (cons label-30214
                                                      (vector-ref
                                                        ribcage-29609
                                                        3))))
                                          (vector-set!
                                            ribcage-29609
                                            3
                                            update-30350)))
                                      (parse-29611
                                        (cdr body-29719)
                                        (cons id-30213 ids-29720)
                                        (cons label-30214 labels-29721)
                                        var-ids-29722
                                        vars-29723
                                        vals-29724
                                        (cons (cons (if (eq? type-29915
                                                             'define-syntax-parameter-form)
                                                      'syntax-parameter
                                                      'macro)
                                                    (cons er-29727
                                                          (if (if (null? (car w-29919))
                                                                (null? (cdr w-29919))
                                                                #f)
                                                            e-29918
                                                            (if (if (vector?
                                                                      e-29918)
                                                                  (if (= (vector-length
                                                                           e-29918)
                                                                         4)
                                                                    (eq? (vector-ref
                                                                           e-29918
                                                                           0)
                                                                         'syntax-object)
                                                                    #f)
                                                                  #f)
                                                              (let ((expression-30389
                                                                      (vector-ref
                                                                        e-29918
                                                                        1))
                                                                    (wrap-30390
                                                                      (let ((w2-30400
                                                                              (vector-ref
                                                                                e-29918
                                                                                2)))
                                                                        (let ((m1-30401
                                                                                (car w-29919))
                                                                              (s1-30402
                                                                                (cdr w-29919)))
                                                                          (if (null? m1-30401)
                                                                            (if (null? s1-30402)
                                                                              w2-30400
                                                                              (cons (car w2-30400)
                                                                                    (let ((m2-30419
                                                                                            (cdr w2-30400)))
                                                                                      (if (null? m2-30419)
                                                                                        s1-30402
                                                                                        (append
                                                                                          s1-30402
                                                                                          m2-30419)))))
                                                                            (cons (let ((m2-30427
                                                                                          (car w2-30400)))
                                                                                    (if (null? m2-30427)
                                                                                      m1-30401
                                                                                      (append
                                                                                        m1-30401
                                                                                        m2-30427)))
                                                                                  (let ((m2-30435
                                                                                          (cdr w2-30400)))
                                                                                    (if (null? m2-30435)
                                                                                      s1-30402
                                                                                      (append
                                                                                        s1-30402
                                                                                        m2-30435))))))))
                                                                    (module-30391
                                                                      (vector-ref
                                                                        e-29918
                                                                        3)))
                                                                (vector
                                                                  'syntax-object
                                                                  expression-30389
                                                                  wrap-30390
                                                                  module-30391))
                                                              (if (null? e-29918)
                                                                e-29918
                                                                (vector
                                                                  'syntax-object
                                                                  e-29918
                                                                  w-29919
                                                                  mod-29921))))))
                                              bindings-29725))))
                                  (if (eqv? type-29915 'begin-form)
                                    (let ((tmp-30465
                                            ($sc-dispatch
                                              e-29918
                                              '(_ . each-any))))
                                      (if tmp-30465
                                        (@apply
                                          (lambda (e1-30469)
                                            (parse-29611
                                              (letrec*
                                                ((f-30470
                                                   (lambda (forms-30671)
                                                     (if (null? forms-30671)
                                                       (cdr body-29719)
                                                       (cons (cons er-29727
                                                                   (let ((x-30675
                                                                           (car forms-30671)))
                                                                     (if (if (null? (car w-29919))
                                                                           (null? (cdr w-29919))
                                                                           #f)
                                                                       x-30675
                                                                       (if (if (vector?
                                                                                 x-30675)
                                                                             (if (= (vector-length
                                                                                      x-30675)
                                                                                    4)
                                                                               (eq? (vector-ref
                                                                                      x-30675
                                                                                      0)
                                                                                    'syntax-object)
                                                                               #f)
                                                                             #f)
                                                                         (let ((expression-30693
                                                                                 (vector-ref
                                                                                   x-30675
                                                                                   1))
                                                                               (wrap-30694
                                                                                 (let ((w2-30702
                                                                                         (vector-ref
                                                                                           x-30675
                                                                                           2)))
                                                                                   (let ((m1-30703
                                                                                           (car w-29919))
                                                                                         (s1-30704
                                                                                           (cdr w-29919)))
                                                                                     (if (null? m1-30703)
                                                                                       (if (null? s1-30704)
                                                                                         w2-30702
                                                                                         (cons (car w2-30702)
                                                                                               (let ((m2-30719
                                                                                                       (cdr w2-30702)))
                                                                                                 (if (null? m2-30719)
                                                                                                   s1-30704
                                                                                                   (append
                                                                                                     s1-30704
                                                                                                     m2-30719)))))
                                                                                       (cons (let ((m2-30727
                                                                                                     (car w2-30702)))
                                                                                               (if (null? m2-30727)
                                                                                                 m1-30703
                                                                                                 (append
                                                                                                   m1-30703
                                                                                                   m2-30727)))
                                                                                             (let ((m2-30735
                                                                                                     (cdr w2-30702)))
                                                                                               (if (null? m2-30735)
                                                                                                 s1-30704
                                                                                                 (append
                                                                                                   s1-30704
                                                                                                   m2-30735))))))))
                                                                               (module-30695
                                                                                 (vector-ref
                                                                                   x-30675
                                                                                   3)))
                                                                           (vector
                                                                             'syntax-object
                                                                             expression-30693
                                                                             wrap-30694
                                                                             module-30695))
                                                                         (if (null? x-30675)
                                                                           x-30675
                                                                           (vector
                                                                             'syntax-object
                                                                             x-30675
                                                                             w-29919
                                                                             mod-29921))))))
                                                             (f-30470
                                                               (cdr forms-30671)))))))
                                                (f-30470 e1-30469))
                                              ids-29720
                                              labels-29721
                                              var-ids-29722
                                              vars-29723
                                              vals-29724
                                              bindings-29725))
                                          tmp-30465)
                                        (syntax-violation
                                          #f
                                          "source expression failed to match any pattern"
                                          e-29918)))
                                    (if (eqv? type-29915 'local-syntax-form)
                                      (expand-local-syntax-4387
                                        value-29916
                                        e-29918
                                        er-29727
                                        w-29919
                                        s-29920
                                        mod-29921
                                        (lambda (forms-30764
                                                 er-30765
                                                 w-30766
                                                 s-30767
                                                 mod-30768)
                                          (parse-29611
                                            (letrec*
                                              ((f-30769
                                                 (lambda (forms-30970)
                                                   (if (null? forms-30970)
                                                     (cdr body-29719)
                                                     (cons (cons er-30765
                                                                 (let ((x-30974
                                                                         (car forms-30970)))
                                                                   (if (if (null? (car w-30766))
                                                                         (null? (cdr w-30766))
                                                                         #f)
                                                                     x-30974
                                                                     (if (if (vector?
                                                                               x-30974)
                                                                           (if (= (vector-length
                                                                                    x-30974)
                                                                                  4)
                                                                             (eq? (vector-ref
                                                                                    x-30974
                                                                                    0)
                                                                                  'syntax-object)
                                                                             #f)
                                                                           #f)
                                                                       (let ((expression-30992
                                                                               (vector-ref
                                                                                 x-30974
                                                                                 1))
                                                                             (wrap-30993
                                                                               (let ((w2-31001
                                                                                       (vector-ref
                                                                                         x-30974
                                                                                         2)))
                                                                                 (let ((m1-31002
                                                                                         (car w-30766))
                                                                                       (s1-31003
                                                                                         (cdr w-30766)))
                                                                                   (if (null? m1-31002)
                                                                                     (if (null? s1-31003)
                                                                                       w2-31001
                                                                                       (cons (car w2-31001)
                                                                                             (let ((m2-31018
                                                                                                     (cdr w2-31001)))
                                                                                               (if (null? m2-31018)
                                                                                                 s1-31003
                                                                                                 (append
                                                                                                   s1-31003
                                                                                                   m2-31018)))))
                                                                                     (cons (let ((m2-31026
                                                                                                   (car w2-31001)))
                                                                                             (if (null? m2-31026)
                                                                                               m1-31002
                                                                                               (append
                                                                                                 m1-31002
                                                                                                 m2-31026)))
                                                                                           (let ((m2-31034
                                                                                                   (cdr w2-31001)))
                                                                                             (if (null? m2-31034)
                                                                                               s1-31003
                                                                                               (append
                                                                                                 s1-31003
                                                                                                 m2-31034))))))))
                                                                             (module-30994
                                                                               (vector-ref
                                                                                 x-30974
                                                                                 3)))
                                                                         (vector
                                                                           'syntax-object
                                                                           expression-30992
                                                                           wrap-30993
                                                                           module-30994))
                                                                       (if (null? x-30974)
                                                                         x-30974
                                                                         (vector
                                                                           'syntax-object
                                                                           x-30974
                                                                           w-30766
                                                                           mod-30768))))))
                                                           (f-30769
                                                             (cdr forms-30970)))))))
                                              (f-30769 forms-30764))
                                            ids-29720
                                            labels-29721
                                            var-ids-29722
                                            vars-29723
                                            vals-29724
                                            bindings-29725)))
                                      (if (null? ids-29720)
                                        (build-sequence-4328
                                          #f
                                          (map (lambda (x-31119)
                                                 (expand-4382
                                                   (cdr x-31119)
                                                   (car x-31119)
                                                   '(())
                                                   mod-29921))
                                               (cons (cons er-29727
                                                           (let ((x-31194
                                                                   (begin
                                                                     (if (if (pair? e-29918)
                                                                           s-29920
                                                                           #f)
                                                                       (set-source-properties!
                                                                         e-29918
                                                                         s-29920))
                                                                     e-29918)))
                                                             (if (if (null? (car w-29919))
                                                                   (null? (cdr w-29919))
                                                                   #f)
                                                               x-31194
                                                               (if (if (vector?
                                                                         x-31194)
                                                                     (if (= (vector-length
                                                                              x-31194)
                                                                            4)
                                                                       (eq? (vector-ref
                                                                              x-31194
                                                                              0)
                                                                            'syntax-object)
                                                                       #f)
                                                                     #f)
                                                                 (let ((expression-31226
                                                                         (vector-ref
                                                                           x-31194
                                                                           1))
                                                                       (wrap-31227
                                                                         (let ((w2-31235
                                                                                 (vector-ref
                                                                                   x-31194
                                                                                   2)))
                                                                           (let ((m1-31236
                                                                                   (car w-29919))
                                                                                 (s1-31237
                                                                                   (cdr w-29919)))
                                                                             (if (null? m1-31236)
                                                                               (if (null? s1-31237)
                                                                                 w2-31235
                                                                                 (cons (car w2-31235)
                                                                                       (let ((m2-31252
                                                                                               (cdr w2-31235)))
                                                                                         (if (null? m2-31252)
                                                                                           s1-31237
                                                                                           (append
                                                                                             s1-31237
                                                                                             m2-31252)))))
                                                                               (cons (let ((m2-31260
                                                                                             (car w2-31235)))
                                                                                       (if (null? m2-31260)
                                                                                         m1-31236
                                                                                         (append
                                                                                           m1-31236
                                                                                           m2-31260)))
                                                                                     (let ((m2-31268
                                                                                             (cdr w2-31235)))
                                                                                       (if (null? m2-31268)
                                                                                         s1-31237
                                                                                         (append
                                                                                           s1-31237
                                                                                           m2-31268))))))))
                                                                       (module-31228
                                                                         (vector-ref
                                                                           x-31194
                                                                           3)))
                                                                   (vector
                                                                     'syntax-object
                                                                     expression-31226
                                                                     wrap-31227
                                                                     module-31228))
                                                                 (if (null? x-31194)
                                                                   x-31194
                                                                   (vector
                                                                     'syntax-object
                                                                     x-31194
                                                                     w-29919
                                                                     mod-29921))))))
                                                     (cdr body-29719))))
                                        (begin
                                          (if (not (valid-bound-ids?-4372
                                                     ids-29720))
                                            (syntax-violation
                                              #f
                                              "invalid or duplicate identifier in definition"
                                              outer-form-29604))
                                          (letrec*
                                            ((loop-31367
                                               (lambda (bs-31370
                                                        er-cache-31371
                                                        r-cache-31372)
                                                 (if (not (null? bs-31370))
                                                   (let ((b-31373
                                                           (car bs-31370)))
                                                     (if (let ((t-31376
                                                                 (car b-31373)))
                                                           (if (eq? t-31376
                                                                    'macro)
                                                             #t
                                                             (eq? t-31376
                                                                  'syntax-parameter)))
                                                       (let ((er-31378
                                                               (car (cdr b-31373))))
                                                         (let ((r-cache-31379
                                                                 (if (eq? er-31378
                                                                          er-cache-31371)
                                                                   r-cache-31372
                                                                   (macros-only-env-4343
                                                                     er-31378))))
                                                           (begin
                                                             (set-cdr!
                                                               b-31373
                                                               (eval-local-transformer-4388
                                                                 (expand-4382
                                                                   (cdr (cdr b-31373))
                                                                   r-cache-31379
                                                                   '(())
                                                                   mod-29921)
                                                                 mod-29921))
                                                             (if (eq? (car b-31373)
                                                                      'syntax-parameter)
                                                               (set-cdr!
                                                                 b-31373
                                                                 (list (cdr b-31373))))
                                                             (loop-31367
                                                               (cdr bs-31370)
                                                               er-31378
                                                               r-cache-31379))))
                                                       (loop-31367
                                                         (cdr bs-31370)
                                                         er-cache-31371
                                                         r-cache-31372)))))))
                                            (loop-31367 bindings-29725 #f #f))
                                          (set-cdr!
                                            r-29608
                                            (extend-env-4341
                                              labels-29721
                                              bindings-29725
                                              (cdr r-29608)))
                                          (build-letrec-4331
                                            #f
                                            #t
                                            (reverse
                                              (map syntax->datum
                                                   var-ids-29722))
                                            (reverse vars-29723)
                                            (map (lambda (x-31799)
                                                   (expand-4382
                                                     (cdr x-31799)
                                                     (car x-31799)
                                                     '(())
                                                     mod-29921))
                                                 (reverse vals-29724))
                                            (build-sequence-4328
                                              #f
                                              (map (lambda (x-31935)
                                                     (expand-4382
                                                       (cdr x-31935)
                                                       (car x-31935)
                                                       '(())
                                                       mod-29921))
                                                   (cons (cons er-29727
                                                               (let ((x-32010
                                                                       (begin
                                                                         (if (if (pair? e-29918)
                                                                               s-29920
                                                                               #f)
                                                                           (set-source-properties!
                                                                             e-29918
                                                                             s-29920))
                                                                         e-29918)))
                                                                 (if (if (null? (car w-29919))
                                                                       (null? (cdr w-29919))
                                                                       #f)
                                                                   x-32010
                                                                   (if (if (vector?
                                                                             x-32010)
                                                                         (if (= (vector-length
                                                                                  x-32010)
                                                                                4)
                                                                           (eq? (vector-ref
                                                                                  x-32010
                                                                                  0)
                                                                                'syntax-object)
                                                                           #f)
                                                                         #f)
                                                                     (let ((expression-32042
                                                                             (vector-ref
                                                                               x-32010
                                                                               1))
                                                                           (wrap-32043
                                                                             (let ((w2-32051
                                                                                     (vector-ref
                                                                                       x-32010
                                                                                       2)))
                                                                               (let ((m1-32052
                                                                                       (car w-29919))
                                                                                     (s1-32053
                                                                                       (cdr w-29919)))
                                                                                 (if (null? m1-32052)
                                                                                   (if (null? s1-32053)
                                                                                     w2-32051
                                                                                     (cons (car w2-32051)
                                                                                           (let ((m2-32068
                                                                                                   (cdr w2-32051)))
                                                                                             (if (null? m2-32068)
                                                                                               s1-32053
                                                                                               (append
                                                                                                 s1-32053
                                                                                                 m2-32068)))))
                                                                                   (cons (let ((m2-32076
                                                                                                 (car w2-32051)))
                                                                                           (if (null? m2-32076)
                                                                                             m1-32052
                                                                                             (append
                                                                                               m1-32052
                                                                                               m2-32076)))
                                                                                         (let ((m2-32084
                                                                                                 (cdr w2-32051)))
                                                                                           (if (null? m2-32084)
                                                                                             s1-32053
                                                                                             (append
                                                                                               s1-32053
                                                                                               m2-32084))))))))
                                                                           (module-32044
                                                                             (vector-ref
                                                                               x-32010
                                                                               3)))
                                                                       (vector
                                                                         'syntax-object
                                                                         expression-32042
                                                                         wrap-32043
                                                                         module-32044))
                                                                     (if (null? x-32010)
                                                                       x-32010
                                                                       (vector
                                                                         'syntax-object
                                                                         x-32010
                                                                         w-29919
                                                                         mod-29921))))))
                                                         (cdr body-29719))))))))))))))))))
                 (parse-29611
                   (map (lambda (x-29614)
                          (cons r-29608
                                (if (if (null? (car w-29610))
                                      (null? (cdr w-29610))
                                      #f)
                                  x-29614
                                  (if (if (vector? x-29614)
                                        (if (= (vector-length x-29614) 4)
                                          (eq? (vector-ref x-29614 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((expression-29650
                                            (vector-ref x-29614 1))
                                          (wrap-29651
                                            (let ((w2-29661
                                                    (vector-ref x-29614 2)))
                                              (let ((m1-29662 (car w-29610))
                                                    (s1-29663 (cdr w-29610)))
                                                (if (null? m1-29662)
                                                  (if (null? s1-29663)
                                                    w2-29661
                                                    (cons (car w2-29661)
                                                          (let ((m2-29680
                                                                  (cdr w2-29661)))
                                                            (if (null? m2-29680)
                                                              s1-29663
                                                              (append
                                                                s1-29663
                                                                m2-29680)))))
                                                  (cons (let ((m2-29688
                                                                (car w2-29661)))
                                                          (if (null? m2-29688)
                                                            m1-29662
                                                            (append
                                                              m1-29662
                                                              m2-29688)))
                                                        (let ((m2-29696
                                                                (cdr w2-29661)))
                                                          (if (null? m2-29696)
                                                            s1-29663
                                                            (append
                                                              s1-29663
                                                              m2-29696))))))))
                                          (module-29652
                                            (vector-ref x-29614 3)))
                                      (vector
                                        'syntax-object
                                        expression-29650
                                        wrap-29651
                                        module-29652))
                                    (if (null? x-29614)
                                      x-29614
                                      (vector
                                        'syntax-object
                                        x-29614
                                        w-29610
                                        mod-29607))))))
                        body-29603)
                   '()
                   '()
                   '()
                   '()
                   '()
                   '())))))))
     (expand-local-syntax-4387
       (lambda (rec?-32099
                e-32100
                r-32101
                w-32102
                s-32103
                mod-32104
                k-32105)
         (let ((tmp-32107
                 ($sc-dispatch
                   e-32100
                   '(_ #(each (any any)) any . each-any))))
           (if tmp-32107
             (@apply
               (lambda (id-32111 val-32112 e1-32113 e2-32114)
                 (if (not (valid-bound-ids?-4372 id-32111))
                   (syntax-violation
                     #f
                     "duplicate bound keyword"
                     e-32100)
                   (let ((labels-32211 (gen-labels-4349 id-32111)))
                     (let ((new-w-32212
                             (make-binding-wrap-4360
                               id-32111
                               labels-32211
                               w-32102)))
                       (k-32105
                         (cons e1-32113 e2-32114)
                         (extend-env-4341
                           labels-32211
                           (let ((trans-r-32250
                                   (macros-only-env-4343 r-32101)))
                             (begin
                               (if rec?-32099 new-w-32212 w-32102)
                               (map (lambda (x-32251)
                                      (cons 'macro
                                            (eval-local-transformer-4388
                                              (expand-4382
                                                x-32251
                                                trans-r-32250
                                                (values
                                                  (if rec?-32099
                                                    new-w-32212
                                                    w-32102))
                                                mod-32104)
                                              mod-32104)))
                                    val-32112)))
                           r-32101)
                         new-w-32212
                         s-32103
                         mod-32104)))))
               tmp-32107)
             (syntax-violation
               #f
               "bad local syntax definition"
               (let ((x-32558
                       (begin
                         (if (if (pair? e-32100) s-32103 #f)
                           (set-source-properties! e-32100 s-32103))
                         e-32100)))
                 (if (if (null? (car w-32102))
                       (null? (cdr w-32102))
                       #f)
                   x-32558
                   (if (if (vector? x-32558)
                         (if (= (vector-length x-32558) 4)
                           (eq? (vector-ref x-32558 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((expression-32590 (vector-ref x-32558 1))
                           (wrap-32591
                             (let ((w2-32599 (vector-ref x-32558 2)))
                               (let ((m1-32600 (car w-32102))
                                     (s1-32601 (cdr w-32102)))
                                 (if (null? m1-32600)
                                   (if (null? s1-32601)
                                     w2-32599
                                     (cons (car w2-32599)
                                           (let ((m2-32616 (cdr w2-32599)))
                                             (if (null? m2-32616)
                                               s1-32601
                                               (append s1-32601 m2-32616)))))
                                   (cons (let ((m2-32624 (car w2-32599)))
                                           (if (null? m2-32624)
                                             m1-32600
                                             (append m1-32600 m2-32624)))
                                         (let ((m2-32632 (cdr w2-32599)))
                                           (if (null? m2-32632)
                                             s1-32601
                                             (append s1-32601 m2-32632))))))))
                           (module-32592 (vector-ref x-32558 3)))
                       (vector
                         'syntax-object
                         expression-32590
                         wrap-32591
                         module-32592))
                     (if (null? x-32558)
                       x-32558
                       (vector
                         'syntax-object
                         x-32558
                         w-32102
                         mod-32104))))))))))
     (eval-local-transformer-4388
       (lambda (expanded-32650 mod-32651)
         (let ((p-32652 (primitive-eval expanded-32650)))
           (if (procedure? p-32652)
             p-32652
             (syntax-violation
               #f
               "nonprocedure transformer"
               p-32652)))))
     (ellipsis?-4390
       (lambda (x-5943)
         (if (if (if (vector? x-5943)
                   (if (= (vector-length x-5943) 4)
                     (eq? (vector-ref x-5943 0) 'syntax-object)
                     #f)
                   #f)
               (symbol? (vector-ref x-5943 1))
               #f)
           (free-id=?-4370
             x-5943
             '#(syntax-object
                ...
                ((top)
                 #(ribcage () () ())
                 #(ribcage () () ())
                 #(ribcage #(x) #((top)) #("l-*-2324"))
                 #(ribcage
                   (lambda-var-list
                     gen-var
                     strip
                     expand-lambda-case
                     lambda*-formals
                     expand-simple-lambda
                     lambda-formals
                     ellipsis?
                     expand-void
                     eval-local-transformer
                     expand-local-syntax
                     expand-body
                     expand-macro
                     expand-call
                     expand-expr
                     expand
                     syntax-type
                     parse-when-list
                     expand-install-global
                     expand-top-sequence
                     expand-sequence
                     source-wrap
                     wrap
                     bound-id-member?
                     distinct-bound-ids?
                     valid-bound-ids?
                     bound-id=?
                     free-id=?
                     with-transformer-environment
                     transformer-environment
                     resolve-identifier
                     locally-bound-identifiers
                     id-var-name
                     same-marks?
                     join-marks
                     join-wraps
                     smart-append
                     make-binding-wrap
                     extend-ribcage!
                     make-empty-ribcage
                     new-mark
                     anti-mark
                     the-anti-mark
                     top-marked?
                     top-wrap
                     empty-wrap
                     set-ribcage-labels!
                     set-ribcage-marks!
                     set-ribcage-symnames!
                     ribcage-labels
                     ribcage-marks
                     ribcage-symnames
                     ribcage?
                     make-ribcage
                     gen-labels
                     gen-label
                     make-rename
                     rename-marks
                     rename-new
                     rename-old
                     subst-rename?
                     wrap-subst
                     wrap-marks
                     make-wrap
                     id-sym-name&marks
                     id-sym-name
                     id?
                     nonsymbol-id?
                     global-extend
                     macros-only-env
                     extend-var-env
                     extend-env
                     null-env
                     binding-value
                     binding-type
                     make-binding
                     arg-check
                     source-annotation
                     no-source
                     set-syntax-object-module!
                     set-syntax-object-wrap!
                     set-syntax-object-expression!
                     syntax-object-module
                     syntax-object-wrap
                     syntax-object-expression
                     syntax-object?
                     make-syntax-object
                     build-lexical-var
                     build-letrec
                     build-named-let
                     build-let
                     build-sequence
                     build-data
                     build-primref
                     build-primcall
                     build-lambda-case
                     build-case-lambda
                     build-simple-lambda
                     build-global-definition
                     build-global-assignment
                     build-global-reference
                     analyze-variable
                     build-lexical-assignment
                     build-lexical-reference
                     build-dynlet
                     build-conditional
                     build-call
                     build-void
                     maybe-name-value!
                     decorate-source
                     get-global-definition-hook
                     put-global-definition-hook
                     session-id
                     local-eval-hook
                     top-level-eval-hook
                     fx<
                     fx=
                     fx-
                     fx+
                     set-lambda-meta!
                     lambda-meta
                     lambda?
                     make-dynlet
                     make-letrec
                     make-let
                     make-lambda-case
                     make-lambda
                     make-seq
                     make-primcall
                     make-call
                     make-conditional
                     make-toplevel-define
                     make-toplevel-set
                     make-toplevel-ref
                     make-module-set
                     make-module-ref
                     make-lexical-set
                     make-lexical-ref
                     make-primitive-ref
                     make-const
                     make-void)
                   ((top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top)
                    (top))
                   ("l-*-478"
                    "l-*-476"
                    "l-*-474"
                    "l-*-472"
                    "l-*-470"
                    "l-*-468"
                    "l-*-466"
                    "l-*-464"
                    "l-*-462"
                    "l-*-460"
                    "l-*-458"
                    "l-*-456"
                    "l-*-454"
                    "l-*-452"
                    "l-*-450"
                    "l-*-448"
                    "l-*-446"
                    "l-*-444"
                    "l-*-442"
                    "l-*-440"
                    "l-*-438"
                    "l-*-436"
                    "l-*-434"
                    "l-*-432"
                    "l-*-430"
                    "l-*-428"
                    "l-*-426"
                    "l-*-424"
                    "l-*-422"
                    "l-*-420"
                    "l-*-418"
                    "l-*-416"
                    "l-*-414"
                    "l-*-412"
                    "l-*-410"
                    "l-*-408"
                    "l-*-406"
                    "l-*-404"
                    "l-*-402"
                    "l-*-401"
                    "l-*-399"
                    "l-*-396"
                    "l-*-395"
                    "l-*-394"
                    "l-*-392"
                    "l-*-391"
                    "l-*-389"
                    "l-*-387"
                    "l-*-385"
                    "l-*-383"
                    "l-*-381"
                    "l-*-379"
                    "l-*-377"
                    "l-*-375"
                    "l-*-372"
                    "l-*-370"
                    "l-*-369"
                    "l-*-367"
                    "l-*-365"
                    "l-*-363"
                    "l-*-361"
                    "l-*-360"
                    "l-*-359"
                    "l-*-358"
                    "l-*-356"
                    "l-*-355"
                    "l-*-352"
                    "l-*-350"
                    "l-*-348"
                    "l-*-346"
                    "l-*-344"
                    "l-*-342"
                    "l-*-341"
                    "l-*-340"
                    "l-*-338"
                    "l-*-336"
                    "l-*-335"
                    "l-*-332"
                    "l-*-331"
                    "l-*-329"
                    "l-*-327"
                    "l-*-325"
                    "l-*-323"
                    "l-*-321"
                    "l-*-319"
                    "l-*-317"
                    "l-*-315"
                    "l-*-313"
                    "l-*-310"
                    "l-*-308"
                    "l-*-306"
                    "l-*-304"
                    "l-*-302"
                    "l-*-300"
                    "l-*-298"
                    "l-*-296"
                    "l-*-294"
                    "l-*-292"
                    "l-*-290"
                    "l-*-288"
                    "l-*-286"
                    "l-*-284"
                    "l-*-282"
                    "l-*-280"
                    "l-*-278"
                    "l-*-276"
                    "l-*-274"
                    "l-*-272"
                    "l-*-270"
                    "l-*-268"
                    "l-*-266"
                    "l-*-264"
                    "l-*-262"
                    "l-*-260"
                    "l-*-258"
                    "l-*-257"
                    "l-*-256"
                    "l-*-255"
                    "l-*-254"
                    "l-*-252"
                    "l-*-250"
                    "l-*-248"
                    "l-*-245"
                    "l-*-243"
                    "l-*-241"
                    "l-*-239"
                    "l-*-237"
                    "l-*-235"
                    "l-*-233"
                    "l-*-231"
                    "l-*-229"
                    "l-*-227"
                    "l-*-225"
                    "l-*-223"
                    "l-*-221"
                    "l-*-219"
                    "l-*-217"
                    "l-*-215"
                    "l-*-213"
                    "l-*-211"
                    "l-*-209"))
                 #(ribcage
                   (define-structure
                     define-expansion-accessors
                     define-expansion-constructors)
                   ((top) (top) (top))
                   ("l-*-47" "l-*-46" "l-*-45"))
                 #(ribcage () () ()))
                (hygiene guile)))
           #f)))
     (lambda-formals-4391
       (lambda (orig-args-32657)
         (letrec*
           ((req-32658
              (lambda (args-32662 rreq-32663)
                (let ((tmp-32665 ($sc-dispatch args-32662 '())))
                  (if tmp-32665
                    (@apply
                      (lambda () (check-32659 (reverse rreq-32663) #f))
                      tmp-32665)
                    (let ((tmp-32781
                            ($sc-dispatch args-32662 '(any . any))))
                      (if (if tmp-32781
                            (@apply
                              (lambda (a-32785 b-32786)
                                (if (symbol? a-32785)
                                  #t
                                  (if (if (vector? a-32785)
                                        (if (= (vector-length a-32785) 4)
                                          (eq? (vector-ref a-32785 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-32785 1))
                                    #f)))
                              tmp-32781)
                            #f)
                        (@apply
                          (lambda (a-32813 b-32814)
                            (req-32658 b-32814 (cons a-32813 rreq-32663)))
                          tmp-32781)
                        (let ((tmp-32815 (list args-32662)))
                          (if (@apply
                                (lambda (r-32817)
                                  (if (symbol? r-32817)
                                    #t
                                    (if (if (vector? r-32817)
                                          (if (= (vector-length r-32817) 4)
                                            (eq? (vector-ref r-32817 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref r-32817 1))
                                      #f)))
                                tmp-32815)
                            (@apply
                              (lambda (r-32847)
                                (check-32659 (reverse rreq-32663) r-32847))
                              tmp-32815)
                            (syntax-violation
                              'lambda
                              "invalid argument list"
                              orig-args-32657
                              args-32662)))))))))
            (check-32659
              (lambda (req-32971 rest-32972)
                (if (distinct-bound-ids?-4373
                      (if rest-32972
                        (cons rest-32972 req-32971)
                        req-32971))
                  (values req-32971 #f rest-32972 #f)
                  (syntax-violation
                    'lambda
                    "duplicate identifier in argument list"
                    orig-args-32657)))))
           (req-32658 orig-args-32657 '()))))
     (expand-simple-lambda-4392
       (lambda (e-33081
                r-33082
                w-33083
                s-33084
                mod-33085
                req-33086
                rest-33087
                meta-33088
                body-33089)
         (let ((ids-33090
                 (if rest-33087
                   (append req-33086 (list rest-33087))
                   req-33086)))
           (let ((vars-33091 (map gen-var-4396 ids-33090)))
             (let ((labels-33092 (gen-labels-4349 ids-33090)))
               (build-simple-lambda-4322
                 s-33084
                 (map syntax->datum req-33086)
                 (if rest-33087 (syntax->datum rest-33087) #f)
                 vars-33091
                 meta-33088
                 (expand-body-4386
                   body-33089
                   (let ((x-33275
                           (begin
                             (if (if (pair? e-33081) s-33084 #f)
                               (set-source-properties! e-33081 s-33084))
                             e-33081)))
                     (if (if (null? (car w-33083))
                           (null? (cdr w-33083))
                           #f)
                       x-33275
                       (if (if (vector? x-33275)
                             (if (= (vector-length x-33275) 4)
                               (eq? (vector-ref x-33275 0) 'syntax-object)
                               #f)
                             #f)
                         (let ((expression-33307 (vector-ref x-33275 1))
                               (wrap-33308
                                 (let ((w2-33316 (vector-ref x-33275 2)))
                                   (let ((m1-33317 (car w-33083))
                                         (s1-33318 (cdr w-33083)))
                                     (if (null? m1-33317)
                                       (if (null? s1-33318)
                                         w2-33316
                                         (cons (car w2-33316)
                                               (let ((m2-33333 (cdr w2-33316)))
                                                 (if (null? m2-33333)
                                                   s1-33318
                                                   (append
                                                     s1-33318
                                                     m2-33333)))))
                                       (cons (let ((m2-33341 (car w2-33316)))
                                               (if (null? m2-33341)
                                                 m1-33317
                                                 (append m1-33317 m2-33341)))
                                             (let ((m2-33349 (cdr w2-33316)))
                                               (if (null? m2-33349)
                                                 s1-33318
                                                 (append
                                                   s1-33318
                                                   m2-33349))))))))
                               (module-33309 (vector-ref x-33275 3)))
                           (vector
                             'syntax-object
                             expression-33307
                             wrap-33308
                             module-33309))
                         (if (null? x-33275)
                           x-33275
                           (vector
                             'syntax-object
                             x-33275
                             w-33083
                             mod-33085)))))
                   (extend-var-env-4342
                     labels-33092
                     vars-33091
                     r-33082)
                   (make-binding-wrap-4360
                     ids-33090
                     labels-33092
                     w-33083)
                   mod-33085)))))))
     (lambda*-formals-4393
       (lambda (orig-args-33558)
         (letrec*
           ((req-33559
              (lambda (args-33566 rreq-33567)
                (let ((tmp-33569 ($sc-dispatch args-33566 '())))
                  (if tmp-33569
                    (@apply
                      (lambda ()
                        (check-33563 (reverse rreq-33567) '() #f '()))
                      tmp-33569)
                    (let ((tmp-33688
                            ($sc-dispatch args-33566 '(any . any))))
                      (if (if tmp-33688
                            (@apply
                              (lambda (a-33692 b-33693)
                                (if (symbol? a-33692)
                                  #t
                                  (if (if (vector? a-33692)
                                        (if (= (vector-length a-33692) 4)
                                          (eq? (vector-ref a-33692 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-33692 1))
                                    #f)))
                              tmp-33688)
                            #f)
                        (@apply
                          (lambda (a-33720 b-33721)
                            (req-33559 b-33721 (cons a-33720 rreq-33567)))
                          tmp-33688)
                        (let ((tmp-33722
                                ($sc-dispatch args-33566 '(any . any))))
                          (if (if tmp-33722
                                (@apply
                                  (lambda (a-33726 b-33727)
                                    (eq? (syntax->datum a-33726) #:optional))
                                  tmp-33722)
                                #f)
                            (@apply
                              (lambda (a-33728 b-33729)
                                (opt-33560 b-33729 (reverse rreq-33567) '()))
                              tmp-33722)
                            (let ((tmp-33732
                                    ($sc-dispatch args-33566 '(any . any))))
                              (if (if tmp-33732
                                    (@apply
                                      (lambda (a-33736 b-33737)
                                        (eq? (syntax->datum a-33736) #:key))
                                      tmp-33732)
                                    #f)
                                (@apply
                                  (lambda (a-33738 b-33739)
                                    (key-33561
                                      b-33739
                                      (reverse rreq-33567)
                                      '()
                                      '()))
                                  tmp-33732)
                                (let ((tmp-33742
                                        ($sc-dispatch args-33566 '(any any))))
                                  (if (if tmp-33742
                                        (@apply
                                          (lambda (a-33746 b-33747)
                                            (eq? (syntax->datum a-33746)
                                                 #:rest))
                                          tmp-33742)
                                        #f)
                                    (@apply
                                      (lambda (a-33748 b-33749)
                                        (rest-33562
                                          b-33749
                                          (reverse rreq-33567)
                                          '()
                                          '()))
                                      tmp-33742)
                                    (let ((tmp-33752 (list args-33566)))
                                      (if (@apply
                                            (lambda (r-33754)
                                              (if (symbol? r-33754)
                                                #t
                                                (if (if (vector? r-33754)
                                                      (if (= (vector-length
                                                               r-33754)
                                                             4)
                                                        (eq? (vector-ref
                                                               r-33754
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref r-33754 1))
                                                  #f)))
                                            tmp-33752)
                                        (@apply
                                          (lambda (r-33784)
                                            (rest-33562
                                              r-33784
                                              (reverse rreq-33567)
                                              '()
                                              '()))
                                          tmp-33752)
                                        (syntax-violation
                                          'lambda*
                                          "invalid argument list"
                                          orig-args-33558
                                          args-33566)))))))))))))))
            (opt-33560
              (lambda (args-33803 req-33804 ropt-33805)
                (let ((tmp-33807 ($sc-dispatch args-33803 '())))
                  (if tmp-33807
                    (@apply
                      (lambda ()
                        (check-33563
                          req-33804
                          (reverse ropt-33805)
                          #f
                          '()))
                      tmp-33807)
                    (let ((tmp-33928
                            ($sc-dispatch args-33803 '(any . any))))
                      (if (if tmp-33928
                            (@apply
                              (lambda (a-33932 b-33933)
                                (if (symbol? a-33932)
                                  #t
                                  (if (if (vector? a-33932)
                                        (if (= (vector-length a-33932) 4)
                                          (eq? (vector-ref a-33932 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-33932 1))
                                    #f)))
                              tmp-33928)
                            #f)
                        (@apply
                          (lambda (a-33960 b-33961)
                            (opt-33560
                              b-33961
                              req-33804
                              (cons (cons a-33960
                                          '(#(syntax-object
                                              #f
                                              ((top)
                                               #(ribcage
                                                 #(a b)
                                                 #((top) (top))
                                                 #("l-*-2461" "l-*-2462"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(args req ropt)
                                                 #((top) (top) (top))
                                                 #("l-*-2451"
                                                   "l-*-2452"
                                                   "l-*-2453"))
                                               #(ribcage
                                                 (check rest key opt req)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-2397"
                                                  "l-*-2395"
                                                  "l-*-2393"
                                                  "l-*-2391"
                                                  "l-*-2389"))
                                               #(ribcage
                                                 #(orig-args)
                                                 #((top))
                                                 #("l-*-2388"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-call
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   with-transformer-environment
                                                   transformer-environment
                                                   resolve-identifier
                                                   locally-bound-identifiers
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-primcall
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-call
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   session-id
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-seq
                                                   make-primcall
                                                   make-call
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-478"
                                                  "l-*-476"
                                                  "l-*-474"
                                                  "l-*-472"
                                                  "l-*-470"
                                                  "l-*-468"
                                                  "l-*-466"
                                                  "l-*-464"
                                                  "l-*-462"
                                                  "l-*-460"
                                                  "l-*-458"
                                                  "l-*-456"
                                                  "l-*-454"
                                                  "l-*-452"
                                                  "l-*-450"
                                                  "l-*-448"
                                                  "l-*-446"
                                                  "l-*-444"
                                                  "l-*-442"
                                                  "l-*-440"
                                                  "l-*-438"
                                                  "l-*-436"
                                                  "l-*-434"
                                                  "l-*-432"
                                                  "l-*-430"
                                                  "l-*-428"
                                                  "l-*-426"
                                                  "l-*-424"
                                                  "l-*-422"
                                                  "l-*-420"
                                                  "l-*-418"
                                                  "l-*-416"
                                                  "l-*-414"
                                                  "l-*-412"
                                                  "l-*-410"
                                                  "l-*-408"
                                                  "l-*-406"
                                                  "l-*-404"
                                                  "l-*-402"
                                                  "l-*-401"
                                                  "l-*-399"
                                                  "l-*-396"
                                                  "l-*-395"
                                                  "l-*-394"
                                                  "l-*-392"
                                                  "l-*-391"
                                                  "l-*-389"
                                                  "l-*-387"
                                                  "l-*-385"
                                                  "l-*-383"
                                                  "l-*-381"
                                                  "l-*-379"
                                                  "l-*-377"
                                                  "l-*-375"
                                                  "l-*-372"
                                                  "l-*-370"
                                                  "l-*-369"
                                                  "l-*-367"
                                                  "l-*-365"
                                                  "l-*-363"
                                                  "l-*-361"
                                                  "l-*-360"
                                                  "l-*-359"
                                                  "l-*-358"
                                                  "l-*-356"
                                                  "l-*-355"
                                                  "l-*-352"
                                                  "l-*-350"
                                                  "l-*-348"
                                                  "l-*-346"
                                                  "l-*-344"
                                                  "l-*-342"
                                                  "l-*-341"
                                                  "l-*-340"
                                                  "l-*-338"
                                                  "l-*-336"
                                                  "l-*-335"
                                                  "l-*-332"
                                                  "l-*-331"
                                                  "l-*-329"
                                                  "l-*-327"
                                                  "l-*-325"
                                                  "l-*-323"
                                                  "l-*-321"
                                                  "l-*-319"
                                                  "l-*-317"
                                                  "l-*-315"
                                                  "l-*-313"
                                                  "l-*-310"
                                                  "l-*-308"
                                                  "l-*-306"
                                                  "l-*-304"
                                                  "l-*-302"
                                                  "l-*-300"
                                                  "l-*-298"
                                                  "l-*-296"
                                                  "l-*-294"
                                                  "l-*-292"
                                                  "l-*-290"
                                                  "l-*-288"
                                                  "l-*-286"
                                                  "l-*-284"
                                                  "l-*-282"
                                                  "l-*-280"
                                                  "l-*-278"
                                                  "l-*-276"
                                                  "l-*-274"
                                                  "l-*-272"
                                                  "l-*-270"
                                                  "l-*-268"
                                                  "l-*-266"
                                                  "l-*-264"
                                                  "l-*-262"
                                                  "l-*-260"
                                                  "l-*-258"
                                                  "l-*-257"
                                                  "l-*-256"
                                                  "l-*-255"
                                                  "l-*-254"
                                                  "l-*-252"
                                                  "l-*-250"
                                                  "l-*-248"
                                                  "l-*-245"
                                                  "l-*-243"
                                                  "l-*-241"
                                                  "l-*-239"
                                                  "l-*-237"
                                                  "l-*-235"
                                                  "l-*-233"
                                                  "l-*-231"
                                                  "l-*-229"
                                                  "l-*-227"
                                                  "l-*-225"
                                                  "l-*-223"
                                                  "l-*-221"
                                                  "l-*-219"
                                                  "l-*-217"
                                                  "l-*-215"
                                                  "l-*-213"
                                                  "l-*-211"
                                                  "l-*-209"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("l-*-47" "l-*-46" "l-*-45"))
                                               #(ribcage () () ()))
                                              (hygiene guile))))
                                    ropt-33805)))
                          tmp-33928)
                        (let ((tmp-33962
                                ($sc-dispatch args-33803 '((any any) . any))))
                          (if (if tmp-33962
                                (@apply
                                  (lambda (a-33966 init-33967 b-33968)
                                    (if (symbol? a-33966)
                                      #t
                                      (if (if (vector? a-33966)
                                            (if (= (vector-length a-33966) 4)
                                              (eq? (vector-ref a-33966 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref a-33966 1))
                                        #f)))
                                  tmp-33962)
                                #f)
                            (@apply
                              (lambda (a-33995 init-33996 b-33997)
                                (opt-33560
                                  b-33997
                                  req-33804
                                  (cons (list a-33995 init-33996) ropt-33805)))
                              tmp-33962)
                            (let ((tmp-33998
                                    ($sc-dispatch args-33803 '(any . any))))
                              (if (if tmp-33998
                                    (@apply
                                      (lambda (a-34002 b-34003)
                                        (eq? (syntax->datum a-34002) #:key))
                                      tmp-33998)
                                    #f)
                                (@apply
                                  (lambda (a-34004 b-34005)
                                    (key-33561
                                      b-34005
                                      req-33804
                                      (reverse ropt-33805)
                                      '()))
                                  tmp-33998)
                                (let ((tmp-34008
                                        ($sc-dispatch args-33803 '(any any))))
                                  (if (if tmp-34008
                                        (@apply
                                          (lambda (a-34012 b-34013)
                                            (eq? (syntax->datum a-34012)
                                                 #:rest))
                                          tmp-34008)
                                        #f)
                                    (@apply
                                      (lambda (a-34014 b-34015)
                                        (rest-33562
                                          b-34015
                                          req-33804
                                          (reverse ropt-33805)
                                          '()))
                                      tmp-34008)
                                    (let ((tmp-34018 (list args-33803)))
                                      (if (@apply
                                            (lambda (r-34020)
                                              (if (symbol? r-34020)
                                                #t
                                                (if (if (vector? r-34020)
                                                      (if (= (vector-length
                                                               r-34020)
                                                             4)
                                                        (eq? (vector-ref
                                                               r-34020
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref r-34020 1))
                                                  #f)))
                                            tmp-34018)
                                        (@apply
                                          (lambda (r-34050)
                                            (rest-33562
                                              r-34050
                                              req-33804
                                              (reverse ropt-33805)
                                              '()))
                                          tmp-34018)
                                        (syntax-violation
                                          'lambda*
                                          "invalid optional argument list"
                                          orig-args-33558
                                          args-33803)))))))))))))))
            (key-33561
              (lambda (args-34069 req-34070 opt-34071 rkey-34072)
                (let ((tmp-34074 ($sc-dispatch args-34069 '())))
                  (if tmp-34074
                    (@apply
                      (lambda ()
                        (check-33563
                          req-34070
                          opt-34071
                          #f
                          (cons #f (reverse rkey-34072))))
                      tmp-34074)
                    (let ((tmp-34196
                            ($sc-dispatch args-34069 '(any . any))))
                      (if (if tmp-34196
                            (@apply
                              (lambda (a-34200 b-34201)
                                (if (symbol? a-34200)
                                  #t
                                  (if (if (vector? a-34200)
                                        (if (= (vector-length a-34200) 4)
                                          (eq? (vector-ref a-34200 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-34200 1))
                                    #f)))
                              tmp-34196)
                            #f)
                        (@apply
                          (lambda (a-34228 b-34229)
                            (let ((tmp-34230
                                    (symbol->keyword (syntax->datum a-34228))))
                              (key-33561
                                b-34229
                                req-34070
                                opt-34071
                                (cons (cons tmp-34230
                                            (cons a-34228
                                                  '(#(syntax-object
                                                      #f
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(k)
                                                         #((top))
                                                         #("l-*-2524"))
                                                       #(ribcage
                                                         #(a b)
                                                         #((top) (top))
                                                         #("l-*-2518"
                                                           "l-*-2519"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(args req opt rkey)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("l-*-2507"
                                                           "l-*-2508"
                                                           "l-*-2509"
                                                           "l-*-2510"))
                                                       #(ribcage
                                                         (check rest
                                                                key
                                                                opt
                                                                req)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-2397"
                                                          "l-*-2395"
                                                          "l-*-2393"
                                                          "l-*-2391"
                                                          "l-*-2389"))
                                                       #(ribcage
                                                         #(orig-args)
                                                         #((top))
                                                         #("l-*-2388"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-call
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-primcall
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-call
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           session-id
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-seq
                                                           make-primcall
                                                           make-call
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-478"
                                                          "l-*-476"
                                                          "l-*-474"
                                                          "l-*-472"
                                                          "l-*-470"
                                                          "l-*-468"
                                                          "l-*-466"
                                                          "l-*-464"
                                                          "l-*-462"
                                                          "l-*-460"
                                                          "l-*-458"
                                                          "l-*-456"
                                                          "l-*-454"
                                                          "l-*-452"
                                                          "l-*-450"
                                                          "l-*-448"
                                                          "l-*-446"
                                                          "l-*-444"
                                                          "l-*-442"
                                                          "l-*-440"
                                                          "l-*-438"
                                                          "l-*-436"
                                                          "l-*-434"
                                                          "l-*-432"
                                                          "l-*-430"
                                                          "l-*-428"
                                                          "l-*-426"
                                                          "l-*-424"
                                                          "l-*-422"
                                                          "l-*-420"
                                                          "l-*-418"
                                                          "l-*-416"
                                                          "l-*-414"
                                                          "l-*-412"
                                                          "l-*-410"
                                                          "l-*-408"
                                                          "l-*-406"
                                                          "l-*-404"
                                                          "l-*-402"
                                                          "l-*-401"
                                                          "l-*-399"
                                                          "l-*-396"
                                                          "l-*-395"
                                                          "l-*-394"
                                                          "l-*-392"
                                                          "l-*-391"
                                                          "l-*-389"
                                                          "l-*-387"
                                                          "l-*-385"
                                                          "l-*-383"
                                                          "l-*-381"
                                                          "l-*-379"
                                                          "l-*-377"
                                                          "l-*-375"
                                                          "l-*-372"
                                                          "l-*-370"
                                                          "l-*-369"
                                                          "l-*-367"
                                                          "l-*-365"
                                                          "l-*-363"
                                                          "l-*-361"
                                                          "l-*-360"
                                                          "l-*-359"
                                                          "l-*-358"
                                                          "l-*-356"
                                                          "l-*-355"
                                                          "l-*-352"
                                                          "l-*-350"
                                                          "l-*-348"
                                                          "l-*-346"
                                                          "l-*-344"
                                                          "l-*-342"
                                                          "l-*-341"
                                                          "l-*-340"
                                                          "l-*-338"
                                                          "l-*-336"
                                                          "l-*-335"
                                                          "l-*-332"
                                                          "l-*-331"
                                                          "l-*-329"
                                                          "l-*-327"
                                                          "l-*-325"
                                                          "l-*-323"
                                                          "l-*-321"
                                                          "l-*-319"
                                                          "l-*-317"
                                                          "l-*-315"
                                                          "l-*-313"
                                                          "l-*-310"
                                                          "l-*-308"
                                                          "l-*-306"
                                                          "l-*-304"
                                                          "l-*-302"
                                                          "l-*-300"
                                                          "l-*-298"
                                                          "l-*-296"
                                                          "l-*-294"
                                                          "l-*-292"
                                                          "l-*-290"
                                                          "l-*-288"
                                                          "l-*-286"
                                                          "l-*-284"
                                                          "l-*-282"
                                                          "l-*-280"
                                                          "l-*-278"
                                                          "l-*-276"
                                                          "l-*-274"
                                                          "l-*-272"
                                                          "l-*-270"
                                                          "l-*-268"
                                                          "l-*-266"
                                                          "l-*-264"
                                                          "l-*-262"
                                                          "l-*-260"
                                                          "l-*-258"
                                                          "l-*-257"
                                                          "l-*-256"
                                                          "l-*-255"
                                                          "l-*-254"
                                                          "l-*-252"
                                                          "l-*-250"
                                                          "l-*-248"
                                                          "l-*-245"
                                                          "l-*-243"
                                                          "l-*-241"
                                                          "l-*-239"
                                                          "l-*-237"
                                                          "l-*-235"
                                                          "l-*-233"
                                                          "l-*-231"
                                                          "l-*-229"
                                                          "l-*-227"
                                                          "l-*-225"
                                                          "l-*-223"
                                                          "l-*-221"
                                                          "l-*-219"
                                                          "l-*-217"
                                                          "l-*-215"
                                                          "l-*-213"
                                                          "l-*-211"
                                                          "l-*-209"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("l-*-47"
                                                          "l-*-46"
                                                          "l-*-45"))
                                                       #(ribcage () () ()))
                                                      (hygiene guile)))))
                                      rkey-34072))))
                          tmp-34196)
                        (let ((tmp-34233
                                ($sc-dispatch args-34069 '((any any) . any))))
                          (if (if tmp-34233
                                (@apply
                                  (lambda (a-34237 init-34238 b-34239)
                                    (if (symbol? a-34237)
                                      #t
                                      (if (if (vector? a-34237)
                                            (if (= (vector-length a-34237) 4)
                                              (eq? (vector-ref a-34237 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref a-34237 1))
                                        #f)))
                                  tmp-34233)
                                #f)
                            (@apply
                              (lambda (a-34266 init-34267 b-34268)
                                (let ((tmp-34269
                                        (symbol->keyword
                                          (syntax->datum a-34266))))
                                  (key-33561
                                    b-34268
                                    req-34070
                                    opt-34071
                                    (cons (list tmp-34269 a-34266 init-34267)
                                          rkey-34072))))
                              tmp-34233)
                            (let ((tmp-34272
                                    ($sc-dispatch
                                      args-34069
                                      '((any any any) . any))))
                              (if (if tmp-34272
                                    (@apply
                                      (lambda (a-34276
                                               init-34277
                                               k-34278
                                               b-34279)
                                        (if (if (symbol? a-34276)
                                              #t
                                              (if (if (vector? a-34276)
                                                    (if (= (vector-length
                                                             a-34276)
                                                           4)
                                                      (eq? (vector-ref
                                                             a-34276
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref a-34276 1))
                                                #f))
                                          (keyword? (syntax->datum k-34278))
                                          #f))
                                      tmp-34272)
                                    #f)
                                (@apply
                                  (lambda (a-34306 init-34307 k-34308 b-34309)
                                    (key-33561
                                      b-34309
                                      req-34070
                                      opt-34071
                                      (cons (list k-34308 a-34306 init-34307)
                                            rkey-34072)))
                                  tmp-34272)
                                (let ((tmp-34310
                                        ($sc-dispatch args-34069 '(any))))
                                  (if (if tmp-34310
                                        (@apply
                                          (lambda (aok-34314)
                                            (eq? (syntax->datum aok-34314)
                                                 #:allow-other-keys))
                                          tmp-34310)
                                        #f)
                                    (@apply
                                      (lambda (aok-34315)
                                        (check-33563
                                          req-34070
                                          opt-34071
                                          #f
                                          (cons #t (reverse rkey-34072))))
                                      tmp-34310)
                                    (let ((tmp-34434
                                            ($sc-dispatch
                                              args-34069
                                              '(any any any))))
                                      (if (if tmp-34434
                                            (@apply
                                              (lambda (aok-34438
                                                       a-34439
                                                       b-34440)
                                                (if (eq? (syntax->datum
                                                           aok-34438)
                                                         #:allow-other-keys)
                                                  (eq? (syntax->datum a-34439)
                                                       #:rest)
                                                  #f))
                                              tmp-34434)
                                            #f)
                                        (@apply
                                          (lambda (aok-34441 a-34442 b-34443)
                                            (rest-33562
                                              b-34443
                                              req-34070
                                              opt-34071
                                              (cons #t (reverse rkey-34072))))
                                          tmp-34434)
                                        (let ((tmp-34446
                                                ($sc-dispatch
                                                  args-34069
                                                  '(any . any))))
                                          (if (if tmp-34446
                                                (@apply
                                                  (lambda (aok-34450 r-34451)
                                                    (if (eq? (syntax->datum
                                                               aok-34450)
                                                             #:allow-other-keys)
                                                      (if (symbol? r-34451)
                                                        #t
                                                        (if (if (vector?
                                                                  r-34451)
                                                              (if (= (vector-length
                                                                       r-34451)
                                                                     4)
                                                                (eq? (vector-ref
                                                                       r-34451
                                                                       0)
                                                                     'syntax-object)
                                                                #f)
                                                              #f)
                                                          (symbol?
                                                            (vector-ref
                                                              r-34451
                                                              1))
                                                          #f))
                                                      #f))
                                                  tmp-34446)
                                                #f)
                                            (@apply
                                              (lambda (aok-34478 r-34479)
                                                (rest-33562
                                                  r-34479
                                                  req-34070
                                                  opt-34071
                                                  (cons #t
                                                        (reverse rkey-34072))))
                                              tmp-34446)
                                            (let ((tmp-34482
                                                    ($sc-dispatch
                                                      args-34069
                                                      '(any any))))
                                              (if (if tmp-34482
                                                    (@apply
                                                      (lambda (a-34486 b-34487)
                                                        (eq? (syntax->datum
                                                               a-34486)
                                                             #:rest))
                                                      tmp-34482)
                                                    #f)
                                                (@apply
                                                  (lambda (a-34488 b-34489)
                                                    (rest-33562
                                                      b-34489
                                                      req-34070
                                                      opt-34071
                                                      (cons #f
                                                            (reverse
                                                              rkey-34072))))
                                                  tmp-34482)
                                                (let ((tmp-34492
                                                        (list args-34069)))
                                                  (if (@apply
                                                        (lambda (r-34494)
                                                          (if (symbol? r-34494)
                                                            #t
                                                            (if (if (vector?
                                                                      r-34494)
                                                                  (if (= (vector-length
                                                                           r-34494)
                                                                         4)
                                                                    (eq? (vector-ref
                                                                           r-34494
                                                                           0)
                                                                         'syntax-object)
                                                                    #f)
                                                                  #f)
                                                              (symbol?
                                                                (vector-ref
                                                                  r-34494
                                                                  1))
                                                              #f)))
                                                        tmp-34492)
                                                    (@apply
                                                      (lambda (r-34524)
                                                        (rest-33562
                                                          r-34524
                                                          req-34070
                                                          opt-34071
                                                          (cons #f
                                                                (reverse
                                                                  rkey-34072))))
                                                      tmp-34492)
                                                    (syntax-violation
                                                      'lambda*
                                                      "invalid keyword argument list"
                                                      orig-args-33558
                                                      args-34069)))))))))))))))))))))
            (rest-33562
              (lambda (args-34552 req-34553 opt-34554 kw-34555)
                (let ((tmp-34557 (list args-34552)))
                  (if (@apply
                        (lambda (r-34559)
                          (if (symbol? r-34559)
                            #t
                            (if (if (vector? r-34559)
                                  (if (= (vector-length r-34559) 4)
                                    (eq? (vector-ref r-34559 0) 'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref r-34559 1))
                              #f)))
                        tmp-34557)
                    (@apply
                      (lambda (r-34589)
                        (check-33563
                          req-34553
                          opt-34554
                          r-34589
                          kw-34555))
                      tmp-34557)
                    (syntax-violation
                      'lambda*
                      "invalid rest argument"
                      orig-args-33558
                      args-34552)))))
            (check-33563
              (lambda (req-34717 opt-34718 rest-34719 kw-34720)
                (if (distinct-bound-ids?-4373
                      (append
                        req-34717
                        (map car opt-34718)
                        (if rest-34719 (list rest-34719) '())
                        (if (pair? kw-34720)
                          (map cadr (cdr kw-34720))
                          '())))
                  (values req-34717 opt-34718 rest-34719 kw-34720)
                  (syntax-violation
                    'lambda*
                    "duplicate identifier in argument list"
                    orig-args-33558)))))
           (req-33559 orig-args-33558 '()))))
     (expand-lambda-case-4394
       (lambda (e-34829
                r-34830
                w-34831
                s-34832
                mod-34833
                get-formals-34834
                clauses-34835)
         (letrec*
           ((parse-req-34836
              (lambda (req-34969
                       opt-34970
                       rest-34971
                       kw-34972
                       body-34973)
                (let ((vars-34974 (map gen-var-4396 req-34969))
                      (labels-34975 (gen-labels-4349 req-34969)))
                  (let ((r*-34976
                          (extend-var-env-4342
                            labels-34975
                            vars-34974
                            r-34830))
                        (w*-34977
                          (make-binding-wrap-4360
                            req-34969
                            labels-34975
                            w-34831)))
                    (parse-opt-34837
                      (map syntax->datum req-34969)
                      opt-34970
                      rest-34971
                      kw-34972
                      body-34973
                      (reverse vars-34974)
                      r*-34976
                      w*-34977
                      '()
                      '())))))
            (parse-opt-34837
              (lambda (req-35174
                       opt-35175
                       rest-35176
                       kw-35177
                       body-35178
                       vars-35179
                       r*-35180
                       w*-35181
                       out-35182
                       inits-35183)
                (if (pair? opt-35175)
                  (let ((tmp-35184 (car opt-35175)))
                    (let ((tmp-35185 ($sc-dispatch tmp-35184 '(any any))))
                      (if tmp-35185
                        (@apply
                          (lambda (id-35187 i-35188)
                            (let ((v-35189
                                    (let ((id-35197
                                            (if (if (vector? id-35187)
                                                  (if (= (vector-length
                                                           id-35187)
                                                         4)
                                                    (eq? (vector-ref
                                                           id-35187
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref id-35187 1)
                                              id-35187)))
                                      (gensym
                                        (string-append
                                          (symbol->string id-35197)
                                          "-")))))
                              (let ((l-35190 (gen-labels-4349 (list v-35189))))
                                (let ((r**-35191
                                        (extend-var-env-4342
                                          l-35190
                                          (list v-35189)
                                          r*-35180)))
                                  (let ((w**-35192
                                          (make-binding-wrap-4360
                                            (list id-35187)
                                            l-35190
                                            w*-35181)))
                                    (parse-opt-34837
                                      req-35174
                                      (cdr opt-35175)
                                      rest-35176
                                      kw-35177
                                      body-35178
                                      (cons v-35189 vars-35179)
                                      r**-35191
                                      w**-35192
                                      (cons (syntax->datum id-35187) out-35182)
                                      (cons (expand-4382
                                              i-35188
                                              r*-35180
                                              w*-35181
                                              mod-34833)
                                            inits-35183)))))))
                          tmp-35185)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-35184))))
                  (if rest-35176
                    (let ((v-35455
                            (let ((id-35465
                                    (if (if (vector? rest-35176)
                                          (if (= (vector-length rest-35176) 4)
                                            (eq? (vector-ref rest-35176 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref rest-35176 1)
                                      rest-35176)))
                              (gensym
                                (string-append
                                  (symbol->string id-35465)
                                  "-")))))
                      (let ((l-35456 (gen-labels-4349 (list v-35455))))
                        (let ((r*-35457
                                (extend-var-env-4342
                                  l-35456
                                  (list v-35455)
                                  r*-35180)))
                          (let ((w*-35458
                                  (make-binding-wrap-4360
                                    (list rest-35176)
                                    l-35456
                                    w*-35181)))
                            (parse-kw-34838
                              req-35174
                              (if (pair? out-35182) (reverse out-35182) #f)
                              (syntax->datum rest-35176)
                              (if (pair? kw-35177) (cdr kw-35177) kw-35177)
                              body-35178
                              (cons v-35455 vars-35179)
                              r*-35457
                              w*-35458
                              (if (pair? kw-35177) (car kw-35177) #f)
                              '()
                              inits-35183)))))
                    (parse-kw-34838
                      req-35174
                      (if (pair? out-35182) (reverse out-35182) #f)
                      #f
                      (if (pair? kw-35177) (cdr kw-35177) kw-35177)
                      body-35178
                      vars-35179
                      r*-35180
                      w*-35181
                      (if (pair? kw-35177) (car kw-35177) #f)
                      '()
                      inits-35183)))))
            (parse-kw-34838
              (lambda (req-35648
                       opt-35649
                       rest-35650
                       kw-35651
                       body-35652
                       vars-35653
                       r*-35654
                       w*-35655
                       aok-35656
                       out-35657
                       inits-35658)
                (if (pair? kw-35651)
                  (let ((tmp-35659 (car kw-35651)))
                    (let ((tmp-35660
                            ($sc-dispatch tmp-35659 '(any any any))))
                      (if tmp-35660
                        (@apply
                          (lambda (k-35662 id-35663 i-35664)
                            (let ((v-35665
                                    (let ((id-35673
                                            (if (if (vector? id-35663)
                                                  (if (= (vector-length
                                                           id-35663)
                                                         4)
                                                    (eq? (vector-ref
                                                           id-35663
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref id-35663 1)
                                              id-35663)))
                                      (gensym
                                        (string-append
                                          (symbol->string id-35673)
                                          "-")))))
                              (let ((l-35666 (gen-labels-4349 (list v-35665))))
                                (let ((r**-35667
                                        (extend-var-env-4342
                                          l-35666
                                          (list v-35665)
                                          r*-35654)))
                                  (let ((w**-35668
                                          (make-binding-wrap-4360
                                            (list id-35663)
                                            l-35666
                                            w*-35655)))
                                    (parse-kw-34838
                                      req-35648
                                      opt-35649
                                      rest-35650
                                      (cdr kw-35651)
                                      body-35652
                                      (cons v-35665 vars-35653)
                                      r**-35667
                                      w**-35668
                                      aok-35656
                                      (cons (list (syntax->datum k-35662)
                                                  (syntax->datum id-35663)
                                                  v-35665)
                                            out-35657)
                                      (cons (expand-4382
                                              i-35664
                                              r*-35654
                                              w*-35655
                                              mod-34833)
                                            inits-35658)))))))
                          tmp-35660)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-35659))))
                  (parse-body-34839
                    req-35648
                    opt-35649
                    rest-35650
                    (if (if aok-35656 aok-35656 (pair? out-35657))
                      (cons aok-35656 (reverse out-35657))
                      #f)
                    body-35652
                    (reverse vars-35653)
                    r*-35654
                    w*-35655
                    (reverse inits-35658)
                    '()))))
            (parse-body-34839
              (lambda (req-35940
                       opt-35941
                       rest-35942
                       kw-35943
                       body-35944
                       vars-35945
                       r*-35946
                       w*-35947
                       inits-35948
                       meta-35949)
                (let ((tmp-35951
                        ($sc-dispatch body-35944 '(any any . each-any))))
                  (if (if tmp-35951
                        (@apply
                          (lambda (docstring-35955 e1-35956 e2-35957)
                            (string? (syntax->datum docstring-35955)))
                          tmp-35951)
                        #f)
                    (@apply
                      (lambda (docstring-35958 e1-35959 e2-35960)
                        (parse-body-34839
                          req-35940
                          opt-35941
                          rest-35942
                          kw-35943
                          (cons e1-35959 e2-35960)
                          vars-35945
                          r*-35946
                          w*-35947
                          inits-35948
                          (append
                            meta-35949
                            (list (cons 'documentation
                                        (syntax->datum docstring-35958))))))
                      tmp-35951)
                    (let ((tmp-35961
                            ($sc-dispatch
                              body-35944
                              '(#(vector #(each (any . any)))
                                any
                                .
                                each-any))))
                      (if tmp-35961
                        (@apply
                          (lambda (k-35965 v-35966 e1-35967 e2-35968)
                            (parse-body-34839
                              req-35940
                              opt-35941
                              rest-35942
                              kw-35943
                              (cons e1-35967 e2-35968)
                              vars-35945
                              r*-35946
                              w*-35947
                              inits-35948
                              (append
                                meta-35949
                                (syntax->datum (map cons k-35965 v-35966)))))
                          tmp-35961)
                        (let ((tmp-35969
                                ($sc-dispatch body-35944 '(any . each-any))))
                          (if tmp-35969
                            (@apply
                              (lambda (e1-35973 e2-35974)
                                (values
                                  meta-35949
                                  req-35940
                                  opt-35941
                                  rest-35942
                                  kw-35943
                                  inits-35948
                                  vars-35945
                                  (expand-body-4386
                                    (cons e1-35973 e2-35974)
                                    (let ((x-35986
                                            (begin
                                              (if (if (pair? e-34829)
                                                    s-34832
                                                    #f)
                                                (set-source-properties!
                                                  e-34829
                                                  s-34832))
                                              e-34829)))
                                      (if (if (null? (car w-34831))
                                            (null? (cdr w-34831))
                                            #f)
                                        x-35986
                                        (if (if (vector? x-35986)
                                              (if (= (vector-length x-35986) 4)
                                                (eq? (vector-ref x-35986 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (let ((expression-36018
                                                  (vector-ref x-35986 1))
                                                (wrap-36019
                                                  (let ((w2-36027
                                                          (vector-ref
                                                            x-35986
                                                            2)))
                                                    (let ((m1-36028
                                                            (car w-34831))
                                                          (s1-36029
                                                            (cdr w-34831)))
                                                      (if (null? m1-36028)
                                                        (if (null? s1-36029)
                                                          w2-36027
                                                          (cons (car w2-36027)
                                                                (let ((m2-36044
                                                                        (cdr w2-36027)))
                                                                  (if (null? m2-36044)
                                                                    s1-36029
                                                                    (append
                                                                      s1-36029
                                                                      m2-36044)))))
                                                        (cons (let ((m2-36052
                                                                      (car w2-36027)))
                                                                (if (null? m2-36052)
                                                                  m1-36028
                                                                  (append
                                                                    m1-36028
                                                                    m2-36052)))
                                                              (let ((m2-36060
                                                                      (cdr w2-36027)))
                                                                (if (null? m2-36060)
                                                                  s1-36029
                                                                  (append
                                                                    s1-36029
                                                                    m2-36060))))))))
                                                (module-36020
                                                  (vector-ref x-35986 3)))
                                            (vector
                                              'syntax-object
                                              expression-36018
                                              wrap-36019
                                              module-36020))
                                          (if (null? x-35986)
                                            x-35986
                                            (vector
                                              'syntax-object
                                              x-35986
                                              w-34831
                                              mod-34833)))))
                                    r*-35946
                                    w*-35947
                                    mod-34833)))
                              tmp-35969)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              body-35944))))))))))
           (let ((tmp-34841 ($sc-dispatch clauses-34835 '())))
             (if tmp-34841
               (@apply (lambda () (values '() #f)) tmp-34841)
               (let ((tmp-34845
                       ($sc-dispatch
                         clauses-34835
                         '((any any . each-any)
                           .
                           #(each (any any . each-any))))))
                 (if tmp-34845
                   (@apply
                     (lambda (args-34849
                              e1-34850
                              e2-34851
                              args*-34852
                              e1*-34853
                              e2*-34854)
                       (call-with-values
                         (lambda () (get-formals-34834 args-34849))
                         (lambda (req-34855 opt-34856 rest-34857 kw-34858)
                           (call-with-values
                             (lambda ()
                               (parse-req-34836
                                 req-34855
                                 opt-34856
                                 rest-34857
                                 kw-34858
                                 (cons e1-34850 e2-34851)))
                             (lambda (meta-34925
                                      req-34926
                                      opt-34927
                                      rest-34928
                                      kw-34929
                                      inits-34930
                                      vars-34931
                                      body-34932)
                               (call-with-values
                                 (lambda ()
                                   (expand-lambda-case-4394
                                     e-34829
                                     r-34830
                                     w-34831
                                     s-34832
                                     mod-34833
                                     get-formals-34834
                                     (map (lambda (tmp-2859-34933
                                                   tmp-2858-34934
                                                   tmp-2857-34935)
                                            (cons tmp-2857-34935
                                                  (cons tmp-2858-34934
                                                        tmp-2859-34933)))
                                          e2*-34854
                                          e1*-34853
                                          args*-34852)))
                                 (lambda (meta*-34936 else*-34937)
                                   (values
                                     (append meta-34925 meta*-34936)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 15)
                                       s-34832
                                       req-34926
                                       opt-34927
                                       rest-34928
                                       kw-34929
                                       inits-34930
                                       vars-34931
                                       body-34932
                                       else*-34937)))))))))
                     tmp-34845)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     clauses-34835))))))))
     (strip-4395
       (lambda (x-36087 w-36088)
         (if (memq 'top (car w-36088))
           x-36087
           (letrec*
             ((f-36089
                (lambda (x-36092)
                  (if (if (vector? x-36092)
                        (if (= (vector-length x-36092) 4)
                          (eq? (vector-ref x-36092 0) 'syntax-object)
                          #f)
                        #f)
                    (strip-4395
                      (vector-ref x-36092 1)
                      (vector-ref x-36092 2))
                    (if (pair? x-36092)
                      (let ((a-36111 (f-36089 (car x-36092)))
                            (d-36112 (f-36089 (cdr x-36092))))
                        (if (if (eq? a-36111 (car x-36092))
                              (eq? d-36112 (cdr x-36092))
                              #f)
                          x-36092
                          (cons a-36111 d-36112)))
                      (if (vector? x-36092)
                        (let ((old-36115 (vector->list x-36092)))
                          (let ((new-36116 (map f-36089 old-36115)))
                            (letrec*
                              ((lp-36117
                                 (lambda (l1-36214 l2-36215)
                                   (if (null? l1-36214)
                                     x-36092
                                     (if (eq? (car l1-36214) (car l2-36215))
                                       (lp-36117 (cdr l1-36214) (cdr l2-36215))
                                       (list->vector new-36116))))))
                              (lp-36117 old-36115 new-36116))))
                        x-36092))))))
             (f-36089 x-36087)))))
     (gen-var-4396
       (lambda (id-34981)
         (let ((id-34982
                 (if (if (vector? id-34981)
                       (if (= (vector-length id-34981) 4)
                         (eq? (vector-ref id-34981 0) 'syntax-object)
                         #f)
                       #f)
                   (vector-ref id-34981 1)
                   id-34981)))
           (gensym
             (string-append (symbol->string id-34982) "-")))))
     (lambda-var-list-4397
       (lambda (vars-36216)
         (letrec*
           ((lvl-36217
              (lambda (vars-36220 ls-36221 w-36222)
                (if (pair? vars-36220)
                  (lvl-36217
                    (cdr vars-36220)
                    (cons (let ((x-36226 (car vars-36220)))
                            (if (if (null? (car w-36222))
                                  (null? (cdr w-36222))
                                  #f)
                              x-36226
                              (if (if (vector? x-36226)
                                    (if (= (vector-length x-36226) 4)
                                      (eq? (vector-ref x-36226 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((expression-36244 (vector-ref x-36226 1))
                                      (wrap-36245
                                        (let ((w2-36253
                                                (vector-ref x-36226 2)))
                                          (let ((m1-36254 (car w-36222))
                                                (s1-36255 (cdr w-36222)))
                                            (if (null? m1-36254)
                                              (if (null? s1-36255)
                                                w2-36253
                                                (cons (car w2-36253)
                                                      (let ((m2-36270
                                                              (cdr w2-36253)))
                                                        (if (null? m2-36270)
                                                          s1-36255
                                                          (append
                                                            s1-36255
                                                            m2-36270)))))
                                              (cons (let ((m2-36278
                                                            (car w2-36253)))
                                                      (if (null? m2-36278)
                                                        m1-36254
                                                        (append
                                                          m1-36254
                                                          m2-36278)))
                                                    (let ((m2-36286
                                                            (cdr w2-36253)))
                                                      (if (null? m2-36286)
                                                        s1-36255
                                                        (append
                                                          s1-36255
                                                          m2-36286))))))))
                                      (module-36246 (vector-ref x-36226 3)))
                                  (vector
                                    'syntax-object
                                    expression-36244
                                    wrap-36245
                                    module-36246))
                                (if (null? x-36226)
                                  x-36226
                                  (vector
                                    'syntax-object
                                    x-36226
                                    w-36222
                                    #f)))))
                          ls-36221)
                    w-36222)
                  (if (if (symbol? vars-36220)
                        #t
                        (if (if (vector? vars-36220)
                              (if (= (vector-length vars-36220) 4)
                                (eq? (vector-ref vars-36220 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref vars-36220 1))
                          #f))
                    (cons (if (if (null? (car w-36222))
                                (null? (cdr w-36222))
                                #f)
                            vars-36220
                            (if (if (vector? vars-36220)
                                  (if (= (vector-length vars-36220) 4)
                                    (eq? (vector-ref vars-36220 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (let ((expression-36356
                                      (vector-ref vars-36220 1))
                                    (wrap-36357
                                      (let ((w2-36367
                                              (vector-ref vars-36220 2)))
                                        (let ((m1-36368 (car w-36222))
                                              (s1-36369 (cdr w-36222)))
                                          (if (null? m1-36368)
                                            (if (null? s1-36369)
                                              w2-36367
                                              (cons (car w2-36367)
                                                    (let ((m2-36386
                                                            (cdr w2-36367)))
                                                      (if (null? m2-36386)
                                                        s1-36369
                                                        (append
                                                          s1-36369
                                                          m2-36386)))))
                                            (cons (let ((m2-36394
                                                          (car w2-36367)))
                                                    (if (null? m2-36394)
                                                      m1-36368
                                                      (append
                                                        m1-36368
                                                        m2-36394)))
                                                  (let ((m2-36402
                                                          (cdr w2-36367)))
                                                    (if (null? m2-36402)
                                                      s1-36369
                                                      (append
                                                        s1-36369
                                                        m2-36402))))))))
                                    (module-36358 (vector-ref vars-36220 3)))
                                (vector
                                  'syntax-object
                                  expression-36356
                                  wrap-36357
                                  module-36358))
                              (if (null? vars-36220)
                                vars-36220
                                (vector
                                  'syntax-object
                                  vars-36220
                                  w-36222
                                  #f))))
                          ls-36221)
                    (if (null? vars-36220)
                      ls-36221
                      (if (if (vector? vars-36220)
                            (if (= (vector-length vars-36220) 4)
                              (eq? (vector-ref vars-36220 0) 'syntax-object)
                              #f)
                            #f)
                        (lvl-36217
                          (vector-ref vars-36220 1)
                          ls-36221
                          (let ((w2-36443 (vector-ref vars-36220 2)))
                            (let ((m1-36444 (car w-36222))
                                  (s1-36445 (cdr w-36222)))
                              (if (null? m1-36444)
                                (if (null? s1-36445)
                                  w2-36443
                                  (cons (car w2-36443)
                                        (let ((m2-36456 (cdr w2-36443)))
                                          (if (null? m2-36456)
                                            s1-36445
                                            (append s1-36445 m2-36456)))))
                                (cons (let ((m2-36464 (car w2-36443)))
                                        (if (null? m2-36464)
                                          m1-36444
                                          (append m1-36444 m2-36464)))
                                      (let ((m2-36472 (cdr w2-36443)))
                                        (if (null? m2-36472)
                                          s1-36445
                                          (append s1-36445 m2-36472))))))))
                        (cons vars-36220 ls-36221))))))))
           (lvl-36217 vars-36216 '() '(()))))))
    (begin
      (set! session-id-4307
        (let ((v-18915
                (module-variable
                  (current-module)
                  'syntax-session-id)))
          (lambda () ((variable-ref v-18915)))))
      (set! transformer-environment-4368
        (make-fluid
          (lambda (k-17548)
            (error "called outside the dynamic extent of a syntax transformer"))))
      (module-define!
        (current-module)
        'letrec-syntax
        (make-syntax-transformer
          'letrec-syntax
          'local-syntax
          #t))
      (module-define!
        (current-module)
        'let-syntax
        (make-syntax-transformer
          'let-syntax
          'local-syntax
          #f))
      (global-extend-4344
        'core
        'syntax-parameterize
        (lambda (e-4524 r-4525 w-4526 s-4527 mod-4528)
          (let ((tmp-4530
                  ($sc-dispatch
                    e-4524
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-4530
                  (@apply
                    (lambda (var-4534 val-4535 e1-4536 e2-4537)
                      (valid-bound-ids?-4372 var-4534))
                    tmp-4530)
                  #f)
              (@apply
                (lambda (var-4622 val-4623 e1-4624 e2-4625)
                  (let ((names-4626
                          (map (lambda (x-4971)
                                 (call-with-values
                                   (lambda ()
                                     (resolve-identifier-4367
                                       x-4971
                                       w-4526
                                       r-4525
                                       mod-4528
                                       #f))
                                   (lambda (type-4974 value-4975 mod-4976)
                                     (if (eqv? type-4974 'displaced-lexical)
                                       (syntax-violation
                                         'syntax-parameterize
                                         "identifier out of context"
                                         e-4524
                                         (let ((x-4993
                                                 (begin
                                                   (if (if (pair? x-4971)
                                                         s-4527
                                                         #f)
                                                     (set-source-properties!
                                                       x-4971
                                                       s-4527))
                                                   x-4971)))
                                           (if (if (null? (car w-4526))
                                                 (null? (cdr w-4526))
                                                 #f)
                                             x-4993
                                             (if (if (vector? x-4993)
                                                   (if (= (vector-length
                                                            x-4993)
                                                          4)
                                                     (eq? (vector-ref x-4993 0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (let ((expression-5025
                                                       (vector-ref x-4993 1))
                                                     (wrap-5026
                                                       (let ((w2-5034
                                                               (vector-ref
                                                                 x-4993
                                                                 2)))
                                                         (let ((m1-5035
                                                                 (car w-4526))
                                                               (s1-5036
                                                                 (cdr w-4526)))
                                                           (if (null? m1-5035)
                                                             (if (null? s1-5036)
                                                               w2-5034
                                                               (cons (car w2-5034)
                                                                     (let ((m2-5051
                                                                             (cdr w2-5034)))
                                                                       (if (null? m2-5051)
                                                                         s1-5036
                                                                         (append
                                                                           s1-5036
                                                                           m2-5051)))))
                                                             (cons (let ((m2-5059
                                                                           (car w2-5034)))
                                                                     (if (null? m2-5059)
                                                                       m1-5035
                                                                       (append
                                                                         m1-5035
                                                                         m2-5059)))
                                                                   (let ((m2-5067
                                                                           (cdr w2-5034)))
                                                                     (if (null? m2-5067)
                                                                       s1-5036
                                                                       (append
                                                                         s1-5036
                                                                         m2-5067))))))))
                                                     (module-5027
                                                       (vector-ref x-4993 3)))
                                                 (vector
                                                   'syntax-object
                                                   expression-5025
                                                   wrap-5026
                                                   module-5027))
                                               (if (null? x-4993)
                                                 x-4993
                                                 (vector
                                                   'syntax-object
                                                   x-4993
                                                   w-4526
                                                   mod-4976))))))
                                       (if (eqv? type-4974 'syntax-parameter)
                                         value-4975
                                         (syntax-violation
                                           'syntax-parameterize
                                           "invalid syntax parameter"
                                           e-4524
                                           (let ((x-5097
                                                   (begin
                                                     (if (if (pair? x-4971)
                                                           s-4527
                                                           #f)
                                                       (set-source-properties!
                                                         x-4971
                                                         s-4527))
                                                     x-4971)))
                                             (if (if (null? (car w-4526))
                                                   (null? (cdr w-4526))
                                                   #f)
                                               x-5097
                                               (if (if (vector? x-5097)
                                                     (if (= (vector-length
                                                              x-5097)
                                                            4)
                                                       (eq? (vector-ref
                                                              x-5097
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (let ((expression-5129
                                                         (vector-ref x-5097 1))
                                                       (wrap-5130
                                                         (let ((w2-5138
                                                                 (vector-ref
                                                                   x-5097
                                                                   2)))
                                                           (let ((m1-5139
                                                                   (car w-4526))
                                                                 (s1-5140
                                                                   (cdr w-4526)))
                                                             (if (null? m1-5139)
                                                               (if (null? s1-5140)
                                                                 w2-5138
                                                                 (cons (car w2-5138)
                                                                       (let ((m2-5155
                                                                               (cdr w2-5138)))
                                                                         (if (null? m2-5155)
                                                                           s1-5140
                                                                           (append
                                                                             s1-5140
                                                                             m2-5155)))))
                                                               (cons (let ((m2-5163
                                                                             (car w2-5138)))
                                                                       (if (null? m2-5163)
                                                                         m1-5139
                                                                         (append
                                                                           m1-5139
                                                                           m2-5163)))
                                                                     (let ((m2-5171
                                                                             (cdr w2-5138)))
                                                                       (if (null? m2-5171)
                                                                         s1-5140
                                                                         (append
                                                                           s1-5140
                                                                           m2-5171))))))))
                                                       (module-5131
                                                         (vector-ref
                                                           x-5097
                                                           3)))
                                                   (vector
                                                     'syntax-object
                                                     expression-5129
                                                     wrap-5130
                                                     module-5131))
                                                 (if (null? x-5097)
                                                   x-5097
                                                   (vector
                                                     'syntax-object
                                                     x-5097
                                                     w-4526
                                                     mod-4976)))))))))))
                               var-4622))
                        (bindings-4627
                          (let ((trans-r-5186 (macros-only-env-4343 r-4525)))
                            (map (lambda (x-5187)
                                   (cons 'macro
                                         (eval-local-transformer-4388
                                           (expand-4382
                                             x-5187
                                             trans-r-5186
                                             w-4526
                                             mod-4528)
                                           mod-4528)))
                                 val-4623))))
                    (expand-body-4386
                      (cons e1-4624 e2-4625)
                      (let ((x-4639
                              (begin
                                (if (if (pair? e-4524) s-4527 #f)
                                  (set-source-properties! e-4524 s-4527))
                                e-4524)))
                        (if (if (null? (car w-4526)) (null? (cdr w-4526)) #f)
                          x-4639
                          (if (if (vector? x-4639)
                                (if (= (vector-length x-4639) 4)
                                  (eq? (vector-ref x-4639 0) 'syntax-object)
                                  #f)
                                #f)
                            (let ((expression-4671 (vector-ref x-4639 1))
                                  (wrap-4672
                                    (let ((w2-4680 (vector-ref x-4639 2)))
                                      (let ((m1-4681 (car w-4526))
                                            (s1-4682 (cdr w-4526)))
                                        (if (null? m1-4681)
                                          (if (null? s1-4682)
                                            w2-4680
                                            (cons (car w2-4680)
                                                  (let ((m2-4697
                                                          (cdr w2-4680)))
                                                    (if (null? m2-4697)
                                                      s1-4682
                                                      (append
                                                        s1-4682
                                                        m2-4697)))))
                                          (cons (let ((m2-4705 (car w2-4680)))
                                                  (if (null? m2-4705)
                                                    m1-4681
                                                    (append m1-4681 m2-4705)))
                                                (let ((m2-4713 (cdr w2-4680)))
                                                  (if (null? m2-4713)
                                                    s1-4682
                                                    (append
                                                      s1-4682
                                                      m2-4713))))))))
                                  (module-4673 (vector-ref x-4639 3)))
                              (vector
                                'syntax-object
                                expression-4671
                                wrap-4672
                                module-4673))
                            (if (null? x-4639)
                              x-4639
                              (vector
                                'syntax-object
                                x-4639
                                w-4526
                                mod-4528)))))
                      (extend-env-4341 names-4626 bindings-4627 r-4525)
                      w-4526
                      mod-4528)))
                tmp-4530)
              (syntax-violation
                'syntax-parameterize
                "bad syntax"
                (let ((x-5407
                        (begin
                          (if (if (pair? e-4524) s-4527 #f)
                            (set-source-properties! e-4524 s-4527))
                          e-4524)))
                  (if (if (null? (car w-4526)) (null? (cdr w-4526)) #f)
                    x-5407
                    (if (if (vector? x-5407)
                          (if (= (vector-length x-5407) 4)
                            (eq? (vector-ref x-5407 0) 'syntax-object)
                            #f)
                          #f)
                      (let ((expression-5439 (vector-ref x-5407 1))
                            (wrap-5440
                              (let ((w2-5448 (vector-ref x-5407 2)))
                                (let ((m1-5449 (car w-4526))
                                      (s1-5450 (cdr w-4526)))
                                  (if (null? m1-5449)
                                    (if (null? s1-5450)
                                      w2-5448
                                      (cons (car w2-5448)
                                            (let ((m2-5465 (cdr w2-5448)))
                                              (if (null? m2-5465)
                                                s1-5450
                                                (append s1-5450 m2-5465)))))
                                    (cons (let ((m2-5473 (car w2-5448)))
                                            (if (null? m2-5473)
                                              m1-5449
                                              (append m1-5449 m2-5473)))
                                          (let ((m2-5481 (cdr w2-5448)))
                                            (if (null? m2-5481)
                                              s1-5450
                                              (append s1-5450 m2-5481))))))))
                            (module-5441 (vector-ref x-5407 3)))
                        (vector
                          'syntax-object
                          expression-5439
                          wrap-5440
                          module-5441))
                      (if (null? x-5407)
                        x-5407
                        (vector 'syntax-object x-5407 w-4526 mod-4528))))))))))
      (module-define!
        (current-module)
        'quote
        (make-syntax-transformer
          'quote
          'core
          (lambda (e-5509 r-5510 w-5511 s-5512 mod-5513)
            (let ((tmp-5515 ($sc-dispatch e-5509 '(_ any))))
              (if tmp-5515
                (@apply
                  (lambda (e-5518)
                    (let ((exp-5522 (strip-4395 e-5518 w-5511)))
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 1)
                        s-5512
                        exp-5522)))
                  tmp-5515)
                (syntax-violation
                  'quote
                  "bad syntax"
                  (let ((x-5536
                          (begin
                            (if (if (pair? e-5509) s-5512 #f)
                              (set-source-properties! e-5509 s-5512))
                            e-5509)))
                    (if (if (null? (car w-5511)) (null? (cdr w-5511)) #f)
                      x-5536
                      (if (if (vector? x-5536)
                            (if (= (vector-length x-5536) 4)
                              (eq? (vector-ref x-5536 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((expression-5568 (vector-ref x-5536 1))
                              (wrap-5569
                                (let ((w2-5577 (vector-ref x-5536 2)))
                                  (let ((m1-5578 (car w-5511))
                                        (s1-5579 (cdr w-5511)))
                                    (if (null? m1-5578)
                                      (if (null? s1-5579)
                                        w2-5577
                                        (cons (car w2-5577)
                                              (let ((m2-5594 (cdr w2-5577)))
                                                (if (null? m2-5594)
                                                  s1-5579
                                                  (append s1-5579 m2-5594)))))
                                      (cons (let ((m2-5602 (car w2-5577)))
                                              (if (null? m2-5602)
                                                m1-5578
                                                (append m1-5578 m2-5602)))
                                            (let ((m2-5610 (cdr w2-5577)))
                                              (if (null? m2-5610)
                                                s1-5579
                                                (append s1-5579 m2-5610))))))))
                              (module-5570 (vector-ref x-5536 3)))
                          (vector
                            'syntax-object
                            expression-5568
                            wrap-5569
                            module-5570))
                        (if (null? x-5536)
                          x-5536
                          (vector
                            'syntax-object
                            x-5536
                            w-5511
                            mod-5513)))))))))))
      (global-extend-4344
        'core
        'syntax
        (letrec*
          ((gen-syntax-5829
             (lambda (src-6260
                      e-6261
                      r-6262
                      maps-6263
                      ellipsis?-6264
                      mod-6265)
               (if (if (symbol? e-6261)
                     #t
                     (if (if (vector? e-6261)
                           (if (= (vector-length e-6261) 4)
                             (eq? (vector-ref e-6261 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref e-6261 1))
                       #f))
                 (call-with-values
                   (lambda ()
                     (resolve-identifier-4367
                       e-6261
                       '(())
                       r-6262
                       mod-6265
                       #f))
                   (lambda (type-6294 value-6295 mod-6296)
                     (if (eqv? type-6294 'syntax)
                       (call-with-values
                         (lambda ()
                           (gen-ref-5830
                             src-6260
                             (car value-6295)
                             (cdr value-6295)
                             maps-6263))
                         (lambda (var-6304 maps-6305)
                           (values (list 'ref var-6304) maps-6305)))
                       (if (ellipsis?-6264 e-6261)
                         (syntax-violation
                           'syntax
                           "misplaced ellipsis"
                           src-6260)
                         (values (list 'quote e-6261) maps-6263)))))
                 (let ((tmp-6307 ($sc-dispatch e-6261 '(any any))))
                   (if (if tmp-6307
                         (@apply
                           (lambda (dots-6311 e-6312)
                             (ellipsis?-6264 dots-6311))
                           tmp-6307)
                         #f)
                     (@apply
                       (lambda (dots-6313 e-6314)
                         (gen-syntax-5829
                           src-6260
                           e-6314
                           r-6262
                           maps-6263
                           (lambda (x-6315) #f)
                           mod-6265))
                       tmp-6307)
                     (let ((tmp-6316 ($sc-dispatch e-6261 '(any any . any))))
                       (if (if tmp-6316
                             (@apply
                               (lambda (x-6320 dots-6321 y-6322)
                                 (ellipsis?-6264 dots-6321))
                               tmp-6316)
                             #f)
                         (@apply
                           (lambda (x-6323 dots-6324 y-6325)
                             (letrec*
                               ((f-6326
                                  (lambda (y-6334 k-6335)
                                    (let ((tmp-6337
                                            ($sc-dispatch
                                              y-6334
                                              '(any . any))))
                                      (if (if tmp-6337
                                            (@apply
                                              (lambda (dots-6341 y-6342)
                                                (ellipsis?-6264 dots-6341))
                                              tmp-6337)
                                            #f)
                                        (@apply
                                          (lambda (dots-6343 y-6344)
                                            (f-6326
                                              y-6344
                                              (lambda (maps-6345)
                                                (call-with-values
                                                  (lambda ()
                                                    (k-6335
                                                      (cons '() maps-6345)))
                                                  (lambda (x-6346 maps-6347)
                                                    (if (null? (car maps-6347))
                                                      (syntax-violation
                                                        'syntax
                                                        "extra ellipsis"
                                                        src-6260)
                                                      (values
                                                        (let ((map-env-6351
                                                                (car maps-6347)))
                                                          (list 'apply
                                                                '(primitive
                                                                   append)
                                                                (gen-map-5832
                                                                  x-6346
                                                                  map-env-6351)))
                                                        (cdr maps-6347))))))))
                                          tmp-6337)
                                        (call-with-values
                                          (lambda ()
                                            (gen-syntax-5829
                                              src-6260
                                              y-6334
                                              r-6262
                                              maps-6263
                                              ellipsis?-6264
                                              mod-6265))
                                          (lambda (y-6354 maps-6355)
                                            (call-with-values
                                              (lambda () (k-6335 maps-6355))
                                              (lambda (x-6356 maps-6357)
                                                (values
                                                  (if (equal? y-6354 ''())
                                                    x-6356
                                                    (list 'append
                                                          x-6356
                                                          y-6354))
                                                  maps-6357))))))))))
                               (f-6326
                                 y-6325
                                 (lambda (maps-6329)
                                   (call-with-values
                                     (lambda ()
                                       (gen-syntax-5829
                                         src-6260
                                         x-6323
                                         r-6262
                                         (cons '() maps-6329)
                                         ellipsis?-6264
                                         mod-6265))
                                     (lambda (x-6330 maps-6331)
                                       (if (null? (car maps-6331))
                                         (syntax-violation
                                           'syntax
                                           "extra ellipsis"
                                           src-6260)
                                         (values
                                           (gen-map-5832
                                             x-6330
                                             (car maps-6331))
                                           (cdr maps-6331)))))))))
                           tmp-6316)
                         (let ((tmp-6373 ($sc-dispatch e-6261 '(any . any))))
                           (if tmp-6373
                             (@apply
                               (lambda (x-6377 y-6378)
                                 (call-with-values
                                   (lambda ()
                                     (gen-syntax-5829
                                       src-6260
                                       x-6377
                                       r-6262
                                       maps-6263
                                       ellipsis?-6264
                                       mod-6265))
                                   (lambda (x-6379 maps-6380)
                                     (call-with-values
                                       (lambda ()
                                         (gen-syntax-5829
                                           src-6260
                                           y-6378
                                           r-6262
                                           maps-6380
                                           ellipsis?-6264
                                           mod-6265))
                                       (lambda (y-6381 maps-6382)
                                         (values
                                           (let ((key-6387 (car y-6381)))
                                             (if (eqv? key-6387 'quote)
                                               (if (eq? (car x-6379) 'quote)
                                                 (list 'quote
                                                       (cons (car (cdr x-6379))
                                                             (car (cdr y-6381))))
                                                 (if (eq? (car (cdr y-6381))
                                                          '())
                                                   (list 'list x-6379)
                                                   (list 'cons x-6379 y-6381)))
                                               (if (eqv? key-6387 'list)
                                                 (cons 'list
                                                       (cons x-6379
                                                             (cdr y-6381)))
                                                 (list 'cons x-6379 y-6381))))
                                           maps-6382))))))
                               tmp-6373)
                             (let ((tmp-6416
                                     ($sc-dispatch
                                       e-6261
                                       '#(vector (any . each-any)))))
                               (if tmp-6416
                                 (@apply
                                   (lambda (e1-6420 e2-6421)
                                     (call-with-values
                                       (lambda ()
                                         (gen-syntax-5829
                                           src-6260
                                           (cons e1-6420 e2-6421)
                                           r-6262
                                           maps-6263
                                           ellipsis?-6264
                                           mod-6265))
                                       (lambda (e-6422 maps-6423)
                                         (values
                                           (if (eq? (car e-6422) 'list)
                                             (cons 'vector (cdr e-6422))
                                             (if (eq? (car e-6422) 'quote)
                                               (list 'quote
                                                     (list->vector
                                                       (car (cdr e-6422))))
                                               (list 'list->vector e-6422)))
                                           maps-6423))))
                                   tmp-6416)
                                 (values
                                   (list 'quote e-6261)
                                   maps-6263))))))))))))
           (gen-ref-5830
             (lambda (src-6450 var-6451 level-6452 maps-6453)
               (if (= level-6452 0)
                 (values var-6451 maps-6453)
                 (if (null? maps-6453)
                   (syntax-violation
                     'syntax
                     "missing ellipsis"
                     src-6450)
                   (call-with-values
                     (lambda ()
                       (gen-ref-5830
                         src-6450
                         var-6451
                         (#{1-}# level-6452)
                         (cdr maps-6453)))
                     (lambda (outer-var-6454 outer-maps-6455)
                       (let ((b-6456 (assq outer-var-6454 (car maps-6453))))
                         (if b-6456
                           (values (cdr b-6456) maps-6453)
                           (let ((inner-var-6458
                                   (gensym
                                     (string-append
                                       (symbol->string 'tmp)
                                       "-"))))
                             (values
                               inner-var-6458
                               (cons (cons (cons outer-var-6454 inner-var-6458)
                                           (car maps-6453))
                                     outer-maps-6455)))))))))))
           (gen-map-5832
             (lambda (e-6472 map-env-6473)
               (let ((formals-6474 (map cdr map-env-6473))
                     (actuals-6475
                       (map (lambda (x-6477) (list 'ref (car x-6477)))
                            map-env-6473)))
                 (if (eq? (car e-6472) 'ref)
                   (car actuals-6475)
                   (if (and-map
                         (lambda (x-6478)
                           (if (eq? (car x-6478) 'ref)
                             (memq (car (cdr x-6478)) formals-6474)
                             #f))
                         (cdr e-6472))
                     (cons 'map
                           (cons (list 'primitive (car e-6472))
                                 (map (let ((r-6480
                                              (map cons
                                                   formals-6474
                                                   actuals-6475)))
                                        (lambda (x-6481)
                                          (cdr (assq (car (cdr x-6481))
                                                     r-6480))))
                                      (cdr e-6472))))
                     (cons 'map
                           (cons (list 'lambda formals-6474 e-6472)
                                 actuals-6475)))))))
           (regen-5836
             (lambda (x-6483)
               (let ((key-6484 (car x-6483)))
                 (if (eqv? key-6484 'ref)
                   (let ((name-6494 (car (cdr x-6483)))
                         (var-6495 (car (cdr x-6483))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 3)
                       #f
                       name-6494
                       var-6495))
                   (if (eqv? key-6484 'primitive)
                     (let ((name-6506 (car (cdr x-6483))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 2)
                         #f
                         name-6506))
                     (if (eqv? key-6484 'quote)
                       (let ((exp-6517 (car (cdr x-6483))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 1)
                           #f
                           exp-6517))
                       (if (eqv? key-6484 'lambda)
                         (if (list? (car (cdr x-6483)))
                           (let ((req-6528 (car (cdr x-6483)))
                                 (vars-6530 (car (cdr x-6483)))
                                 (exp-6532
                                   (regen-5836 (car (cdr (cdr x-6483))))))
                             (let ((body-6537
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 15)
                                       #f
                                       req-6528
                                       #f
                                       #f
                                       #f
                                       '()
                                       vars-6530
                                       exp-6532
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 14)
                                 #f
                                 '()
                                 body-6537)))
                           (error "how did we get here" x-6483))
                         (let ((name-6553 (car x-6483))
                               (args-6554 (map regen-5836 (cdr x-6483))))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 12)
                             #f
                             name-6553
                             args-6554))))))))))
          (lambda (e-5837 r-5838 w-5839 s-5840 mod-5841)
            (let ((e-5842
                    (let ((x-6171
                            (begin
                              (if (if (pair? e-5837) s-5840 #f)
                                (set-source-properties! e-5837 s-5840))
                              e-5837)))
                      (if (if (null? (car w-5839)) (null? (cdr w-5839)) #f)
                        x-6171
                        (if (if (vector? x-6171)
                              (if (= (vector-length x-6171) 4)
                                (eq? (vector-ref x-6171 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((expression-6203 (vector-ref x-6171 1))
                                (wrap-6204
                                  (let ((w2-6212 (vector-ref x-6171 2)))
                                    (let ((m1-6213 (car w-5839))
                                          (s1-6214 (cdr w-5839)))
                                      (if (null? m1-6213)
                                        (if (null? s1-6214)
                                          w2-6212
                                          (cons (car w2-6212)
                                                (let ((m2-6229 (cdr w2-6212)))
                                                  (if (null? m2-6229)
                                                    s1-6214
                                                    (append
                                                      s1-6214
                                                      m2-6229)))))
                                        (cons (let ((m2-6237 (car w2-6212)))
                                                (if (null? m2-6237)
                                                  m1-6213
                                                  (append m1-6213 m2-6237)))
                                              (let ((m2-6245 (cdr w2-6212)))
                                                (if (null? m2-6245)
                                                  s1-6214
                                                  (append
                                                    s1-6214
                                                    m2-6245))))))))
                                (module-6205 (vector-ref x-6171 3)))
                            (vector
                              'syntax-object
                              expression-6203
                              wrap-6204
                              module-6205))
                          (if (null? x-6171)
                            x-6171
                            (vector
                              'syntax-object
                              x-6171
                              w-5839
                              mod-5841)))))))
              (let ((tmp-5843 e-5842))
                (let ((tmp-5844 ($sc-dispatch tmp-5843 '(_ any))))
                  (if tmp-5844
                    (@apply
                      (lambda (x-5892)
                        (call-with-values
                          (lambda ()
                            (gen-syntax-5829
                              e-5842
                              x-5892
                              r-5838
                              '()
                              ellipsis?-4390
                              mod-5841))
                          (lambda (e-5969 maps-5970) (regen-5836 e-5969))))
                      tmp-5844)
                    (syntax-violation
                      'syntax
                      "bad `syntax' form"
                      e-5842))))))))
      (global-extend-4344
        'core
        'lambda
        (lambda (e-6785 r-6786 w-6787 s-6788 mod-6789)
          (let ((tmp-6791
                  ($sc-dispatch e-6785 '(_ any any . each-any))))
            (if tmp-6791
              (@apply
                (lambda (args-6795 e1-6796 e2-6797)
                  (call-with-values
                    (lambda () (lambda-formals-4391 args-6795))
                    (lambda (req-6800 opt-6801 rest-6802 kw-6803)
                      (letrec*
                        ((lp-6804
                           (lambda (body-6807 meta-6808)
                             (let ((tmp-6810
                                     ($sc-dispatch
                                       body-6807
                                       '(any any . each-any))))
                               (if (if tmp-6810
                                     (@apply
                                       (lambda (docstring-6814 e1-6815 e2-6816)
                                         (string?
                                           (syntax->datum docstring-6814)))
                                       tmp-6810)
                                     #f)
                                 (@apply
                                   (lambda (docstring-6817 e1-6818 e2-6819)
                                     (lp-6804
                                       (cons e1-6818 e2-6819)
                                       (append
                                         meta-6808
                                         (list (cons 'documentation
                                                     (syntax->datum
                                                       docstring-6817))))))
                                   tmp-6810)
                                 (let ((tmp-6820
                                         ($sc-dispatch
                                           body-6807
                                           '(#(vector #(each (any . any)))
                                             any
                                             .
                                             each-any))))
                                   (if tmp-6820
                                     (@apply
                                       (lambda (k-6824 v-6825 e1-6826 e2-6827)
                                         (lp-6804
                                           (cons e1-6826 e2-6827)
                                           (append
                                             meta-6808
                                             (syntax->datum
                                               (map cons k-6824 v-6825)))))
                                       tmp-6820)
                                     (expand-simple-lambda-4392
                                       e-6785
                                       r-6786
                                       w-6787
                                       s-6788
                                       mod-6789
                                       req-6800
                                       rest-6802
                                       meta-6808
                                       body-6807))))))))
                        (lp-6804 (cons e1-6796 e2-6797) '())))))
                tmp-6791)
              (syntax-violation 'lambda "bad lambda" e-6785)))))
      (global-extend-4344
        'core
        'lambda*
        (lambda (e-7202 r-7203 w-7204 s-7205 mod-7206)
          (let ((tmp-7208
                  ($sc-dispatch e-7202 '(_ any any . each-any))))
            (if tmp-7208
              (@apply
                (lambda (args-7212 e1-7213 e2-7214)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-4394
                        e-7202
                        r-7203
                        w-7204
                        s-7205
                        mod-7206
                        lambda*-formals-4393
                        (list (cons args-7212 (cons e1-7213 e2-7214)))))
                    (lambda (meta-7217 lcase-7218)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 14)
                        s-7205
                        meta-7217
                        lcase-7218))))
                tmp-7208)
              (syntax-violation 'lambda "bad lambda*" e-7202)))))
      (global-extend-4344
        'core
        'case-lambda
        (lambda (e-7381 r-7382 w-7383 s-7384 mod-7385)
          (let ((tmp-7387
                  ($sc-dispatch
                    e-7381
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if tmp-7387
              (@apply
                (lambda (args-7391
                         e1-7392
                         e2-7393
                         args*-7394
                         e1*-7395
                         e2*-7396)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-4394
                        e-7381
                        r-7382
                        w-7383
                        s-7384
                        mod-7385
                        lambda-formals-4391
                        (cons (cons args-7391 (cons e1-7392 e2-7393))
                              (map (lambda (tmp-3329-7399
                                            tmp-3328-7400
                                            tmp-3327-7401)
                                     (cons tmp-3327-7401
                                           (cons tmp-3328-7400 tmp-3329-7399)))
                                   e2*-7396
                                   e1*-7395
                                   args*-7394))))
                    (lambda (meta-7402 lcase-7403)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 14)
                        s-7384
                        meta-7402
                        lcase-7403))))
                tmp-7387)
              (syntax-violation
                'case-lambda
                "bad case-lambda"
                e-7381)))))
      (global-extend-4344
        'core
        'case-lambda*
        (lambda (e-7572 r-7573 w-7574 s-7575 mod-7576)
          (let ((tmp-7578
                  ($sc-dispatch
                    e-7572
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if tmp-7578
              (@apply
                (lambda (args-7582
                         e1-7583
                         e2-7584
                         args*-7585
                         e1*-7586
                         e2*-7587)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-4394
                        e-7572
                        r-7573
                        w-7574
                        s-7575
                        mod-7576
                        lambda*-formals-4393
                        (cons (cons args-7582 (cons e1-7583 e2-7584))
                              (map (lambda (tmp-3364-7590
                                            tmp-3363-7591
                                            tmp-3362-7592)
                                     (cons tmp-3362-7592
                                           (cons tmp-3363-7591 tmp-3364-7590)))
                                   e2*-7587
                                   e1*-7586
                                   args*-7585))))
                    (lambda (meta-7593 lcase-7594)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 14)
                        s-7575
                        meta-7593
                        lcase-7594))))
                tmp-7578)
              (syntax-violation
                'case-lambda
                "bad case-lambda*"
                e-7572)))))
      (global-extend-4344
        'core
        'let
        (letrec*
          ((expand-let-7802
             (lambda (e-8012
                      r-8013
                      w-8014
                      s-8015
                      mod-8016
                      constructor-8017
                      ids-8018
                      vals-8019
                      exps-8020)
               (if (not (valid-bound-ids?-4372 ids-8018))
                 (syntax-violation
                   'let
                   "duplicate bound variable"
                   e-8012)
                 (let ((labels-8105 (gen-labels-4349 ids-8018))
                       (new-vars-8106 (map gen-var-4396 ids-8018)))
                   (let ((nw-8107
                           (make-binding-wrap-4360
                             ids-8018
                             labels-8105
                             w-8014))
                         (nr-8108
                           (extend-var-env-4342
                             labels-8105
                             new-vars-8106
                             r-8013)))
                     (constructor-8017
                       s-8015
                       (map syntax->datum ids-8018)
                       new-vars-8106
                       (map (lambda (x-8125)
                              (expand-4382 x-8125 r-8013 w-8014 mod-8016))
                            vals-8019)
                       (expand-body-4386
                         exps-8020
                         (source-wrap-4376 e-8012 nw-8107 s-8015 mod-8016)
                         nr-8108
                         nw-8107
                         mod-8016))))))))
          (lambda (e-7803 r-7804 w-7805 s-7806 mod-7807)
            (let ((tmp-7809
                    ($sc-dispatch
                      e-7803
                      '(_ #(each (any any)) any . each-any))))
              (if (if tmp-7809
                    (@apply
                      (lambda (id-7813 val-7814 e1-7815 e2-7816)
                        (and-map id?-4346 id-7813))
                      tmp-7809)
                    #f)
                (@apply
                  (lambda (id-7832 val-7833 e1-7834 e2-7835)
                    (expand-let-7802
                      e-7803
                      r-7804
                      w-7805
                      s-7806
                      mod-7807
                      (lambda (src-7839
                               ids-7840
                               vars-7841
                               val-exps-7842
                               body-exp-7843)
                        (begin
                          (for-each
                            maybe-name-value!-4311
                            ids-7840
                            val-exps-7842)
                          (if (null? vars-7841)
                            body-exp-7843
                            (make-struct/no-tail
                              (vector-ref %expanded-vtables 16)
                              src-7839
                              ids-7840
                              vars-7841
                              val-exps-7842
                              body-exp-7843))))
                      id-7832
                      val-7833
                      (cons e1-7834 e2-7835)))
                  tmp-7809)
                (let ((tmp-7850
                        ($sc-dispatch
                          e-7803
                          '(_ any #(each (any any)) any . each-any))))
                  (if (if tmp-7850
                        (@apply
                          (lambda (f-7854 id-7855 val-7856 e1-7857 e2-7858)
                            (if (if (symbol? f-7854)
                                  #t
                                  (if (if (vector? f-7854)
                                        (if (= (vector-length f-7854) 4)
                                          (eq? (vector-ref f-7854 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref f-7854 1))
                                    #f))
                              (and-map id?-4346 id-7855)
                              #f))
                          tmp-7850)
                        #f)
                    (@apply
                      (lambda (f-7900 id-7901 val-7902 e1-7903 e2-7904)
                        (expand-let-7802
                          e-7803
                          r-7804
                          w-7805
                          s-7806
                          mod-7807
                          build-named-let-4330
                          (cons f-7900 id-7901)
                          val-7902
                          (cons e1-7903 e2-7904)))
                      tmp-7850)
                    (syntax-violation
                      'let
                      "bad let"
                      (let ((x-7917
                              (begin
                                (if (if (pair? e-7803) s-7806 #f)
                                  (set-source-properties! e-7803 s-7806))
                                e-7803)))
                        (if (if (null? (car w-7805)) (null? (cdr w-7805)) #f)
                          x-7917
                          (if (if (vector? x-7917)
                                (if (= (vector-length x-7917) 4)
                                  (eq? (vector-ref x-7917 0) 'syntax-object)
                                  #f)
                                #f)
                            (let ((expression-7949 (vector-ref x-7917 1))
                                  (wrap-7950
                                    (let ((w2-7958 (vector-ref x-7917 2)))
                                      (let ((m1-7959 (car w-7805))
                                            (s1-7960 (cdr w-7805)))
                                        (if (null? m1-7959)
                                          (if (null? s1-7960)
                                            w2-7958
                                            (cons (car w2-7958)
                                                  (let ((m2-7975
                                                          (cdr w2-7958)))
                                                    (if (null? m2-7975)
                                                      s1-7960
                                                      (append
                                                        s1-7960
                                                        m2-7975)))))
                                          (cons (let ((m2-7983 (car w2-7958)))
                                                  (if (null? m2-7983)
                                                    m1-7959
                                                    (append m1-7959 m2-7983)))
                                                (let ((m2-7991 (cdr w2-7958)))
                                                  (if (null? m2-7991)
                                                    s1-7960
                                                    (append
                                                      s1-7960
                                                      m2-7991))))))))
                                  (module-7951 (vector-ref x-7917 3)))
                              (vector
                                'syntax-object
                                expression-7949
                                wrap-7950
                                module-7951))
                            (if (null? x-7917)
                              x-7917
                              (vector
                                'syntax-object
                                x-7917
                                w-7805
                                mod-7807)))))))))))))
      (global-extend-4344
        'core
        'letrec
        (lambda (e-8555 r-8556 w-8557 s-8558 mod-8559)
          (let ((tmp-8561
                  ($sc-dispatch
                    e-8555
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-8561
                  (@apply
                    (lambda (id-8565 val-8566 e1-8567 e2-8568)
                      (and-map id?-4346 id-8565))
                    tmp-8561)
                  #f)
              (@apply
                (lambda (id-8584 val-8585 e1-8586 e2-8587)
                  (if (not (valid-bound-ids?-4372 id-8584))
                    (syntax-violation
                      'letrec
                      "duplicate bound variable"
                      e-8555)
                    (let ((labels-8684 (gen-labels-4349 id-8584))
                          (new-vars-8685 (map gen-var-4396 id-8584)))
                      (let ((w-8686
                              (make-binding-wrap-4360
                                id-8584
                                labels-8684
                                w-8557))
                            (r-8687
                              (extend-var-env-4342
                                labels-8684
                                new-vars-8685
                                r-8556)))
                        (build-letrec-4331
                          s-8558
                          #f
                          (map syntax->datum id-8584)
                          new-vars-8685
                          (map (lambda (x-8764)
                                 (expand-4382 x-8764 r-8687 w-8686 mod-8559))
                               val-8585)
                          (expand-body-4386
                            (cons e1-8586 e2-8587)
                            (let ((x-8826
                                    (begin
                                      (if (if (pair? e-8555) s-8558 #f)
                                        (set-source-properties! e-8555 s-8558))
                                      e-8555)))
                              (if (if (null? (car w-8686))
                                    (null? (cdr w-8686))
                                    #f)
                                x-8826
                                (if (if (vector? x-8826)
                                      (if (= (vector-length x-8826) 4)
                                        (eq? (vector-ref x-8826 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((expression-8858 (vector-ref x-8826 1))
                                        (wrap-8859
                                          (let ((w2-8867
                                                  (vector-ref x-8826 2)))
                                            (let ((m1-8868 (car w-8686))
                                                  (s1-8869 (cdr w-8686)))
                                              (if (null? m1-8868)
                                                (if (null? s1-8869)
                                                  w2-8867
                                                  (cons (car w2-8867)
                                                        (let ((m2-8884
                                                                (cdr w2-8867)))
                                                          (if (null? m2-8884)
                                                            s1-8869
                                                            (append
                                                              s1-8869
                                                              m2-8884)))))
                                                (cons (let ((m2-8892
                                                              (car w2-8867)))
                                                        (if (null? m2-8892)
                                                          m1-8868
                                                          (append
                                                            m1-8868
                                                            m2-8892)))
                                                      (let ((m2-8900
                                                              (cdr w2-8867)))
                                                        (if (null? m2-8900)
                                                          s1-8869
                                                          (append
                                                            s1-8869
                                                            m2-8900))))))))
                                        (module-8860 (vector-ref x-8826 3)))
                                    (vector
                                      'syntax-object
                                      expression-8858
                                      wrap-8859
                                      module-8860))
                                  (if (null? x-8826)
                                    x-8826
                                    (vector
                                      'syntax-object
                                      x-8826
                                      w-8686
                                      mod-8559)))))
                            r-8687
                            w-8686
                            mod-8559))))))
                tmp-8561)
              (syntax-violation
                'letrec
                "bad letrec"
                (let ((x-9111
                        (begin
                          (if (if (pair? e-8555) s-8558 #f)
                            (set-source-properties! e-8555 s-8558))
                          e-8555)))
                  (if (if (null? (car w-8557)) (null? (cdr w-8557)) #f)
                    x-9111
                    (if (if (vector? x-9111)
                          (if (= (vector-length x-9111) 4)
                            (eq? (vector-ref x-9111 0) 'syntax-object)
                            #f)
                          #f)
                      (let ((expression-9143 (vector-ref x-9111 1))
                            (wrap-9144
                              (let ((w2-9152 (vector-ref x-9111 2)))
                                (let ((m1-9153 (car w-8557))
                                      (s1-9154 (cdr w-8557)))
                                  (if (null? m1-9153)
                                    (if (null? s1-9154)
                                      w2-9152
                                      (cons (car w2-9152)
                                            (let ((m2-9169 (cdr w2-9152)))
                                              (if (null? m2-9169)
                                                s1-9154
                                                (append s1-9154 m2-9169)))))
                                    (cons (let ((m2-9177 (car w2-9152)))
                                            (if (null? m2-9177)
                                              m1-9153
                                              (append m1-9153 m2-9177)))
                                          (let ((m2-9185 (cdr w2-9152)))
                                            (if (null? m2-9185)
                                              s1-9154
                                              (append s1-9154 m2-9185))))))))
                            (module-9145 (vector-ref x-9111 3)))
                        (vector
                          'syntax-object
                          expression-9143
                          wrap-9144
                          module-9145))
                      (if (null? x-9111)
                        x-9111
                        (vector 'syntax-object x-9111 w-8557 mod-8559))))))))))
      (global-extend-4344
        'core
        'letrec*
        (lambda (e-9336 r-9337 w-9338 s-9339 mod-9340)
          (let ((tmp-9342
                  ($sc-dispatch
                    e-9336
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-9342
                  (@apply
                    (lambda (id-9346 val-9347 e1-9348 e2-9349)
                      (and-map id?-4346 id-9346))
                    tmp-9342)
                  #f)
              (@apply
                (lambda (id-9365 val-9366 e1-9367 e2-9368)
                  (if (not (valid-bound-ids?-4372 id-9365))
                    (syntax-violation
                      'letrec*
                      "duplicate bound variable"
                      e-9336)
                    (let ((labels-9465 (gen-labels-4349 id-9365))
                          (new-vars-9466 (map gen-var-4396 id-9365)))
                      (let ((w-9467
                              (make-binding-wrap-4360
                                id-9365
                                labels-9465
                                w-9338))
                            (r-9468
                              (extend-var-env-4342
                                labels-9465
                                new-vars-9466
                                r-9337)))
                        (build-letrec-4331
                          s-9339
                          #t
                          (map syntax->datum id-9365)
                          new-vars-9466
                          (map (lambda (x-9545)
                                 (expand-4382 x-9545 r-9468 w-9467 mod-9340))
                               val-9366)
                          (expand-body-4386
                            (cons e1-9367 e2-9368)
                            (let ((x-9607
                                    (begin
                                      (if (if (pair? e-9336) s-9339 #f)
                                        (set-source-properties! e-9336 s-9339))
                                      e-9336)))
                              (if (if (null? (car w-9467))
                                    (null? (cdr w-9467))
                                    #f)
                                x-9607
                                (if (if (vector? x-9607)
                                      (if (= (vector-length x-9607) 4)
                                        (eq? (vector-ref x-9607 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (let ((expression-9639 (vector-ref x-9607 1))
                                        (wrap-9640
                                          (let ((w2-9648
                                                  (vector-ref x-9607 2)))
                                            (let ((m1-9649 (car w-9467))
                                                  (s1-9650 (cdr w-9467)))
                                              (if (null? m1-9649)
                                                (if (null? s1-9650)
                                                  w2-9648
                                                  (cons (car w2-9648)
                                                        (let ((m2-9665
                                                                (cdr w2-9648)))
                                                          (if (null? m2-9665)
                                                            s1-9650
                                                            (append
                                                              s1-9650
                                                              m2-9665)))))
                                                (cons (let ((m2-9673
                                                              (car w2-9648)))
                                                        (if (null? m2-9673)
                                                          m1-9649
                                                          (append
                                                            m1-9649
                                                            m2-9673)))
                                                      (let ((m2-9681
                                                              (cdr w2-9648)))
                                                        (if (null? m2-9681)
                                                          s1-9650
                                                          (append
                                                            s1-9650
                                                            m2-9681))))))))
                                        (module-9641 (vector-ref x-9607 3)))
                                    (vector
                                      'syntax-object
                                      expression-9639
                                      wrap-9640
                                      module-9641))
                                  (if (null? x-9607)
                                    x-9607
                                    (vector
                                      'syntax-object
                                      x-9607
                                      w-9467
                                      mod-9340)))))
                            r-9468
                            w-9467
                            mod-9340))))))
                tmp-9342)
              (syntax-violation
                'letrec*
                "bad letrec*"
                (let ((x-9892
                        (begin
                          (if (if (pair? e-9336) s-9339 #f)
                            (set-source-properties! e-9336 s-9339))
                          e-9336)))
                  (if (if (null? (car w-9338)) (null? (cdr w-9338)) #f)
                    x-9892
                    (if (if (vector? x-9892)
                          (if (= (vector-length x-9892) 4)
                            (eq? (vector-ref x-9892 0) 'syntax-object)
                            #f)
                          #f)
                      (let ((expression-9924 (vector-ref x-9892 1))
                            (wrap-9925
                              (let ((w2-9933 (vector-ref x-9892 2)))
                                (let ((m1-9934 (car w-9338))
                                      (s1-9935 (cdr w-9338)))
                                  (if (null? m1-9934)
                                    (if (null? s1-9935)
                                      w2-9933
                                      (cons (car w2-9933)
                                            (let ((m2-9950 (cdr w2-9933)))
                                              (if (null? m2-9950)
                                                s1-9935
                                                (append s1-9935 m2-9950)))))
                                    (cons (let ((m2-9958 (car w2-9933)))
                                            (if (null? m2-9958)
                                              m1-9934
                                              (append m1-9934 m2-9958)))
                                          (let ((m2-9966 (cdr w2-9933)))
                                            (if (null? m2-9966)
                                              s1-9935
                                              (append s1-9935 m2-9966))))))))
                            (module-9926 (vector-ref x-9892 3)))
                        (vector
                          'syntax-object
                          expression-9924
                          wrap-9925
                          module-9926))
                      (if (null? x-9892)
                        x-9892
                        (vector 'syntax-object x-9892 w-9338 mod-9340))))))))))
      (global-extend-4344
        'core
        'set!
        (lambda (e-10128 r-10129 w-10130 s-10131 mod-10132)
          (let ((tmp-10134 ($sc-dispatch e-10128 '(_ any any))))
            (if (if tmp-10134
                  (@apply
                    (lambda (id-10138 val-10139)
                      (if (symbol? id-10138)
                        #t
                        (if (if (vector? id-10138)
                              (if (= (vector-length id-10138) 4)
                                (eq? (vector-ref id-10138 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-10138 1))
                          #f)))
                    tmp-10134)
                  #f)
              (@apply
                (lambda (id-10166 val-10167)
                  (call-with-values
                    (lambda ()
                      (resolve-identifier-4367
                        id-10166
                        w-10130
                        r-10129
                        mod-10132
                        #t))
                    (lambda (type-10170 value-10171 id-mod-10172)
                      (if (eqv? type-10170 'lexical)
                        (build-lexical-assignment-4317
                          s-10131
                          (syntax->datum id-10166)
                          value-10171
                          (expand-4382 val-10167 r-10129 w-10130 mod-10132))
                        (if (eqv? type-10170 'global)
                          (build-global-assignment-4320
                            s-10131
                            value-10171
                            (expand-4382 val-10167 r-10129 w-10130 mod-10132)
                            id-mod-10172)
                          (if (eqv? type-10170 'macro)
                            (if (procedure-property
                                  value-10171
                                  'variable-transformer)
                              (expand-4382
                                (expand-macro-4385
                                  value-10171
                                  e-10128
                                  r-10129
                                  w-10130
                                  s-10131
                                  #f
                                  mod-10132)
                                r-10129
                                '(())
                                mod-10132)
                              (syntax-violation
                                'set!
                                "not a variable transformer"
                                (if (if (null? (car w-10130))
                                      (null? (cdr w-10130))
                                      #f)
                                  e-10128
                                  (if (if (vector? e-10128)
                                        (if (= (vector-length e-10128) 4)
                                          (eq? (vector-ref e-10128 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((expression-10622
                                            (vector-ref e-10128 1))
                                          (wrap-10623
                                            (let ((w2-10633
                                                    (vector-ref e-10128 2)))
                                              (let ((m1-10634 (car w-10130))
                                                    (s1-10635 (cdr w-10130)))
                                                (if (null? m1-10634)
                                                  (if (null? s1-10635)
                                                    w2-10633
                                                    (cons (car w2-10633)
                                                          (let ((m2-10652
                                                                  (cdr w2-10633)))
                                                            (if (null? m2-10652)
                                                              s1-10635
                                                              (append
                                                                s1-10635
                                                                m2-10652)))))
                                                  (cons (let ((m2-10660
                                                                (car w2-10633)))
                                                          (if (null? m2-10660)
                                                            m1-10634
                                                            (append
                                                              m1-10634
                                                              m2-10660)))
                                                        (let ((m2-10668
                                                                (cdr w2-10633)))
                                                          (if (null? m2-10668)
                                                            s1-10635
                                                            (append
                                                              s1-10635
                                                              m2-10668))))))))
                                          (module-10624
                                            (vector-ref e-10128 3)))
                                      (vector
                                        'syntax-object
                                        expression-10622
                                        wrap-10623
                                        module-10624))
                                    (if (null? e-10128)
                                      e-10128
                                      (vector
                                        'syntax-object
                                        e-10128
                                        w-10130
                                        mod-10132))))
                                (if (if (null? (car w-10130))
                                      (null? (cdr w-10130))
                                      #f)
                                  id-10166
                                  (if (if (vector? id-10166)
                                        (if (= (vector-length id-10166) 4)
                                          (eq? (vector-ref id-10166 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((expression-10720
                                            (vector-ref id-10166 1))
                                          (wrap-10721
                                            (let ((w2-10731
                                                    (vector-ref id-10166 2)))
                                              (let ((m1-10732 (car w-10130))
                                                    (s1-10733 (cdr w-10130)))
                                                (if (null? m1-10732)
                                                  (if (null? s1-10733)
                                                    w2-10731
                                                    (cons (car w2-10731)
                                                          (let ((m2-10750
                                                                  (cdr w2-10731)))
                                                            (if (null? m2-10750)
                                                              s1-10733
                                                              (append
                                                                s1-10733
                                                                m2-10750)))))
                                                  (cons (let ((m2-10758
                                                                (car w2-10731)))
                                                          (if (null? m2-10758)
                                                            m1-10732
                                                            (append
                                                              m1-10732
                                                              m2-10758)))
                                                        (let ((m2-10766
                                                                (cdr w2-10731)))
                                                          (if (null? m2-10766)
                                                            s1-10733
                                                            (append
                                                              s1-10733
                                                              m2-10766))))))))
                                          (module-10722
                                            (vector-ref id-10166 3)))
                                      (vector
                                        'syntax-object
                                        expression-10720
                                        wrap-10721
                                        module-10722))
                                    (if (null? id-10166)
                                      id-10166
                                      (vector
                                        'syntax-object
                                        id-10166
                                        w-10130
                                        id-mod-10172))))))
                            (if (eqv? type-10170 'displaced-lexical)
                              (syntax-violation
                                'set!
                                "identifier out of context"
                                (if (if (null? (car w-10130))
                                      (null? (cdr w-10130))
                                      #f)
                                  id-10166
                                  (if (if (vector? id-10166)
                                        (if (= (vector-length id-10166) 4)
                                          (eq? (vector-ref id-10166 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((expression-10824
                                            (vector-ref id-10166 1))
                                          (wrap-10825
                                            (let ((w2-10835
                                                    (vector-ref id-10166 2)))
                                              (let ((m1-10836 (car w-10130))
                                                    (s1-10837 (cdr w-10130)))
                                                (if (null? m1-10836)
                                                  (if (null? s1-10837)
                                                    w2-10835
                                                    (cons (car w2-10835)
                                                          (let ((m2-10854
                                                                  (cdr w2-10835)))
                                                            (if (null? m2-10854)
                                                              s1-10837
                                                              (append
                                                                s1-10837
                                                                m2-10854)))))
                                                  (cons (let ((m2-10862
                                                                (car w2-10835)))
                                                          (if (null? m2-10862)
                                                            m1-10836
                                                            (append
                                                              m1-10836
                                                              m2-10862)))
                                                        (let ((m2-10870
                                                                (cdr w2-10835)))
                                                          (if (null? m2-10870)
                                                            s1-10837
                                                            (append
                                                              s1-10837
                                                              m2-10870))))))))
                                          (module-10826
                                            (vector-ref id-10166 3)))
                                      (vector
                                        'syntax-object
                                        expression-10824
                                        wrap-10825
                                        module-10826))
                                    (if (null? id-10166)
                                      id-10166
                                      (vector
                                        'syntax-object
                                        id-10166
                                        w-10130
                                        mod-10132)))))
                              (syntax-violation
                                'set!
                                "bad set!"
                                (let ((x-10902
                                        (begin
                                          (if (if (pair? e-10128) s-10131 #f)
                                            (set-source-properties!
                                              e-10128
                                              s-10131))
                                          e-10128)))
                                  (if (if (null? (car w-10130))
                                        (null? (cdr w-10130))
                                        #f)
                                    x-10902
                                    (if (if (vector? x-10902)
                                          (if (= (vector-length x-10902) 4)
                                            (eq? (vector-ref x-10902 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((expression-10934
                                              (vector-ref x-10902 1))
                                            (wrap-10935
                                              (let ((w2-10943
                                                      (vector-ref x-10902 2)))
                                                (let ((m1-10944 (car w-10130))
                                                      (s1-10945 (cdr w-10130)))
                                                  (if (null? m1-10944)
                                                    (if (null? s1-10945)
                                                      w2-10943
                                                      (cons (car w2-10943)
                                                            (let ((m2-10960
                                                                    (cdr w2-10943)))
                                                              (if (null? m2-10960)
                                                                s1-10945
                                                                (append
                                                                  s1-10945
                                                                  m2-10960)))))
                                                    (cons (let ((m2-10968
                                                                  (car w2-10943)))
                                                            (if (null? m2-10968)
                                                              m1-10944
                                                              (append
                                                                m1-10944
                                                                m2-10968)))
                                                          (let ((m2-10976
                                                                  (cdr w2-10943)))
                                                            (if (null? m2-10976)
                                                              s1-10945
                                                              (append
                                                                s1-10945
                                                                m2-10976))))))))
                                            (module-10936
                                              (vector-ref x-10902 3)))
                                        (vector
                                          'syntax-object
                                          expression-10934
                                          wrap-10935
                                          module-10936))
                                      (if (null? x-10902)
                                        x-10902
                                        (vector
                                          'syntax-object
                                          x-10902
                                          w-10130
                                          mod-10132)))))))))))))
                tmp-10134)
              (let ((tmp-10991
                      ($sc-dispatch e-10128 '(_ (any . each-any) any))))
                (if tmp-10991
                  (@apply
                    (lambda (head-10995 tail-10996 val-10997)
                      (call-with-values
                        (lambda ()
                          (syntax-type-4381
                            head-10995
                            r-10129
                            '(())
                            #f
                            #f
                            mod-10132
                            #t))
                        (lambda (type-11000
                                 value-11001
                                 ee*-11002
                                 ee-11003
                                 ww-11004
                                 ss-11005
                                 modmod-11006)
                          (if (eqv? type-11000 'module-ref)
                            (let ((val-11012
                                    (expand-4382
                                      val-10997
                                      r-10129
                                      w-10130
                                      mod-10132)))
                              (call-with-values
                                (lambda ()
                                  (value-11001
                                    (cons head-10995 tail-10996)
                                    r-10129
                                    w-10130))
                                (lambda (e-11013
                                         r-11014
                                         w-11015
                                         s*-11016
                                         mod-11017)
                                  (let ((tmp-11019 (list e-11013)))
                                    (if (@apply
                                          (lambda (e-11021)
                                            (if (symbol? e-11021)
                                              #t
                                              (if (if (vector? e-11021)
                                                    (if (= (vector-length
                                                             e-11021)
                                                           4)
                                                      (eq? (vector-ref
                                                             e-11021
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref e-11021 1))
                                                #f)))
                                          tmp-11019)
                                      (@apply
                                        (lambda (e-11051)
                                          (build-global-assignment-4320
                                            s-10131
                                            (syntax->datum e-11051)
                                            val-11012
                                            mod-11017))
                                        tmp-11019)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        e-11013))))))
                            (build-call-4313
                              s-10131
                              (expand-4382
                                (list '#(syntax-object
                                         setter
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(key)
                                            #((m-*-3608 top))
                                            #("l-*-3609"))
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(type value ee* ee ww ss modmod)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("l-*-3601"
                                              "l-*-3602"
                                              "l-*-3603"
                                              "l-*-3604"
                                              "l-*-3605"
                                              "l-*-3606"
                                              "l-*-3607"))
                                          #(ribcage
                                            #(head tail val)
                                            #((top) (top) (top))
                                            #("l-*-3586"
                                              "l-*-3587"
                                              "l-*-3588"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(e r w s mod)
                                            #((top) (top) (top) (top) (top))
                                            #("l-*-3560"
                                              "l-*-3561"
                                              "l-*-3562"
                                              "l-*-3563"
                                              "l-*-3564"))
                                          #(ribcage
                                            (lambda-var-list
                                              gen-var
                                              strip
                                              expand-lambda-case
                                              lambda*-formals
                                              expand-simple-lambda
                                              lambda-formals
                                              ellipsis?
                                              expand-void
                                              eval-local-transformer
                                              expand-local-syntax
                                              expand-body
                                              expand-macro
                                              expand-call
                                              expand-expr
                                              expand
                                              syntax-type
                                              parse-when-list
                                              expand-install-global
                                              expand-top-sequence
                                              expand-sequence
                                              source-wrap
                                              wrap
                                              bound-id-member?
                                              distinct-bound-ids?
                                              valid-bound-ids?
                                              bound-id=?
                                              free-id=?
                                              with-transformer-environment
                                              transformer-environment
                                              resolve-identifier
                                              locally-bound-identifiers
                                              id-var-name
                                              same-marks?
                                              join-marks
                                              join-wraps
                                              smart-append
                                              make-binding-wrap
                                              extend-ribcage!
                                              make-empty-ribcage
                                              new-mark
                                              anti-mark
                                              the-anti-mark
                                              top-marked?
                                              top-wrap
                                              empty-wrap
                                              set-ribcage-labels!
                                              set-ribcage-marks!
                                              set-ribcage-symnames!
                                              ribcage-labels
                                              ribcage-marks
                                              ribcage-symnames
                                              ribcage?
                                              make-ribcage
                                              gen-labels
                                              gen-label
                                              make-rename
                                              rename-marks
                                              rename-new
                                              rename-old
                                              subst-rename?
                                              wrap-subst
                                              wrap-marks
                                              make-wrap
                                              id-sym-name&marks
                                              id-sym-name
                                              id?
                                              nonsymbol-id?
                                              global-extend
                                              macros-only-env
                                              extend-var-env
                                              extend-env
                                              null-env
                                              binding-value
                                              binding-type
                                              make-binding
                                              arg-check
                                              source-annotation
                                              no-source
                                              set-syntax-object-module!
                                              set-syntax-object-wrap!
                                              set-syntax-object-expression!
                                              syntax-object-module
                                              syntax-object-wrap
                                              syntax-object-expression
                                              syntax-object?
                                              make-syntax-object
                                              build-lexical-var
                                              build-letrec
                                              build-named-let
                                              build-let
                                              build-sequence
                                              build-data
                                              build-primref
                                              build-primcall
                                              build-lambda-case
                                              build-case-lambda
                                              build-simple-lambda
                                              build-global-definition
                                              build-global-assignment
                                              build-global-reference
                                              analyze-variable
                                              build-lexical-assignment
                                              build-lexical-reference
                                              build-dynlet
                                              build-conditional
                                              build-call
                                              build-void
                                              maybe-name-value!
                                              decorate-source
                                              get-global-definition-hook
                                              put-global-definition-hook
                                              session-id
                                              local-eval-hook
                                              top-level-eval-hook
                                              fx<
                                              fx=
                                              fx-
                                              fx+
                                              set-lambda-meta!
                                              lambda-meta
                                              lambda?
                                              make-dynlet
                                              make-letrec
                                              make-let
                                              make-lambda-case
                                              make-lambda
                                              make-seq
                                              make-primcall
                                              make-call
                                              make-conditional
                                              make-toplevel-define
                                              make-toplevel-set
                                              make-toplevel-ref
                                              make-module-set
                                              make-module-ref
                                              make-lexical-set
                                              make-lexical-ref
                                              make-primitive-ref
                                              make-const
                                              make-void)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("l-*-478"
                                             "l-*-476"
                                             "l-*-474"
                                             "l-*-472"
                                             "l-*-470"
                                             "l-*-468"
                                             "l-*-466"
                                             "l-*-464"
                                             "l-*-462"
                                             "l-*-460"
                                             "l-*-458"
                                             "l-*-456"
                                             "l-*-454"
                                             "l-*-452"
                                             "l-*-450"
                                             "l-*-448"
                                             "l-*-446"
                                             "l-*-444"
                                             "l-*-442"
                                             "l-*-440"
                                             "l-*-438"
                                             "l-*-436"
                                             "l-*-434"
                                             "l-*-432"
                                             "l-*-430"
                                             "l-*-428"
                                             "l-*-426"
                                             "l-*-424"
                                             "l-*-422"
                                             "l-*-420"
                                             "l-*-418"
                                             "l-*-416"
                                             "l-*-414"
                                             "l-*-412"
                                             "l-*-410"
                                             "l-*-408"
                                             "l-*-406"
                                             "l-*-404"
                                             "l-*-402"
                                             "l-*-401"
                                             "l-*-399"
                                             "l-*-396"
                                             "l-*-395"
                                             "l-*-394"
                                             "l-*-392"
                                             "l-*-391"
                                             "l-*-389"
                                             "l-*-387"
                                             "l-*-385"
                                             "l-*-383"
                                             "l-*-381"
                                             "l-*-379"
                                             "l-*-377"
                                             "l-*-375"
                                             "l-*-372"
                                             "l-*-370"
                                             "l-*-369"
                                             "l-*-367"
                                             "l-*-365"
                                             "l-*-363"
                                             "l-*-361"
                                             "l-*-360"
                                             "l-*-359"
                                             "l-*-358"
                                             "l-*-356"
                                             "l-*-355"
                                             "l-*-352"
                                             "l-*-350"
                                             "l-*-348"
                                             "l-*-346"
                                             "l-*-344"
                                             "l-*-342"
                                             "l-*-341"
                                             "l-*-340"
                                             "l-*-338"
                                             "l-*-336"
                                             "l-*-335"
                                             "l-*-332"
                                             "l-*-331"
                                             "l-*-329"
                                             "l-*-327"
                                             "l-*-325"
                                             "l-*-323"
                                             "l-*-321"
                                             "l-*-319"
                                             "l-*-317"
                                             "l-*-315"
                                             "l-*-313"
                                             "l-*-310"
                                             "l-*-308"
                                             "l-*-306"
                                             "l-*-304"
                                             "l-*-302"
                                             "l-*-300"
                                             "l-*-298"
                                             "l-*-296"
                                             "l-*-294"
                                             "l-*-292"
                                             "l-*-290"
                                             "l-*-288"
                                             "l-*-286"
                                             "l-*-284"
                                             "l-*-282"
                                             "l-*-280"
                                             "l-*-278"
                                             "l-*-276"
                                             "l-*-274"
                                             "l-*-272"
                                             "l-*-270"
                                             "l-*-268"
                                             "l-*-266"
                                             "l-*-264"
                                             "l-*-262"
                                             "l-*-260"
                                             "l-*-258"
                                             "l-*-257"
                                             "l-*-256"
                                             "l-*-255"
                                             "l-*-254"
                                             "l-*-252"
                                             "l-*-250"
                                             "l-*-248"
                                             "l-*-245"
                                             "l-*-243"
                                             "l-*-241"
                                             "l-*-239"
                                             "l-*-237"
                                             "l-*-235"
                                             "l-*-233"
                                             "l-*-231"
                                             "l-*-229"
                                             "l-*-227"
                                             "l-*-225"
                                             "l-*-223"
                                             "l-*-221"
                                             "l-*-219"
                                             "l-*-217"
                                             "l-*-215"
                                             "l-*-213"
                                             "l-*-211"
                                             "l-*-209"))
                                          #(ribcage
                                            (define-structure
                                              define-expansion-accessors
                                              define-expansion-constructors)
                                            ((top) (top) (top))
                                            ("l-*-47" "l-*-46" "l-*-45"))
                                          #(ribcage () () ()))
                                         (hygiene guile))
                                      head-10995)
                                r-10129
                                w-10130
                                mod-10132)
                              (map (lambda (e-11364)
                                     (expand-4382
                                       e-11364
                                       r-10129
                                       w-10130
                                       mod-10132))
                                   (append tail-10996 (list val-10997))))))))
                    tmp-10991)
                  (syntax-violation
                    'set!
                    "bad set!"
                    (let ((x-11452
                            (begin
                              (if (if (pair? e-10128) s-10131 #f)
                                (set-source-properties! e-10128 s-10131))
                              e-10128)))
                      (if (if (null? (car w-10130))
                            (null? (cdr w-10130))
                            #f)
                        x-11452
                        (if (if (vector? x-11452)
                              (if (= (vector-length x-11452) 4)
                                (eq? (vector-ref x-11452 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((expression-11484 (vector-ref x-11452 1))
                                (wrap-11485
                                  (let ((w2-11493 (vector-ref x-11452 2)))
                                    (let ((m1-11494 (car w-10130))
                                          (s1-11495 (cdr w-10130)))
                                      (if (null? m1-11494)
                                        (if (null? s1-11495)
                                          w2-11493
                                          (cons (car w2-11493)
                                                (let ((m2-11510
                                                        (cdr w2-11493)))
                                                  (if (null? m2-11510)
                                                    s1-11495
                                                    (append
                                                      s1-11495
                                                      m2-11510)))))
                                        (cons (let ((m2-11518 (car w2-11493)))
                                                (if (null? m2-11518)
                                                  m1-11494
                                                  (append m1-11494 m2-11518)))
                                              (let ((m2-11526 (cdr w2-11493)))
                                                (if (null? m2-11526)
                                                  s1-11495
                                                  (append
                                                    s1-11495
                                                    m2-11526))))))))
                                (module-11486 (vector-ref x-11452 3)))
                            (vector
                              'syntax-object
                              expression-11484
                              wrap-11485
                              module-11486))
                          (if (null? x-11452)
                            x-11452
                            (vector
                              'syntax-object
                              x-11452
                              w-10130
                              mod-10132))))))))))))
      (module-define!
        (current-module)
        '@
        (make-syntax-transformer
          '@
          'module-ref
          (lambda (e-11557 r-11558 w-11559)
            (let ((tmp-11561
                    ($sc-dispatch e-11557 '(_ each-any any))))
              (if (if tmp-11561
                    (@apply
                      (lambda (mod-11564 id-11565)
                        (if (and-map id?-4346 mod-11564)
                          (if (symbol? id-11565)
                            #t
                            (if (if (vector? id-11565)
                                  (if (= (vector-length id-11565) 4)
                                    (eq? (vector-ref id-11565 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref id-11565 1))
                              #f))
                          #f))
                      tmp-11561)
                    #f)
                (@apply
                  (lambda (mod-11605 id-11606)
                    (values
                      (syntax->datum id-11606)
                      r-11558
                      w-11559
                      #f
                      (syntax->datum
                        (cons '#(syntax-object
                                 public
                                 ((top)
                                  #(ribcage
                                    #(mod id)
                                    #((top) (top))
                                    #("l-*-3650" "l-*-3651"))
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(e r w)
                                    #((top) (top) (top))
                                    #("l-*-3638" "l-*-3639" "l-*-3640"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      expand-lambda-case
                                      lambda*-formals
                                      expand-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      expand-void
                                      eval-local-transformer
                                      expand-local-syntax
                                      expand-body
                                      expand-macro
                                      expand-call
                                      expand-expr
                                      expand
                                      syntax-type
                                      parse-when-list
                                      expand-install-global
                                      expand-top-sequence
                                      expand-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      with-transformer-environment
                                      transformer-environment
                                      resolve-identifier
                                      locally-bound-identifiers
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-primcall
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-call
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      session-id
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-seq
                                      make-primcall
                                      make-call
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("l-*-478"
                                     "l-*-476"
                                     "l-*-474"
                                     "l-*-472"
                                     "l-*-470"
                                     "l-*-468"
                                     "l-*-466"
                                     "l-*-464"
                                     "l-*-462"
                                     "l-*-460"
                                     "l-*-458"
                                     "l-*-456"
                                     "l-*-454"
                                     "l-*-452"
                                     "l-*-450"
                                     "l-*-448"
                                     "l-*-446"
                                     "l-*-444"
                                     "l-*-442"
                                     "l-*-440"
                                     "l-*-438"
                                     "l-*-436"
                                     "l-*-434"
                                     "l-*-432"
                                     "l-*-430"
                                     "l-*-428"
                                     "l-*-426"
                                     "l-*-424"
                                     "l-*-422"
                                     "l-*-420"
                                     "l-*-418"
                                     "l-*-416"
                                     "l-*-414"
                                     "l-*-412"
                                     "l-*-410"
                                     "l-*-408"
                                     "l-*-406"
                                     "l-*-404"
                                     "l-*-402"
                                     "l-*-401"
                                     "l-*-399"
                                     "l-*-396"
                                     "l-*-395"
                                     "l-*-394"
                                     "l-*-392"
                                     "l-*-391"
                                     "l-*-389"
                                     "l-*-387"
                                     "l-*-385"
                                     "l-*-383"
                                     "l-*-381"
                                     "l-*-379"
                                     "l-*-377"
                                     "l-*-375"
                                     "l-*-372"
                                     "l-*-370"
                                     "l-*-369"
                                     "l-*-367"
                                     "l-*-365"
                                     "l-*-363"
                                     "l-*-361"
                                     "l-*-360"
                                     "l-*-359"
                                     "l-*-358"
                                     "l-*-356"
                                     "l-*-355"
                                     "l-*-352"
                                     "l-*-350"
                                     "l-*-348"
                                     "l-*-346"
                                     "l-*-344"
                                     "l-*-342"
                                     "l-*-341"
                                     "l-*-340"
                                     "l-*-338"
                                     "l-*-336"
                                     "l-*-335"
                                     "l-*-332"
                                     "l-*-331"
                                     "l-*-329"
                                     "l-*-327"
                                     "l-*-325"
                                     "l-*-323"
                                     "l-*-321"
                                     "l-*-319"
                                     "l-*-317"
                                     "l-*-315"
                                     "l-*-313"
                                     "l-*-310"
                                     "l-*-308"
                                     "l-*-306"
                                     "l-*-304"
                                     "l-*-302"
                                     "l-*-300"
                                     "l-*-298"
                                     "l-*-296"
                                     "l-*-294"
                                     "l-*-292"
                                     "l-*-290"
                                     "l-*-288"
                                     "l-*-286"
                                     "l-*-284"
                                     "l-*-282"
                                     "l-*-280"
                                     "l-*-278"
                                     "l-*-276"
                                     "l-*-274"
                                     "l-*-272"
                                     "l-*-270"
                                     "l-*-268"
                                     "l-*-266"
                                     "l-*-264"
                                     "l-*-262"
                                     "l-*-260"
                                     "l-*-258"
                                     "l-*-257"
                                     "l-*-256"
                                     "l-*-255"
                                     "l-*-254"
                                     "l-*-252"
                                     "l-*-250"
                                     "l-*-248"
                                     "l-*-245"
                                     "l-*-243"
                                     "l-*-241"
                                     "l-*-239"
                                     "l-*-237"
                                     "l-*-235"
                                     "l-*-233"
                                     "l-*-231"
                                     "l-*-229"
                                     "l-*-227"
                                     "l-*-225"
                                     "l-*-223"
                                     "l-*-221"
                                     "l-*-219"
                                     "l-*-217"
                                     "l-*-215"
                                     "l-*-213"
                                     "l-*-211"
                                     "l-*-209"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("l-*-47" "l-*-46" "l-*-45"))
                                  #(ribcage () () ()))
                                 (hygiene guile))
                              mod-11605))))
                  tmp-11561)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  e-11557))))))
      (global-extend-4344
        'module-ref
        '@@
        (lambda (e-11706 r-11707 w-11708)
          (letrec*
            ((remodulate-11709
               (lambda (x-11927 mod-11928)
                 (if (pair? x-11927)
                   (cons (remodulate-11709 (car x-11927) mod-11928)
                         (remodulate-11709 (cdr x-11927) mod-11928))
                   (if (if (vector? x-11927)
                         (if (= (vector-length x-11927) 4)
                           (eq? (vector-ref x-11927 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((expression-11942
                             (remodulate-11709
                               (vector-ref x-11927 1)
                               mod-11928))
                           (wrap-11943 (vector-ref x-11927 2)))
                       (vector
                         'syntax-object
                         expression-11942
                         wrap-11943
                         mod-11928))
                     (if (vector? x-11927)
                       (let ((n-11951 (vector-length x-11927)))
                         (let ((v-11952 (make-vector n-11951)))
                           (letrec*
                             ((loop-11953
                                (lambda (i-12008)
                                  (if (= i-12008 n-11951)
                                    v-11952
                                    (begin
                                      (vector-set!
                                        v-11952
                                        i-12008
                                        (remodulate-11709
                                          (vector-ref x-11927 i-12008)
                                          mod-11928))
                                      (loop-11953 (#{1+}# i-12008)))))))
                             (loop-11953 0))))
                       x-11927))))))
            (let ((tmp-11711
                    ($sc-dispatch e-11706 '(_ each-any any))))
              (if (if tmp-11711
                    (@apply
                      (lambda (mod-11715 exp-11716)
                        (and-map id?-4346 mod-11715))
                      tmp-11711)
                    #f)
                (@apply
                  (lambda (mod-11732 exp-11733)
                    (let ((mod-11734
                            (syntax->datum
                              (cons '#(syntax-object
                                       private
                                       ((top)
                                        #(ribcage
                                          #(mod exp)
                                          #((top) (top))
                                          #("l-*-3688" "l-*-3689"))
                                        #(ribcage
                                          (remodulate)
                                          ((top))
                                          ("l-*-3661"))
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("l-*-3658" "l-*-3659" "l-*-3660"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-call
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            with-transformer-environment
                                            transformer-environment
                                            resolve-identifier
                                            locally-bound-identifiers
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-primcall
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-call
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            session-id
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-seq
                                            make-primcall
                                            make-call
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("l-*-478"
                                           "l-*-476"
                                           "l-*-474"
                                           "l-*-472"
                                           "l-*-470"
                                           "l-*-468"
                                           "l-*-466"
                                           "l-*-464"
                                           "l-*-462"
                                           "l-*-460"
                                           "l-*-458"
                                           "l-*-456"
                                           "l-*-454"
                                           "l-*-452"
                                           "l-*-450"
                                           "l-*-448"
                                           "l-*-446"
                                           "l-*-444"
                                           "l-*-442"
                                           "l-*-440"
                                           "l-*-438"
                                           "l-*-436"
                                           "l-*-434"
                                           "l-*-432"
                                           "l-*-430"
                                           "l-*-428"
                                           "l-*-426"
                                           "l-*-424"
                                           "l-*-422"
                                           "l-*-420"
                                           "l-*-418"
                                           "l-*-416"
                                           "l-*-414"
                                           "l-*-412"
                                           "l-*-410"
                                           "l-*-408"
                                           "l-*-406"
                                           "l-*-404"
                                           "l-*-402"
                                           "l-*-401"
                                           "l-*-399"
                                           "l-*-396"
                                           "l-*-395"
                                           "l-*-394"
                                           "l-*-392"
                                           "l-*-391"
                                           "l-*-389"
                                           "l-*-387"
                                           "l-*-385"
                                           "l-*-383"
                                           "l-*-381"
                                           "l-*-379"
                                           "l-*-377"
                                           "l-*-375"
                                           "l-*-372"
                                           "l-*-370"
                                           "l-*-369"
                                           "l-*-367"
                                           "l-*-365"
                                           "l-*-363"
                                           "l-*-361"
                                           "l-*-360"
                                           "l-*-359"
                                           "l-*-358"
                                           "l-*-356"
                                           "l-*-355"
                                           "l-*-352"
                                           "l-*-350"
                                           "l-*-348"
                                           "l-*-346"
                                           "l-*-344"
                                           "l-*-342"
                                           "l-*-341"
                                           "l-*-340"
                                           "l-*-338"
                                           "l-*-336"
                                           "l-*-335"
                                           "l-*-332"
                                           "l-*-331"
                                           "l-*-329"
                                           "l-*-327"
                                           "l-*-325"
                                           "l-*-323"
                                           "l-*-321"
                                           "l-*-319"
                                           "l-*-317"
                                           "l-*-315"
                                           "l-*-313"
                                           "l-*-310"
                                           "l-*-308"
                                           "l-*-306"
                                           "l-*-304"
                                           "l-*-302"
                                           "l-*-300"
                                           "l-*-298"
                                           "l-*-296"
                                           "l-*-294"
                                           "l-*-292"
                                           "l-*-290"
                                           "l-*-288"
                                           "l-*-286"
                                           "l-*-284"
                                           "l-*-282"
                                           "l-*-280"
                                           "l-*-278"
                                           "l-*-276"
                                           "l-*-274"
                                           "l-*-272"
                                           "l-*-270"
                                           "l-*-268"
                                           "l-*-266"
                                           "l-*-264"
                                           "l-*-262"
                                           "l-*-260"
                                           "l-*-258"
                                           "l-*-257"
                                           "l-*-256"
                                           "l-*-255"
                                           "l-*-254"
                                           "l-*-252"
                                           "l-*-250"
                                           "l-*-248"
                                           "l-*-245"
                                           "l-*-243"
                                           "l-*-241"
                                           "l-*-239"
                                           "l-*-237"
                                           "l-*-235"
                                           "l-*-233"
                                           "l-*-231"
                                           "l-*-229"
                                           "l-*-227"
                                           "l-*-225"
                                           "l-*-223"
                                           "l-*-221"
                                           "l-*-219"
                                           "l-*-217"
                                           "l-*-215"
                                           "l-*-213"
                                           "l-*-211"
                                           "l-*-209"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("l-*-47" "l-*-46" "l-*-45"))
                                        #(ribcage () () ()))
                                       (hygiene guile))
                                    mod-11732))))
                      (values
                        (remodulate-11709 exp-11733 mod-11734)
                        r-11707
                        w-11708
                        (source-annotation-4340 exp-11733)
                        mod-11734)))
                  tmp-11711)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  e-11706))))))
      (global-extend-4344
        'core
        'if
        (lambda (e-12117 r-12118 w-12119 s-12120 mod-12121)
          (let ((tmp-12123 ($sc-dispatch e-12117 '(_ any any))))
            (if tmp-12123
              (@apply
                (lambda (test-12127 then-12128)
                  (build-conditional-4314
                    s-12120
                    (expand-4382
                      test-12127
                      r-12118
                      w-12119
                      mod-12121)
                    (expand-4382
                      then-12128
                      r-12118
                      w-12119
                      mod-12121)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 0)
                      #f)))
                tmp-12123)
              (let ((tmp-12377
                      ($sc-dispatch e-12117 '(_ any any any))))
                (if tmp-12377
                  (@apply
                    (lambda (test-12381 then-12382 else-12383)
                      (build-conditional-4314
                        s-12120
                        (expand-4382
                          test-12381
                          r-12118
                          w-12119
                          mod-12121)
                        (expand-4382
                          then-12382
                          r-12118
                          w-12119
                          mod-12121)
                        (expand-4382
                          else-12383
                          r-12118
                          w-12119
                          mod-12121)))
                    tmp-12377)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    e-12117)))))))
      (global-extend-4344
        'core
        'with-fluids
        (lambda (e-12822 r-12823 w-12824 s-12825 mod-12826)
          (let ((tmp-12828
                  ($sc-dispatch
                    e-12822
                    '(_ #(each (any any)) any . each-any))))
            (if tmp-12828
              (@apply
                (lambda (fluid-12832 val-12833 b-12834 b*-12835)
                  (build-dynlet-4315
                    s-12825
                    (map (lambda (x-12924)
                           (expand-4382 x-12924 r-12823 w-12824 mod-12826))
                         fluid-12832)
                    (map (lambda (x-13002)
                           (expand-4382 x-13002 r-12823 w-12824 mod-12826))
                         val-12833)
                    (expand-body-4386
                      (cons b-12834 b*-12835)
                      (let ((x-13091
                              (begin
                                (if (if (pair? e-12822) s-12825 #f)
                                  (set-source-properties! e-12822 s-12825))
                                e-12822)))
                        (if (if (null? (car w-12824))
                              (null? (cdr w-12824))
                              #f)
                          x-13091
                          (if (if (vector? x-13091)
                                (if (= (vector-length x-13091) 4)
                                  (eq? (vector-ref x-13091 0) 'syntax-object)
                                  #f)
                                #f)
                            (let ((expression-13123 (vector-ref x-13091 1))
                                  (wrap-13124
                                    (let ((w2-13132 (vector-ref x-13091 2)))
                                      (let ((m1-13133 (car w-12824))
                                            (s1-13134 (cdr w-12824)))
                                        (if (null? m1-13133)
                                          (if (null? s1-13134)
                                            w2-13132
                                            (cons (car w2-13132)
                                                  (let ((m2-13149
                                                          (cdr w2-13132)))
                                                    (if (null? m2-13149)
                                                      s1-13134
                                                      (append
                                                        s1-13134
                                                        m2-13149)))))
                                          (cons (let ((m2-13157
                                                        (car w2-13132)))
                                                  (if (null? m2-13157)
                                                    m1-13133
                                                    (append
                                                      m1-13133
                                                      m2-13157)))
                                                (let ((m2-13165
                                                        (cdr w2-13132)))
                                                  (if (null? m2-13165)
                                                    s1-13134
                                                    (append
                                                      s1-13134
                                                      m2-13165))))))))
                                  (module-13125 (vector-ref x-13091 3)))
                              (vector
                                'syntax-object
                                expression-13123
                                wrap-13124
                                module-13125))
                            (if (null? x-13091)
                              x-13091
                              (vector
                                'syntax-object
                                x-13091
                                w-12824
                                mod-12826)))))
                      r-12823
                      w-12824
                      mod-12826)))
                tmp-12828)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                e-12822)))))
      (module-define!
        (current-module)
        'begin
        (make-syntax-transformer 'begin 'begin '()))
      (module-define!
        (current-module)
        'define
        (make-syntax-transformer 'define 'define '()))
      (module-define!
        (current-module)
        'define-syntax
        (make-syntax-transformer
          'define-syntax
          'define-syntax
          '()))
      (module-define!
        (current-module)
        'define-syntax-parameter
        (make-syntax-transformer
          'define-syntax-parameter
          'define-syntax-parameter
          '()))
      (module-define!
        (current-module)
        'eval-when
        (make-syntax-transformer
          'eval-when
          'eval-when
          '()))
      (global-extend-4344
        'core
        'syntax-case
        (letrec*
          ((convert-pattern-13465
             (lambda (pattern-15087 keys-15088)
               (letrec*
                 ((cvt*-15089
                    (lambda (p*-15888 n-15889 ids-15890)
                      (if (not (pair? p*-15888))
                        (cvt-15091 p*-15888 n-15889 ids-15890)
                        (call-with-values
                          (lambda ()
                            (cvt*-15089 (cdr p*-15888) n-15889 ids-15890))
                          (lambda (y-15893 ids-15894)
                            (call-with-values
                              (lambda ()
                                (cvt-15091 (car p*-15888) n-15889 ids-15894))
                              (lambda (x-15897 ids-15898)
                                (values
                                  (cons x-15897 y-15893)
                                  ids-15898))))))))
                  (v-reverse-15090
                    (lambda (x-15899)
                      (letrec*
                        ((loop-15900
                           (lambda (r-16001 x-16002)
                             (if (not (pair? x-16002))
                               (values r-16001 x-16002)
                               (loop-15900
                                 (cons (car x-16002) r-16001)
                                 (cdr x-16002))))))
                        (loop-15900 '() x-15899))))
                  (cvt-15091
                    (lambda (p-15094 n-15095 ids-15096)
                      (if (if (symbol? p-15094)
                            #t
                            (if (if (vector? p-15094)
                                  (if (= (vector-length p-15094) 4)
                                    (eq? (vector-ref p-15094 0) 'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref p-15094 1))
                              #f))
                        (if (bound-id-member?-4374 p-15094 keys-15088)
                          (values (vector 'free-id p-15094) ids-15096)
                          (if (free-id=?-4370
                                p-15094
                                '#(syntax-object
                                   _
                                   ((top)
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p n ids)
                                      #((top) (top) (top))
                                      #("l-*-3789" "l-*-3790" "l-*-3791"))
                                    #(ribcage
                                      (cvt v-reverse cvt*)
                                      ((top) (top) (top))
                                      ("l-*-3762" "l-*-3760" "l-*-3758"))
                                    #(ribcage
                                      #(pattern keys)
                                      #((top) (top))
                                      #("l-*-3756" "l-*-3757"))
                                    #(ribcage
                                      (gen-syntax-case
                                        gen-clause
                                        build-dispatch-call
                                        convert-pattern)
                                      ((top) (top) (top) (top))
                                      ("l-*-3752"
                                       "l-*-3750"
                                       "l-*-3748"
                                       "l-*-3746"))
                                    #(ribcage
                                      (lambda-var-list
                                        gen-var
                                        strip
                                        expand-lambda-case
                                        lambda*-formals
                                        expand-simple-lambda
                                        lambda-formals
                                        ellipsis?
                                        expand-void
                                        eval-local-transformer
                                        expand-local-syntax
                                        expand-body
                                        expand-macro
                                        expand-call
                                        expand-expr
                                        expand
                                        syntax-type
                                        parse-when-list
                                        expand-install-global
                                        expand-top-sequence
                                        expand-sequence
                                        source-wrap
                                        wrap
                                        bound-id-member?
                                        distinct-bound-ids?
                                        valid-bound-ids?
                                        bound-id=?
                                        free-id=?
                                        with-transformer-environment
                                        transformer-environment
                                        resolve-identifier
                                        locally-bound-identifiers
                                        id-var-name
                                        same-marks?
                                        join-marks
                                        join-wraps
                                        smart-append
                                        make-binding-wrap
                                        extend-ribcage!
                                        make-empty-ribcage
                                        new-mark
                                        anti-mark
                                        the-anti-mark
                                        top-marked?
                                        top-wrap
                                        empty-wrap
                                        set-ribcage-labels!
                                        set-ribcage-marks!
                                        set-ribcage-symnames!
                                        ribcage-labels
                                        ribcage-marks
                                        ribcage-symnames
                                        ribcage?
                                        make-ribcage
                                        gen-labels
                                        gen-label
                                        make-rename
                                        rename-marks
                                        rename-new
                                        rename-old
                                        subst-rename?
                                        wrap-subst
                                        wrap-marks
                                        make-wrap
                                        id-sym-name&marks
                                        id-sym-name
                                        id?
                                        nonsymbol-id?
                                        global-extend
                                        macros-only-env
                                        extend-var-env
                                        extend-env
                                        null-env
                                        binding-value
                                        binding-type
                                        make-binding
                                        arg-check
                                        source-annotation
                                        no-source
                                        set-syntax-object-module!
                                        set-syntax-object-wrap!
                                        set-syntax-object-expression!
                                        syntax-object-module
                                        syntax-object-wrap
                                        syntax-object-expression
                                        syntax-object?
                                        make-syntax-object
                                        build-lexical-var
                                        build-letrec
                                        build-named-let
                                        build-let
                                        build-sequence
                                        build-data
                                        build-primref
                                        build-primcall
                                        build-lambda-case
                                        build-case-lambda
                                        build-simple-lambda
                                        build-global-definition
                                        build-global-assignment
                                        build-global-reference
                                        analyze-variable
                                        build-lexical-assignment
                                        build-lexical-reference
                                        build-dynlet
                                        build-conditional
                                        build-call
                                        build-void
                                        maybe-name-value!
                                        decorate-source
                                        get-global-definition-hook
                                        put-global-definition-hook
                                        session-id
                                        local-eval-hook
                                        top-level-eval-hook
                                        fx<
                                        fx=
                                        fx-
                                        fx+
                                        set-lambda-meta!
                                        lambda-meta
                                        lambda?
                                        make-dynlet
                                        make-letrec
                                        make-let
                                        make-lambda-case
                                        make-lambda
                                        make-seq
                                        make-primcall
                                        make-call
                                        make-conditional
                                        make-toplevel-define
                                        make-toplevel-set
                                        make-toplevel-ref
                                        make-module-set
                                        make-module-ref
                                        make-lexical-set
                                        make-lexical-ref
                                        make-primitive-ref
                                        make-const
                                        make-void)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("l-*-478"
                                       "l-*-476"
                                       "l-*-474"
                                       "l-*-472"
                                       "l-*-470"
                                       "l-*-468"
                                       "l-*-466"
                                       "l-*-464"
                                       "l-*-462"
                                       "l-*-460"
                                       "l-*-458"
                                       "l-*-456"
                                       "l-*-454"
                                       "l-*-452"
                                       "l-*-450"
                                       "l-*-448"
                                       "l-*-446"
                                       "l-*-444"
                                       "l-*-442"
                                       "l-*-440"
                                       "l-*-438"
                                       "l-*-436"
                                       "l-*-434"
                                       "l-*-432"
                                       "l-*-430"
                                       "l-*-428"
                                       "l-*-426"
                                       "l-*-424"
                                       "l-*-422"
                                       "l-*-420"
                                       "l-*-418"
                                       "l-*-416"
                                       "l-*-414"
                                       "l-*-412"
                                       "l-*-410"
                                       "l-*-408"
                                       "l-*-406"
                                       "l-*-404"
                                       "l-*-402"
                                       "l-*-401"
                                       "l-*-399"
                                       "l-*-396"
                                       "l-*-395"
                                       "l-*-394"
                                       "l-*-392"
                                       "l-*-391"
                                       "l-*-389"
                                       "l-*-387"
                                       "l-*-385"
                                       "l-*-383"
                                       "l-*-381"
                                       "l-*-379"
                                       "l-*-377"
                                       "l-*-375"
                                       "l-*-372"
                                       "l-*-370"
                                       "l-*-369"
                                       "l-*-367"
                                       "l-*-365"
                                       "l-*-363"
                                       "l-*-361"
                                       "l-*-360"
                                       "l-*-359"
                                       "l-*-358"
                                       "l-*-356"
                                       "l-*-355"
                                       "l-*-352"
                                       "l-*-350"
                                       "l-*-348"
                                       "l-*-346"
                                       "l-*-344"
                                       "l-*-342"
                                       "l-*-341"
                                       "l-*-340"
                                       "l-*-338"
                                       "l-*-336"
                                       "l-*-335"
                                       "l-*-332"
                                       "l-*-331"
                                       "l-*-329"
                                       "l-*-327"
                                       "l-*-325"
                                       "l-*-323"
                                       "l-*-321"
                                       "l-*-319"
                                       "l-*-317"
                                       "l-*-315"
                                       "l-*-313"
                                       "l-*-310"
                                       "l-*-308"
                                       "l-*-306"
                                       "l-*-304"
                                       "l-*-302"
                                       "l-*-300"
                                       "l-*-298"
                                       "l-*-296"
                                       "l-*-294"
                                       "l-*-292"
                                       "l-*-290"
                                       "l-*-288"
                                       "l-*-286"
                                       "l-*-284"
                                       "l-*-282"
                                       "l-*-280"
                                       "l-*-278"
                                       "l-*-276"
                                       "l-*-274"
                                       "l-*-272"
                                       "l-*-270"
                                       "l-*-268"
                                       "l-*-266"
                                       "l-*-264"
                                       "l-*-262"
                                       "l-*-260"
                                       "l-*-258"
                                       "l-*-257"
                                       "l-*-256"
                                       "l-*-255"
                                       "l-*-254"
                                       "l-*-252"
                                       "l-*-250"
                                       "l-*-248"
                                       "l-*-245"
                                       "l-*-243"
                                       "l-*-241"
                                       "l-*-239"
                                       "l-*-237"
                                       "l-*-235"
                                       "l-*-233"
                                       "l-*-231"
                                       "l-*-229"
                                       "l-*-227"
                                       "l-*-225"
                                       "l-*-223"
                                       "l-*-221"
                                       "l-*-219"
                                       "l-*-217"
                                       "l-*-215"
                                       "l-*-213"
                                       "l-*-211"
                                       "l-*-209"))
                                    #(ribcage
                                      (define-structure
                                        define-expansion-accessors
                                        define-expansion-constructors)
                                      ((top) (top) (top))
                                      ("l-*-47" "l-*-46" "l-*-45"))
                                    #(ribcage () () ()))
                                   (hygiene guile)))
                            (values '_ ids-15096)
                            (values
                              'any
                              (cons (cons p-15094 n-15095) ids-15096))))
                        (let ((tmp-15228 ($sc-dispatch p-15094 '(any any))))
                          (if (if tmp-15228
                                (@apply
                                  (lambda (x-15232 dots-15233)
                                    (if (if (if (vector? dots-15233)
                                              (if (= (vector-length dots-15233)
                                                     4)
                                                (eq? (vector-ref dots-15233 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (symbol? (vector-ref dots-15233 1))
                                          #f)
                                      (free-id=?-4370
                                        dots-15233
                                        '#(syntax-object
                                           ...
                                           ((top)
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("l-*-2324"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                expand-lambda-case
                                                lambda*-formals
                                                expand-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                expand-void
                                                eval-local-transformer
                                                expand-local-syntax
                                                expand-body
                                                expand-macro
                                                expand-call
                                                expand-expr
                                                expand
                                                syntax-type
                                                parse-when-list
                                                expand-install-global
                                                expand-top-sequence
                                                expand-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                with-transformer-environment
                                                transformer-environment
                                                resolve-identifier
                                                locally-bound-identifiers
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-primcall
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-call
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                session-id
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-seq
                                                make-primcall
                                                make-call
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("l-*-478"
                                               "l-*-476"
                                               "l-*-474"
                                               "l-*-472"
                                               "l-*-470"
                                               "l-*-468"
                                               "l-*-466"
                                               "l-*-464"
                                               "l-*-462"
                                               "l-*-460"
                                               "l-*-458"
                                               "l-*-456"
                                               "l-*-454"
                                               "l-*-452"
                                               "l-*-450"
                                               "l-*-448"
                                               "l-*-446"
                                               "l-*-444"
                                               "l-*-442"
                                               "l-*-440"
                                               "l-*-438"
                                               "l-*-436"
                                               "l-*-434"
                                               "l-*-432"
                                               "l-*-430"
                                               "l-*-428"
                                               "l-*-426"
                                               "l-*-424"
                                               "l-*-422"
                                               "l-*-420"
                                               "l-*-418"
                                               "l-*-416"
                                               "l-*-414"
                                               "l-*-412"
                                               "l-*-410"
                                               "l-*-408"
                                               "l-*-406"
                                               "l-*-404"
                                               "l-*-402"
                                               "l-*-401"
                                               "l-*-399"
                                               "l-*-396"
                                               "l-*-395"
                                               "l-*-394"
                                               "l-*-392"
                                               "l-*-391"
                                               "l-*-389"
                                               "l-*-387"
                                               "l-*-385"
                                               "l-*-383"
                                               "l-*-381"
                                               "l-*-379"
                                               "l-*-377"
                                               "l-*-375"
                                               "l-*-372"
                                               "l-*-370"
                                               "l-*-369"
                                               "l-*-367"
                                               "l-*-365"
                                               "l-*-363"
                                               "l-*-361"
                                               "l-*-360"
                                               "l-*-359"
                                               "l-*-358"
                                               "l-*-356"
                                               "l-*-355"
                                               "l-*-352"
                                               "l-*-350"
                                               "l-*-348"
                                               "l-*-346"
                                               "l-*-344"
                                               "l-*-342"
                                               "l-*-341"
                                               "l-*-340"
                                               "l-*-338"
                                               "l-*-336"
                                               "l-*-335"
                                               "l-*-332"
                                               "l-*-331"
                                               "l-*-329"
                                               "l-*-327"
                                               "l-*-325"
                                               "l-*-323"
                                               "l-*-321"
                                               "l-*-319"
                                               "l-*-317"
                                               "l-*-315"
                                               "l-*-313"
                                               "l-*-310"
                                               "l-*-308"
                                               "l-*-306"
                                               "l-*-304"
                                               "l-*-302"
                                               "l-*-300"
                                               "l-*-298"
                                               "l-*-296"
                                               "l-*-294"
                                               "l-*-292"
                                               "l-*-290"
                                               "l-*-288"
                                               "l-*-286"
                                               "l-*-284"
                                               "l-*-282"
                                               "l-*-280"
                                               "l-*-278"
                                               "l-*-276"
                                               "l-*-274"
                                               "l-*-272"
                                               "l-*-270"
                                               "l-*-268"
                                               "l-*-266"
                                               "l-*-264"
                                               "l-*-262"
                                               "l-*-260"
                                               "l-*-258"
                                               "l-*-257"
                                               "l-*-256"
                                               "l-*-255"
                                               "l-*-254"
                                               "l-*-252"
                                               "l-*-250"
                                               "l-*-248"
                                               "l-*-245"
                                               "l-*-243"
                                               "l-*-241"
                                               "l-*-239"
                                               "l-*-237"
                                               "l-*-235"
                                               "l-*-233"
                                               "l-*-231"
                                               "l-*-229"
                                               "l-*-227"
                                               "l-*-225"
                                               "l-*-223"
                                               "l-*-221"
                                               "l-*-219"
                                               "l-*-217"
                                               "l-*-215"
                                               "l-*-213"
                                               "l-*-211"
                                               "l-*-209"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("l-*-47" "l-*-46" "l-*-45"))
                                            #(ribcage () () ()))
                                           (hygiene guile)))
                                      #f))
                                  tmp-15228)
                                #f)
                            (@apply
                              (lambda (x-15272 dots-15273)
                                (call-with-values
                                  (lambda ()
                                    (cvt-15091
                                      x-15272
                                      (#{1+}# n-15095)
                                      ids-15096))
                                  (lambda (p-15274 ids-15275)
                                    (values
                                      (if (eq? p-15274 'any)
                                        'each-any
                                        (vector 'each p-15274))
                                      ids-15275))))
                              tmp-15228)
                            (let ((tmp-15276
                                    ($sc-dispatch p-15094 '(any any . any))))
                              (if (if tmp-15276
                                    (@apply
                                      (lambda (x-15280 dots-15281 ys-15282)
                                        (if (if (if (vector? dots-15281)
                                                  (if (= (vector-length
                                                           dots-15281)
                                                         4)
                                                    (eq? (vector-ref
                                                           dots-15281
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref dots-15281 1))
                                              #f)
                                          (free-id=?-4370
                                            dots-15281
                                            '#(syntax-object
                                               ...
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("l-*-2324"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-call
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-primcall
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-call
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-seq
                                                    make-primcall
                                                    make-call
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-478"
                                                   "l-*-476"
                                                   "l-*-474"
                                                   "l-*-472"
                                                   "l-*-470"
                                                   "l-*-468"
                                                   "l-*-466"
                                                   "l-*-464"
                                                   "l-*-462"
                                                   "l-*-460"
                                                   "l-*-458"
                                                   "l-*-456"
                                                   "l-*-454"
                                                   "l-*-452"
                                                   "l-*-450"
                                                   "l-*-448"
                                                   "l-*-446"
                                                   "l-*-444"
                                                   "l-*-442"
                                                   "l-*-440"
                                                   "l-*-438"
                                                   "l-*-436"
                                                   "l-*-434"
                                                   "l-*-432"
                                                   "l-*-430"
                                                   "l-*-428"
                                                   "l-*-426"
                                                   "l-*-424"
                                                   "l-*-422"
                                                   "l-*-420"
                                                   "l-*-418"
                                                   "l-*-416"
                                                   "l-*-414"
                                                   "l-*-412"
                                                   "l-*-410"
                                                   "l-*-408"
                                                   "l-*-406"
                                                   "l-*-404"
                                                   "l-*-402"
                                                   "l-*-401"
                                                   "l-*-399"
                                                   "l-*-396"
                                                   "l-*-395"
                                                   "l-*-394"
                                                   "l-*-392"
                                                   "l-*-391"
                                                   "l-*-389"
                                                   "l-*-387"
                                                   "l-*-385"
                                                   "l-*-383"
                                                   "l-*-381"
                                                   "l-*-379"
                                                   "l-*-377"
                                                   "l-*-375"
                                                   "l-*-372"
                                                   "l-*-370"
                                                   "l-*-369"
                                                   "l-*-367"
                                                   "l-*-365"
                                                   "l-*-363"
                                                   "l-*-361"
                                                   "l-*-360"
                                                   "l-*-359"
                                                   "l-*-358"
                                                   "l-*-356"
                                                   "l-*-355"
                                                   "l-*-352"
                                                   "l-*-350"
                                                   "l-*-348"
                                                   "l-*-346"
                                                   "l-*-344"
                                                   "l-*-342"
                                                   "l-*-341"
                                                   "l-*-340"
                                                   "l-*-338"
                                                   "l-*-336"
                                                   "l-*-335"
                                                   "l-*-332"
                                                   "l-*-331"
                                                   "l-*-329"
                                                   "l-*-327"
                                                   "l-*-325"
                                                   "l-*-323"
                                                   "l-*-321"
                                                   "l-*-319"
                                                   "l-*-317"
                                                   "l-*-315"
                                                   "l-*-313"
                                                   "l-*-310"
                                                   "l-*-308"
                                                   "l-*-306"
                                                   "l-*-304"
                                                   "l-*-302"
                                                   "l-*-300"
                                                   "l-*-298"
                                                   "l-*-296"
                                                   "l-*-294"
                                                   "l-*-292"
                                                   "l-*-290"
                                                   "l-*-288"
                                                   "l-*-286"
                                                   "l-*-284"
                                                   "l-*-282"
                                                   "l-*-280"
                                                   "l-*-278"
                                                   "l-*-276"
                                                   "l-*-274"
                                                   "l-*-272"
                                                   "l-*-270"
                                                   "l-*-268"
                                                   "l-*-266"
                                                   "l-*-264"
                                                   "l-*-262"
                                                   "l-*-260"
                                                   "l-*-258"
                                                   "l-*-257"
                                                   "l-*-256"
                                                   "l-*-255"
                                                   "l-*-254"
                                                   "l-*-252"
                                                   "l-*-250"
                                                   "l-*-248"
                                                   "l-*-245"
                                                   "l-*-243"
                                                   "l-*-241"
                                                   "l-*-239"
                                                   "l-*-237"
                                                   "l-*-235"
                                                   "l-*-233"
                                                   "l-*-231"
                                                   "l-*-229"
                                                   "l-*-227"
                                                   "l-*-225"
                                                   "l-*-223"
                                                   "l-*-221"
                                                   "l-*-219"
                                                   "l-*-217"
                                                   "l-*-215"
                                                   "l-*-213"
                                                   "l-*-211"
                                                   "l-*-209"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-47" "l-*-46" "l-*-45"))
                                                #(ribcage () () ()))
                                               (hygiene guile)))
                                          #f))
                                      tmp-15276)
                                    #f)
                                (@apply
                                  (lambda (x-15321 dots-15322 ys-15323)
                                    (call-with-values
                                      (lambda ()
                                        (cvt*-15089
                                          ys-15323
                                          n-15095
                                          ids-15096))
                                      (lambda (ys-15808 ids-15809)
                                        (call-with-values
                                          (lambda ()
                                            (cvt-15091
                                              x-15321
                                              (#{1+}# n-15095)
                                              ids-15809))
                                          (lambda (x-15810 ids-15811)
                                            (call-with-values
                                              (lambda ()
                                                (v-reverse-15090 ys-15808))
                                              (lambda (ys-15847 e-15848)
                                                (values
                                                  (vector
                                                    'each+
                                                    x-15810
                                                    ys-15847
                                                    e-15848)
                                                  ids-15811))))))))
                                  tmp-15276)
                                (let ((tmp-15849
                                        ($sc-dispatch p-15094 '(any . any))))
                                  (if tmp-15849
                                    (@apply
                                      (lambda (x-15853 y-15854)
                                        (call-with-values
                                          (lambda ()
                                            (cvt-15091
                                              y-15854
                                              n-15095
                                              ids-15096))
                                          (lambda (y-15855 ids-15856)
                                            (call-with-values
                                              (lambda ()
                                                (cvt-15091
                                                  x-15853
                                                  n-15095
                                                  ids-15856))
                                              (lambda (x-15857 ids-15858)
                                                (values
                                                  (cons x-15857 y-15855)
                                                  ids-15858))))))
                                      tmp-15849)
                                    (let ((tmp-15859
                                            ($sc-dispatch p-15094 '())))
                                      (if tmp-15859
                                        (@apply
                                          (lambda () (values '() ids-15096))
                                          tmp-15859)
                                        (let ((tmp-15863
                                                ($sc-dispatch
                                                  p-15094
                                                  '#(vector each-any))))
                                          (if tmp-15863
                                            (@apply
                                              (lambda (x-15867)
                                                (call-with-values
                                                  (lambda ()
                                                    (cvt-15091
                                                      x-15867
                                                      n-15095
                                                      ids-15096))
                                                  (lambda (p-15868 ids-15869)
                                                    (values
                                                      (vector 'vector p-15868)
                                                      ids-15869))))
                                              tmp-15863)
                                            (values
                                              (vector
                                                'atom
                                                (strip-4395 p-15094 '(())))
                                              ids-15096)))))))))))))))
                 (cvt-15091 pattern-15087 0 '()))))
           (build-dispatch-call-13466
             (lambda (pvars-16003 exp-16004 y-16005 r-16006 mod-16007)
               (let ((ids-16008 (map car pvars-16003)))
                 (begin
                   (map cdr pvars-16003)
                   (let ((labels-16010 (gen-labels-4349 ids-16008))
                         (new-vars-16011 (map gen-var-4396 ids-16008)))
                     (build-primcall-4325
                       #f
                       'apply
                       (list (build-simple-lambda-4322
                               #f
                               (map syntax->datum ids-16008)
                               #f
                               new-vars-16011
                               '()
                               (expand-4382
                                 exp-16004
                                 (extend-env-4341
                                   labels-16010
                                   (map (lambda (var-16339 level-16340)
                                          (cons 'syntax
                                                (cons var-16339 level-16340)))
                                        new-vars-16011
                                        (map cdr pvars-16003))
                                   r-16006)
                                 (make-binding-wrap-4360
                                   ids-16008
                                   labels-16010
                                   '(()))
                                 mod-16007))
                             y-16005)))))))
           (gen-clause-13467
             (lambda (x-14671
                      keys-14672
                      clauses-14673
                      r-14674
                      pat-14675
                      fender-14676
                      exp-14677
                      mod-14678)
               (call-with-values
                 (lambda ()
                   (convert-pattern-13465 pat-14675 keys-14672))
                 (lambda (p-14816 pvars-14817)
                   (if (not (distinct-bound-ids?-4373 (map car pvars-14817)))
                     (syntax-violation
                       'syntax-case
                       "duplicate pattern variable"
                       pat-14675)
                     (if (not (and-map
                                (lambda (x-14926)
                                  (not (let ((x-14930 (car x-14926)))
                                         (if (if (if (vector? x-14930)
                                                   (if (= (vector-length
                                                            x-14930)
                                                          4)
                                                     (eq? (vector-ref
                                                            x-14930
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (symbol? (vector-ref x-14930 1))
                                               #f)
                                           (free-id=?-4370
                                             x-14930
                                             '#(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-2324"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     expand-lambda-case
                                                     lambda*-formals
                                                     expand-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     expand-void
                                                     eval-local-transformer
                                                     expand-local-syntax
                                                     expand-body
                                                     expand-macro
                                                     expand-call
                                                     expand-expr
                                                     expand
                                                     syntax-type
                                                     parse-when-list
                                                     expand-install-global
                                                     expand-top-sequence
                                                     expand-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     with-transformer-environment
                                                     transformer-environment
                                                     resolve-identifier
                                                     locally-bound-identifiers
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-primcall
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-call
                                                     build-void
                                                     maybe-name-value!
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     session-id
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-seq
                                                     make-primcall
                                                     make-call
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("l-*-478"
                                                    "l-*-476"
                                                    "l-*-474"
                                                    "l-*-472"
                                                    "l-*-470"
                                                    "l-*-468"
                                                    "l-*-466"
                                                    "l-*-464"
                                                    "l-*-462"
                                                    "l-*-460"
                                                    "l-*-458"
                                                    "l-*-456"
                                                    "l-*-454"
                                                    "l-*-452"
                                                    "l-*-450"
                                                    "l-*-448"
                                                    "l-*-446"
                                                    "l-*-444"
                                                    "l-*-442"
                                                    "l-*-440"
                                                    "l-*-438"
                                                    "l-*-436"
                                                    "l-*-434"
                                                    "l-*-432"
                                                    "l-*-430"
                                                    "l-*-428"
                                                    "l-*-426"
                                                    "l-*-424"
                                                    "l-*-422"
                                                    "l-*-420"
                                                    "l-*-418"
                                                    "l-*-416"
                                                    "l-*-414"
                                                    "l-*-412"
                                                    "l-*-410"
                                                    "l-*-408"
                                                    "l-*-406"
                                                    "l-*-404"
                                                    "l-*-402"
                                                    "l-*-401"
                                                    "l-*-399"
                                                    "l-*-396"
                                                    "l-*-395"
                                                    "l-*-394"
                                                    "l-*-392"
                                                    "l-*-391"
                                                    "l-*-389"
                                                    "l-*-387"
                                                    "l-*-385"
                                                    "l-*-383"
                                                    "l-*-381"
                                                    "l-*-379"
                                                    "l-*-377"
                                                    "l-*-375"
                                                    "l-*-372"
                                                    "l-*-370"
                                                    "l-*-369"
                                                    "l-*-367"
                                                    "l-*-365"
                                                    "l-*-363"
                                                    "l-*-361"
                                                    "l-*-360"
                                                    "l-*-359"
                                                    "l-*-358"
                                                    "l-*-356"
                                                    "l-*-355"
                                                    "l-*-352"
                                                    "l-*-350"
                                                    "l-*-348"
                                                    "l-*-346"
                                                    "l-*-344"
                                                    "l-*-342"
                                                    "l-*-341"
                                                    "l-*-340"
                                                    "l-*-338"
                                                    "l-*-336"
                                                    "l-*-335"
                                                    "l-*-332"
                                                    "l-*-331"
                                                    "l-*-329"
                                                    "l-*-327"
                                                    "l-*-325"
                                                    "l-*-323"
                                                    "l-*-321"
                                                    "l-*-319"
                                                    "l-*-317"
                                                    "l-*-315"
                                                    "l-*-313"
                                                    "l-*-310"
                                                    "l-*-308"
                                                    "l-*-306"
                                                    "l-*-304"
                                                    "l-*-302"
                                                    "l-*-300"
                                                    "l-*-298"
                                                    "l-*-296"
                                                    "l-*-294"
                                                    "l-*-292"
                                                    "l-*-290"
                                                    "l-*-288"
                                                    "l-*-286"
                                                    "l-*-284"
                                                    "l-*-282"
                                                    "l-*-280"
                                                    "l-*-278"
                                                    "l-*-276"
                                                    "l-*-274"
                                                    "l-*-272"
                                                    "l-*-270"
                                                    "l-*-268"
                                                    "l-*-266"
                                                    "l-*-264"
                                                    "l-*-262"
                                                    "l-*-260"
                                                    "l-*-258"
                                                    "l-*-257"
                                                    "l-*-256"
                                                    "l-*-255"
                                                    "l-*-254"
                                                    "l-*-252"
                                                    "l-*-250"
                                                    "l-*-248"
                                                    "l-*-245"
                                                    "l-*-243"
                                                    "l-*-241"
                                                    "l-*-239"
                                                    "l-*-237"
                                                    "l-*-235"
                                                    "l-*-233"
                                                    "l-*-231"
                                                    "l-*-229"
                                                    "l-*-227"
                                                    "l-*-225"
                                                    "l-*-223"
                                                    "l-*-221"
                                                    "l-*-219"
                                                    "l-*-217"
                                                    "l-*-215"
                                                    "l-*-213"
                                                    "l-*-211"
                                                    "l-*-209"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors)
                                                   ((top) (top) (top))
                                                   ("l-*-47"
                                                    "l-*-46"
                                                    "l-*-45"))
                                                 #(ribcage () () ()))
                                                (hygiene guile)))
                                           #f))))
                                pvars-14817))
                       (syntax-violation
                         'syntax-case
                         "misplaced ellipsis"
                         pat-14675)
                       (let ((y-14955
                               (gensym
                                 (string-append (symbol->string 'tmp) "-"))))
                         (let ((fun-exp-14960
                                 (let ((req-14969 (list 'tmp))
                                       (vars-14971 (list y-14955))
                                       (exp-14973
                                         (let ((y-15002
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     3)
                                                   #f
                                                   'tmp
                                                   y-14955)))
                                           (let ((test-exp-15006
                                                   (let ((tmp-15015
                                                           ($sc-dispatch
                                                             fender-14676
                                                             '#(atom #t))))
                                                     (if tmp-15015
                                                       (@apply
                                                         (lambda () y-15002)
                                                         tmp-15015)
                                                       (let ((then-exp-15033
                                                               (build-dispatch-call-13466
                                                                 pvars-14817
                                                                 fender-14676
                                                                 y-15002
                                                                 r-14674
                                                                 mod-14678))
                                                             (else-exp-15034
                                                               (make-struct/no-tail
                                                                 (vector-ref
                                                                   %expanded-vtables
                                                                   1)
                                                                 #f
                                                                 #f)))
                                                         (make-struct/no-tail
                                                           (vector-ref
                                                             %expanded-vtables
                                                             10)
                                                           #f
                                                           y-15002
                                                           then-exp-15033
                                                           else-exp-15034)))))
                                                 (then-exp-15007
                                                   (build-dispatch-call-13466
                                                     pvars-14817
                                                     exp-14677
                                                     y-15002
                                                     r-14674
                                                     mod-14678))
                                                 (else-exp-15008
                                                   (gen-syntax-case-13468
                                                     x-14671
                                                     keys-14672
                                                     clauses-14673
                                                     r-14674
                                                     mod-14678)))
                                             (make-struct/no-tail
                                               (vector-ref
                                                 %expanded-vtables
                                                 10)
                                               #f
                                               test-exp-15006
                                               then-exp-15007
                                               else-exp-15008)))))
                                   (let ((body-14978
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 15)
                                             #f
                                             req-14969
                                             #f
                                             #f
                                             #f
                                             '()
                                             vars-14971
                                             exp-14973
                                             #f)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       '()
                                       body-14978))))
                               (arg-exps-14961
                                 (list (if (eq? p-14816 'any)
                                         (let ((args-15066 (list x-14671)))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 12)
                                             #f
                                             'list
                                             args-15066))
                                         (let ((args-15075
                                                 (list x-14671
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           1)
                                                         #f
                                                         p-14816))))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 12)
                                             #f
                                             '$sc-dispatch
                                             args-15075))))))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 11)
                             #f
                             fun-exp-14960
                             arg-exps-14961)))))))))
           (gen-syntax-case-13468
             (lambda (x-14172
                      keys-14173
                      clauses-14174
                      r-14175
                      mod-14176)
               (if (null? clauses-14174)
                 (let ((args-14182
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #f)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 "source expression failed to match any pattern")
                               x-14172)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 12)
                     #f
                     'syntax-violation
                     args-14182))
                 (let ((tmp-14201 (car clauses-14174)))
                   (let ((tmp-14202 ($sc-dispatch tmp-14201 '(any any))))
                     (if tmp-14202
                       (@apply
                         (lambda (pat-14204 exp-14205)
                           (if (if (if (symbol? pat-14204)
                                     #t
                                     (if (if (vector? pat-14204)
                                           (if (= (vector-length pat-14204) 4)
                                             (eq? (vector-ref pat-14204 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (symbol? (vector-ref pat-14204 1))
                                       #f))
                                 (and-map
                                   (lambda (x-14232)
                                     (not (free-id=?-4370 pat-14204 x-14232)))
                                   (cons '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("l-*-3941" "l-*-3942"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("l-*-3931"
                                                 "l-*-3932"
                                                 "l-*-3933"
                                                 "l-*-3934"
                                                 "l-*-3935"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("l-*-3752"
                                                "l-*-3750"
                                                "l-*-3748"
                                                "l-*-3746"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-call
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 session-id
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-478"
                                                "l-*-476"
                                                "l-*-474"
                                                "l-*-472"
                                                "l-*-470"
                                                "l-*-468"
                                                "l-*-466"
                                                "l-*-464"
                                                "l-*-462"
                                                "l-*-460"
                                                "l-*-458"
                                                "l-*-456"
                                                "l-*-454"
                                                "l-*-452"
                                                "l-*-450"
                                                "l-*-448"
                                                "l-*-446"
                                                "l-*-444"
                                                "l-*-442"
                                                "l-*-440"
                                                "l-*-438"
                                                "l-*-436"
                                                "l-*-434"
                                                "l-*-432"
                                                "l-*-430"
                                                "l-*-428"
                                                "l-*-426"
                                                "l-*-424"
                                                "l-*-422"
                                                "l-*-420"
                                                "l-*-418"
                                                "l-*-416"
                                                "l-*-414"
                                                "l-*-412"
                                                "l-*-410"
                                                "l-*-408"
                                                "l-*-406"
                                                "l-*-404"
                                                "l-*-402"
                                                "l-*-401"
                                                "l-*-399"
                                                "l-*-396"
                                                "l-*-395"
                                                "l-*-394"
                                                "l-*-392"
                                                "l-*-391"
                                                "l-*-389"
                                                "l-*-387"
                                                "l-*-385"
                                                "l-*-383"
                                                "l-*-381"
                                                "l-*-379"
                                                "l-*-377"
                                                "l-*-375"
                                                "l-*-372"
                                                "l-*-370"
                                                "l-*-369"
                                                "l-*-367"
                                                "l-*-365"
                                                "l-*-363"
                                                "l-*-361"
                                                "l-*-360"
                                                "l-*-359"
                                                "l-*-358"
                                                "l-*-356"
                                                "l-*-355"
                                                "l-*-352"
                                                "l-*-350"
                                                "l-*-348"
                                                "l-*-346"
                                                "l-*-344"
                                                "l-*-342"
                                                "l-*-341"
                                                "l-*-340"
                                                "l-*-338"
                                                "l-*-336"
                                                "l-*-335"
                                                "l-*-332"
                                                "l-*-331"
                                                "l-*-329"
                                                "l-*-327"
                                                "l-*-325"
                                                "l-*-323"
                                                "l-*-321"
                                                "l-*-319"
                                                "l-*-317"
                                                "l-*-315"
                                                "l-*-313"
                                                "l-*-310"
                                                "l-*-308"
                                                "l-*-306"
                                                "l-*-304"
                                                "l-*-302"
                                                "l-*-300"
                                                "l-*-298"
                                                "l-*-296"
                                                "l-*-294"
                                                "l-*-292"
                                                "l-*-290"
                                                "l-*-288"
                                                "l-*-286"
                                                "l-*-284"
                                                "l-*-282"
                                                "l-*-280"
                                                "l-*-278"
                                                "l-*-276"
                                                "l-*-274"
                                                "l-*-272"
                                                "l-*-270"
                                                "l-*-268"
                                                "l-*-266"
                                                "l-*-264"
                                                "l-*-262"
                                                "l-*-260"
                                                "l-*-258"
                                                "l-*-257"
                                                "l-*-256"
                                                "l-*-255"
                                                "l-*-254"
                                                "l-*-252"
                                                "l-*-250"
                                                "l-*-248"
                                                "l-*-245"
                                                "l-*-243"
                                                "l-*-241"
                                                "l-*-239"
                                                "l-*-237"
                                                "l-*-235"
                                                "l-*-233"
                                                "l-*-231"
                                                "l-*-229"
                                                "l-*-227"
                                                "l-*-225"
                                                "l-*-223"
                                                "l-*-221"
                                                "l-*-219"
                                                "l-*-217"
                                                "l-*-215"
                                                "l-*-213"
                                                "l-*-211"
                                                "l-*-209"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("l-*-47" "l-*-46" "l-*-45"))
                                             #(ribcage () () ()))
                                            (hygiene guile))
                                         keys-14173))
                                 #f)
                             (if (free-id=?-4370
                                   '#(syntax-object
                                      pad
                                      ((top)
                                       #(ribcage
                                         #(pat exp)
                                         #((top) (top))
                                         #("l-*-3941" "l-*-3942"))
                                       #(ribcage () () ())
                                       #(ribcage
                                         #(x keys clauses r mod)
                                         #((top) (top) (top) (top) (top))
                                         #("l-*-3931"
                                           "l-*-3932"
                                           "l-*-3933"
                                           "l-*-3934"
                                           "l-*-3935"))
                                       #(ribcage
                                         (gen-syntax-case
                                           gen-clause
                                           build-dispatch-call
                                           convert-pattern)
                                         ((top) (top) (top) (top))
                                         ("l-*-3752"
                                          "l-*-3750"
                                          "l-*-3748"
                                          "l-*-3746"))
                                       #(ribcage
                                         (lambda-var-list
                                           gen-var
                                           strip
                                           expand-lambda-case
                                           lambda*-formals
                                           expand-simple-lambda
                                           lambda-formals
                                           ellipsis?
                                           expand-void
                                           eval-local-transformer
                                           expand-local-syntax
                                           expand-body
                                           expand-macro
                                           expand-call
                                           expand-expr
                                           expand
                                           syntax-type
                                           parse-when-list
                                           expand-install-global
                                           expand-top-sequence
                                           expand-sequence
                                           source-wrap
                                           wrap
                                           bound-id-member?
                                           distinct-bound-ids?
                                           valid-bound-ids?
                                           bound-id=?
                                           free-id=?
                                           with-transformer-environment
                                           transformer-environment
                                           resolve-identifier
                                           locally-bound-identifiers
                                           id-var-name
                                           same-marks?
                                           join-marks
                                           join-wraps
                                           smart-append
                                           make-binding-wrap
                                           extend-ribcage!
                                           make-empty-ribcage
                                           new-mark
                                           anti-mark
                                           the-anti-mark
                                           top-marked?
                                           top-wrap
                                           empty-wrap
                                           set-ribcage-labels!
                                           set-ribcage-marks!
                                           set-ribcage-symnames!
                                           ribcage-labels
                                           ribcage-marks
                                           ribcage-symnames
                                           ribcage?
                                           make-ribcage
                                           gen-labels
                                           gen-label
                                           make-rename
                                           rename-marks
                                           rename-new
                                           rename-old
                                           subst-rename?
                                           wrap-subst
                                           wrap-marks
                                           make-wrap
                                           id-sym-name&marks
                                           id-sym-name
                                           id?
                                           nonsymbol-id?
                                           global-extend
                                           macros-only-env
                                           extend-var-env
                                           extend-env
                                           null-env
                                           binding-value
                                           binding-type
                                           make-binding
                                           arg-check
                                           source-annotation
                                           no-source
                                           set-syntax-object-module!
                                           set-syntax-object-wrap!
                                           set-syntax-object-expression!
                                           syntax-object-module
                                           syntax-object-wrap
                                           syntax-object-expression
                                           syntax-object?
                                           make-syntax-object
                                           build-lexical-var
                                           build-letrec
                                           build-named-let
                                           build-let
                                           build-sequence
                                           build-data
                                           build-primref
                                           build-primcall
                                           build-lambda-case
                                           build-case-lambda
                                           build-simple-lambda
                                           build-global-definition
                                           build-global-assignment
                                           build-global-reference
                                           analyze-variable
                                           build-lexical-assignment
                                           build-lexical-reference
                                           build-dynlet
                                           build-conditional
                                           build-call
                                           build-void
                                           maybe-name-value!
                                           decorate-source
                                           get-global-definition-hook
                                           put-global-definition-hook
                                           session-id
                                           local-eval-hook
                                           top-level-eval-hook
                                           fx<
                                           fx=
                                           fx-
                                           fx+
                                           set-lambda-meta!
                                           lambda-meta
                                           lambda?
                                           make-dynlet
                                           make-letrec
                                           make-let
                                           make-lambda-case
                                           make-lambda
                                           make-seq
                                           make-primcall
                                           make-call
                                           make-conditional
                                           make-toplevel-define
                                           make-toplevel-set
                                           make-toplevel-ref
                                           make-module-set
                                           make-module-ref
                                           make-lexical-set
                                           make-lexical-ref
                                           make-primitive-ref
                                           make-const
                                           make-void)
                                         ((top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top))
                                         ("l-*-478"
                                          "l-*-476"
                                          "l-*-474"
                                          "l-*-472"
                                          "l-*-470"
                                          "l-*-468"
                                          "l-*-466"
                                          "l-*-464"
                                          "l-*-462"
                                          "l-*-460"
                                          "l-*-458"
                                          "l-*-456"
                                          "l-*-454"
                                          "l-*-452"
                                          "l-*-450"
                                          "l-*-448"
                                          "l-*-446"
                                          "l-*-444"
                                          "l-*-442"
                                          "l-*-440"
                                          "l-*-438"
                                          "l-*-436"
                                          "l-*-434"
                                          "l-*-432"
                                          "l-*-430"
                                          "l-*-428"
                                          "l-*-426"
                                          "l-*-424"
                                          "l-*-422"
                                          "l-*-420"
                                          "l-*-418"
                                          "l-*-416"
                                          "l-*-414"
                                          "l-*-412"
                                          "l-*-410"
                                          "l-*-408"
                                          "l-*-406"
                                          "l-*-404"
                                          "l-*-402"
                                          "l-*-401"
                                          "l-*-399"
                                          "l-*-396"
                                          "l-*-395"
                                          "l-*-394"
                                          "l-*-392"
                                          "l-*-391"
                                          "l-*-389"
                                          "l-*-387"
                                          "l-*-385"
                                          "l-*-383"
                                          "l-*-381"
                                          "l-*-379"
                                          "l-*-377"
                                          "l-*-375"
                                          "l-*-372"
                                          "l-*-370"
                                          "l-*-369"
                                          "l-*-367"
                                          "l-*-365"
                                          "l-*-363"
                                          "l-*-361"
                                          "l-*-360"
                                          "l-*-359"
                                          "l-*-358"
                                          "l-*-356"
                                          "l-*-355"
                                          "l-*-352"
                                          "l-*-350"
                                          "l-*-348"
                                          "l-*-346"
                                          "l-*-344"
                                          "l-*-342"
                                          "l-*-341"
                                          "l-*-340"
                                          "l-*-338"
                                          "l-*-336"
                                          "l-*-335"
                                          "l-*-332"
                                          "l-*-331"
                                          "l-*-329"
                                          "l-*-327"
                                          "l-*-325"
                                          "l-*-323"
                                          "l-*-321"
                                          "l-*-319"
                                          "l-*-317"
                                          "l-*-315"
                                          "l-*-313"
                                          "l-*-310"
                                          "l-*-308"
                                          "l-*-306"
                                          "l-*-304"
                                          "l-*-302"
                                          "l-*-300"
                                          "l-*-298"
                                          "l-*-296"
                                          "l-*-294"
                                          "l-*-292"
                                          "l-*-290"
                                          "l-*-288"
                                          "l-*-286"
                                          "l-*-284"
                                          "l-*-282"
                                          "l-*-280"
                                          "l-*-278"
                                          "l-*-276"
                                          "l-*-274"
                                          "l-*-272"
                                          "l-*-270"
                                          "l-*-268"
                                          "l-*-266"
                                          "l-*-264"
                                          "l-*-262"
                                          "l-*-260"
                                          "l-*-258"
                                          "l-*-257"
                                          "l-*-256"
                                          "l-*-255"
                                          "l-*-254"
                                          "l-*-252"
                                          "l-*-250"
                                          "l-*-248"
                                          "l-*-245"
                                          "l-*-243"
                                          "l-*-241"
                                          "l-*-239"
                                          "l-*-237"
                                          "l-*-235"
                                          "l-*-233"
                                          "l-*-231"
                                          "l-*-229"
                                          "l-*-227"
                                          "l-*-225"
                                          "l-*-223"
                                          "l-*-221"
                                          "l-*-219"
                                          "l-*-217"
                                          "l-*-215"
                                          "l-*-213"
                                          "l-*-211"
                                          "l-*-209"))
                                       #(ribcage
                                         (define-structure
                                           define-expansion-accessors
                                           define-expansion-constructors)
                                         ((top) (top) (top))
                                         ("l-*-47" "l-*-46" "l-*-45"))
                                       #(ribcage () () ()))
                                      (hygiene guile))
                                   '#(syntax-object
                                      _
                                      ((top)
                                       #(ribcage
                                         #(pat exp)
                                         #((top) (top))
                                         #("l-*-3941" "l-*-3942"))
                                       #(ribcage () () ())
                                       #(ribcage
                                         #(x keys clauses r mod)
                                         #((top) (top) (top) (top) (top))
                                         #("l-*-3931"
                                           "l-*-3932"
                                           "l-*-3933"
                                           "l-*-3934"
                                           "l-*-3935"))
                                       #(ribcage
                                         (gen-syntax-case
                                           gen-clause
                                           build-dispatch-call
                                           convert-pattern)
                                         ((top) (top) (top) (top))
                                         ("l-*-3752"
                                          "l-*-3750"
                                          "l-*-3748"
                                          "l-*-3746"))
                                       #(ribcage
                                         (lambda-var-list
                                           gen-var
                                           strip
                                           expand-lambda-case
                                           lambda*-formals
                                           expand-simple-lambda
                                           lambda-formals
                                           ellipsis?
                                           expand-void
                                           eval-local-transformer
                                           expand-local-syntax
                                           expand-body
                                           expand-macro
                                           expand-call
                                           expand-expr
                                           expand
                                           syntax-type
                                           parse-when-list
                                           expand-install-global
                                           expand-top-sequence
                                           expand-sequence
                                           source-wrap
                                           wrap
                                           bound-id-member?
                                           distinct-bound-ids?
                                           valid-bound-ids?
                                           bound-id=?
                                           free-id=?
                                           with-transformer-environment
                                           transformer-environment
                                           resolve-identifier
                                           locally-bound-identifiers
                                           id-var-name
                                           same-marks?
                                           join-marks
                                           join-wraps
                                           smart-append
                                           make-binding-wrap
                                           extend-ribcage!
                                           make-empty-ribcage
                                           new-mark
                                           anti-mark
                                           the-anti-mark
                                           top-marked?
                                           top-wrap
                                           empty-wrap
                                           set-ribcage-labels!
                                           set-ribcage-marks!
                                           set-ribcage-symnames!
                                           ribcage-labels
                                           ribcage-marks
                                           ribcage-symnames
                                           ribcage?
                                           make-ribcage
                                           gen-labels
                                           gen-label
                                           make-rename
                                           rename-marks
                                           rename-new
                                           rename-old
                                           subst-rename?
                                           wrap-subst
                                           wrap-marks
                                           make-wrap
                                           id-sym-name&marks
                                           id-sym-name
                                           id?
                                           nonsymbol-id?
                                           global-extend
                                           macros-only-env
                                           extend-var-env
                                           extend-env
                                           null-env
                                           binding-value
                                           binding-type
                                           make-binding
                                           arg-check
                                           source-annotation
                                           no-source
                                           set-syntax-object-module!
                                           set-syntax-object-wrap!
                                           set-syntax-object-expression!
                                           syntax-object-module
                                           syntax-object-wrap
                                           syntax-object-expression
                                           syntax-object?
                                           make-syntax-object
                                           build-lexical-var
                                           build-letrec
                                           build-named-let
                                           build-let
                                           build-sequence
                                           build-data
                                           build-primref
                                           build-primcall
                                           build-lambda-case
                                           build-case-lambda
                                           build-simple-lambda
                                           build-global-definition
                                           build-global-assignment
                                           build-global-reference
                                           analyze-variable
                                           build-lexical-assignment
                                           build-lexical-reference
                                           build-dynlet
                                           build-conditional
                                           build-call
                                           build-void
                                           maybe-name-value!
                                           decorate-source
                                           get-global-definition-hook
                                           put-global-definition-hook
                                           session-id
                                           local-eval-hook
                                           top-level-eval-hook
                                           fx<
                                           fx=
                                           fx-
                                           fx+
                                           set-lambda-meta!
                                           lambda-meta
                                           lambda?
                                           make-dynlet
                                           make-letrec
                                           make-let
                                           make-lambda-case
                                           make-lambda
                                           make-seq
                                           make-primcall
                                           make-call
                                           make-conditional
                                           make-toplevel-define
                                           make-toplevel-set
                                           make-toplevel-ref
                                           make-module-set
                                           make-module-ref
                                           make-lexical-set
                                           make-lexical-ref
                                           make-primitive-ref
                                           make-const
                                           make-void)
                                         ((top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top))
                                         ("l-*-478"
                                          "l-*-476"
                                          "l-*-474"
                                          "l-*-472"
                                          "l-*-470"
                                          "l-*-468"
                                          "l-*-466"
                                          "l-*-464"
                                          "l-*-462"
                                          "l-*-460"
                                          "l-*-458"
                                          "l-*-456"
                                          "l-*-454"
                                          "l-*-452"
                                          "l-*-450"
                                          "l-*-448"
                                          "l-*-446"
                                          "l-*-444"
                                          "l-*-442"
                                          "l-*-440"
                                          "l-*-438"
                                          "l-*-436"
                                          "l-*-434"
                                          "l-*-432"
                                          "l-*-430"
                                          "l-*-428"
                                          "l-*-426"
                                          "l-*-424"
                                          "l-*-422"
                                          "l-*-420"
                                          "l-*-418"
                                          "l-*-416"
                                          "l-*-414"
                                          "l-*-412"
                                          "l-*-410"
                                          "l-*-408"
                                          "l-*-406"
                                          "l-*-404"
                                          "l-*-402"
                                          "l-*-401"
                                          "l-*-399"
                                          "l-*-396"
                                          "l-*-395"
                                          "l-*-394"
                                          "l-*-392"
                                          "l-*-391"
                                          "l-*-389"
                                          "l-*-387"
                                          "l-*-385"
                                          "l-*-383"
                                          "l-*-381"
                                          "l-*-379"
                                          "l-*-377"
                                          "l-*-375"
                                          "l-*-372"
                                          "l-*-370"
                                          "l-*-369"
                                          "l-*-367"
                                          "l-*-365"
                                          "l-*-363"
                                          "l-*-361"
                                          "l-*-360"
                                          "l-*-359"
                                          "l-*-358"
                                          "l-*-356"
                                          "l-*-355"
                                          "l-*-352"
                                          "l-*-350"
                                          "l-*-348"
                                          "l-*-346"
                                          "l-*-344"
                                          "l-*-342"
                                          "l-*-341"
                                          "l-*-340"
                                          "l-*-338"
                                          "l-*-336"
                                          "l-*-335"
                                          "l-*-332"
                                          "l-*-331"
                                          "l-*-329"
                                          "l-*-327"
                                          "l-*-325"
                                          "l-*-323"
                                          "l-*-321"
                                          "l-*-319"
                                          "l-*-317"
                                          "l-*-315"
                                          "l-*-313"
                                          "l-*-310"
                                          "l-*-308"
                                          "l-*-306"
                                          "l-*-304"
                                          "l-*-302"
                                          "l-*-300"
                                          "l-*-298"
                                          "l-*-296"
                                          "l-*-294"
                                          "l-*-292"
                                          "l-*-290"
                                          "l-*-288"
                                          "l-*-286"
                                          "l-*-284"
                                          "l-*-282"
                                          "l-*-280"
                                          "l-*-278"
                                          "l-*-276"
                                          "l-*-274"
                                          "l-*-272"
                                          "l-*-270"
                                          "l-*-268"
                                          "l-*-266"
                                          "l-*-264"
                                          "l-*-262"
                                          "l-*-260"
                                          "l-*-258"
                                          "l-*-257"
                                          "l-*-256"
                                          "l-*-255"
                                          "l-*-254"
                                          "l-*-252"
                                          "l-*-250"
                                          "l-*-248"
                                          "l-*-245"
                                          "l-*-243"
                                          "l-*-241"
                                          "l-*-239"
                                          "l-*-237"
                                          "l-*-235"
                                          "l-*-233"
                                          "l-*-231"
                                          "l-*-229"
                                          "l-*-227"
                                          "l-*-225"
                                          "l-*-223"
                                          "l-*-221"
                                          "l-*-219"
                                          "l-*-217"
                                          "l-*-215"
                                          "l-*-213"
                                          "l-*-211"
                                          "l-*-209"))
                                       #(ribcage
                                         (define-structure
                                           define-expansion-accessors
                                           define-expansion-constructors)
                                         ((top) (top) (top))
                                         ("l-*-47" "l-*-46" "l-*-45"))
                                       #(ribcage () () ()))
                                      (hygiene guile)))
                               (expand-4382 exp-14205 r-14175 '(()) mod-14176)
                               (let ((labels-14314
                                       (list (string-append
                                               "l-"
                                               (session-id-4307)
                                               (symbol->string (gensym "-")))))
                                     (var-14315
                                       (let ((id-14353
                                               (if (if (vector? pat-14204)
                                                     (if (= (vector-length
                                                              pat-14204)
                                                            4)
                                                       (eq? (vector-ref
                                                              pat-14204
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref pat-14204 1)
                                                 pat-14204)))
                                         (gensym
                                           (string-append
                                             (symbol->string id-14353)
                                             "-")))))
                                 (build-call-4313
                                   #f
                                   (build-simple-lambda-4322
                                     #f
                                     (list (syntax->datum pat-14204))
                                     #f
                                     (list var-14315)
                                     '()
                                     (expand-4382
                                       exp-14205
                                       (extend-env-4341
                                         labels-14314
                                         (list (cons 'syntax
                                                     (cons var-14315 0)))
                                         r-14175)
                                       (make-binding-wrap-4360
                                         (list pat-14204)
                                         labels-14314
                                         '(()))
                                       mod-14176))
                                   (list x-14172))))
                             (gen-clause-13467
                               x-14172
                               keys-14173
                               (cdr clauses-14174)
                               r-14175
                               pat-14204
                               #t
                               exp-14205
                               mod-14176)))
                         tmp-14202)
                       (let ((tmp-14663
                               ($sc-dispatch tmp-14201 '(any any any))))
                         (if tmp-14663
                           (@apply
                             (lambda (pat-14665 fender-14666 exp-14667)
                               (gen-clause-13467
                                 x-14172
                                 keys-14173
                                 (cdr clauses-14174)
                                 r-14175
                                 pat-14665
                                 fender-14666
                                 exp-14667
                                 mod-14176))
                             tmp-14663)
                           (syntax-violation
                             'syntax-case
                             "invalid clause"
                             (car clauses-14174)))))))))))
          (lambda (e-13469 r-13470 w-13471 s-13472 mod-13473)
            (let ((e-13474
                    (let ((x-14083
                            (begin
                              (if (if (pair? e-13469) s-13472 #f)
                                (set-source-properties! e-13469 s-13472))
                              e-13469)))
                      (if (if (null? (car w-13471))
                            (null? (cdr w-13471))
                            #f)
                        x-14083
                        (if (if (vector? x-14083)
                              (if (= (vector-length x-14083) 4)
                                (eq? (vector-ref x-14083 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((expression-14115 (vector-ref x-14083 1))
                                (wrap-14116
                                  (let ((w2-14124 (vector-ref x-14083 2)))
                                    (let ((m1-14125 (car w-13471))
                                          (s1-14126 (cdr w-13471)))
                                      (if (null? m1-14125)
                                        (if (null? s1-14126)
                                          w2-14124
                                          (cons (car w2-14124)
                                                (let ((m2-14141
                                                        (cdr w2-14124)))
                                                  (if (null? m2-14141)
                                                    s1-14126
                                                    (append
                                                      s1-14126
                                                      m2-14141)))))
                                        (cons (let ((m2-14149 (car w2-14124)))
                                                (if (null? m2-14149)
                                                  m1-14125
                                                  (append m1-14125 m2-14149)))
                                              (let ((m2-14157 (cdr w2-14124)))
                                                (if (null? m2-14157)
                                                  s1-14126
                                                  (append
                                                    s1-14126
                                                    m2-14157))))))))
                                (module-14117 (vector-ref x-14083 3)))
                            (vector
                              'syntax-object
                              expression-14115
                              wrap-14116
                              module-14117))
                          (if (null? x-14083)
                            x-14083
                            (vector
                              'syntax-object
                              x-14083
                              w-13471
                              mod-13473)))))))
              (let ((tmp-13475 e-13474))
                (let ((tmp-13476
                        ($sc-dispatch
                          tmp-13475
                          '(_ any each-any . each-any))))
                  (if tmp-13476
                    (@apply
                      (lambda (val-13524 key-13525 m-13526)
                        (if (and-map
                              (lambda (x-13527)
                                (if (if (symbol? x-13527)
                                      #t
                                      (if (if (vector? x-13527)
                                            (if (= (vector-length x-13527) 4)
                                              (eq? (vector-ref x-13527 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref x-13527 1))
                                        #f))
                                  (not (if (if (if (vector? x-13527)
                                                 (if (= (vector-length x-13527)
                                                        4)
                                                   (eq? (vector-ref x-13527 0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol? (vector-ref x-13527 1))
                                             #f)
                                         (free-id=?-4370
                                           x-13527
                                           '#(syntax-object
                                              ...
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("l-*-2324"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-call
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   with-transformer-environment
                                                   transformer-environment
                                                   resolve-identifier
                                                   locally-bound-identifiers
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-primcall
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-call
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   session-id
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-seq
                                                   make-primcall
                                                   make-call
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-478"
                                                  "l-*-476"
                                                  "l-*-474"
                                                  "l-*-472"
                                                  "l-*-470"
                                                  "l-*-468"
                                                  "l-*-466"
                                                  "l-*-464"
                                                  "l-*-462"
                                                  "l-*-460"
                                                  "l-*-458"
                                                  "l-*-456"
                                                  "l-*-454"
                                                  "l-*-452"
                                                  "l-*-450"
                                                  "l-*-448"
                                                  "l-*-446"
                                                  "l-*-444"
                                                  "l-*-442"
                                                  "l-*-440"
                                                  "l-*-438"
                                                  "l-*-436"
                                                  "l-*-434"
                                                  "l-*-432"
                                                  "l-*-430"
                                                  "l-*-428"
                                                  "l-*-426"
                                                  "l-*-424"
                                                  "l-*-422"
                                                  "l-*-420"
                                                  "l-*-418"
                                                  "l-*-416"
                                                  "l-*-414"
                                                  "l-*-412"
                                                  "l-*-410"
                                                  "l-*-408"
                                                  "l-*-406"
                                                  "l-*-404"
                                                  "l-*-402"
                                                  "l-*-401"
                                                  "l-*-399"
                                                  "l-*-396"
                                                  "l-*-395"
                                                  "l-*-394"
                                                  "l-*-392"
                                                  "l-*-391"
                                                  "l-*-389"
                                                  "l-*-387"
                                                  "l-*-385"
                                                  "l-*-383"
                                                  "l-*-381"
                                                  "l-*-379"
                                                  "l-*-377"
                                                  "l-*-375"
                                                  "l-*-372"
                                                  "l-*-370"
                                                  "l-*-369"
                                                  "l-*-367"
                                                  "l-*-365"
                                                  "l-*-363"
                                                  "l-*-361"
                                                  "l-*-360"
                                                  "l-*-359"
                                                  "l-*-358"
                                                  "l-*-356"
                                                  "l-*-355"
                                                  "l-*-352"
                                                  "l-*-350"
                                                  "l-*-348"
                                                  "l-*-346"
                                                  "l-*-344"
                                                  "l-*-342"
                                                  "l-*-341"
                                                  "l-*-340"
                                                  "l-*-338"
                                                  "l-*-336"
                                                  "l-*-335"
                                                  "l-*-332"
                                                  "l-*-331"
                                                  "l-*-329"
                                                  "l-*-327"
                                                  "l-*-325"
                                                  "l-*-323"
                                                  "l-*-321"
                                                  "l-*-319"
                                                  "l-*-317"
                                                  "l-*-315"
                                                  "l-*-313"
                                                  "l-*-310"
                                                  "l-*-308"
                                                  "l-*-306"
                                                  "l-*-304"
                                                  "l-*-302"
                                                  "l-*-300"
                                                  "l-*-298"
                                                  "l-*-296"
                                                  "l-*-294"
                                                  "l-*-292"
                                                  "l-*-290"
                                                  "l-*-288"
                                                  "l-*-286"
                                                  "l-*-284"
                                                  "l-*-282"
                                                  "l-*-280"
                                                  "l-*-278"
                                                  "l-*-276"
                                                  "l-*-274"
                                                  "l-*-272"
                                                  "l-*-270"
                                                  "l-*-268"
                                                  "l-*-266"
                                                  "l-*-264"
                                                  "l-*-262"
                                                  "l-*-260"
                                                  "l-*-258"
                                                  "l-*-257"
                                                  "l-*-256"
                                                  "l-*-255"
                                                  "l-*-254"
                                                  "l-*-252"
                                                  "l-*-250"
                                                  "l-*-248"
                                                  "l-*-245"
                                                  "l-*-243"
                                                  "l-*-241"
                                                  "l-*-239"
                                                  "l-*-237"
                                                  "l-*-235"
                                                  "l-*-233"
                                                  "l-*-231"
                                                  "l-*-229"
                                                  "l-*-227"
                                                  "l-*-225"
                                                  "l-*-223"
                                                  "l-*-221"
                                                  "l-*-219"
                                                  "l-*-217"
                                                  "l-*-215"
                                                  "l-*-213"
                                                  "l-*-211"
                                                  "l-*-209"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("l-*-47" "l-*-46" "l-*-45"))
                                               #(ribcage () () ()))
                                              (hygiene guile)))
                                         #f))
                                  #f))
                              key-13525)
                          (let ((x-13592
                                  (gensym
                                    (string-append
                                      (symbol->string 'tmp)
                                      "-"))))
                            (build-call-4313
                              s-13472
                              (let ((req-13730 (list 'tmp))
                                    (vars-13732 (list x-13592))
                                    (exp-13734
                                      (gen-syntax-case-13468
                                        (make-struct/no-tail
                                          (vector-ref %expanded-vtables 3)
                                          #f
                                          'tmp
                                          x-13592)
                                        key-13525
                                        m-13526
                                        r-13470
                                        mod-13473)))
                                (let ((body-13739
                                        (make-struct/no-tail
                                          (vector-ref %expanded-vtables 15)
                                          #f
                                          req-13730
                                          #f
                                          #f
                                          #f
                                          '()
                                          vars-13732
                                          exp-13734
                                          #f)))
                                  (make-struct/no-tail
                                    (vector-ref %expanded-vtables 14)
                                    #f
                                    '()
                                    body-13739)))
                              (list (expand-4382
                                      val-13524
                                      r-13470
                                      '(())
                                      mod-13473))))
                          (syntax-violation
                            'syntax-case
                            "invalid literals list"
                            e-13474)))
                      tmp-13476)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      tmp-13475))))))))
      (set! macroexpand
        (lambda*
          (x-16419
            #:optional
            (m-16420 'e)
            (esew-16421 '(eval)))
          (expand-top-sequence-4378
            (list x-16419)
            '()
            '((top))
            #f
            m-16420
            esew-16421
            (cons 'hygiene (module-name (current-module))))))
      (set! identifier?
        (lambda (x-16424)
          (if (if (vector? x-16424)
                (if (= (vector-length x-16424) 4)
                  (eq? (vector-ref x-16424 0) 'syntax-object)
                  #f)
                #f)
            (symbol? (vector-ref x-16424 1))
            #f)))
      (set! datum->syntax
        (lambda (id-16449 datum-16450)
          (let ((wrap-16455 (vector-ref id-16449 2))
                (module-16456 (vector-ref id-16449 3)))
            (vector
              'syntax-object
              datum-16450
              wrap-16455
              module-16456))))
      (set! syntax->datum
        (lambda (x-16463) (strip-4395 x-16463 '(()))))
      (set! syntax-source
        (lambda (x-16466)
          (source-annotation-4340 x-16466)))
      (set! generate-temporaries
        (lambda (ls-16650)
          (begin
            (if (not (list? ls-16650))
              (syntax-violation
                'generate-temporaries
                "invalid argument"
                ls-16650))
            (let ((mod-16658
                    (cons 'hygiene (module-name (current-module)))))
              (map (lambda (x-16659)
                     (let ((x-16663 (gensym "t-")))
                       (if (if (vector? x-16663)
                             (if (= (vector-length x-16663) 4)
                               (eq? (vector-ref x-16663 0) 'syntax-object)
                               #f)
                             #f)
                         (let ((expression-16678 (vector-ref x-16663 1))
                               (wrap-16679
                                 (let ((w2-16687 (vector-ref x-16663 2)))
                                   (cons (let ((m2-16694 (car w2-16687)))
                                           (if (null? m2-16694)
                                             '(top)
                                             (append '(top) m2-16694)))
                                         (let ((m2-16701 (cdr w2-16687)))
                                           (if (null? m2-16701)
                                             '()
                                             (append '() m2-16701))))))
                               (module-16680 (vector-ref x-16663 3)))
                           (vector
                             'syntax-object
                             expression-16678
                             wrap-16679
                             module-16680))
                         (if (null? x-16663)
                           x-16663
                           (vector
                             'syntax-object
                             x-16663
                             '((top))
                             mod-16658)))))
                   ls-16650)))))
      (set! free-identifier=?
        (lambda (x-16710 y-16711)
          (begin
            (if (not (if (if (vector? x-16710)
                           (if (= (vector-length x-16710) 4)
                             (eq? (vector-ref x-16710 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref x-16710 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                x-16710))
            (if (not (if (if (vector? y-16711)
                           (if (= (vector-length y-16711) 4)
                             (eq? (vector-ref y-16711 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref y-16711 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                y-16711))
            (free-id=?-4370 x-16710 y-16711))))
      (set! bound-identifier=?
        (lambda (x-16786 y-16787)
          (begin
            (if (not (if (if (vector? x-16786)
                           (if (= (vector-length x-16786) 4)
                             (eq? (vector-ref x-16786 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref x-16786 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                x-16786))
            (if (not (if (if (vector? y-16787)
                           (if (= (vector-length y-16787) 4)
                             (eq? (vector-ref y-16787 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref y-16787 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                y-16787))
            (bound-id=?-4371 x-16786 y-16787))))
      (set! syntax-violation
        (lambda*
          (who-16953
            message-16954
            form-16955
            #:optional
            (subform-16956 #f))
          (begin
            (if (not (if (not who-16953)
                       (not who-16953)
                       (let ((t-16974 (string? who-16953)))
                         (if t-16974 t-16974 (symbol? who-16953)))))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                who-16953))
            (if (not (string? message-16954))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                message-16954))
            (throw 'syntax-error
                   who-16953
                   message-16954
                   (let ((t-17005 (source-annotation-4340 subform-16956)))
                     (if t-17005
                       t-17005
                       (source-annotation-4340 form-16955)))
                   (strip-4395 form-16955 '(()))
                   (if subform-16956
                     (strip-4395 subform-16956 '(()))
                     #f)))))
      (letrec*
        ((syntax-local-binding-17469
           (lambda (id-17609)
             (begin
               (if (not (if (if (vector? id-17609)
                              (if (= (vector-length id-17609) 4)
                                (eq? (vector-ref id-17609 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-17609 1))
                          #f))
                 (syntax-violation
                   'syntax-local-binding
                   "invalid argument"
                   id-17609))
               ((fluid-ref transformer-environment-4368)
                (lambda (e-17649
                         r-17650
                         w-17651
                         s-17652
                         rib-17653
                         mod-17654)
                  (call-with-values
                    (lambda ()
                      (resolve-identifier-4367
                        (vector-ref id-17609 1)
                        (let ((w-17661 (vector-ref id-17609 2)))
                          (let ((ms-17662 (car w-17661))
                                (s-17663 (cdr w-17661)))
                            (if (if (pair? ms-17662)
                                  (eq? (car ms-17662) #f)
                                  #f)
                              (cons (cdr ms-17662)
                                    (if rib-17653
                                      (cons rib-17653 (cdr s-17663))
                                      (cdr s-17663)))
                              (cons ms-17662
                                    (if rib-17653
                                      (cons rib-17653 s-17663)
                                      s-17663)))))
                        r-17650
                        (vector-ref id-17609 3)
                        #t))
                    (lambda (type-17670 value-17671 mod-17672)
                      (if (eqv? type-17670 'lexical)
                        (values 'lexical value-17671)
                        (if (eqv? type-17670 'macro)
                          (values 'macro value-17671)
                          (if (eqv? type-17670 'syntax)
                            (values 'pattern-variable value-17671)
                            (if (eqv? type-17670 'displaced-lexical)
                              (values 'displaced-lexical #f)
                              (if (eqv? type-17670 'global)
                                (values
                                  'global
                                  (cons value-17671 (cdr mod-17672)))
                                (values 'other #f)))))))))))))
         (syntax-locally-bound-identifiers-17470
           (lambda (id-17694)
             (begin
               (if (not (if (if (vector? id-17694)
                              (if (= (vector-length id-17694) 4)
                                (eq? (vector-ref id-17694 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-17694 1))
                          #f))
                 (syntax-violation
                   'syntax-locally-bound-identifiers
                   "invalid argument"
                   id-17694))
               (locally-bound-identifiers-4366
                 (vector-ref id-17694 2)
                 (vector-ref id-17694 3))))))
        (begin
          (define!
            'syntax-module
            (lambda (id-17472)
              (begin
                (if (not (if (if (vector? id-17472)
                               (if (= (vector-length id-17472) 4)
                                 (eq? (vector-ref id-17472 0) 'syntax-object)
                                 #f)
                               #f)
                           (symbol? (vector-ref id-17472 1))
                           #f))
                  (syntax-violation
                    'syntax-module
                    "invalid argument"
                    id-17472))
                (cdr (vector-ref id-17472 3)))))
          (define!
            'syntax-local-binding
            syntax-local-binding-17469)
          (define!
            'syntax-locally-bound-identifiers
            syntax-locally-bound-identifiers-17470)))
      (letrec*
        ((match-each-17811
           (lambda (e-18690 p-18691 w-18692 mod-18693)
             (if (pair? e-18690)
               (let ((first-18694
                       (match-17817
                         (car e-18690)
                         p-18691
                         w-18692
                         '()
                         mod-18693)))
                 (if first-18694
                   (let ((rest-18697
                           (match-each-17811
                             (cdr e-18690)
                             p-18691
                             w-18692
                             mod-18693)))
                     (if rest-18697 (cons first-18694 rest-18697) #f))
                   #f))
               (if (null? e-18690)
                 '()
                 (if (if (vector? e-18690)
                       (if (= (vector-length e-18690) 4)
                         (eq? (vector-ref e-18690 0) 'syntax-object)
                         #f)
                       #f)
                   (match-each-17811
                     (vector-ref e-18690 1)
                     p-18691
                     (let ((w2-18719 (vector-ref e-18690 2)))
                       (let ((m1-18720 (car w-18692))
                             (s1-18721 (cdr w-18692)))
                         (if (null? m1-18720)
                           (if (null? s1-18721)
                             w2-18719
                             (cons (car w2-18719)
                                   (let ((m2-18732 (cdr w2-18719)))
                                     (if (null? m2-18732)
                                       s1-18721
                                       (append s1-18721 m2-18732)))))
                           (cons (let ((m2-18740 (car w2-18719)))
                                   (if (null? m2-18740)
                                     m1-18720
                                     (append m1-18720 m2-18740)))
                                 (let ((m2-18748 (cdr w2-18719)))
                                   (if (null? m2-18748)
                                     s1-18721
                                     (append s1-18721 m2-18748)))))))
                     (vector-ref e-18690 3))
                   #f)))))
         (match-each-any-17813
           (lambda (e-18757 w-18758 mod-18759)
             (if (pair? e-18757)
               (let ((l-18760
                       (match-each-any-17813
                         (cdr e-18757)
                         w-18758
                         mod-18759)))
                 (if l-18760
                   (cons (let ((x-18765 (car e-18757)))
                           (if (if (null? (car w-18758))
                                 (null? (cdr w-18758))
                                 #f)
                             x-18765
                             (if (if (vector? x-18765)
                                   (if (= (vector-length x-18765) 4)
                                     (eq? (vector-ref x-18765 0)
                                          'syntax-object)
                                     #f)
                                   #f)
                               (let ((expression-18783 (vector-ref x-18765 1))
                                     (wrap-18784
                                       (let ((w2-18792 (vector-ref x-18765 2)))
                                         (let ((m1-18793 (car w-18758))
                                               (s1-18794 (cdr w-18758)))
                                           (if (null? m1-18793)
                                             (if (null? s1-18794)
                                               w2-18792
                                               (cons (car w2-18792)
                                                     (let ((m2-18809
                                                             (cdr w2-18792)))
                                                       (if (null? m2-18809)
                                                         s1-18794
                                                         (append
                                                           s1-18794
                                                           m2-18809)))))
                                             (cons (let ((m2-18817
                                                           (car w2-18792)))
                                                     (if (null? m2-18817)
                                                       m1-18793
                                                       (append
                                                         m1-18793
                                                         m2-18817)))
                                                   (let ((m2-18825
                                                           (cdr w2-18792)))
                                                     (if (null? m2-18825)
                                                       s1-18794
                                                       (append
                                                         s1-18794
                                                         m2-18825))))))))
                                     (module-18785 (vector-ref x-18765 3)))
                                 (vector
                                   'syntax-object
                                   expression-18783
                                   wrap-18784
                                   module-18785))
                               (if (null? x-18765)
                                 x-18765
                                 (vector
                                   'syntax-object
                                   x-18765
                                   w-18758
                                   mod-18759)))))
                         l-18760)
                   #f))
               (if (null? e-18757)
                 '()
                 (if (if (vector? e-18757)
                       (if (= (vector-length e-18757) 4)
                         (eq? (vector-ref e-18757 0) 'syntax-object)
                         #f)
                       #f)
                   (match-each-any-17813
                     (vector-ref e-18757 1)
                     (let ((w2-18858 (vector-ref e-18757 2)))
                       (let ((m1-18859 (car w-18758))
                             (s1-18860 (cdr w-18758)))
                         (if (null? m1-18859)
                           (if (null? s1-18860)
                             w2-18858
                             (cons (car w2-18858)
                                   (let ((m2-18871 (cdr w2-18858)))
                                     (if (null? m2-18871)
                                       s1-18860
                                       (append s1-18860 m2-18871)))))
                           (cons (let ((m2-18879 (car w2-18858)))
                                   (if (null? m2-18879)
                                     m1-18859
                                     (append m1-18859 m2-18879)))
                                 (let ((m2-18887 (cdr w2-18858)))
                                   (if (null? m2-18887)
                                     s1-18860
                                     (append s1-18860 m2-18887)))))))
                     mod-18759)
                   #f)))))
         (match-empty-17814
           (lambda (p-18892 r-18893)
             (if (null? p-18892)
               r-18893
               (if (eq? p-18892 '_)
                 r-18893
                 (if (eq? p-18892 'any)
                   (cons '() r-18893)
                   (if (pair? p-18892)
                     (match-empty-17814
                       (car p-18892)
                       (match-empty-17814 (cdr p-18892) r-18893))
                     (if (eq? p-18892 'each-any)
                       (cons '() r-18893)
                       (let ((key-18894 (vector-ref p-18892 0)))
                         (if (eqv? key-18894 'each)
                           (match-empty-17814
                             (vector-ref p-18892 1)
                             r-18893)
                           (if (eqv? key-18894 'each+)
                             (match-empty-17814
                               (vector-ref p-18892 1)
                               (match-empty-17814
                                 (reverse (vector-ref p-18892 2))
                                 (match-empty-17814
                                   (vector-ref p-18892 3)
                                   r-18893)))
                             (if (if (eqv? key-18894 'free-id)
                                   #t
                                   (eqv? key-18894 'atom))
                               r-18893
                               (if (eqv? key-18894 'vector)
                                 (match-empty-17814
                                   (vector-ref p-18892 1)
                                   r-18893)))))))))))))
         (combine-17815
           (lambda (r*-18913 r-18914)
             (if (null? (car r*-18913))
               r-18914
               (cons (map car r*-18913)
                     (combine-17815 (map cdr r*-18913) r-18914)))))
         (match*-17816
           (lambda (e-17846 p-17847 w-17848 r-17849 mod-17850)
             (if (null? p-17847)
               (if (null? e-17846) r-17849 #f)
               (if (pair? p-17847)
                 (if (pair? e-17846)
                   (match-17817
                     (car e-17846)
                     (car p-17847)
                     w-17848
                     (match-17817
                       (cdr e-17846)
                       (cdr p-17847)
                       w-17848
                       r-17849
                       mod-17850)
                     mod-17850)
                   #f)
                 (if (eq? p-17847 'each-any)
                   (let ((l-17855
                           (match-each-any-17813 e-17846 w-17848 mod-17850)))
                     (if l-17855 (cons l-17855 r-17849) #f))
                   (let ((key-17860 (vector-ref p-17847 0)))
                     (if (eqv? key-17860 'each)
                       (if (null? e-17846)
                         (match-empty-17814
                           (vector-ref p-17847 1)
                           r-17849)
                         (let ((l-17867
                                 (match-each-17811
                                   e-17846
                                   (vector-ref p-17847 1)
                                   w-17848
                                   mod-17850)))
                           (if l-17867
                             (letrec*
                               ((collect-17870
                                  (lambda (l-17927)
                                    (if (null? (car l-17927))
                                      r-17849
                                      (cons (map car l-17927)
                                            (collect-17870
                                              (map cdr l-17927)))))))
                               (collect-17870 l-17867))
                             #f)))
                       (if (eqv? key-17860 'each+)
                         (call-with-values
                           (lambda ()
                             (let ((x-pat-17936 (vector-ref p-17847 1))
                                   (y-pat-17937 (vector-ref p-17847 2))
                                   (z-pat-17938 (vector-ref p-17847 3)))
                               (letrec*
                                 ((f-17942
                                    (lambda (e-17944 w-17945)
                                      (if (pair? e-17944)
                                        (call-with-values
                                          (lambda ()
                                            (f-17942 (cdr e-17944) w-17945))
                                          (lambda (xr*-17946
                                                   y-pat-17947
                                                   r-17948)
                                            (if r-17948
                                              (if (null? y-pat-17947)
                                                (let ((xr-17949
                                                        (match-17817
                                                          (car e-17944)
                                                          x-pat-17936
                                                          w-17945
                                                          '()
                                                          mod-17850)))
                                                  (if xr-17949
                                                    (values
                                                      (cons xr-17949 xr*-17946)
                                                      y-pat-17947
                                                      r-17948)
                                                    (values #f #f #f)))
                                                (values
                                                  '()
                                                  (cdr y-pat-17947)
                                                  (match-17817
                                                    (car e-17944)
                                                    (car y-pat-17947)
                                                    w-17945
                                                    r-17948
                                                    mod-17850)))
                                              (values #f #f #f))))
                                        (if (if (vector? e-17944)
                                              (if (= (vector-length e-17944) 4)
                                                (eq? (vector-ref e-17944 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (f-17942
                                            (vector-ref e-17944 1)
                                            (let ((m1-17975 (car w-17945))
                                                  (s1-17976 (cdr w-17945)))
                                              (if (null? m1-17975)
                                                (if (null? s1-17976)
                                                  e-17944
                                                  (cons (car e-17944)
                                                        (let ((m2-17988
                                                                (cdr e-17944)))
                                                          (if (null? m2-17988)
                                                            s1-17976
                                                            (append
                                                              s1-17976
                                                              m2-17988)))))
                                                (cons (let ((m2-17998
                                                              (car e-17944)))
                                                        (if (null? m2-17998)
                                                          m1-17975
                                                          (append
                                                            m1-17975
                                                            m2-17998)))
                                                      (let ((m2-18008
                                                              (cdr e-17944)))
                                                        (if (null? m2-18008)
                                                          s1-17976
                                                          (append
                                                            s1-17976
                                                            m2-18008)))))))
                                          (values
                                            '()
                                            y-pat-17937
                                            (match-17817
                                              e-17944
                                              z-pat-17938
                                              w-17945
                                              r-17849
                                              mod-17850)))))))
                                 (f-17942 e-17846 w-17848))))
                           (lambda (xr*-18018 y-pat-18019 r-18020)
                             (if r-18020
                               (if (null? y-pat-18019)
                                 (if (null? xr*-18018)
                                   (match-empty-17814
                                     (vector-ref p-17847 1)
                                     r-18020)
                                   (combine-17815 xr*-18018 r-18020))
                                 #f)
                               #f)))
                         (if (eqv? key-17860 'free-id)
                           (if (if (symbol? e-17846)
                                 #t
                                 (if (if (vector? e-17846)
                                       (if (= (vector-length e-17846) 4)
                                         (eq? (vector-ref e-17846 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (symbol? (vector-ref e-17846 1))
                                   #f))
                             (if (free-id=?-4370
                                   (if (if (null? (car w-17848))
                                         (null? (cdr w-17848))
                                         #f)
                                     e-17846
                                     (if (if (vector? e-17846)
                                           (if (= (vector-length e-17846) 4)
                                             (eq? (vector-ref e-17846 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (let ((expression-18448
                                               (vector-ref e-17846 1))
                                             (wrap-18449
                                               (let ((w2-18459
                                                       (vector-ref e-17846 2)))
                                                 (let ((m1-18460 (car w-17848))
                                                       (s1-18461
                                                         (cdr w-17848)))
                                                   (if (null? m1-18460)
                                                     (if (null? s1-18461)
                                                       w2-18459
                                                       (cons (car w2-18459)
                                                             (let ((m2-18478
                                                                     (cdr w2-18459)))
                                                               (if (null? m2-18478)
                                                                 s1-18461
                                                                 (append
                                                                   s1-18461
                                                                   m2-18478)))))
                                                     (cons (let ((m2-18486
                                                                   (car w2-18459)))
                                                             (if (null? m2-18486)
                                                               m1-18460
                                                               (append
                                                                 m1-18460
                                                                 m2-18486)))
                                                           (let ((m2-18494
                                                                   (cdr w2-18459)))
                                                             (if (null? m2-18494)
                                                               s1-18461
                                                               (append
                                                                 s1-18461
                                                                 m2-18494))))))))
                                             (module-18450
                                               (vector-ref e-17846 3)))
                                         (vector
                                           'syntax-object
                                           expression-18448
                                           wrap-18449
                                           module-18450))
                                       (if (null? e-17846)
                                         e-17846
                                         (vector
                                           'syntax-object
                                           e-17846
                                           w-17848
                                           mod-17850))))
                                   (vector-ref p-17847 1))
                               r-17849
                               #f)
                             #f)
                           (if (eqv? key-17860 'atom)
                             (if (equal?
                                   (vector-ref p-17847 1)
                                   (strip-4395 e-17846 w-17848))
                               r-17849
                               #f)
                             (if (eqv? key-17860 'vector)
                               (if (vector? e-17846)
                                 (match-17817
                                   (vector->list e-17846)
                                   (vector-ref p-17847 1)
                                   w-17848
                                   r-17849
                                   mod-17850)
                                 #f))))))))))))
         (match-17817
           (lambda (e-18527 p-18528 w-18529 r-18530 mod-18531)
             (if (not r-18530)
               #f
               (if (eq? p-18528 '_)
                 r-18530
                 (if (eq? p-18528 'any)
                   (cons (if (if (null? (car w-18529))
                               (null? (cdr w-18529))
                               #f)
                           e-18527
                           (if (if (vector? e-18527)
                                 (if (= (vector-length e-18527) 4)
                                   (eq? (vector-ref e-18527 0) 'syntax-object)
                                   #f)
                                 #f)
                             (let ((expression-18561 (vector-ref e-18527 1))
                                   (wrap-18562
                                     (let ((w2-18572 (vector-ref e-18527 2)))
                                       (let ((m1-18573 (car w-18529))
                                             (s1-18574 (cdr w-18529)))
                                         (if (null? m1-18573)
                                           (if (null? s1-18574)
                                             w2-18572
                                             (cons (car w2-18572)
                                                   (let ((m2-18591
                                                           (cdr w2-18572)))
                                                     (if (null? m2-18591)
                                                       s1-18574
                                                       (append
                                                         s1-18574
                                                         m2-18591)))))
                                           (cons (let ((m2-18599
                                                         (car w2-18572)))
                                                   (if (null? m2-18599)
                                                     m1-18573
                                                     (append
                                                       m1-18573
                                                       m2-18599)))
                                                 (let ((m2-18607
                                                         (cdr w2-18572)))
                                                   (if (null? m2-18607)
                                                     s1-18574
                                                     (append
                                                       s1-18574
                                                       m2-18607))))))))
                                   (module-18563 (vector-ref e-18527 3)))
                               (vector
                                 'syntax-object
                                 expression-18561
                                 wrap-18562
                                 module-18563))
                             (if (null? e-18527)
                               e-18527
                               (vector
                                 'syntax-object
                                 e-18527
                                 w-18529
                                 mod-18531))))
                         r-18530)
                   (if (if (vector? e-18527)
                         (if (= (vector-length e-18527) 4)
                           (eq? (vector-ref e-18527 0) 'syntax-object)
                           #f)
                         #f)
                     (match*-17816
                       (vector-ref e-18527 1)
                       p-18528
                       (let ((w2-18650 (vector-ref e-18527 2)))
                         (let ((m1-18651 (car w-18529))
                               (s1-18652 (cdr w-18529)))
                           (if (null? m1-18651)
                             (if (null? s1-18652)
                               w2-18650
                               (cons (car w2-18650)
                                     (let ((m2-18663 (cdr w2-18650)))
                                       (if (null? m2-18663)
                                         s1-18652
                                         (append s1-18652 m2-18663)))))
                             (cons (let ((m2-18671 (car w2-18650)))
                                     (if (null? m2-18671)
                                       m1-18651
                                       (append m1-18651 m2-18671)))
                                   (let ((m2-18679 (cdr w2-18650)))
                                     (if (null? m2-18679)
                                       s1-18652
                                       (append s1-18652 m2-18679)))))))
                       r-18530
                       (vector-ref e-18527 3))
                     (match*-17816
                       e-18527
                       p-18528
                       w-18529
                       r-18530
                       mod-18531))))))))
        (set! $sc-dispatch
          (lambda (e-17818 p-17819)
            (if (eq? p-17819 'any)
              (list e-17818)
              (if (eq? p-17819 '_)
                '()
                (if (if (vector? e-17818)
                      (if (= (vector-length e-17818) 4)
                        (eq? (vector-ref e-17818 0) 'syntax-object)
                        #f)
                      #f)
                  (match*-17816
                    (vector-ref e-17818 1)
                    p-17819
                    (vector-ref e-17818 2)
                    '()
                    (vector-ref e-17818 3))
                  (match*-17816 e-17818 p-17819 '(()) '() #f))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (x-37487)
      (let ((tmp-37489
              ($sc-dispatch x-37487 '(_ () any . each-any))))
        (if tmp-37489
          (@apply
            (lambda (e1-37493 e2-37494)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("l-*-37460" "l-*-37461"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-37457"))
                        #(ribcage
                          (with-syntax)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              with-syntax
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    (cons '() (cons e1-37493 e2-37494))))
            tmp-37489)
          (let ((tmp-37495
                  ($sc-dispatch
                    x-37487
                    '(_ ((any any)) any . each-any))))
            (if tmp-37495
              (@apply
                (lambda (out-37499 in-37500 e1-37501 e2-37502)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("l-*-37466"
                                "l-*-37467"
                                "l-*-37468"
                                "l-*-37469"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-37457"))
                            #(ribcage
                              (with-syntax)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  with-syntax
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        in-37500
                        '()
                        (list out-37499
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("l-*-37466"
                                            "l-*-37467"
                                            "l-*-37468"
                                            "l-*-37469"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("l-*-37457"))
                                        #(ribcage
                                          (with-syntax)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              with-syntax
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    (cons '() (cons e1-37501 e2-37502))))))
                tmp-37495)
              (let ((tmp-37503
                      ($sc-dispatch
                        x-37487
                        '(_ #(each (any any)) any . each-any))))
                (if tmp-37503
                  (@apply
                    (lambda (out-37507 in-37508 e1-37509 e2-37510)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("l-*-37476"
                                    "l-*-37477"
                                    "l-*-37478"
                                    "l-*-37479"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("l-*-37457"))
                                #(ribcage
                                  (with-syntax)
                                  ((top))
                                  (((hygiene guile)
                                    .
                                    #(syntax-object
                                      with-syntax
                                      ((top))
                                      (hygiene guile))))))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("l-*-37476"
                                          "l-*-37477"
                                          "l-*-37478"
                                          "l-*-37479"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-37457"))
                                      #(ribcage
                                        (with-syntax)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            with-syntax
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                  in-37508)
                            '()
                            (list out-37507
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("l-*-37476"
                                                "l-*-37477"
                                                "l-*-37478"
                                                "l-*-37479"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("l-*-37457"))
                                            #(ribcage
                                              (with-syntax)
                                              ((top))
                                              (((hygiene guile)
                                                .
                                                #(syntax-object
                                                  with-syntax
                                                  ((top))
                                                  (hygiene guile))))))
                                           (hygiene guile))
                                        (cons '() (cons e1-37509 e2-37510))))))
                    tmp-37503)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    x-37487))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (x-37565)
      (let ((tmp-37567
              ($sc-dispatch
                x-37565
                '(_ each-any . #(each ((any . any) any))))))
        (if tmp-37567
          (@apply
            (lambda (k-37571
                     keyword-37572
                     pattern-37573
                     template-37574)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("l-*-37528"
                            "l-*-37529"
                            "l-*-37530"
                            "l-*-37531"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-37525"))
                        #(ribcage
                          (syntax-rules)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              syntax-rules
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("l-*-37528"
                             "l-*-37529"
                             "l-*-37530"
                             "l-*-37531"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("l-*-37525"))
                         #(ribcage
                           (syntax-rules)
                           ((top))
                           (((hygiene guile)
                             .
                             #(syntax-object
                               syntax-rules
                               ((top))
                               (hygiene guile))))))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("l-*-37528"
                               "l-*-37529"
                               "l-*-37530"
                               "l-*-37531"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-37525"))
                           #(ribcage
                             (syntax-rules)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 syntax-rules
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("l-*-37528"
                               "l-*-37529"
                               "l-*-37530"
                               "l-*-37531"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-37525"))
                           #(ribcage
                             (syntax-rules)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 syntax-rules
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("l-*-37528"
                                    "l-*-37529"
                                    "l-*-37530"
                                    "l-*-37531"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("l-*-37525"))
                                #(ribcage
                                  (syntax-rules)
                                  ((top))
                                  (((hygiene guile)
                                    .
                                    #(syntax-object
                                      syntax-rules
                                      ((top))
                                      (hygiene guile))))))
                               (hygiene guile))
                            pattern-37573))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("l-*-37528"
                                  "l-*-37529"
                                  "l-*-37530"
                                  "l-*-37531"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-37525"))
                              #(ribcage
                                (syntax-rules)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    syntax-rules
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("l-*-37528"
                                        "l-*-37529"
                                        "l-*-37530"
                                        "l-*-37531"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-37525"))
                                    #(ribcage
                                      (syntax-rules)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          syntax-rules
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile))
                                (cons k-37571
                                      (map (lambda (tmp-37539-37575
                                                    tmp-37538-37576)
                                             (list (cons '#(syntax-object
                                                            _
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("l-*-37528"
                                                                 "l-*-37529"
                                                                 "l-*-37530"
                                                                 "l-*-37531"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-37525"))
                                                             #(ribcage
                                                               (syntax-rules)
                                                               ((top))
                                                               (((hygiene
                                                                   guile)
                                                                 .
                                                                 #(syntax-object
                                                                   syntax-rules
                                                                   ((top))
                                                                   (hygiene
                                                                     guile))))))
                                                            (hygiene guile))
                                                         tmp-37538-37576)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("l-*-37528"
                                                                 "l-*-37529"
                                                                 "l-*-37530"
                                                                 "l-*-37531"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-37525"))
                                                             #(ribcage
                                                               (syntax-rules)
                                                               ((top))
                                                               (((hygiene
                                                                   guile)
                                                                 .
                                                                 #(syntax-object
                                                                   syntax-rules
                                                                   ((top))
                                                                   (hygiene
                                                                     guile))))))
                                                            (hygiene guile))
                                                         tmp-37539-37575)))
                                           template-37574
                                           pattern-37573))))))
            tmp-37567)
          (let ((tmp-37577
                  ($sc-dispatch
                    x-37565
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if tmp-37577
                  (@apply
                    (lambda (k-37581
                             docstring-37582
                             keyword-37583
                             pattern-37584
                             template-37585)
                      (string? (syntax->datum docstring-37582)))
                    tmp-37577)
                  #f)
              (@apply
                (lambda (k-37586
                         docstring-37587
                         keyword-37588
                         pattern-37589
                         template-37590)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("l-*-37551"
                                "l-*-37552"
                                "l-*-37553"
                                "l-*-37554"
                                "l-*-37555"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-37525"))
                            #(ribcage
                              (syntax-rules)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  syntax-rules
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("l-*-37551"
                                 "l-*-37552"
                                 "l-*-37553"
                                 "l-*-37554"
                                 "l-*-37555"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("l-*-37525"))
                             #(ribcage
                               (syntax-rules)
                               ((top))
                               (((hygiene guile)
                                 .
                                 #(syntax-object
                                   syntax-rules
                                   ((top))
                                   (hygiene guile))))))
                            (hygiene guile)))
                        docstring-37587
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("l-*-37551"
                                   "l-*-37552"
                                   "l-*-37553"
                                   "l-*-37554"
                                   "l-*-37555"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-37525"))
                               #(ribcage
                                 (syntax-rules)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     syntax-rules
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("l-*-37551"
                                   "l-*-37552"
                                   "l-*-37553"
                                   "l-*-37554"
                                   "l-*-37555"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-37525"))
                               #(ribcage
                                 (syntax-rules)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     syntax-rules
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("l-*-37551"
                                        "l-*-37552"
                                        "l-*-37553"
                                        "l-*-37554"
                                        "l-*-37555"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-37525"))
                                    #(ribcage
                                      (syntax-rules)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          syntax-rules
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile))
                                pattern-37589))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("l-*-37551"
                                      "l-*-37552"
                                      "l-*-37553"
                                      "l-*-37554"
                                      "l-*-37555"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-37525"))
                                  #(ribcage
                                    (syntax-rules)
                                    ((top))
                                    (((hygiene guile)
                                      .
                                      #(syntax-object
                                        syntax-rules
                                        ((top))
                                        (hygiene guile))))))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-37551"
                                            "l-*-37552"
                                            "l-*-37553"
                                            "l-*-37554"
                                            "l-*-37555"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("l-*-37525"))
                                        #(ribcage
                                          (syntax-rules)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              syntax-rules
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    (cons k-37586
                                          (map (lambda (tmp-37564-37591
                                                        tmp-37563-37592)
                                                 (list (cons '#(syntax-object
                                                                _
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-37551"
                                                                     "l-*-37552"
                                                                     "l-*-37553"
                                                                     "l-*-37554"
                                                                     "l-*-37555"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-37525"))
                                                                 #(ribcage
                                                                   (syntax-rules)
                                                                   ((top))
                                                                   (((hygiene
                                                                       guile)
                                                                     .
                                                                     #(syntax-object
                                                                       syntax-rules
                                                                       ((top))
                                                                       (hygiene
                                                                         guile))))))
                                                                (hygiene
                                                                  guile))
                                                             tmp-37563-37592)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-37551"
                                                                     "l-*-37552"
                                                                     "l-*-37553"
                                                                     "l-*-37554"
                                                                     "l-*-37555"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-37525"))
                                                                 #(ribcage
                                                                   (syntax-rules)
                                                                   ((top))
                                                                   (((hygiene
                                                                       guile)
                                                                     .
                                                                     #(syntax-object
                                                                       syntax-rules
                                                                       ((top))
                                                                       (hygiene
                                                                         guile))))))
                                                                (hygiene
                                                                  guile))
                                                             tmp-37564-37591)))
                                               template-37590
                                               pattern-37589))))))
                tmp-37577)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-37565))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (x-37630)
      (let ((tmp-37632
              ($sc-dispatch x-37630 '(_ (any . any) any))))
        (if tmp-37632
          (@apply
            (lambda (name-37636 pattern-37637 template-37638)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("l-*-37607" "l-*-37608" "l-*-37609"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-37604"))
                        #(ribcage
                          (define-syntax-rule)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              define-syntax-rule
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    name-37636
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("l-*-37607" "l-*-37608" "l-*-37609"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-37604"))
                              #(ribcage
                                (define-syntax-rule)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    define-syntax-rule
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("l-*-37607"
                                              "l-*-37608"
                                              "l-*-37609"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-37604"))
                                          #(ribcage
                                            (define-syntax-rule)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                define-syntax-rule
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      pattern-37637)
                                template-37638))))
            tmp-37632)
          (let ((tmp-37639
                  ($sc-dispatch x-37630 '(_ (any . any) any any))))
            (if (if tmp-37639
                  (@apply
                    (lambda (name-37643
                             pattern-37644
                             docstring-37645
                             template-37646)
                      (string? (syntax->datum docstring-37645)))
                    tmp-37639)
                  #f)
              (@apply
                (lambda (name-37647
                         pattern-37648
                         docstring-37649
                         template-37650)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("l-*-37622"
                                "l-*-37623"
                                "l-*-37624"
                                "l-*-37625"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-37604"))
                            #(ribcage
                              (define-syntax-rule)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  define-syntax-rule
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        name-37647
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("l-*-37622"
                                      "l-*-37623"
                                      "l-*-37624"
                                      "l-*-37625"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-37604"))
                                  #(ribcage
                                    (define-syntax-rule)
                                    ((top))
                                    (((hygiene guile)
                                      .
                                      #(syntax-object
                                        define-syntax-rule
                                        ((top))
                                        (hygiene guile))))))
                                 (hygiene guile))
                              '()
                              docstring-37649
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("l-*-37622"
                                                  "l-*-37623"
                                                  "l-*-37624"
                                                  "l-*-37625"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("l-*-37604"))
                                              #(ribcage
                                                (define-syntax-rule)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    define-syntax-rule
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                          pattern-37648)
                                    template-37650))))
                tmp-37639)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-37630))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (x-37700)
      (let ((tmp-37702
              ($sc-dispatch
                x-37700
                '(any #(each (any any)) any . each-any))))
        (if (if tmp-37702
              (@apply
                (lambda (let*-37706 x-37707 v-37708 e1-37709 e2-37710)
                  (and-map identifier? x-37707))
                tmp-37702)
              #f)
          (@apply
            (lambda (let*-37711 x-37712 v-37713 e1-37714 e2-37715)
              (letrec*
                ((f-37716
                   (lambda (bindings-37719)
                     (if (null? bindings-37719)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("l-*-37686" "l-*-37687"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("l-*-37676"
                                     "l-*-37677"
                                     "l-*-37678"
                                     "l-*-37679"
                                     "l-*-37680"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("l-*-37662"))
                                 #(ribcage
                                   (let*)
                                   ((top))
                                   (((hygiene guile)
                                     .
                                     #(syntax-object
                                       let*
                                       ((top))
                                       (hygiene guile))))))
                                (hygiene guile))
                             (cons '() (cons e1-37714 e2-37715)))
                       (let ((tmp-37720
                               (list (f-37716 (cdr bindings-37719))
                                     (car bindings-37719))))
                         (let ((tmp-37721 ($sc-dispatch tmp-37720 '(any any))))
                           (if tmp-37721
                             (@apply
                               (lambda (body-37723 binding-37724)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("l-*-37696" "l-*-37697"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("l-*-37686" "l-*-37687"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("l-*-37676"
                                               "l-*-37677"
                                               "l-*-37678"
                                               "l-*-37679"
                                               "l-*-37680"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-37662"))
                                           #(ribcage
                                             (let*)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 let*
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       (list binding-37724)
                                       body-37723))
                               tmp-37721)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               tmp-37720))))))))
                (f-37716 (map list x-37712 v-37713))))
            tmp-37702)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-37700))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (orig-x-37783)
      (let ((tmp-37785
              ($sc-dispatch
                orig-x-37783
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if tmp-37785
          (@apply
            (lambda (var-37789
                     init-37790
                     step-37791
                     e0-37792
                     e1-37793
                     c-37794)
              (let ((tmp-37795
                      (map (lambda (v-37798 s-37799)
                             (let ((tmp-37801 ($sc-dispatch s-37799 '())))
                               (if tmp-37801
                                 (@apply (lambda () v-37798) tmp-37801)
                                 (let ((tmp-37804
                                         ($sc-dispatch s-37799 '(any))))
                                   (if tmp-37804
                                     (@apply
                                       (lambda (e-37807) e-37807)
                                       tmp-37804)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       orig-x-37783
                                       s-37799))))))
                           var-37789
                           step-37791)))
                (let ((tmp-37796 ($sc-dispatch tmp-37795 'each-any)))
                  (if tmp-37796
                    (@apply
                      (lambda (step-37813)
                        (let ((tmp-37815 ($sc-dispatch e1-37793 '())))
                          (if tmp-37815
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("l-*-37751"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("l-*-37736"
                                              "l-*-37737"
                                              "l-*-37738"
                                              "l-*-37739"
                                              "l-*-37740"
                                              "l-*-37741"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("l-*-37733"))
                                          #(ribcage
                                            (do)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                do
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("l-*-37751"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("l-*-37736"
                                              "l-*-37737"
                                              "l-*-37738"
                                              "l-*-37739"
                                              "l-*-37740"
                                              "l-*-37741"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("l-*-37733"))
                                          #(ribcage
                                            (do)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                do
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      (map list var-37789 init-37790)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("l-*-37751"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-37736"
                                                    "l-*-37737"
                                                    "l-*-37738"
                                                    "l-*-37739"
                                                    "l-*-37740"
                                                    "l-*-37741"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("l-*-37733"))
                                                #(ribcage
                                                  (do)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      do
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("l-*-37751"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("l-*-37736"
                                                          "l-*-37737"
                                                          "l-*-37738"
                                                          "l-*-37739"
                                                          "l-*-37740"
                                                          "l-*-37741"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("l-*-37733"))
                                                      #(ribcage
                                                        (do)
                                                        ((top))
                                                        (((hygiene guile)
                                                          .
                                                          #(syntax-object
                                                            do
                                                            ((top))
                                                            (hygiene
                                                              guile))))))
                                                     (hygiene guile))
                                                  e0-37792)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("l-*-37751"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("l-*-37736"
                                                          "l-*-37737"
                                                          "l-*-37738"
                                                          "l-*-37739"
                                                          "l-*-37740"
                                                          "l-*-37741"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("l-*-37733"))
                                                      #(ribcage
                                                        (do)
                                                        ((top))
                                                        (((hygiene guile)
                                                          .
                                                          #(syntax-object
                                                            do
                                                            ((top))
                                                            (hygiene
                                                              guile))))))
                                                     (hygiene guile))
                                                  (append
                                                    c-37794
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("l-*-37751"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("l-*-37736"
                                                                        "l-*-37737"
                                                                        "l-*-37738"
                                                                        "l-*-37739"
                                                                        "l-*-37740"
                                                                        "l-*-37741"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("l-*-37733"))
                                                                    #(ribcage
                                                                      (do)
                                                                      ((top))
                                                                      (((hygiene
                                                                          guile)
                                                                        .
                                                                        #(syntax-object
                                                                          do
                                                                          ((top))
                                                                          (hygiene
                                                                            guile))))))
                                                                   (hygiene
                                                                     guile))
                                                                step-37813)))))))
                              tmp-37815)
                            (let ((tmp-37819
                                    ($sc-dispatch e1-37793 '(any . each-any))))
                              (if tmp-37819
                                (@apply
                                  (lambda (e1-37823 e2-37824)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("l-*-37760" "l-*-37761"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("l-*-37751"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-37736"
                                                  "l-*-37737"
                                                  "l-*-37738"
                                                  "l-*-37739"
                                                  "l-*-37740"
                                                  "l-*-37741"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("l-*-37733"))
                                              #(ribcage
                                                (do)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    do
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("l-*-37760" "l-*-37761"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("l-*-37751"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-37736"
                                                  "l-*-37737"
                                                  "l-*-37738"
                                                  "l-*-37739"
                                                  "l-*-37740"
                                                  "l-*-37741"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("l-*-37733"))
                                              #(ribcage
                                                (do)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    do
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                          (map list var-37789 init-37790)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("l-*-37760"
                                                        "l-*-37761"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("l-*-37751"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-37736"
                                                        "l-*-37737"
                                                        "l-*-37738"
                                                        "l-*-37739"
                                                        "l-*-37740"
                                                        "l-*-37741"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("l-*-37733"))
                                                    #(ribcage
                                                      (do)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          do
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                e0-37792
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("l-*-37760"
                                                              "l-*-37761"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("l-*-37751"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-37736"
                                                              "l-*-37737"
                                                              "l-*-37738"
                                                              "l-*-37739"
                                                              "l-*-37740"
                                                              "l-*-37741"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("l-*-37733"))
                                                          #(ribcage
                                                            (do)
                                                            ((top))
                                                            (((hygiene guile)
                                                              .
                                                              #(syntax-object
                                                                do
                                                                ((top))
                                                                (hygiene
                                                                  guile))))))
                                                         (hygiene guile))
                                                      (cons e1-37823 e2-37824))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("l-*-37760"
                                                              "l-*-37761"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("l-*-37751"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-37736"
                                                              "l-*-37737"
                                                              "l-*-37738"
                                                              "l-*-37739"
                                                              "l-*-37740"
                                                              "l-*-37741"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("l-*-37733"))
                                                          #(ribcage
                                                            (do)
                                                            ((top))
                                                            (((hygiene guile)
                                                              .
                                                              #(syntax-object
                                                                do
                                                                ((top))
                                                                (hygiene
                                                                  guile))))))
                                                         (hygiene guile))
                                                      (append
                                                        c-37794
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("l-*-37760"
                                                                            "l-*-37761"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("l-*-37751"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("l-*-37736"
                                                                            "l-*-37737"
                                                                            "l-*-37738"
                                                                            "l-*-37739"
                                                                            "l-*-37740"
                                                                            "l-*-37741"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("l-*-37733"))
                                                                        #(ribcage
                                                                          (do)
                                                                          ((top))
                                                                          (((hygiene
                                                                              guile)
                                                                            .
                                                                            #(syntax-object
                                                                              do
                                                                              ((top))
                                                                              (hygiene
                                                                                guile))))))
                                                                       (hygiene
                                                                         guile))
                                                                    step-37813)))))))
                                  tmp-37819)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  e1-37793))))))
                      tmp-37796)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      tmp-37795)))))
            tmp-37785)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            orig-x-37783))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((quasi-38105
         (lambda (p-38129 lev-38130)
           (let ((tmp-38132
                   ($sc-dispatch
                     p-38129
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-37857" "l-*-37858"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-37853"
                               "l-*-37851"
                               "l-*-37849"
                               "l-*-37847"
                               "l-*-37845"
                               "l-*-37843"
                               "l-*-37841"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile)))
                       any))))
             (if tmp-38132
               (@apply
                 (lambda (p-38136)
                   (if (= lev-38130 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("l-*-37861"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("l-*-37857" "l-*-37858"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("l-*-37853"
                                  "l-*-37851"
                                  "l-*-37849"
                                  "l-*-37847"
                                  "l-*-37845"
                                  "l-*-37843"
                                  "l-*-37841"))
                               #(ribcage
                                 (quasiquote)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     quasiquote
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile))
                           p-38136)
                     (quasicons-38107
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("l-*-37861"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-37857" "l-*-37858"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-37853"
                               "l-*-37851"
                               "l-*-37849"
                               "l-*-37847"
                               "l-*-37845"
                               "l-*-37843"
                               "l-*-37841"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("l-*-37861"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-37857" "l-*-37858"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-37853"
                               "l-*-37851"
                               "l-*-37849"
                               "l-*-37847"
                               "l-*-37845"
                               "l-*-37843"
                               "l-*-37841"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile)))
                       (quasi-38105 (list p-38136) (#{1-}# lev-38130)))))
                 tmp-38132)
               (let ((tmp-38139
                       ($sc-dispatch
                         p-38129
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("l-*-37857" "l-*-37858"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("l-*-37853"
                                   "l-*-37851"
                                   "l-*-37849"
                                   "l-*-37847"
                                   "l-*-37845"
                                   "l-*-37843"
                                   "l-*-37841"))
                                #(ribcage
                                  (quasiquote)
                                  ((top))
                                  (((hygiene guile)
                                    .
                                    #(syntax-object
                                      quasiquote
                                      ((top))
                                      (hygiene guile))))))
                               (hygiene guile)))
                           any))))
                 (if tmp-38139
                   (@apply
                     (lambda (p-38143)
                       (quasicons-38107
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("l-*-37864"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("l-*-37857" "l-*-37858"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("l-*-37853"
                                 "l-*-37851"
                                 "l-*-37849"
                                 "l-*-37847"
                                 "l-*-37845"
                                 "l-*-37843"
                                 "l-*-37841"))
                              #(ribcage
                                (quasiquote)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    quasiquote
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("l-*-37864"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("l-*-37857" "l-*-37858"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("l-*-37853"
                                 "l-*-37851"
                                 "l-*-37849"
                                 "l-*-37847"
                                 "l-*-37845"
                                 "l-*-37843"
                                 "l-*-37841"))
                              #(ribcage
                                (quasiquote)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    quasiquote
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile)))
                         (quasi-38105 (list p-38143) (#{1+}# lev-38130))))
                     tmp-38139)
                   (let ((tmp-38146 ($sc-dispatch p-38129 '(any . any))))
                     (if tmp-38146
                       (@apply
                         (lambda (p-38150 q-38151)
                           (let ((tmp-38153
                                   ($sc-dispatch
                                     p-38150
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("l-*-37867" "l-*-37868"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("l-*-37857" "l-*-37858"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("l-*-37853"
                                               "l-*-37851"
                                               "l-*-37849"
                                               "l-*-37847"
                                               "l-*-37845"
                                               "l-*-37843"
                                               "l-*-37841"))
                                            #(ribcage
                                              (quasiquote)
                                              ((top))
                                              (((hygiene guile)
                                                .
                                                #(syntax-object
                                                  quasiquote
                                                  ((top))
                                                  (hygiene guile))))))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if tmp-38153
                               (@apply
                                 (lambda (p-38157)
                                   (if (= lev-38130 0)
                                     (quasilist*-38109
                                       (map (lambda (tmp-37875-38196)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("l-*-37873"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("l-*-37867"
                                                            "l-*-37868"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("l-*-37857"
                                                            "l-*-37858"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-37853"
                                                           "l-*-37851"
                                                           "l-*-37849"
                                                           "l-*-37847"
                                                           "l-*-37845"
                                                           "l-*-37843"
                                                           "l-*-37841"))
                                                        #(ribcage
                                                          (quasiquote)
                                                          ((top))
                                                          (((hygiene guile)
                                                            .
                                                            #(syntax-object
                                                              quasiquote
                                                              ((top))
                                                              (hygiene
                                                                guile))))))
                                                       (hygiene guile))
                                                    tmp-37875-38196))
                                            p-38157)
                                       (quasi-38105 q-38151 lev-38130))
                                     (quasicons-38107
                                       (quasicons-38107
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("l-*-37873"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("l-*-37867" "l-*-37868"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("l-*-37857" "l-*-37858"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-37853"
                                                 "l-*-37851"
                                                 "l-*-37849"
                                                 "l-*-37847"
                                                 "l-*-37845"
                                                 "l-*-37843"
                                                 "l-*-37841"))
                                              #(ribcage
                                                (quasiquote)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    quasiquote
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("l-*-37873"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("l-*-37867" "l-*-37868"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("l-*-37857" "l-*-37858"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-37853"
                                                 "l-*-37851"
                                                 "l-*-37849"
                                                 "l-*-37847"
                                                 "l-*-37845"
                                                 "l-*-37843"
                                                 "l-*-37841"))
                                              #(ribcage
                                                (quasiquote)
                                                ((top))
                                                (((hygiene guile)
                                                  .
                                                  #(syntax-object
                                                    quasiquote
                                                    ((top))
                                                    (hygiene guile))))))
                                             (hygiene guile)))
                                         (quasi-38105
                                           p-38157
                                           (#{1-}# lev-38130)))
                                       (quasi-38105 q-38151 lev-38130))))
                                 tmp-38153)
                               (let ((tmp-38201
                                       ($sc-dispatch
                                         p-38150
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("l-*-37867" "l-*-37868"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("l-*-37857" "l-*-37858"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-37853"
                                                   "l-*-37851"
                                                   "l-*-37849"
                                                   "l-*-37847"
                                                   "l-*-37845"
                                                   "l-*-37843"
                                                   "l-*-37841"))
                                                #(ribcage
                                                  (quasiquote)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      quasiquote
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if tmp-38201
                                   (@apply
                                     (lambda (p-38205)
                                       (if (= lev-38130 0)
                                         (quasiappend-38108
                                           (map (lambda (tmp-37880-38208)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("l-*-37878"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("l-*-37867"
                                                                "l-*-37868"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("l-*-37857"
                                                                "l-*-37858"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-37853"
                                                               "l-*-37851"
                                                               "l-*-37849"
                                                               "l-*-37847"
                                                               "l-*-37845"
                                                               "l-*-37843"
                                                               "l-*-37841"))
                                                            #(ribcage
                                                              (quasiquote)
                                                              ((top))
                                                              (((hygiene guile)
                                                                .
                                                                #(syntax-object
                                                                  quasiquote
                                                                  ((top))
                                                                  (hygiene
                                                                    guile))))))
                                                           (hygiene guile))
                                                        tmp-37880-38208))
                                                p-38205)
                                           (quasi-38105 q-38151 lev-38130))
                                         (quasicons-38107
                                           (quasicons-38107
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("l-*-37878"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("l-*-37867" "l-*-37868"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("l-*-37857" "l-*-37858"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("l-*-37853"
                                                     "l-*-37851"
                                                     "l-*-37849"
                                                     "l-*-37847"
                                                     "l-*-37845"
                                                     "l-*-37843"
                                                     "l-*-37841"))
                                                  #(ribcage
                                                    (quasiquote)
                                                    ((top))
                                                    (((hygiene guile)
                                                      .
                                                      #(syntax-object
                                                        quasiquote
                                                        ((top))
                                                        (hygiene guile))))))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("l-*-37878"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("l-*-37867" "l-*-37868"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("l-*-37857" "l-*-37858"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("l-*-37853"
                                                     "l-*-37851"
                                                     "l-*-37849"
                                                     "l-*-37847"
                                                     "l-*-37845"
                                                     "l-*-37843"
                                                     "l-*-37841"))
                                                  #(ribcage
                                                    (quasiquote)
                                                    ((top))
                                                    (((hygiene guile)
                                                      .
                                                      #(syntax-object
                                                        quasiquote
                                                        ((top))
                                                        (hygiene guile))))))
                                                 (hygiene guile)))
                                             (quasi-38105
                                               p-38205
                                               (#{1-}# lev-38130)))
                                           (quasi-38105 q-38151 lev-38130))))
                                     tmp-38201)
                                   (quasicons-38107
                                     (quasi-38105 p-38150 lev-38130)
                                     (quasi-38105 q-38151 lev-38130)))))))
                         tmp-38146)
                       (let ((tmp-38222
                               ($sc-dispatch p-38129 '#(vector each-any))))
                         (if tmp-38222
                           (@apply
                             (lambda (x-38226)
                               (let ((x-38229
                                       (vquasi-38106 x-38226 lev-38130)))
                                 (let ((tmp-38231
                                         ($sc-dispatch
                                           x-38229
                                           '(#(atom "quote") each-any))))
                                   (if tmp-38231
                                     (@apply
                                       (lambda (x-38235)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-37979"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-37976"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-37853"
                                                      "l-*-37851"
                                                      "l-*-37849"
                                                      "l-*-37847"
                                                      "l-*-37845"
                                                      "l-*-37843"
                                                      "l-*-37841"))
                                                   #(ribcage
                                                     (quasiquote)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         quasiquote
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               (list->vector x-38235)))
                                       tmp-38231)
                                     (letrec*
                                       ((f-38237
                                          (lambda (y-38249 k-38250)
                                            (let ((tmp-38252
                                                    ($sc-dispatch
                                                      y-38249
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if tmp-38252
                                                (@apply
                                                  (lambda (y-38255)
                                                    (k-38250
                                                      (map (lambda (tmp-38004-38256)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("l-*-38002"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("l-*-37984"
                                                                           "l-*-37985"
                                                                           "l-*-37986"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("l-*-37982"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("l-*-37976"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("l-*-37853"
                                                                          "l-*-37851"
                                                                          "l-*-37849"
                                                                          "l-*-37847"
                                                                          "l-*-37845"
                                                                          "l-*-37843"
                                                                          "l-*-37841"))
                                                                       #(ribcage
                                                                         (quasiquote)
                                                                         ((top))
                                                                         (((hygiene
                                                                             guile)
                                                                           .
                                                                           #(syntax-object
                                                                             quasiquote
                                                                             ((top))
                                                                             (hygiene
                                                                               guile))))))
                                                                      (hygiene
                                                                        guile))
                                                                   tmp-38004-38256))
                                                           y-38255)))
                                                  tmp-38252)
                                                (let ((tmp-38257
                                                        ($sc-dispatch
                                                          y-38249
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if tmp-38257
                                                    (@apply
                                                      (lambda (y-38260)
                                                        (k-38250 y-38260))
                                                      tmp-38257)
                                                    (let ((tmp-38261
                                                            ($sc-dispatch
                                                              y-38249
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if tmp-38261
                                                        (@apply
                                                          (lambda (y-38264
                                                                   z-38265)
                                                            (f-38237
                                                              z-38265
                                                              (lambda (ls-38266)
                                                                (k-38250
                                                                  (append
                                                                    y-38264
                                                                    ls-38266)))))
                                                          tmp-38261)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(t-38019)
                                                                    #((m-*-38020
                                                                        top))
                                                                    #("l-*-38023"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("l-*-38017"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("l-*-37984"
                                                                      "l-*-37985"
                                                                      "l-*-37986"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("l-*-37982"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("l-*-37976"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("l-*-37853"
                                                                     "l-*-37851"
                                                                     "l-*-37849"
                                                                     "l-*-37847"
                                                                     "l-*-37845"
                                                                     "l-*-37843"
                                                                     "l-*-37841"))
                                                                  #(ribcage
                                                                    (quasiquote)
                                                                    ((top))
                                                                    (((hygiene
                                                                        guile)
                                                                      .
                                                                      #(syntax-object
                                                                        quasiquote
                                                                        ((top))
                                                                        (hygiene
                                                                          guile))))))
                                                                 (hygiene
                                                                   guile))
                                                              x-38229))))))))))
                                       (f-38237
                                         x-38229
                                         (lambda (ls-38239)
                                           (let ((tmp-38241
                                                   ($sc-dispatch
                                                     ls-38239
                                                     'each-any)))
                                             (if tmp-38241
                                               (@apply
                                                 (lambda (t-37992-38244)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(t-37992)
                                                               #((m-*-37993
                                                                   top))
                                                               #("l-*-37997"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("l-*-37991"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("l-*-37982"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-37976"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("l-*-37853"
                                                                "l-*-37851"
                                                                "l-*-37849"
                                                                "l-*-37847"
                                                                "l-*-37845"
                                                                "l-*-37843"
                                                                "l-*-37841"))
                                                             #(ribcage
                                                               (quasiquote)
                                                               ((top))
                                                               (((hygiene
                                                                   guile)
                                                                 .
                                                                 #(syntax-object
                                                                   quasiquote
                                                                   ((top))
                                                                   (hygiene
                                                                     guile))))))
                                                            (hygiene guile))
                                                         t-37992-38244))
                                                 tmp-38241)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 ls-38239))))))))))
                             tmp-38222)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("l-*-37888"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("l-*-37857" "l-*-37858"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-37853"
                                        "l-*-37851"
                                        "l-*-37849"
                                        "l-*-37847"
                                        "l-*-37845"
                                        "l-*-37843"
                                        "l-*-37841"))
                                     #(ribcage
                                       (quasiquote)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           quasiquote
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                 p-38129)))))))))))
       (vquasi-38106
         (lambda (p-38294 lev-38295)
           (let ((tmp-38297 ($sc-dispatch p-38294 '(any . any))))
             (if tmp-38297
               (@apply
                 (lambda (p-38301 q-38302)
                   (let ((tmp-38304
                           ($sc-dispatch
                             p-38301
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("l-*-37896" "l-*-37897"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("l-*-37892" "l-*-37893"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("l-*-37853"
                                       "l-*-37851"
                                       "l-*-37849"
                                       "l-*-37847"
                                       "l-*-37845"
                                       "l-*-37843"
                                       "l-*-37841"))
                                    #(ribcage
                                      (quasiquote)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          quasiquote
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if tmp-38304
                       (@apply
                         (lambda (p-38308)
                           (if (= lev-38295 0)
                             (quasilist*-38109
                               (map (lambda (tmp-37904-38347)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("l-*-37902"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("l-*-37896" "l-*-37897"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("l-*-37892" "l-*-37893"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-37853"
                                                   "l-*-37851"
                                                   "l-*-37849"
                                                   "l-*-37847"
                                                   "l-*-37845"
                                                   "l-*-37843"
                                                   "l-*-37841"))
                                                #(ribcage
                                                  (quasiquote)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      quasiquote
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile))
                                            tmp-37904-38347))
                                    p-38308)
                               (vquasi-38106 q-38302 lev-38295))
                             (quasicons-38107
                               (quasicons-38107
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("l-*-37902"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("l-*-37896" "l-*-37897"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("l-*-37892" "l-*-37893"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("l-*-37853"
                                         "l-*-37851"
                                         "l-*-37849"
                                         "l-*-37847"
                                         "l-*-37845"
                                         "l-*-37843"
                                         "l-*-37841"))
                                      #(ribcage
                                        (quasiquote)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            quasiquote
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("l-*-37902"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("l-*-37896" "l-*-37897"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("l-*-37892" "l-*-37893"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("l-*-37853"
                                         "l-*-37851"
                                         "l-*-37849"
                                         "l-*-37847"
                                         "l-*-37845"
                                         "l-*-37843"
                                         "l-*-37841"))
                                      #(ribcage
                                        (quasiquote)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            quasiquote
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile)))
                                 (quasi-38105 p-38308 (#{1-}# lev-38295)))
                               (vquasi-38106 q-38302 lev-38295))))
                         tmp-38304)
                       (let ((tmp-38354
                               ($sc-dispatch
                                 p-38301
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("l-*-37896" "l-*-37897"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("l-*-37892" "l-*-37893"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("l-*-37853"
                                           "l-*-37851"
                                           "l-*-37849"
                                           "l-*-37847"
                                           "l-*-37845"
                                           "l-*-37843"
                                           "l-*-37841"))
                                        #(ribcage
                                          (quasiquote)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              quasiquote
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if tmp-38354
                           (@apply
                             (lambda (p-38358)
                               (if (= lev-38295 0)
                                 (quasiappend-38108
                                   (map (lambda (tmp-37909-38361)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("l-*-37907"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("l-*-37896"
                                                        "l-*-37897"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("l-*-37892"
                                                        "l-*-37893"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("l-*-37853"
                                                       "l-*-37851"
                                                       "l-*-37849"
                                                       "l-*-37847"
                                                       "l-*-37845"
                                                       "l-*-37843"
                                                       "l-*-37841"))
                                                    #(ribcage
                                                      (quasiquote)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          quasiquote
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                tmp-37909-38361))
                                        p-38358)
                                   (vquasi-38106 q-38302 lev-38295))
                                 (quasicons-38107
                                   (quasicons-38107
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage
                                            #(p)
                                            #((top))
                                            #("l-*-37907"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("l-*-37896" "l-*-37897"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("l-*-37892" "l-*-37893"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("l-*-37853"
                                             "l-*-37851"
                                             "l-*-37849"
                                             "l-*-37847"
                                             "l-*-37845"
                                             "l-*-37843"
                                             "l-*-37841"))
                                          #(ribcage
                                            (quasiquote)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                quasiquote
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage
                                            #(p)
                                            #((top))
                                            #("l-*-37907"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("l-*-37896" "l-*-37897"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("l-*-37892" "l-*-37893"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("l-*-37853"
                                             "l-*-37851"
                                             "l-*-37849"
                                             "l-*-37847"
                                             "l-*-37845"
                                             "l-*-37843"
                                             "l-*-37841"))
                                          #(ribcage
                                            (quasiquote)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                quasiquote
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile)))
                                     (quasi-38105 p-38358 (#{1-}# lev-38295)))
                                   (vquasi-38106 q-38302 lev-38295))))
                             tmp-38354)
                           (quasicons-38107
                             (quasi-38105 p-38301 lev-38295)
                             (vquasi-38106 q-38302 lev-38295)))))))
                 tmp-38297)
               (let ((tmp-38379 ($sc-dispatch p-38294 '())))
                 (if tmp-38379
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-37892" "l-*-37893"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-37853"
                               "l-*-37851"
                               "l-*-37849"
                               "l-*-37847"
                               "l-*-37845"
                               "l-*-37843"
                               "l-*-37841"))
                            #(ribcage
                              (quasiquote)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  quasiquote
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                         ()))
                     tmp-38379)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     p-38294)))))))
       (quasicons-38107
         (lambda (x-38392 y-38393)
           (let ((tmp-38394 (list x-38392 y-38393)))
             (let ((tmp-38395 ($sc-dispatch tmp-38394 '(any any))))
               (if tmp-38395
                 (@apply
                   (lambda (x-38397 y-38398)
                     (let ((tmp-38400
                             ($sc-dispatch y-38398 '(#(atom "quote") any))))
                       (if tmp-38400
                         (@apply
                           (lambda (dy-38404)
                             (let ((tmp-38406
                                     ($sc-dispatch
                                       x-38397
                                       '(#(atom "quote") any))))
                               (if tmp-38406
                                 (@apply
                                   (lambda (dx-38410)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("l-*-37931"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("l-*-37927"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-37921" "l-*-37922"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-37916" "l-*-37917"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-37853"
                                                  "l-*-37851"
                                                  "l-*-37849"
                                                  "l-*-37847"
                                                  "l-*-37845"
                                                  "l-*-37843"
                                                  "l-*-37841"))
                                               #(ribcage
                                                 (quasiquote)
                                                 ((top))
                                                 (((hygiene guile)
                                                   .
                                                   #(syntax-object
                                                     quasiquote
                                                     ((top))
                                                     (hygiene guile))))))
                                              (hygiene guile))
                                           (cons dx-38410 dy-38404)))
                                   tmp-38406)
                                 (if (null? dy-38404)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("l-*-37933"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("l-*-37927"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-37921" "l-*-37922"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-37916" "l-*-37917"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-37853"
                                                "l-*-37851"
                                                "l-*-37849"
                                                "l-*-37847"
                                                "l-*-37845"
                                                "l-*-37843"
                                                "l-*-37841"))
                                             #(ribcage
                                               (quasiquote)
                                               ((top))
                                               (((hygiene guile)
                                                 .
                                                 #(syntax-object
                                                   quasiquote
                                                   ((top))
                                                   (hygiene guile))))))
                                            (hygiene guile))
                                         x-38397)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("l-*-37933"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("l-*-37927"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-37921" "l-*-37922"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-37916" "l-*-37917"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-37853"
                                                "l-*-37851"
                                                "l-*-37849"
                                                "l-*-37847"
                                                "l-*-37845"
                                                "l-*-37843"
                                                "l-*-37841"))
                                             #(ribcage
                                               (quasiquote)
                                               ((top))
                                               (((hygiene guile)
                                                 .
                                                 #(syntax-object
                                                   quasiquote
                                                   ((top))
                                                   (hygiene guile))))))
                                            (hygiene guile))
                                         x-38397
                                         y-38398)))))
                           tmp-38400)
                         (let ((tmp-38415
                                 ($sc-dispatch
                                   y-38398
                                   '(#(atom "list") . any))))
                           (if tmp-38415
                             (@apply
                               (lambda (stuff-38419)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("l-*-37936"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-37921" "l-*-37922"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-37916" "l-*-37917"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-37853"
                                              "l-*-37851"
                                              "l-*-37849"
                                              "l-*-37847"
                                              "l-*-37845"
                                              "l-*-37843"
                                              "l-*-37841"))
                                           #(ribcage
                                             (quasiquote)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 quasiquote
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       (cons x-38397 stuff-38419)))
                               tmp-38415)
                             (let ((tmp-38420
                                     ($sc-dispatch
                                       y-38398
                                       '(#(atom "list*") . any))))
                               (if tmp-38420
                                 (@apply
                                   (lambda (stuff-38424)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("l-*-37939"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-37921" "l-*-37922"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-37916" "l-*-37917"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-37853"
                                                  "l-*-37851"
                                                  "l-*-37849"
                                                  "l-*-37847"
                                                  "l-*-37845"
                                                  "l-*-37843"
                                                  "l-*-37841"))
                                               #(ribcage
                                                 (quasiquote)
                                                 ((top))
                                                 (((hygiene guile)
                                                   .
                                                   #(syntax-object
                                                     quasiquote
                                                     ((top))
                                                     (hygiene guile))))))
                                              (hygiene guile))
                                           (cons x-38397 stuff-38424)))
                                   tmp-38420)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage
                                             #(_)
                                             #((top))
                                             #("l-*-37941"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-37921" "l-*-37922"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-37916" "l-*-37917"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-37853"
                                              "l-*-37851"
                                              "l-*-37849"
                                              "l-*-37847"
                                              "l-*-37845"
                                              "l-*-37843"
                                              "l-*-37841"))
                                           #(ribcage
                                             (quasiquote)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 quasiquote
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       x-38397
                                       y-38398))))))))
                   tmp-38395)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   tmp-38394))))))
       (quasiappend-38108
         (lambda (x-38435 y-38436)
           (let ((tmp-38438
                   ($sc-dispatch y-38436 '(#(atom "quote") ()))))
             (if tmp-38438
               (@apply
                 (lambda ()
                   (if (null? x-38435)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("l-*-37945" "l-*-37946"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("l-*-37853"
                             "l-*-37851"
                             "l-*-37849"
                             "l-*-37847"
                             "l-*-37845"
                             "l-*-37843"
                             "l-*-37841"))
                          #(ribcage
                            (quasiquote)
                            ((top))
                            (((hygiene guile)
                              .
                              #(syntax-object
                                quasiquote
                                ((top))
                                (hygiene guile))))))
                         (hygiene guile))
                       ())
                     (if (null? (cdr x-38435))
                       (car x-38435)
                       (let ((tmp-38443 ($sc-dispatch x-38435 'each-any)))
                         (if tmp-38443
                           (@apply
                             (lambda (p-38447)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p)
                                           #((top))
                                           #("l-*-37953"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("l-*-37945" "l-*-37946"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("l-*-37853"
                                            "l-*-37851"
                                            "l-*-37849"
                                            "l-*-37847"
                                            "l-*-37845"
                                            "l-*-37843"
                                            "l-*-37841"))
                                         #(ribcage
                                           (quasiquote)
                                           ((top))
                                           (((hygiene guile)
                                             .
                                             #(syntax-object
                                               quasiquote
                                               ((top))
                                               (hygiene guile))))))
                                        (hygiene guile))
                                     p-38447))
                             tmp-38443)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             x-38435))))))
                 tmp-38438)
               (if (null? x-38435)
                 y-38436
                 (let ((tmp-38455 (list x-38435 y-38436)))
                   (let ((tmp-38456
                           ($sc-dispatch tmp-38455 '(each-any any))))
                     (if tmp-38456
                       (@apply
                         (lambda (p-38458 y-38459)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("l-*-37962" "l-*-37963"))
                                     #(ribcage #(_) #((top)) #("l-*-37956"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("l-*-37945" "l-*-37946"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-37853"
                                        "l-*-37851"
                                        "l-*-37849"
                                        "l-*-37847"
                                        "l-*-37845"
                                        "l-*-37843"
                                        "l-*-37841"))
                                     #(ribcage
                                       (quasiquote)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           quasiquote
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                 (append p-38458 (list y-38459))))
                         tmp-38456)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         tmp-38455)))))))))
       (quasilist*-38109
         (lambda (x-38463 y-38464)
           (letrec*
             ((f-38465
                (lambda (x-38569)
                  (if (null? x-38569)
                    y-38464
                    (quasicons-38107
                      (car x-38569)
                      (f-38465 (cdr x-38569)))))))
             (f-38465 x-38463))))
       (emit-38111
         (lambda (x-38572)
           (let ((tmp-38574
                   ($sc-dispatch x-38572 '(#(atom "quote") any))))
             (if tmp-38574
               (@apply
                 (lambda (x-38578)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("l-*-38029"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("l-*-38026"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("l-*-37853"
                                "l-*-37851"
                                "l-*-37849"
                                "l-*-37847"
                                "l-*-37845"
                                "l-*-37843"
                                "l-*-37841"))
                             #(ribcage
                               (quasiquote)
                               ((top))
                               (((hygiene guile)
                                 .
                                 #(syntax-object
                                   quasiquote
                                   ((top))
                                   (hygiene guile))))))
                            (hygiene guile))
                         x-38578))
                 tmp-38574)
               (let ((tmp-38579
                       ($sc-dispatch
                         x-38572
                         '(#(atom "list") . each-any))))
                 (if tmp-38579
                   (@apply
                     (lambda (x-38583)
                       (let ((tmp-38584 (map emit-38111 x-38583)))
                         (let ((tmp-38585 ($sc-dispatch tmp-38584 'each-any)))
                           (if tmp-38585
                             (@apply
                               (lambda (t-38034-38587)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(t-38034)
                                             #((m-*-38035 top))
                                             #("l-*-38039"))
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-38032"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-38026"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-37853"
                                              "l-*-37851"
                                              "l-*-37849"
                                              "l-*-37847"
                                              "l-*-37845"
                                              "l-*-37843"
                                              "l-*-37841"))
                                           #(ribcage
                                             (quasiquote)
                                             ((top))
                                             (((hygiene guile)
                                               .
                                               #(syntax-object
                                                 quasiquote
                                                 ((top))
                                                 (hygiene guile))))))
                                          (hygiene guile))
                                       t-38034-38587))
                               tmp-38585)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               tmp-38584)))))
                     tmp-38579)
                   (let ((tmp-38588
                           ($sc-dispatch
                             x-38572
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if tmp-38588
                       (@apply
                         (lambda (x-38592 y-38593)
                           (letrec*
                             ((f-38594
                                (lambda (x*-38597)
                                  (if (null? x*-38597)
                                    (emit-38111 y-38593)
                                    (let ((tmp-38598
                                            (list (emit-38111 (car x*-38597))
                                                  (f-38594 (cdr x*-38597)))))
                                      (let ((tmp-38599
                                              ($sc-dispatch
                                                tmp-38598
                                                '(any any))))
                                        (if tmp-38599
                                          (@apply
                                            (lambda (t-38054-38601
                                                     t-38053-38602)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(t-38054 t-38053)
                                                          #((m-*-38055 top)
                                                            (m-*-38055 top))
                                                          #("l-*-38059"
                                                            "l-*-38060"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("l-*-38048"
                                                            "l-*-38049"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("l-*-38044"
                                                            "l-*-38045"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("l-*-38026"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-37853"
                                                           "l-*-37851"
                                                           "l-*-37849"
                                                           "l-*-37847"
                                                           "l-*-37845"
                                                           "l-*-37843"
                                                           "l-*-37841"))
                                                        #(ribcage
                                                          (quasiquote)
                                                          ((top))
                                                          (((hygiene guile)
                                                            .
                                                            #(syntax-object
                                                              quasiquote
                                                              ((top))
                                                              (hygiene
                                                                guile))))))
                                                       (hygiene guile))
                                                    t-38054-38601
                                                    t-38053-38602))
                                            tmp-38599)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            tmp-38598))))))))
                             (f-38594 x-38592)))
                         tmp-38588)
                       (let ((tmp-38603
                               ($sc-dispatch
                                 x-38572
                                 '(#(atom "append") . each-any))))
                         (if tmp-38603
                           (@apply
                             (lambda (x-38607)
                               (let ((tmp-38608 (map emit-38111 x-38607)))
                                 (let ((tmp-38609
                                         ($sc-dispatch tmp-38608 'each-any)))
                                   (if tmp-38609
                                     (@apply
                                       (lambda (t-38066-38611)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(t-38066)
                                                     #((m-*-38067 top))
                                                     #("l-*-38071"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-38064"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-38026"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-37853"
                                                      "l-*-37851"
                                                      "l-*-37849"
                                                      "l-*-37847"
                                                      "l-*-37845"
                                                      "l-*-37843"
                                                      "l-*-37841"))
                                                   #(ribcage
                                                     (quasiquote)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         quasiquote
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               t-38066-38611))
                                       tmp-38609)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       tmp-38608)))))
                             tmp-38603)
                           (let ((tmp-38612
                                   ($sc-dispatch
                                     x-38572
                                     '(#(atom "vector") . each-any))))
                             (if tmp-38612
                               (@apply
                                 (lambda (x-38616)
                                   (let ((tmp-38617 (map emit-38111 x-38616)))
                                     (let ((tmp-38618
                                             ($sc-dispatch
                                               tmp-38617
                                               'each-any)))
                                       (if tmp-38618
                                         (@apply
                                           (lambda (t-38078-38620)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(t-38078)
                                                         #((m-*-38079 top))
                                                         #("l-*-38083"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-38076"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-38026"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-37853"
                                                          "l-*-37851"
                                                          "l-*-37849"
                                                          "l-*-37847"
                                                          "l-*-37845"
                                                          "l-*-37843"
                                                          "l-*-37841"))
                                                       #(ribcage
                                                         (quasiquote)
                                                         ((top))
                                                         (((hygiene guile)
                                                           .
                                                           #(syntax-object
                                                             quasiquote
                                                             ((top))
                                                             (hygiene
                                                               guile))))))
                                                      (hygiene guile))
                                                   t-38078-38620))
                                           tmp-38618)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           tmp-38617)))))
                                 tmp-38612)
                               (let ((tmp-38621
                                       ($sc-dispatch
                                         x-38572
                                         '(#(atom "list->vector") any))))
                                 (if tmp-38621
                                   (@apply
                                     (lambda (x-38625)
                                       (let ((tmp-38626 (emit-38111 x-38625)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(t-38090)
                                                     #((m-*-38091 top))
                                                     #("l-*-38094"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-38088"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-38026"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-37853"
                                                      "l-*-37851"
                                                      "l-*-37849"
                                                      "l-*-37847"
                                                      "l-*-37845"
                                                      "l-*-37843"
                                                      "l-*-37841"))
                                                   #(ribcage
                                                     (quasiquote)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         quasiquote
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               tmp-38626)))
                                     tmp-38621)
                                   (let ((tmp-38629
                                           ($sc-dispatch
                                             x-38572
                                             '(#(atom "value") any))))
                                     (if tmp-38629
                                       (@apply
                                         (lambda (x-38633) x-38633)
                                         tmp-38629)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         x-38572))))))))))))))))))
      (lambda (x-38112)
        (let ((tmp-38114 ($sc-dispatch x-38112 '(_ any))))
          (if tmp-38114
            (@apply
              (lambda (e-38118)
                (emit-38111 (quasi-38105 e-38118 0)))
              tmp-38114)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              x-38112)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (x-38689)
      (letrec*
        ((read-file-38690
           (lambda (fn-38799 k-38800)
             (let ((p-38801 (open-input-file fn-38799)))
               (letrec*
                 ((f-38802
                    (lambda (x-38856 result-38857)
                      (if (eof-object? x-38856)
                        (begin
                          (close-input-port p-38801)
                          (reverse result-38857))
                        (f-38802
                          (read p-38801)
                          (cons (datum->syntax k-38800 x-38856)
                                result-38857))))))
                 (f-38802 (read p-38801) '()))))))
        (let ((tmp-38692 ($sc-dispatch x-38689 '(any any))))
          (if tmp-38692
            (@apply
              (lambda (k-38696 filename-38697)
                (let ((fn-38698 (syntax->datum filename-38697)))
                  (let ((tmp-38699
                          (read-file-38690 fn-38698 filename-38697)))
                    (let ((tmp-38700 ($sc-dispatch tmp-38699 'each-any)))
                      (if tmp-38700
                        (@apply
                          (lambda (exp-38718)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("l-*-38686"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("l-*-38681"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("l-*-38677" "l-*-38678"))
                                      #(ribcage
                                        (read-file)
                                        ((top))
                                        ("l-*-38661"))
                                      #(ribcage #(x) #((top)) #("l-*-38660"))
                                      #(ribcage
                                        (include)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            include
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                  exp-38718))
                          tmp-38700)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-38699))))))
              tmp-38692)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              x-38689)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (x-38877)
      (let ((tmp-38879 ($sc-dispatch x-38877 '(any any))))
        (if tmp-38879
          (@apply
            (lambda (k-38883 filename-38884)
              (let ((fn-38885 (syntax->datum filename-38884)))
                (let ((tmp-38886
                        (datum->syntax
                          filename-38884
                          (let ((t-38889 (%search-load-path fn-38885)))
                            (if t-38889
                              t-38889
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                x-38877
                                filename-38884))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("l-*-38871"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("l-*-38867"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("l-*-38863" "l-*-38864"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-38860"))
                            #(ribcage
                              (include-from-path)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  include-from-path
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        tmp-38886))))
            tmp-38879)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-38877))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (x-38899)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        x-38899))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (x-38903)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        x-38903))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (x-38960)
      (let ((tmp-38962
              ($sc-dispatch x-38960 '(_ any any . each-any))))
        (if tmp-38962
          (@apply
            (lambda (e-38966 m1-38967 m2-38968)
              (let ((tmp-38969
                      (letrec*
                        ((f-39023
                           (lambda (clause-39026 clauses-39027)
                             (if (null? clauses-39027)
                               (let ((tmp-39029
                                       ($sc-dispatch
                                         clause-39026
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("l-*-38919"
                                                    "l-*-38920"
                                                    "l-*-38921"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("l-*-38909"
                                                    "l-*-38910"
                                                    "l-*-38911"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("l-*-38906"))
                                                #(ribcage
                                                  (case)
                                                  ((top))
                                                  (((hygiene guile)
                                                    .
                                                    #(syntax-object
                                                      case
                                                      ((top))
                                                      (hygiene guile))))))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if tmp-39029
                                   (@apply
                                     (lambda (e1-39033 e2-39034)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("l-*-38928" "l-*-38929"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("l-*-38919"
                                                     "l-*-38920"
                                                     "l-*-38921"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("l-*-38909"
                                                     "l-*-38910"
                                                     "l-*-38911"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-38906"))
                                                 #(ribcage
                                                   (case)
                                                   ((top))
                                                   (((hygiene guile)
                                                     .
                                                     #(syntax-object
                                                       case
                                                       ((top))
                                                       (hygiene guile))))))
                                                (hygiene guile))
                                             (cons e1-39033 e2-39034)))
                                     tmp-39029)
                                   (let ((tmp-39035
                                           ($sc-dispatch
                                             clause-39026
                                             '(each-any any . each-any))))
                                     (if tmp-39035
                                       (@apply
                                         (lambda (k-39039 e1-39040 e2-39041)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("l-*-38934"
                                                         "l-*-38935"
                                                         "l-*-38936"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("l-*-38919"
                                                         "l-*-38920"
                                                         "l-*-38921"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("l-*-38909"
                                                         "l-*-38910"
                                                         "l-*-38911"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-38906"))
                                                     #(ribcage
                                                       (case)
                                                       ((top))
                                                       (((hygiene guile)
                                                         .
                                                         #(syntax-object
                                                           case
                                                           ((top))
                                                           (hygiene guile))))))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-38934"
                                                               "l-*-38935"
                                                               "l-*-38936"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-38919"
                                                               "l-*-38920"
                                                               "l-*-38921"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-38909"
                                                               "l-*-38910"
                                                               "l-*-38911"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-38906"))
                                                           #(ribcage
                                                             (case)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 case
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-38934"
                                                               "l-*-38935"
                                                               "l-*-38936"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-38919"
                                                               "l-*-38920"
                                                               "l-*-38921"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-38909"
                                                               "l-*-38910"
                                                               "l-*-38911"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-38906"))
                                                           #(ribcage
                                                             (case)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 case
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-38934"
                                                                     "l-*-38935"
                                                                     "l-*-38936"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-38919"
                                                                     "l-*-38920"
                                                                     "l-*-38921"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-38909"
                                                                     "l-*-38910"
                                                                     "l-*-38911"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-38906"))
                                                                 #(ribcage
                                                                   (case)
                                                                   ((top))
                                                                   (((hygiene
                                                                       guile)
                                                                     .
                                                                     #(syntax-object
                                                                       case
                                                                       ((top))
                                                                       (hygiene
                                                                         guile))))))
                                                                (hygiene
                                                                  guile))
                                                             k-39039))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-38934"
                                                               "l-*-38935"
                                                               "l-*-38936"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-38919"
                                                               "l-*-38920"
                                                               "l-*-38921"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-38909"
                                                               "l-*-38910"
                                                               "l-*-38911"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-38906"))
                                                           #(ribcage
                                                             (case)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 case
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                       (cons e1-39040
                                                             e2-39041))))
                                         tmp-39035)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         x-38960
                                         clause-39026)))))
                               (let ((tmp-39049
                                       (f-39023
                                         (car clauses-39027)
                                         (cdr clauses-39027))))
                                 (let ((tmp-39052
                                         ($sc-dispatch
                                           clause-39026
                                           '(each-any any . each-any))))
                                   (if tmp-39052
                                     (@apply
                                       (lambda (k-39056 e1-39057 e2-39058)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("l-*-38950"
                                                       "l-*-38951"
                                                       "l-*-38952"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("l-*-38946"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("l-*-38919"
                                                       "l-*-38920"
                                                       "l-*-38921"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("l-*-38909"
                                                       "l-*-38910"
                                                       "l-*-38911"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-38906"))
                                                   #(ribcage
                                                     (case)
                                                     ((top))
                                                     (((hygiene guile)
                                                       .
                                                       #(syntax-object
                                                         case
                                                         ((top))
                                                         (hygiene guile))))))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-38950"
                                                             "l-*-38951"
                                                             "l-*-38952"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-38946"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-38919"
                                                             "l-*-38920"
                                                             "l-*-38921"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-38909"
                                                             "l-*-38910"
                                                             "l-*-38911"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-38906"))
                                                         #(ribcage
                                                           (case)
                                                           ((top))
                                                           (((hygiene guile)
                                                             .
                                                             #(syntax-object
                                                               case
                                                               ((top))
                                                               (hygiene
                                                                 guile))))))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-38950"
                                                             "l-*-38951"
                                                             "l-*-38952"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-38946"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-38919"
                                                             "l-*-38920"
                                                             "l-*-38921"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-38909"
                                                             "l-*-38910"
                                                             "l-*-38911"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-38906"))
                                                         #(ribcage
                                                           (case)
                                                           ((top))
                                                           (((hygiene guile)
                                                             .
                                                             #(syntax-object
                                                               case
                                                               ((top))
                                                               (hygiene
                                                                 guile))))))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-38950"
                                                                   "l-*-38951"
                                                                   "l-*-38952"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("l-*-38946"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-38919"
                                                                   "l-*-38920"
                                                                   "l-*-38921"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-38909"
                                                                   "l-*-38910"
                                                                   "l-*-38911"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("l-*-38906"))
                                                               #(ribcage
                                                                 (case)
                                                                 ((top))
                                                                 (((hygiene
                                                                     guile)
                                                                   .
                                                                   #(syntax-object
                                                                     case
                                                                     ((top))
                                                                     (hygiene
                                                                       guile))))))
                                                              (hygiene guile))
                                                           k-39056))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-38950"
                                                             "l-*-38951"
                                                             "l-*-38952"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-38946"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-38919"
                                                             "l-*-38920"
                                                             "l-*-38921"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-38909"
                                                             "l-*-38910"
                                                             "l-*-38911"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-38906"))
                                                         #(ribcage
                                                           (case)
                                                           ((top))
                                                           (((hygiene guile)
                                                             .
                                                             #(syntax-object
                                                               case
                                                               ((top))
                                                               (hygiene
                                                                 guile))))))
                                                        (hygiene guile))
                                                     (cons e1-39057 e2-39058))
                                               tmp-39049))
                                       tmp-39052)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       x-38960
                                       clause-39026))))))))
                        (f-39023 m1-38967 m2-38968))))
                (let ((body-38970 tmp-38969))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("l-*-38917"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("l-*-38909" "l-*-38910" "l-*-38911"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-38906"))
                            #(ribcage
                              (case)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  case
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(body)
                                          #((top))
                                          #("l-*-38917"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("l-*-38909"
                                            "l-*-38910"
                                            "l-*-38911"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("l-*-38906"))
                                        #(ribcage
                                          (case)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              case
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    e-38966))
                        body-38970))))
            tmp-38962)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-38960))))))

(define make-variable-transformer
  (lambda (proc-39077)
    (if (procedure? proc-39077)
      (letrec*
        ((trans-39078
           (lambda (x-39080) (proc-39077 x-39080))))
        (begin
          (set-procedure-property!
            trans-39078
            'variable-transformer
            #t)
          trans-39078))
      (error "variable transformer not a procedure"
             proc-39077))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (x-39117)
      (let ((tmp-39119 ($sc-dispatch x-39117 '(_ any))))
        (if tmp-39119
          (@apply
            (lambda (e-39123)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("l-*-39092"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-39089"))
                        #(ribcage
                          (identifier-syntax)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              identifier-syntax
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("l-*-39092"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("l-*-39089"))
                         #(ribcage
                           (identifier-syntax)
                           ((top))
                           (((hygiene guile)
                             .
                             #(syntax-object
                               identifier-syntax
                               ((top))
                               (hygiene guile))))))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("l-*-39092"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-39089"))
                           #(ribcage
                             (identifier-syntax)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 identifier-syntax
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("l-*-39092"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-39089"))
                           #(ribcage
                             (identifier-syntax)
                             ((top))
                             (((hygiene guile)
                               .
                               #(syntax-object
                                 identifier-syntax
                                 ((top))
                                 (hygiene guile))))))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("l-*-39092"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-39089"))
                              #(ribcage
                                (identifier-syntax)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    identifier-syntax
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("l-*-39092"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-39089"))
                              #(ribcage
                                (identifier-syntax)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    identifier-syntax
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("l-*-39092"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-39089"))
                                    #(ribcage
                                      (identifier-syntax)
                                      ((top))
                                      (((hygiene guile)
                                        .
                                        #(syntax-object
                                          identifier-syntax
                                          ((top))
                                          (hygiene guile))))))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-39092"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-39089"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("l-*-39092"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-39089"))
                                      #(ribcage
                                        (identifier-syntax)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            identifier-syntax
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("l-*-39092"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-39089"))
                                      #(ribcage
                                        (identifier-syntax)
                                        ((top))
                                        (((hygiene guile)
                                          .
                                          #(syntax-object
                                            identifier-syntax
                                            ((top))
                                            (hygiene guile))))))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage
                                            #(e)
                                            #((top))
                                            #("l-*-39092"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-39089"))
                                          #(ribcage
                                            (identifier-syntax)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                identifier-syntax
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      e-39123))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-39092"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-39089"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-39092"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-39089"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-39092"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-39089"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage
                                            #(e)
                                            #((top))
                                            #("l-*-39092"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-39089"))
                                          #(ribcage
                                            (identifier-syntax)
                                            ((top))
                                            (((hygiene guile)
                                              .
                                              #(syntax-object
                                                identifier-syntax
                                                ((top))
                                                (hygiene guile))))))
                                         (hygiene guile))
                                      (cons e-39123
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("l-*-39092"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-39089"))
                                                 #(ribcage
                                                   (identifier-syntax)
                                                   ((top))
                                                   (((hygiene guile)
                                                     .
                                                     #(syntax-object
                                                       identifier-syntax
                                                       ((top))
                                                       (hygiene guile))))))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("l-*-39092"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-39089"))
                                                 #(ribcage
                                                   (identifier-syntax)
                                                   ((top))
                                                   (((hygiene guile)
                                                     .
                                                     #(syntax-object
                                                       identifier-syntax
                                                       ((top))
                                                       (hygiene guile))))))
                                                (hygiene guile)))))))))
            tmp-39119)
          (let ((tmp-39124
                  ($sc-dispatch
                    x-39117
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-39089"))
                               #(ribcage
                                 (identifier-syntax)
                                 ((top))
                                 (((hygiene guile)
                                   .
                                   #(syntax-object
                                     identifier-syntax
                                     ((top))
                                     (hygiene guile))))))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if tmp-39124
                  (@apply
                    (lambda (id-39128
                             exp1-39129
                             var-39130
                             val-39131
                             exp2-39132)
                      (if (identifier? id-39128)
                        (identifier? var-39130)
                        #f))
                    tmp-39124)
                  #f)
              (@apply
                (lambda (id-39133
                         exp1-39134
                         var-39135
                         val-39136
                         exp2-39137)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("l-*-39107"
                                "l-*-39108"
                                "l-*-39109"
                                "l-*-39110"
                                "l-*-39111"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-39089"))
                            #(ribcage
                              (identifier-syntax)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  identifier-syntax
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("l-*-39107"
                                      "l-*-39108"
                                      "l-*-39109"
                                      "l-*-39110"
                                      "l-*-39111"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-39089"))
                                  #(ribcage
                                    (identifier-syntax)
                                    ((top))
                                    (((hygiene guile)
                                      .
                                      #(syntax-object
                                        identifier-syntax
                                        ((top))
                                        (hygiene guile))))))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("l-*-39107"
                                       "l-*-39108"
                                       "l-*-39109"
                                       "l-*-39110"
                                       "l-*-39111"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("l-*-39089"))
                                   #(ribcage
                                     (identifier-syntax)
                                     ((top))
                                     (((hygiene guile)
                                       .
                                       #(syntax-object
                                         identifier-syntax
                                         ((top))
                                         (hygiene guile))))))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("l-*-39107"
                                         "l-*-39108"
                                         "l-*-39109"
                                         "l-*-39110"
                                         "l-*-39111"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-39089"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("l-*-39107"
                                         "l-*-39108"
                                         "l-*-39109"
                                         "l-*-39110"
                                         "l-*-39111"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-39089"))
                                     #(ribcage
                                       (identifier-syntax)
                                       ((top))
                                       (((hygiene guile)
                                         .
                                         #(syntax-object
                                           identifier-syntax
                                           ((top))
                                           (hygiene guile))))))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-39107"
                                            "l-*-39108"
                                            "l-*-39109"
                                            "l-*-39110"
                                            "l-*-39111"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("l-*-39089"))
                                        #(ribcage
                                          (identifier-syntax)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              identifier-syntax
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-39107"
                                            "l-*-39108"
                                            "l-*-39109"
                                            "l-*-39110"
                                            "l-*-39111"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("l-*-39089"))
                                        #(ribcage
                                          (identifier-syntax)
                                          ((top))
                                          (((hygiene guile)
                                            .
                                            #(syntax-object
                                              identifier-syntax
                                              ((top))
                                              (hygiene guile))))))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("l-*-39107"
                                             "l-*-39108"
                                             "l-*-39109"
                                             "l-*-39110"
                                             "l-*-39111"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x)
                                           #((top))
                                           #("l-*-39089"))
                                         #(ribcage
                                           (identifier-syntax)
                                           ((top))
                                           (((hygiene guile)
                                             .
                                             #(syntax-object
                                               identifier-syntax
                                               ((top))
                                               (hygiene guile))))))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-39107"
                                                        "l-*-39108"
                                                        "l-*-39109"
                                                        "l-*-39110"
                                                        "l-*-39111"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-39089"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                var-39135
                                                val-39136)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-39107"
                                                        "l-*-39108"
                                                        "l-*-39109"
                                                        "l-*-39110"
                                                        "l-*-39111"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-39089"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                exp2-39137))
                                    (list (cons id-39133
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("l-*-39107"
                                                         "l-*-39108"
                                                         "l-*-39109"
                                                         "l-*-39110"
                                                         "l-*-39111"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-39089"))
                                                     #(ribcage
                                                       (identifier-syntax)
                                                       ((top))
                                                       (((hygiene guile)
                                                         .
                                                         #(syntax-object
                                                           identifier-syntax
                                                           ((top))
                                                           (hygiene guile))))))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("l-*-39107"
                                                         "l-*-39108"
                                                         "l-*-39109"
                                                         "l-*-39110"
                                                         "l-*-39111"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-39089"))
                                                     #(ribcage
                                                       (identifier-syntax)
                                                       ((top))
                                                       (((hygiene guile)
                                                         .
                                                         #(syntax-object
                                                           identifier-syntax
                                                           ((top))
                                                           (hygiene guile))))))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-39107"
                                                        "l-*-39108"
                                                        "l-*-39109"
                                                        "l-*-39110"
                                                        "l-*-39111"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-39089"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                (cons exp1-39134
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-39107"
                                                               "l-*-39108"
                                                               "l-*-39109"
                                                               "l-*-39110"
                                                               "l-*-39111"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-39089"))
                                                           #(ribcage
                                                             (identifier-syntax)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 identifier-syntax
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-39107"
                                                               "l-*-39108"
                                                               "l-*-39109"
                                                               "l-*-39110"
                                                               "l-*-39111"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-39089"))
                                                           #(ribcage
                                                             (identifier-syntax)
                                                             ((top))
                                                             (((hygiene guile)
                                                               .
                                                               #(syntax-object
                                                                 identifier-syntax
                                                                 ((top))
                                                                 (hygiene
                                                                   guile))))))
                                                          (hygiene guile))))))
                                    (list id-39133
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-39107"
                                                        "l-*-39108"
                                                        "l-*-39109"
                                                        "l-*-39110"
                                                        "l-*-39111"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-39089"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-39107"
                                                              "l-*-39108"
                                                              "l-*-39109"
                                                              "l-*-39110"
                                                              "l-*-39111"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("l-*-39089"))
                                                          #(ribcage
                                                            (identifier-syntax)
                                                            ((top))
                                                            (((hygiene guile)
                                                              .
                                                              #(syntax-object
                                                                identifier-syntax
                                                                ((top))
                                                                (hygiene
                                                                  guile))))))
                                                         (hygiene guile))
                                                      id-39133))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-39107"
                                                        "l-*-39108"
                                                        "l-*-39109"
                                                        "l-*-39110"
                                                        "l-*-39111"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-39089"))
                                                    #(ribcage
                                                      (identifier-syntax)
                                                      ((top))
                                                      (((hygiene guile)
                                                        .
                                                        #(syntax-object
                                                          identifier-syntax
                                                          ((top))
                                                          (hygiene guile))))))
                                                   (hygiene guile))
                                                exp1-39134))))))
                tmp-39124)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-39117))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (x-39170)
      (let ((tmp-39172
              ($sc-dispatch
                x-39170
                '(_ (any . any) any . each-any))))
        (if tmp-39172
          (@apply
            (lambda (id-39176 args-39177 b0-39178 b1-39179)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("l-*-39152"
                            "l-*-39153"
                            "l-*-39154"
                            "l-*-39155"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-39149"))
                        #(ribcage
                          (define*)
                          ((top))
                          (((hygiene guile)
                            .
                            #(syntax-object
                              define*
                              ((top))
                              (hygiene guile))))))
                       (hygiene guile))
                    id-39176
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("l-*-39152"
                                  "l-*-39153"
                                  "l-*-39154"
                                  "l-*-39155"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-39149"))
                              #(ribcage
                                (define*)
                                ((top))
                                (((hygiene guile)
                                  .
                                  #(syntax-object
                                    define*
                                    ((top))
                                    (hygiene guile))))))
                             (hygiene guile))
                          (cons args-39177 (cons b0-39178 b1-39179)))))
            tmp-39172)
          (let ((tmp-39180 ($sc-dispatch x-39170 '(_ any any))))
            (if (if tmp-39180
                  (@apply
                    (lambda (id-39184 val-39185)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("l-*-39162" "l-*-39163"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-39149"))
                            #(ribcage
                              (define*)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  define*
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))))
                    tmp-39180)
                  #f)
              (@apply
                (lambda (id-39186 val-39187)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("l-*-39166" "l-*-39167"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-39149"))
                            #(ribcage
                              (define*)
                              ((top))
                              (((hygiene guile)
                                .
                                #(syntax-object
                                  define*
                                  ((top))
                                  (hygiene guile))))))
                           (hygiene guile))
                        id-39186
                        val-39187))
                tmp-39180)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-39170))))))))

